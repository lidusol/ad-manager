import { InjectionToken, Directive, Renderer2, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';
import { st2c, mixinStyleUpdater, mixinBg, mixinColor, mixinRaised, mixinOutlined, mixinElevation, mixinShadowColor, StyleRenderer, LyTheme2, LyCommonModule } from '@alyle/ui';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -2;
const DEFAULT_SIZE = 40;
const DEFAULT_BG = 'action';
const LY_AVATAR_DEFAULT_OPTIONS = new InjectionToken('LY_AVATAR_DEFAULT_OPTIONS');
const STYLES = (theme) => {
    return {
        $name: LyAvatar.и,
        $priority: STYLE_PRIORITY,
        root: (className) => `${className}{display:inline-flex;position:relative;font-size:1.25em;flex-shrink:0;align-items:center;user-select:none;border-radius:50%;text-align:center;justify-content:center;}${st2c(((theme.avatar
            && theme.avatar.root
            && theme.avatar.root())), `${className}`)}${className}>img{width:100%;height:100%;border-radius:50%;display:block;object-fit:cover;-webkit-background-clip:padding-box;}`
    };
};
/** @docs-private */
class LyAvatarBase {
    constructor(_theme) {
        this._theme = _theme;
    }
}
/** @docs-private */
const LyAvatarMixinBase = mixinStyleUpdater(mixinBg(mixinColor(mixinRaised(mixinOutlined(mixinElevation(mixinShadowColor(LyAvatarBase)))))));
class LyAvatar extends LyAvatarMixinBase {
    constructor(theme, renderer, _elementRef, sRenderer, _defaults) {
        super(theme);
        this._elementRef = _elementRef;
        this.sRenderer = sRenderer;
        this._defaults = _defaults;
        /** @docs-private */
        this.classes = this._theme.renderStyleSheet(STYLES);
        this.setAutoContrast();
        renderer.addClass(_elementRef.nativeElement, this.classes.root);
    }
    /** Avatar size */
    set size(val) {
        if (val !== this.size) {
            this._size = val;
            this[0x1] = this.sRenderer.add(`${LyAvatar.и}-size-${val}`, () => ((className) => `${className}{width:${val}px;height:${val}px;}`), STYLE_PRIORITY, this[0x1]);
            // const newClass = this._theme.renderStyle(`${LyAvatar.и}.size:${val}`, () => (
            //   (className: string) => ``
            // ), STYLE_PRIORITY);
            // this._sizeClass = this._hostClass.update(newClass, this._sizeClass);
        }
    }
    get size() {
        return this._size;
    }
    ngOnChanges() {
        this.updateStyle(this._elementRef.nativeElement);
    }
    ngOnInit() {
        if (!this.bg) {
            this.bg = (this._defaults && this._defaults.bg) || DEFAULT_BG;
            this.ngOnChanges();
        }
        if (!this.size) {
            this.size = (this._defaults && this._defaults.size) || DEFAULT_SIZE;
        }
    }
}
LyAvatar.ɵfac = function LyAvatar_Factory(t) { return new (t || LyAvatar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer), ɵngcc0.ɵɵdirectiveInject(LY_AVATAR_DEFAULT_OPTIONS, 8)); };
LyAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyAvatar, selectors: [["ly-avatar"]], inputs: { bg: "bg", color: "color", raised: "raised", outlined: "outlined", elevation: "elevation", shadowColor: "shadowColor", size: "size" }, features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
/** @docs-private */
LyAvatar.и = 'LyAvatar';
LyAvatar.ctorParameters = () => [
    { type: LyTheme2 },
    { type: Renderer2 },
    { type: ElementRef },
    { type: StyleRenderer },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LY_AVATAR_DEFAULT_OPTIONS,] }] }
];
LyAvatar.propDecorators = {
    size: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyAvatar, [{
        type: Directive,
        args: [{
                selector: 'ly-avatar',
                inputs: [
                    'bg',
                    'color',
                    'raised',
                    'outlined',
                    'elevation',
                    'shadowColor',
                ],
                providers: [
                    StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc1.LyTheme2 }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.StyleRenderer }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LY_AVATAR_DEFAULT_OPTIONS]
            }] }]; }, { size: [{
            type: Input
        }] }); })();

class LyAvatarModule {
}
LyAvatarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LyAvatarModule });
LyAvatarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LyAvatarModule_Factory(t) { return new (t || LyAvatarModule)(); }, imports: [LyCommonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LyAvatarModule, { declarations: function () { return [LyAvatar]; }, exports: function () { return [LyAvatar,
        LyCommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyAvatarModule, [{
        type: NgModule,
        args: [{
                exports: [LyAvatar, LyCommonModule],
                declarations: [LyAvatar]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LY_AVATAR_DEFAULT_OPTIONS, LyAvatar, LyAvatarBase, LyAvatarMixinBase, LyAvatarModule, STYLES };

//# sourceMappingURL=alyle-ui-avatar.js.map