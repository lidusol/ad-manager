import { InjectionToken, Component, ChangeDetectionStrategy, ElementRef, Renderer2, NgZone, Optional, Inject, ViewChild, Input, NgModule } from '@angular/core';
import { st2c, StyleCollection, LY_COMMON_STYLES, mixinStyleUpdater, mixinBg, mixinColor, mixinRaised, mixinDisabled, mixinOutlined, mixinElevation, mixinShadowColor, mixinDisableRipple, getLyThemeVariableUndefinedError, toBoolean, StyleRenderer, LyTheme2, LyRippleService, LyFocusState, LyCommonModule } from '@alyle/ui';
import { Color } from '@alyle/ui/color';
import { Platform } from '@angular/cdk/platform';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
import * as ɵngcc2 from '@angular/cdk/platform';

const _c0 = ["rippleContainer"];
const _c1 = ["ly-button", ""];
const _c2 = ["*"];
const DEFAULT_DISABLE_RIPPLE = false;
const DEFAULT_SIZE = 'medium';
const STYLE_PRIORITY = -2;
const LY_BUTTON_DEFAULT_OPTIONS = new InjectionToken('LY_BUTTON_DEFAULT_OPTIONS');
const STYLES = (theme, ref) => {
    const typography = theme.typography;
    const button = ref.selectorsOf(STYLES);
    return {
        $priority: STYLE_PRIORITY,
        $name: LyButton.и,
        root: () => (className) => `${className}{font-family:${typography.fontFamily};color:${theme.text.default};-webkit-tap-highlight-color:transparent;background-color:${new Color(0, 0, 0, 0)};border:0;padding:0 1em;-moz-appearance:none;margin:0;border-radius:3px;outline:none;font-weight:500;box-sizing:border-box;position:relative;justify-content:center;align-items:center;align-content:center;display:inline-flex;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration-line:none;-webkit-text-decoration-line:none;font-size:${theme.pxToRem(14)};}${st2c(((theme.button
            && theme.button.root
            && (theme.button.root instanceof StyleCollection
                ? theme.button.root.setTransformer(fn => fn(button)).css
                : theme.button.root(button)))), `${className}`)}${className}::-moz-focus-inner{border:0;}${className}::before{content:'';width:100%;height:100%;background:transparent;opacity:0;pointer-events:none;}${st2c((LY_COMMON_STYLES.fill), `${className}::before`)}${className}${button.onFocusByKeyboard}::before,${className}:hover::before{background:currentColor;opacity:.13;border-radius:inherit;}`,
        content: (className) => `${className}{padding:0;display:flex;justify-content:inherit;align-items:inherit;align-content:inherit;width:100%;height:100%;box-sizing:border-box;}`,
        /** When focus by keyboard */
        onFocusByKeyboard: null,
        animations: (className) => `${className}:hover,${className}:hover::before,${className}:focus,${className}:focus::before{transition:background 375ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, box-shadow 280ms cubic-bezier(.4,0,.2,1) 0ms;}`
    };
};
/** @docs-private */
class LyButtonBase {
    constructor(_theme, _ngZone, _platform) {
        this._theme = _theme;
        this._ngZone = _ngZone;
        this._platform = _platform;
    }
}
/** @docs-private */
const LyButtonMixinBase = mixinStyleUpdater(mixinBg(mixinColor(mixinRaised(mixinDisabled(mixinOutlined(mixinElevation(mixinShadowColor(mixinDisableRipple(LyButtonBase)))))))));
class LyButton extends LyButtonMixinBase {
    constructor(_el, _renderer, _theme, _ngZone, _rippleService, _focusState, sRenderer, platform, _defaultConfig) {
        super(_theme, _ngZone, platform);
        this._el = _el;
        this._renderer = _renderer;
        this._rippleService = _rippleService;
        this._focusState = _focusState;
        this.sRenderer = sRenderer;
        this._defaultConfig = _defaultConfig;
        /**
         * Style
         * @docs-private
         */
        this.classes = this.sRenderer.renderSheet(STYLES);
        this._rippleSensitive = false;
        this.setAutoContrast();
        this._triggerElement = _el;
        this._renderer.addClass(this._el.nativeElement, this.classes.animations);
        if (!_theme.variables.button) {
            throw getLyThemeVariableUndefinedError('button');
        }
    }
    /** @docs-private */
    get rippleSensitive() {
        return this._rippleSensitive;
    }
    set rippleSensitive(value) {
        const newVal = this._rippleSensitive = toBoolean(value);
        this._rippleConfig.sensitive = newVal;
    }
    /** Button size */
    get size() {
        return this._size;
    }
    set size(val) {
        if (val !== this.size) {
            this._size = val;
            const newClass = this._theme.renderStyle(`${LyButton.и}--${val}-size`, (theme, ref) => {
                if (theme.button && theme.button.size && theme.button.size[val]) {
                    return theme.button.size[val](ref.selectorsOf(STYLES));
                }
                throw new Error(`Value button.size['${val}'] not found in ThemeVariables`);
            }, STYLE_PRIORITY);
            this._sizeClass = this.sRenderer.updateClass(newClass, this._sizeClass);
        }
    }
    /** Button appearance */
    get appearance() { return this._appearance; }
    set appearance(val) {
        if (val !== this.appearance) {
            if (val === 'icon' && !this._rippleConfig.centered) {
                this._rippleConfig.centered = true;
            }
            this._appearance = val;
            const newClass = this._theme.renderStyle(`${LyButton.и}--${val}-appearance`, (theme, ref) => {
                if (!(theme.button.appearance && theme.button.appearance[val])) {
                    throw new Error(`Value button.appearance['${val}'] not found in ThemeVariables`);
                }
                return theme.button.appearance[val](ref.selectorsOf(STYLES));
            }, STYLE_PRIORITY + 1);
            this._appearanceClass = this.sRenderer.updateClass(newClass, this._appearanceClass);
        }
    }
    /** @docs-private */
    get hostElement() {
        return this._el.nativeElement;
    }
    ngOnChanges() {
        this.updateStyle(this._el);
        const isDisabled = this.disabled;
        this._renderer.setProperty(this._el.nativeElement, 'disabled', isDisabled);
    }
    ngOnInit() {
        const { button } = this._theme.variables;
        if (button) {
            this._renderer.addClass(this._el.nativeElement, this.classes.root);
            if (this.size == null && this.appearance == null) {
                // Apply default config
                this.size = (this._defaultConfig && this._defaultConfig.size)
                    || DEFAULT_SIZE;
            }
            else {
                if (this._defaultConfig && this._defaultConfig.appearance) {
                    if (this.appearance == null) {
                        this.appearance = this._defaultConfig.appearance;
                    }
                }
            }
        }
        // set default disable ripple
        if (this.disableRipple == null) {
            this.disableRipple = DEFAULT_DISABLE_RIPPLE;
        }
    }
    ngAfterViewInit() {
        const focusState = this._focusState.listen(this._el);
        if (focusState) {
            focusState.subscribe((event) => {
                if (this._onFocusByKeyboardState === true) {
                    this._renderer.removeClass(this._el.nativeElement, this.classes.onFocusByKeyboard);
                    this._onFocusByKeyboardState = false;
                }
                if (event === 'keyboard') {
                    this._onFocusByKeyboardState = true;
                    this._renderer.addClass(this._el.nativeElement, this.classes.onFocusByKeyboard);
                }
            });
        }
    }
    focus() {
        this._el.nativeElement.focus();
    }
    ngOnDestroy() {
        this._focusState.unlisten(this._el);
        this._removeRippleEvents();
    }
}
LyButton.ɵfac = function LyButton_Factory(t) { return new (t || LyButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyRippleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyFocusState), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(LY_BUTTON_DEFAULT_OPTIONS, 8)); };
LyButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LyButton, selectors: [["button", "ly-button", ""], ["a", "ly-button", ""]], viewQuery: function LyButton_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rippleContainer = _t.first);
    } }, inputs: { bg: "bg", color: "color", raised: "raised", disabled: "disabled", outlined: "outlined", elevation: "elevation", shadowColor: "shadowColor", disableRipple: "disableRipple", rippleSensitive: ["sensitive", "rippleSensitive"], size: "size", appearance: "appearance" }, exportAs: ["lyButton"], features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c1, ngContentSelectors: _c2, decls: 4, vars: 2, consts: [[3, "className"], ["rippleContainer", ""]], template: function LyButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "div", 0, 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("className", ctx.classes.content);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("className", ctx._rippleService.classes.container);
    } }, encapsulation: 2, changeDetection: 0 });
LyButton.и = 'LyButton';
LyButton.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LyTheme2 },
    { type: NgZone },
    { type: LyRippleService },
    { type: LyFocusState },
    { type: StyleRenderer },
    { type: Platform },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LY_BUTTON_DEFAULT_OPTIONS,] }] }
];
LyButton.propDecorators = {
    _rippleContainer: [{ type: ViewChild, args: ['rippleContainer',] }],
    rippleSensitive: [{ type: Input, args: ['sensitive',] }],
    size: [{ type: Input }],
    appearance: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyButton, [{
        type: Component,
        args: [{
                selector: 'button[ly-button], a[ly-button]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "<span [className]=\"classes.content\">\n  <ng-content></ng-content>\n</span>\n<div #rippleContainer [className]=\"_rippleService.classes.container\"></div>",
                inputs: [
                    'bg',
                    'color',
                    'raised',
                    'disabled',
                    'outlined',
                    'elevation',
                    'shadowColor',
                    'disableRipple'
                ],
                providers: [
                    StyleRenderer
                ],
                exportAs: 'lyButton'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.LyTheme2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.LyRippleService }, { type: ɵngcc1.LyFocusState }, { type: ɵngcc1.StyleRenderer }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LY_BUTTON_DEFAULT_OPTIONS]
            }] }]; }, { rippleSensitive: [{
            type: Input,
            args: ['sensitive']
        }], size: [{
            type: Input
        }], appearance: [{
            type: Input
        }], _rippleContainer: [{
            type: ViewChild,
            args: ['rippleContainer']
        }] }); })();

class LyButtonModule {
}
LyButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LyButtonModule });
LyButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LyButtonModule_Factory(t) { return new (t || LyButtonModule)(); }, imports: [LyCommonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LyButtonModule, { declarations: function () { return [LyButton]; }, exports: function () { return [LyCommonModule,
        LyButton]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyButtonModule, [{
        type: NgModule,
        args: [{
                exports: [LyCommonModule, LyButton],
                declarations: [LyButton]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LY_BUTTON_DEFAULT_OPTIONS, LyButton, LyButtonBase, LyButtonMixinBase, LyButtonModule, STYLES };

//# sourceMappingURL=alyle-ui-button.js.map