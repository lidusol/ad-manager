import { Directive, ElementRef, Renderer2, NgZone, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { __decorate } from 'tslib';
import { st2c, StyleCollection, mixinStyleUpdater, mixinBg, mixinColor, mixinRaised, mixinDisabled, mixinOutlined, mixinElevation, mixinShadowColor, mixinDisableRipple, StyleRenderer, LyTheme2, toBoolean, Style, LyCommonModule } from '@alyle/ui';
import { Platform } from '@angular/cdk/platform';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
import * as ɵngcc2 from '@angular/cdk/platform';
const STYLES = (theme, ref) => {
    const card = ref.selectorsOf(STYLES);
    return {
        $priority: STYLE_PRIORITY,
        $name: LyCard.и,
        root: () => (className) => `${className}{display:block;overflow:hidden;border-radius:2px;}${st2c(((theme.card
            && theme.card.root
            && (theme.card.root instanceof StyleCollection
                ? theme.card.root.setTransformer(fn => fn(card))
                : theme.card.root(card)))), `${className}`)}`,
        bgImg: (className) => `${className}{display:block;background-size:cover;background-repeat:no-repeat;background-position:center;}`,
        content: (className) => `${className}{display:block;padding:16px 24px;}@media ${theme.breakpoints['XSmall']}{${className}{padding:16px 16px;}}`,
        actions: (className) => `${className}{display:block;padding:8px 12px;}@media ${theme.breakpoints['XSmall']}{${className}{padding:8px 4px;}}`,
        actionsItem: (className) => `${className}{margin:0 4px;}`
    };
};
const DEFAULT_ASPECT_RATIO = '16:9';
const STYLE_PRIORITY = -1;
/** @docs-private */
class LyCardBase {
    constructor(_theme, _ngZone, _platform) {
        this._theme = _theme;
        this._ngZone = _ngZone;
        this._platform = _platform;
    }
}
/** @docs-private */
const LyCardMixinBase = mixinStyleUpdater(mixinBg(mixinColor(mixinRaised(mixinDisabled(mixinOutlined(mixinElevation(mixinShadowColor(mixinDisableRipple(LyCardBase)))))))));
class LyCard extends LyCardMixinBase {
    constructor(theme, _el, renderer, ngZone, platform) {
        super(theme, ngZone, platform);
        this.theme = theme;
        this._el = _el;
        this.renderer = renderer;
        /**
         * styles
         * @docs-private
         */
        this.classes = this.theme.renderStyleSheet(STYLES);
        this.setAutoContrast();
    }
    ngOnChanges() {
        this.updateStyle(this._el);
    }
    ngOnInit() {
        let requireOnChanges;
        if (!this.bg) {
            this.bg = 'background:primary';
            requireOnChanges = true;
        }
        if (!this.elevation) {
            this.elevation = 2;
            requireOnChanges = true;
        }
        if (requireOnChanges) {
            this.updateStyle(this._el);
        }
        this.renderer.addClass(this._el.nativeElement, this.classes.root);
    }
    ngOnDestroy() {
        this._removeRippleEvents();
    }
}
LyCard.ɵfac = function LyCard_Factory(t) { return new (t || LyCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform)); };
LyCard.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyCard, selectors: [["ly-card"]], inputs: { bg: "bg", color: "color", raised: "raised", outlined: "outlined", elevation: "elevation", shadowColor: "shadowColor", disableRipple: "disableRipple" }, features: [ɵngcc0.ɵɵProvidersFeature([StyleRenderer]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
LyCard.и = 'LyCard';
LyCard.ctorParameters = () => [
    { type: LyTheme2 },
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: Platform }
];
class LyCardContent {
    constructor(el, renderer, card) {
        this.el = el;
        this.renderer = renderer;
        this.card = card;
    }
    ngOnInit() {
        this.renderer.addClass(this.el.nativeElement, this.card.classes.content);
    }
}
LyCardContent.ɵfac = function LyCardContent_Factory(t) { return new (t || LyCardContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(LyCard)); };
LyCardContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyCardContent, selectors: [["ly-card-content"]] });
LyCardContent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LyCard }
];
class LyCardActions {
    constructor(el, renderer, card) {
        this.el = el;
        this.renderer = renderer;
        this.card = card;
    }
    ngOnInit() {
        this.renderer.addClass(this.el.nativeElement, this.card.classes.actions);
        if (!toBoolean(this.disableActionSpacing)) {
            this.el.nativeElement.childNodes.forEach(element => {
                this.renderer.addClass(element, this.card.classes.actionsItem);
            });
        }
    }
}
LyCardActions.ɵfac = function LyCardActions_Factory(t) { return new (t || LyCardActions)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(LyCard)); };
LyCardActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyCardActions, selectors: [["ly-card-actions"]], inputs: { disableActionSpacing: "disableActionSpacing" } });
LyCardActions.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LyCard }
];
LyCardActions.propDecorators = {
    disableActionSpacing: [{ type: Input }]
};
const ɵ0 = (val) => () => (className) => `${className}{background-image:url('${val}');}`;
/**
 * @dynamic
 */
class LyCardMedia {
    constructor(sRenderer, card) {
        this.sRenderer = sRenderer;
        sRenderer.addClass(card.classes.bgImg);
    }
    /**
     * Aspect ratio
     *
     * e.g:
     * 4:3
     * 1:1
     */
    set ratio(val) {
        if (val !== this.ratio) {
            this._ratio = val;
            this[0x2] = this.sRenderer.add(`${LyCardMedia.и}--ratio-${val}`, () => (className) => `${className}::before{content:'';display:block;padding-top:${val
                .split(':')
                .reduce((prev, current) => (+current / +prev * 100).toString())}%;}`, STYLE_PRIORITY, this[0x2]);
        }
    }
    get ratio() {
        return this._ratio;
    }
    ngOnInit() {
        if (!this.ratio) {
            this.ratio = DEFAULT_ASPECT_RATIO;
        }
    }
}
LyCardMedia.ɵfac = function LyCardMedia_Factory(t) { return new (t || LyCardMedia)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer), ɵngcc0.ɵɵdirectiveInject(LyCard)); };
LyCardMedia.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyCardMedia, selectors: [["ly-card-media"]], inputs: { ratio: "ratio", bgImg: "bgImg" }, features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ])] });
LyCardMedia.и = 'LyCardMedia';
LyCardMedia.$priority = STYLE_PRIORITY;
LyCardMedia.ctorParameters = () => [
    { type: StyleRenderer },
    { type: LyCard }
];
LyCardMedia.propDecorators = {
    ratio: [{ type: Input }],
    bgImg: [{ type: Input }]
};
__decorate([
    Style(ɵ0)
], LyCardMedia.prototype, "bgImg", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyCard, [{
        type: Directive,
        args: [{
                selector: 'ly-card',
                inputs: [
                    'bg',
                    'color',
                    'raised',
                    'outlined',
                    'elevation',
                    'shadowColor',
                    'disableRipple',
                ],
                providers: [StyleRenderer]
            }]
    }], function () { return [{ type: ɵngcc1.LyTheme2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Platform }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyCardContent, [{
        type: Directive,
        args: [{
                selector: 'ly-card-content'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: LyCard }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyCardActions, [{
        type: Directive,
        args: [{
                selector: 'ly-card-actions'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: LyCard }]; }, { disableActionSpacing: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyCardMedia, [{
        type: Directive,
        args: [{
                selector: 'ly-card-media',
                providers: [
                    StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc1.StyleRenderer }, { type: LyCard }]; }, { ratio: [{
            type: Input
        }], bgImg: [{
            type: Input
        }] }); })();

class LyCardModule {
}
LyCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LyCardModule });
LyCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LyCardModule_Factory(t) { return new (t || LyCardModule)(); }, imports: [[
            CommonModule
        ],
        LyCommonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LyCardModule, { declarations: function () { return [LyCard,
        LyCardContent,
        LyCardActions,
        LyCardMedia]; }, imports: function () { return [CommonModule]; }, exports: function () { return [LyCard,
        LyCardContent,
        LyCardActions,
        LyCardMedia,
        LyCommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyCardModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                exports: [LyCard, LyCardContent, LyCardActions, LyCardMedia, LyCommonModule],
                declarations: [LyCard, LyCardContent, LyCardActions, LyCardMedia]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LyCard, LyCardActions, LyCardBase, LyCardContent, LyCardMedia, LyCardMixinBase, LyCardModule, STYLES, ɵ0 };

//# sourceMappingURL=alyle-ui-card.js.map