import { ElementRef, OnChanges, OnInit, Renderer2, OnDestroy, InjectionToken } from '@angular/core';
import { LyTheme2, ThemeVariables, LyClasses, StyleTemplate, ThemeRef, StyleCollection } from '@alyle/ui';
import * as ɵngcc0 from '@angular/core';
export interface LyBadgeVariables {
    badge?: LyBadgeTheme;
}
export interface LyBadgeTheme {
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
    appearance?: {
        default?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        dot?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        [name: string]: ((classes: LyClasses<typeof STYLES>) => StyleTemplate) | undefined;
    };
}
export declare const LY_BADGE_DEFAULT_OPTIONS: InjectionToken<LyBadgeTheme>;
export declare const STYLES: (theme: ThemeVariables & LyBadgeVariables, ref: ThemeRef) => {
    $name: string;
    $priority: number;
    root: () => (className: string) => string;
    relative: (className: string) => string;
};
/** @docs-private */
export declare class LyBadgeBase {
    _theme: LyTheme2;
    constructor(_theme: LyTheme2);
}
/** @docs-private */
export declare const LyBadgeMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/build-common-behaviors").CanStyleUpdater> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/bg").CanBg> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/color").CanColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/raised").CanRaised> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/alyle-ui").CanDisable> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/outlined").CanOutlined> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/elevation").CanElevation> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/shadow-color").CanShadowColor> & typeof LyBadgeBase;
export declare class LyBadge extends LyBadgeMixinBase implements OnChanges, OnInit, OnDestroy {
    private _el;
    private _renderer;
    static readonly и = "LyBadge";
    /**
     * Styles
     * @docs-private
     */
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        relative: string;
    }, "root" | "relative">;
    private _content;
    private _positionClass;
    private _badgeEl;
    private _badgeElementRef;
    private _sRenderer?;
    /** The content for the badge */
    set content(val: string | number);
    get content(): string | number;
    set container(container: HTMLElement);
    get container(): HTMLElement;
    private _container;
    hPosition: 'before' | 'after';
    vPosition: 'above' | 'below';
    get overlap(): 'circle' | 'rectangle';
    set overlap(val: 'circle' | 'rectangle');
    private _overlap;
    private _overlapClass;
    /** The color of the badge */
    get bg(): string;
    set bg(val: string);
    /** The color of the badge */
    get lyBadgeBg(): string;
    set lyBadgeBg(val: string);
    private _lyBadgeBg;
    get appearance(): string;
    set appearance(val: string);
    get lyBadgeAppearance(): string;
    set lyBadgeAppearance(val: string);
    private _appearance;
    private _appearanceClass;
    constructor(_el: ElementRef<HTMLElement>, _theme: LyTheme2, _renderer: Renderer2);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private _updatePosition;
    private _createBadge;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyBadge, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyBadge, "ly-badge, [lyBadge]", never, { "bg": "bg"; "color": "color"; "raised": "raised"; "disabled": "disabled"; "outlined": "outlined"; "elevation": "elevation"; "shadowColor": "shadowColor"; "content": "lyBadge"; "container": "container"; "overlap": "overlap"; "lyBadgeBg": "lyBadgeBg"; "appearance": "appearance"; "lyBadgeAppearance": "lyBadgeAppearance"; "hPosition": "hPosition"; "vPosition": "vPosition"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuZC50cyIsInNvdXJjZXMiOlsiYmFkZ2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uSW5pdCwgUmVuZGVyZXIyLCBPbkRlc3Ryb3ksIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeVRoZW1lMiwgVGhlbWVWYXJpYWJsZXMsIEx5Q2xhc3NlcywgU3R5bGVUZW1wbGF0ZSwgVGhlbWVSZWYsIFN0eWxlQ29sbGVjdGlvbiB9IGZyb20gJ0BhbHlsZS91aSc7XG5leHBvcnQgaW50ZXJmYWNlIEx5QmFkZ2VWYXJpYWJsZXMge1xuICAgIGJhZGdlPzogTHlCYWRnZVRoZW1lO1xufVxuZXhwb3J0IGludGVyZmFjZSBMeUJhZGdlVGhlbWUge1xuICAgIHJvb3Q/OiBTdHlsZUNvbGxlY3Rpb248KChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGUpPiB8ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKTtcbiAgICBhcHBlYXJhbmNlPzoge1xuICAgICAgICBkZWZhdWx0PzogKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZTtcbiAgICAgICAgZG90PzogKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZTtcbiAgICAgICAgW25hbWU6IHN0cmluZ106ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKSB8IHVuZGVmaW5lZDtcbiAgICB9O1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgTFlfQkFER0VfREVGQVVMVF9PUFRJT05TOiBJbmplY3Rpb25Ub2tlbjxMeUJhZGdlVGhlbWU+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgU1RZTEVTOiAodGhlbWU6IFRoZW1lVmFyaWFibGVzICYgTHlCYWRnZVZhcmlhYmxlcywgcmVmOiBUaGVtZVJlZikgPT4ge1xuICAgICRuYW1lOiBzdHJpbmc7XG4gICAgJHByaW9yaXR5OiBudW1iZXI7XG4gICAgcm9vdDogKCkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgcmVsYXRpdmU6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xufTtcbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeUJhZGdlQmFzZSB7XG4gICAgX3RoZW1lOiBMeVRoZW1lMjtcbiAgICBjb25zdHJ1Y3RvcihfdGhlbWU6IEx5VGhlbWUyKTtcbn1cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBMeUJhZGdlTWl4aW5CYXNlOiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9idWlsZC1jb21tb24tYmVoYXZpb3JzXCIpLkNhblN0eWxlVXBkYXRlcj4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9iZ1wiKS5DYW5CZz4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb2xvclwiKS5DYW5Db2xvcj4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9yYWlzZWRcIikuQ2FuUmFpc2VkPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9hbHlsZS11aVwiKS5DYW5EaXNhYmxlPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL291dGxpbmVkXCIpLkNhbk91dGxpbmVkPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2VsZXZhdGlvblwiKS5DYW5FbGV2YXRpb24+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vc2hhZG93LWNvbG9yXCIpLkNhblNoYWRvd0NvbG9yPiAmIHR5cGVvZiBMeUJhZGdlQmFzZTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5QmFkZ2UgZXh0ZW5kcyBMeUJhZGdlTWl4aW5CYXNlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgc3RhdGljIHJlYWRvbmx5INC4ID0gXCJMeUJhZGdlXCI7XG4gICAgLyoqXG4gICAgICogU3R5bGVzXG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkbmFtZTogc3RyaW5nO1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgcm9vdDogc3RyaW5nO1xuICAgICAgICByZWxhdGl2ZTogc3RyaW5nO1xuICAgIH0sIFwicm9vdFwiIHwgXCJyZWxhdGl2ZVwiPjtcbiAgICBwcml2YXRlIF9jb250ZW50O1xuICAgIHByaXZhdGUgX3Bvc2l0aW9uQ2xhc3M7XG4gICAgcHJpdmF0ZSBfYmFkZ2VFbDtcbiAgICBwcml2YXRlIF9iYWRnZUVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfc1JlbmRlcmVyPztcbiAgICAvKiogVGhlIGNvbnRlbnQgZm9yIHRoZSBiYWRnZSAqL1xuICAgIHNldCBjb250ZW50KHZhbDogc3RyaW5nIHwgbnVtYmVyKTtcbiAgICBnZXQgY29udGVudCgpOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgc2V0IGNvbnRhaW5lcihjb250YWluZXI6IEhUTUxFbGVtZW50KTtcbiAgICBnZXQgY29udGFpbmVyKCk6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgX2NvbnRhaW5lcjtcbiAgICBoUG9zaXRpb246ICdiZWZvcmUnIHwgJ2FmdGVyJztcbiAgICB2UG9zaXRpb246ICdhYm92ZScgfCAnYmVsb3cnO1xuICAgIGdldCBvdmVybGFwKCk6ICdjaXJjbGUnIHwgJ3JlY3RhbmdsZSc7XG4gICAgc2V0IG92ZXJsYXAodmFsOiAnY2lyY2xlJyB8ICdyZWN0YW5nbGUnKTtcbiAgICBwcml2YXRlIF9vdmVybGFwO1xuICAgIHByaXZhdGUgX292ZXJsYXBDbGFzcztcbiAgICAvKiogVGhlIGNvbG9yIG9mIHRoZSBiYWRnZSAqL1xuICAgIGdldCBiZygpOiBzdHJpbmc7XG4gICAgc2V0IGJnKHZhbDogc3RyaW5nKTtcbiAgICAvKiogVGhlIGNvbG9yIG9mIHRoZSBiYWRnZSAqL1xuICAgIGdldCBseUJhZGdlQmcoKTogc3RyaW5nO1xuICAgIHNldCBseUJhZGdlQmcodmFsOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2x5QmFkZ2VCZztcbiAgICBnZXQgYXBwZWFyYW5jZSgpOiBzdHJpbmc7XG4gICAgc2V0IGFwcGVhcmFuY2UodmFsOiBzdHJpbmcpO1xuICAgIGdldCBseUJhZGdlQXBwZWFyYW5jZSgpOiBzdHJpbmc7XG4gICAgc2V0IGx5QmFkZ2VBcHBlYXJhbmNlKHZhbDogc3RyaW5nKTtcbiAgICBwcml2YXRlIF9hcHBlYXJhbmNlO1xuICAgIHByaXZhdGUgX2FwcGVhcmFuY2VDbGFzcztcbiAgICBjb25zdHJ1Y3RvcihfZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBfdGhlbWU6IEx5VGhlbWUyLCBfcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfdXBkYXRlUG9zaXRpb247XG4gICAgcHJpdmF0ZSBfY3JlYXRlQmFkZ2U7XG59XG4iXX0=