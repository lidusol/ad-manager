{"version":3,"sources":["../../../lib/dialog/dialog-ref.ts","../../../lib/dialog/dialog-config.ts","../../../lib/dialog/dialog-data.ts","../../../lib/dialog/dialog-container.component.ts","../../../lib/dialog/dynamic-injector.ts","../../../lib/dialog/dialog.ts","../../../lib/dialog/dialog-title.directive.ts","../../../lib/dialog/dialog-content.directive.ts","../../../lib/dialog/dialog-actions.directive.ts","../../../lib/dialog/dialog.module.ts"],"names":["LyDialogRef","_overlayRef","this","Object","defineProperty","prototype","componentRef","instance","_afterOpened","asObservable","_beforeClosed","_afterClosed","_result","close","result","dialogContainer","next","complete","_startClose","Injectable","LyOverlayRef","LyDialogConfig","maxHeight","maxWidth","hasBackdrop","LY_DIALOG_DATA","InjectionToken","STYLES","theme","ref","dialog","selectorsOf","root","className","background","primary","default","shadowBuilder","st2c","StyleCollection","setTransformer","fn","LyDialogContainer","sRenderer","_appRef","_theme","_el","_cd","_renderer","classes","addStyleSheet","Subject","_state","addClass","nativeElement","ngOnInit","_componentFactoryOrTemplate","TemplateRef","context","LyDialogContext","_newInjector","_embeddedViewRef","viewContainerRef","createEmbeddedView","_componentRef","createComponent","undefined","containerClass","get","ngDoCheck","onResizeScroll","_init","componentFactoryOrTemplate","newInjector","markForCheck","_onAnimationStart","event","toState","_onAnimationDone","dialogRef","_destroy","destroy","detachView","hostView","detach","_getHostElement","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","animations","trigger","state","style","opacity","transform","transition","animate","host","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","providers","StyleRenderer","ApplicationRef","LyTheme2","ElementRef","ChangeDetectorRef","Renderer2","ViewChild","read","ViewContainerRef","static","_injector","$implicit","DynamicInjector","_parentInjector","token","notFoundValue","_flags","value","dialogContainerStyleProperties","LyDialog","_overlay","_componentFactoryResolver","open","componentOrTemplateRef","config","assign","resolveComponentFactory","overlayRef","create","styles","top","left","dialogContainerElement","containerElement","x","window","innerWidth","offsetWidth","y","innerHeight","offsetHeight","Math","round","disableClose","backdropClass","STYLES_BACKDROP_DARK","fnDestroy","forEach","property","createStyle","key","Ð¸","LyStyle","provide","useValue","injector","data","push","Injector","LyOverlay","ComponentFactoryResolver","STYLES_DIALOG_TITLE","typography","fontFamily","LyDialogTitle","renderStyle","Directive","exportAs","STYLES_DIALOG_CONTENT","LyDialogContent","STYLES_DIALOG_ACTIONS","LyDialogActions","NgModule","entryComponents","declarations","imports","CommonModule","LyCommonModule","LyOverlayModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { LyOverlayRef } from '@alyle/ui';\nimport { LyDialogContainer } from './dialog-container.component';\n\n@Injectable()\nexport class LyDialogRef {\n  private _result: any;\n  get afterOpened() {\n    return (\n      this._overlayRef.componentRef!.instance as LyDialogContainer\n    )._afterOpened.asObservable();\n  }\n  get beforeClosed() {\n    return (\n      this._overlayRef.componentRef!.instance as LyDialogContainer\n    )._beforeClosed.asObservable();\n  }\n  get afterClosed() {\n    return (\n      this._overlayRef.componentRef!.instance as LyDialogContainer\n    )._afterClosed.asObservable();\n  }\n\n  /**\n   * @internal\n   * @docs-private\n   */\n  get result() {\n    return this._result;\n  }\n  constructor(\n    private _overlayRef: LyOverlayRef\n  ) {\n\n  }\n  close(result?: any) {\n    const dialogContainer = (this._overlayRef.componentRef!.instance as LyDialogContainer);\n    dialogContainer._beforeClosed.next(result);\n    dialogContainer._beforeClosed.complete();\n    dialogContainer._startClose();\n    this._result = result;\n  }\n}\n","import { MediaQueryArray } from '@alyle/ui';\n\n/**\n * Configuration for opening a modal dialog with the LyDialog service.\n */\nexport class LyDialogConfig<DATA = unknown> {\n\n  /** Data being injected into the child component. */\n  data?: DATA | null;\n\n  /**\n   * Width of the dialog container.\n   * Support beakpoints\n   */\n  width?: MediaQueryArray | number | string;\n\n  /**\n   * Height of the dialog container.\n   * Support beakpoints\n   */\n  height?: MediaQueryArray | number | string;\n\n  /**\n   * Max-height of the dialog container. If a number is provided, pixel units are assumed.\n   * Defaults to `['calc(100vw - 90px)']`\n   * Support beakpoints\n   */\n  maxHeight?: MediaQueryArray | number | string | null = ['calc(100vh - 64px)'];\n\n  /**\n   * Max-width of the dialog container. If a number is provided, pixel units are assumed.\n   * Defaults to `['calc(100vw - 90px)']`\n   * Support beakpoints\n   */\n  maxWidth?: MediaQueryArray | number | string | null = ['calc(100vw - 64px)'];\n\n  /**\n   * Min-height of the dialog container. If a number is provided, pixel units are assumed.\n   * Support beakpoints\n   */\n  minHeight?: MediaQueryArray | number | string;\n\n  /**\n   * Min-width of the dialog container. If a number is provided, pixel units are assumed.\n   * Support beakpoints\n   */\n  minWidth?: MediaQueryArray | number | string;\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /**\n   * Custom class for the backdrop. Overrides the current style.\n   */\n  backdropClass?: string;\n\n  /**\n   * Custom class for the `<ly-dialog-container>`. Overwrite the current style.\n   */\n  containerClass?: string;\n\n  /**\n   * Whether the user can click on the backdrop to close the dialog.\n   */\n  disableClose?: boolean;\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const LY_DIALOG_DATA = new InjectionToken('LyDialogData');\n","import {\n  OnInit,\n  Component,\n  ComponentFactory,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  Injector,\n  ApplicationRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  ChangeDetectionStrategy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectorRef,\n  DoCheck,\n  } from '@angular/core';\nimport { state, style, transition, animate, trigger, AnimationEvent } from '@angular/animations';\nimport {\n  LyOverlayRef,\n  LyTheme2,\n  ThemeVariables,\n  shadowBuilder,\n  st2c,\n  LyClasses,\n  StyleCollection,\n  StyleTemplate,\n  ThemeRef,\n  StyleRenderer,\n  WithStyles } from '@alyle/ui';\nimport { Subject } from 'rxjs';\n\nimport { LyDialogRef } from './dialog-ref';\nimport { LyDialogConfig } from './dialog-config';\nimport { LY_DIALOG_DATA } from './dialog-data';\nimport { Color } from '@alyle/ui/color';\n\nconst STYLE_PRIORITY = -2;\n\nexport interface LyDialogTheme {\n  /** Styles for Dialog Component. */\n  root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)>\n  | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);\n  /** Styles that apply when a color is set. */\n  color?: (classes: LyClasses<typeof STYLES>, color: Color) => StyleTemplate;\n}\n\nexport interface LyDialogVariables {\n  dialog?: LyDialogTheme;\n}\n\n/** @docs-private */\nconst STYLES = (theme: ThemeVariables & LyDialogVariables, ref: ThemeRef) => {\n  const dialog = ref.selectorsOf(STYLES);\n  return {\n    root: ( ) => (className: string) => `${className}{display:flex;position:relative;background-color:${theme.background.primary.default};border-radius:4px;box-shadow:${shadowBuilder(12)};overflow:auto;}${st2c((\n          (theme.dialog\n            && theme.dialog.root\n            && (theme.dialog.root instanceof StyleCollection\n              ? theme.dialog.root.setTransformer(fn => fn(dialog))\n              : theme.dialog.root(dialog))\n          )), `${className}`)}${className} > :first-child{display:flex;flex-direction:column;width:100%;}`\n  };\n};\n\n/** @docs-private */\n@Component({\n  selector: 'ly-dialog-container',\n  template: '<ng-template></ng-template>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('dialogContainer', [\n      state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n      state('enter', style({transform: 'none'})),\n      transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n        style({transform: 'none', opacity: 1}))),\n      transition('* => void, * => exit',\n        animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0})))\n    ])\n  ],\n  host: {\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)'\n  },\n  providers: [\n    StyleRenderer\n  ]\n})\nexport class LyDialogContainer implements WithStyles, OnInit, DoCheck {\n  /** @docs-private */\n  readonly classes = this._theme.addStyleSheet(STYLES, STYLE_PRIORITY);\n  private _embeddedViewRef: EmbeddedViewRef<any>;\n  private _componentRef: ComponentRef<any>;\n\n  /** @internal */\n  readonly _afterOpened = new Subject<void>();\n  /** @internal */\n  readonly _beforeClosed = new Subject<any>();\n  /** @internal */\n  readonly _afterClosed = new Subject<any>();\n\n  /**\n   * State of the dialog animation.\n   * @internal\n   */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** @internal */\n  @ViewChild(TemplateRef, { read: ViewContainerRef, static: true }) private readonly viewContainerRef: ViewContainerRef;\n\n  /** @internal */\n  private _componentFactoryOrTemplate: ComponentFactory<any> | TemplateRef<any>;\n\n  private _newInjector: Injector;\n\n  constructor(\n    readonly sRenderer: StyleRenderer,\n    private _appRef: ApplicationRef,\n    private _overlayRef: LyOverlayRef,\n    private _theme: LyTheme2,\n    private _el: ElementRef<HTMLElement>,\n    private _cd: ChangeDetectorRef,\n    private _renderer: Renderer2\n  ) {\n    _renderer.addClass(_el.nativeElement, this.classes.root);\n  }\n  ngOnInit() {\n\n    if (this._componentFactoryOrTemplate instanceof TemplateRef) {\n\n      const context = new LyDialogContext(this._newInjector);\n\n      this._embeddedViewRef = this.viewContainerRef\n      .createEmbeddedView(this._componentFactoryOrTemplate, context);\n    } else {\n      this._componentRef = this.viewContainerRef\n          .createComponent(this._componentFactoryOrTemplate, undefined, this._newInjector);\n    }\n\n    // If exist dialogStyleBlock apply for this component, else do nothing.\n    const { containerClass } = this._newInjector.get(LyDialogConfig);\n    if (containerClass) {\n      this._renderer.addClass(this._el.nativeElement, containerClass);\n    }\n  }\n\n  ngDoCheck() {\n    this._overlayRef.onResizeScroll!();\n  }\n\n  /** @internal */\n  _init(componentFactoryOrTemplate: ComponentFactory<any> | TemplateRef<any>, newInjector: Injector) {\n    this._componentFactoryOrTemplate = componentFactoryOrTemplate;\n    this._newInjector = newInjector;\n  }\n\n  /**\n   * Start to close, starts the dialog exit animation.\n   * @internal\n   */\n  _startClose() {\n    this._state = 'exit';\n    this._cd.markForCheck();\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._overlayRef!.onResizeScroll!();\n    }\n  }\n\n  /** @internal */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'exit') {\n      const dialogRef = this._newInjector.get(LyDialogRef);\n      this._destroy();\n      this._overlayRef.destroy();\n      this._afterClosed.next(dialogRef.result);\n      this._afterClosed.complete();\n    } else if (event.toState === 'enter') {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  private _destroy() {\n    if (this._componentRef) {\n      this._appRef.detachView(this._componentRef.hostView);\n      this._componentRef.destroy();\n    } else {\n      this._appRef.detachView(this._embeddedViewRef);\n      this._embeddedViewRef.detach();\n      this._embeddedViewRef.destroy();\n    }\n  }\n\n  /** @internal */\n  _getHostElement() {\n    return this._el.nativeElement;\n  }\n}\n\nexport class LyDialogContext {\n  $implicit: any = this._injector.get(LyDialogRef);\n  dialogRef = this._injector.get(LyDialogRef);\n\n  get data() {\n    return this._injector.get(LY_DIALOG_DATA);\n  }\n\n  constructor(private _injector: Injector) { }\n}\n","import { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\n\nexport class DynamicInjector implements Injector {\n\n  constructor(private _newInjector: Injector, private _parentInjector: Injector) { }\n\n  get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  get(token: any, notFoundValue?: any);\n  get(token: any, notFoundValue?: any, _flags?: any) {\n    const value = this._newInjector.get(token, notFoundValue);\n\n    if (value) {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n","import { Injectable, Type, TemplateRef, ComponentFactoryResolver, ComponentFactory, Injector, StaticProvider } from '@angular/core';\nimport { LyOverlay, LyOverlayRef, LyTheme2, STYLES_BACKDROP_DARK, createStyle, LyStyle, MediaQueryArray } from '@alyle/ui';\n\nimport { LyDialogContainer } from './dialog-container.component';\nimport { LyDialogRef } from './dialog-ref';\nimport { DynamicInjector } from './dynamic-injector';\nimport { LyDialogConfig } from './dialog-config';\nimport { LY_DIALOG_DATA } from './dialog-data';\n\nconst dialogContainerStyleProperties = [\n  'width',\n  'maxWidth',\n  'minWidth',\n  'height',\n  'maxHeight',\n  'minHeight',\n];\n\n@Injectable()\nexport class LyDialog {\n\n  constructor(\n    private _overlay: LyOverlay,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _theme: LyTheme2,\n    private _injector: Injector\n  ) { }\n  open<T, DATA = unknown>(componentOrTemplateRef: Type<T> | TemplateRef<T>,\n                          config?: LyDialogConfig<DATA>): LyDialogRef {\n\n    // merge with default config\n    config = { ...new LyDialogConfig(), ...config };\n\n    let componentFactoryOrTemplate: ComponentFactory<any> | TemplateRef<any>;\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      componentFactoryOrTemplate = componentOrTemplateRef;\n    } else {\n      componentFactoryOrTemplate = this._componentFactoryResolver.resolveComponentFactory(componentOrTemplateRef);\n    }\n\n    const onReziseScroll = () => {\n      // I would have used FlexBox to position, but not,\n      // because it creates a blurring effect in the text\n      // when the `dialog` is opened\n      const dialogContainerElement = overlayRef.containerElement;\n      const x = window.innerWidth / 2 - dialogContainerElement.offsetWidth / 2;\n      const y = window.innerHeight / 2 - dialogContainerElement.offsetHeight / 2;\n      dialogContainerElement.style.transform = `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n    };\n\n    const overlayRef = this._overlay.create(LyDialogContainer, null, {\n      styles: {\n        top: 0,\n        left: 0\n      },\n      hasBackdrop: config.hasBackdrop,\n      onResizeScroll: onReziseScroll,\n      disableClose: config.disableClose,\n      backdropClass: config.backdropClass || this._theme.style(STYLES_BACKDROP_DARK),\n      fnDestroy: () => {\n        dialogRef.close();\n      }\n    });\n\n    const instance: LyDialogContainer = overlayRef.componentRef!.instance;\n\n    dialogContainerStyleProperties.forEach(property => {\n      if (config![property]) {\n        createStyle<string | MediaQueryArray | number | null, LyDialogContainer>(\n          instance,\n          { key: property, Ð¸: LyStyle.Ð¸ },\n          config![property],\n          LyStyle[property]\n        );\n      }\n    });\n\n    const providers: StaticProvider[] = [\n      {\n        provide: LyDialogRef,\n        useValue: new LyDialogRef(overlayRef.componentRef!.injector.get(LyOverlayRef))\n      },\n      {\n        provide: LyDialogConfig,\n        useValue: config\n      }\n    ];\n\n    if (config.data != null) {\n      providers.push({\n        provide: LY_DIALOG_DATA,\n        useValue: config.data\n      });\n    }\n\n    const newInjector = new DynamicInjector(\n        Injector.create(providers, overlayRef.componentRef!.injector), this._injector);\n    instance._init(componentFactoryOrTemplate, newInjector);\n    const dialogRef = newInjector.get(LyDialogRef);\n    return dialogRef;\n  }\n}\n\n","import { Directive, ElementRef, OnInit, Renderer2 } from '@angular/core';\nimport {\n  LyTheme2,\n  ThemeVariables } from '@alyle/ui';\n\n/** @docs-private */\nconst STYLE_PRIORITY = -2;\n\n/** @docs-private */\nconst STYLES_DIALOG_TITLE = (theme: ThemeVariables) => (className: string) => `${className}{display:block;flex:0 0 auto;margin:20px 0 16px;padding:0 24px;font-size:20px;line-height:24px;font-weight:500;font-family:${theme.typography.fontFamily};}`;\n\n@Directive({\n  selector: '[ly-dialog-title], [lyDialogTitle]',\n  exportAs: 'lyDialogTitle'\n})\nexport class LyDialogTitle implements OnInit {\n  constructor(\n    private _renderer: Renderer2,\n    private _el: ElementRef<HTMLElement>,\n    private _theme: LyTheme2) { }\n\n  ngOnInit() {\n    this._renderer.addClass(\n      this._el.nativeElement, this._theme.renderStyle(STYLES_DIALOG_TITLE, STYLE_PRIORITY));\n  }\n}\n","import { Directive, ElementRef, OnInit, Renderer2 } from '@angular/core';\nimport {\n  LyTheme2 } from '@alyle/ui';\n\n/** @docs-private */\nconst STYLE_PRIORITY = -2;\n\n/** @docs-private */\nconst STYLES_DIALOG_CONTENT = () => (className: string) => `${className}{display:block;overflow-y:auto;flex:1 1 auto;padding:0 24px 24px;-webkit-overflow-scrolling:touch;}`;\n\n@Directive({\n  selector: 'ly-dialog-content, [ly-dialog-content], [lyDialogContent]',\n  exportAs: 'lyDialogContent'\n})\nexport class LyDialogContent implements OnInit {\n  constructor(\n    private _renderer: Renderer2,\n    private _el: ElementRef<HTMLElement>,\n    private _theme: LyTheme2) { }\n\n  ngOnInit() {\n    this._renderer.addClass(\n      this._el.nativeElement, this._theme.renderStyle(STYLES_DIALOG_CONTENT, STYLE_PRIORITY));\n  }\n}\n","import { Directive, ElementRef, OnInit, Renderer2 } from '@angular/core';\nimport {\n  LyTheme2 } from '@alyle/ui';\n\n/** @docs-private */\nconst STYLE_PRIORITY = -2;\n\n/** @docs-private */\nconst STYLES_DIALOG_ACTIONS = () => (className: string) => `${className}{display:flex;flex:0 0 auto;padding:8px;flex-wrap:wrap;min-height:52px;align-items:center;}`;\n\n@Directive({\n  selector: 'ly-dialog-actions, [ly-dialog-actions], [lyDialogActions]',\n  exportAs: 'lyDialogActions'\n})\nexport class LyDialogActions implements OnInit {\n  constructor(\n    private _renderer: Renderer2,\n    private _el: ElementRef<HTMLElement>,\n    private _theme: LyTheme2) { }\n\n  ngOnInit() {\n    this._renderer.addClass(\n      this._el.nativeElement, this._theme.renderStyle(STYLES_DIALOG_ACTIONS, STYLE_PRIORITY));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LyCommonModule, LyOverlayModule } from '@alyle/ui';\n\nimport { LyDialogContainer } from './dialog-container.component';\nimport { LyDialog } from './dialog';\nimport { LyDialogTitle } from './dialog-title.directive';\nimport { LyDialogContent } from './dialog-content.directive';\nimport { LyDialogActions } from './dialog-actions.directive';\n\n@NgModule({\n  entryComponents: [\n    LyDialogContainer\n  ],\n  declarations: [\n    LyDialogContainer,\n    LyDialogTitle,\n    LyDialogContent,\n    LyDialogActions\n  ],\n  imports: [\n    CommonModule,\n    LyCommonModule,\n    LyOverlayModule\n  ],\n  exports: [\n    LyCommonModule,\n    LyDialogContainer,\n    LyDialogTitle,\n    LyDialogContent,\n    LyDialogActions\n  ],\n  providers: [\n    LyDialog\n  ]\n})\nexport class LyDialogModule { }\n"]}