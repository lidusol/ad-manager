(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@alyle/ui'),exports, require('@angular/core'), require('@alyle/ui')) :
    typeof define === 'function' && define.amd ? define('@alyle/ui/divider', ['@angular/core','@alyle/ui','exports', '@angular/core', '@alyle/ui'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.alyle.ui,(global.ly = global.ly || {}, global.ly.divider = {}), global.ng.core, global.ly.core));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, ui) { 'use strict';

    var STYLES = function (theme) { return function (className) { return className + "{display:block;background-color:" + theme.divider + ";height:1px;}"; }; };
    var ɵ0 = STYLES;
    var LyDivider = /** @class */ (function () {
        function LyDivider(sRenderer) {
            this.sRenderer = sRenderer;
        }
        Object.defineProperty(LyDivider.prototype, "inset", {
            get: function () {
                return this._inset;
            },
            /** Add indentation (72px) */
            set: function (val) {
                var newVal = this._inset = ui.toBoolean(val);
                if (newVal) {
                    this[0x1] = this.sRenderer.add(LyDivider.и + "--inset", function (_a) {
                        var before = _a.before;
                        return function (className) { return className + "{margin-" + before + ":74px;}"; };
                    }, this[0x1]);
                }
                else {
                    this.sRenderer.removeClass(this[0x1]);
                }
            },
            enumerable: false,
            configurable: true
        });
        LyDivider.prototype.ngOnInit = function () {
            this.sRenderer.add(STYLES);
        };
LyDivider.ɵfac = function LyDivider_Factory(t) { return new (t || LyDivider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer)); };
LyDivider.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyDivider, selectors: [["ly-divider"]], inputs: { inset: "inset" }, features: [ɵngcc0.ɵɵProvidersFeature([
            ui.StyleRenderer
        ])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDivider, [{
        type: core.Directive,
        args: [{
                selector: 'ly-divider',
                providers: [
                    ui.StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc1.StyleRenderer }]; }, { inset: [{
            type: core.Input
        }] }); })();
        return LyDivider;
    }());
    LyDivider.и = 'LyDivider';
    LyDivider.ctorParameters = function () { return [
        { type: ui.StyleRenderer }
    ]; };
    LyDivider.propDecorators = {
        inset: [{ type: core.Input }]
    };

    var LyDividerModule = /** @class */ (function () {
        function LyDividerModule() {
        }
LyDividerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LyDividerModule });
LyDividerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LyDividerModule_Factory(t) { return new (t || LyDividerModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LyDividerModule, { declarations: [LyDivider], exports: [LyDivider] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDividerModule, [{
        type: core.NgModule,
        args: [{
                exports: [LyDivider],
                declarations: [LyDivider]
            }]
    }], function () { return []; }, null); })();
        return LyDividerModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LyDivider = LyDivider;
    exports.LyDividerModule = LyDividerModule;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=alyle-ui-divider.umd.js.map