(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@alyle/ui'),require('@angular/cdk/scrolling'),require('@angular/cdk/platform'),require('@angular/common'),exports, require('@angular/core'), require('@alyle/ui'), require('@angular/cdk/scrolling'), require('@angular/cdk/platform'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@alyle/ui/drawer', ['@angular/core','@alyle/ui','@angular/cdk/scrolling','@angular/cdk/platform','@angular/common','exports', '@angular/core', '@alyle/ui', '@angular/cdk/scrolling', '@angular/cdk/platform', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.alyle.ui,global.ng.cdk.scrolling,global.ng.cdk.platform,global.ng.common,(global.ly = global.ly || {}, global.ly.drawer = {}), global.ng.core, global.ly.core, global.ng.cdk.scrolling, global.ng.cdk.platform, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,exports, core, ui, scrolling, platform, common) { 
function LyDrawer_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    var _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 0);
    ɵngcc0.ɵɵlistener("click", function LyDrawer_ng_template_1_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); var ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.toggle(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("className", ctx_r0.classes.backdrop);
} }
var _c0 = ["*"];
'use strict';

    var DEFAULT_MODE = 'side';
    var DEFAULT_WIDTH = '230px';
    var DEFAULT_VALUE = '';
    var STYLE_PRIORITY = -2;
    var DEFAULT_POSITION = ui.XPosition.before;
    var STYLES = function (theme, ref) {
        var __ = ref.selectorsOf(STYLES);
        return {
            $name: LyDrawerContent.и,
            $priority: STYLE_PRIORITY + 1.9,
            root: function () { return (theme.drawer
                && theme.drawer.root
                && (theme.drawer.root instanceof ui.StyleCollection
                    ? theme.drawer.root.setTransformer(function (fn) { return fn(__); }).css
                    : theme.drawer.root(__))); },
            drawerContainer: function (className) { return className + "{display:block;position:relative;overflow:hidden;-webkit-overflow-scrolling:touch;}"; },
            drawer: function (className) { return className + "{display:block;position:fixed;z-index:" + theme.zIndex.drawer + ";overflow:auto;visibility:hidden;}"; },
            drawerContent: function (className) { return className + "{display:block;}"; },
            drawerOpened: function (className) { return className + "{transform:translate(0px, 0px);visibility:visible;}"; },
            drawerClosed: null,
            backdrop: function (className) { return "" + ui.st2c((ui.LY_COMMON_STYLES.fill), "" + className) + className + "{background-color:" + theme.drawer.backdrop + ";}"; },
            transition: function (className) { return className + "{transition:" + theme.animations.durations.complex + "ms " + theme.animations.curves.deceleration + ";transition-property:transform, margin, visibility;}"; }
        };
    };
    var LyDrawerContent = /** @class */ (function () {
        function LyDrawerContent(_renderer, _el, drawerContainer) {
            this._renderer = _renderer;
            this._el = _el;
            this._renderer.addClass(this._el.nativeElement, drawerContainer.classes.drawerContent);
        }
        LyDrawerContent.prototype._getHostElement = function () {
            return this._el.nativeElement;
        };
LyDrawerContent.ɵfac = function LyDrawerContent_Factory(t) { return new (t || LyDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(core.forwardRef(function () { return LyDrawerContainer; }))); };
LyDrawerContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyDrawerContent, selectors: [["ly-drawer-content"]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDrawerContent, [{
        type: core.Directive,
        args: [{
                selector: 'ly-drawer-content'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [core.forwardRef(function () { return LyDrawerContainer; })]
            }] }]; }, null); })();
        return LyDrawerContent;
    }());
    LyDrawerContent.и = 'LyDrawerContent';
    LyDrawerContent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return LyDrawerContainer; }),] }] }
    ]; };
    var LyDrawerContainer = /** @class */ (function () {
        function LyDrawerContainer(_renderer, _el, sRenderer) {
            this._renderer = _renderer;
            this._el = _el;
            this.sRenderer = sRenderer;
            /** @docs-private */
            this.classes = this.sRenderer.renderSheet(STYLES, true);
            this._openDrawers = 0;
            this._renderer.addClass(this._el.nativeElement, this.classes.drawerContainer);
        }
        LyDrawerContainer.prototype._getHostElement = function () {
            return this._el.nativeElement;
        };
LyDrawerContainer.ɵfac = function LyDrawerContainer_Factory(t) { return new (t || LyDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer)); };
LyDrawerContainer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyDrawerContainer, selectors: [["ly-drawer-container"]], contentQueries: function LyDrawerContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, LyDrawerContent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._drawerContent = _t.first);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            ui.StyleRenderer
        ])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDrawerContainer, [{
        type: core.Directive,
        args: [{
                selector: 'ly-drawer-container',
                providers: [
                    ui.StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.StyleRenderer }]; }, { _drawerContent: [{
            type: core.ContentChild,
            args: [core.forwardRef(function () { return LyDrawerContent; }), { static: true }]
        }] }); })();
        return LyDrawerContainer;
    }());
    LyDrawerContainer.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: ui.StyleRenderer }
    ]; };
    LyDrawerContainer.propDecorators = {
        _drawerContent: [{ type: core.ContentChild, args: [core.forwardRef(function () { return LyDrawerContent; }), { static: true },] }]
    };
    var LyDrawer = /** @class */ (function () {
        function LyDrawer(_theme, _styleRenderer, _renderer, _el, _drawerContainer, _vcr, _viewportRuler, _cd, _zone, _platform) {
            this._theme = _theme;
            this._styleRenderer = _styleRenderer;
            this._renderer = _renderer;
            this._el = _el;
            this._drawerContainer = _drawerContainer;
            this._vcr = _vcr;
            this._viewportRuler = _viewportRuler;
            this._cd = _cd;
            this._zone = _zone;
            this._platform = _platform;
            /**
             * Styles
             * @docs-private
             */
            this.classes = this._drawerContainer.classes;
            this._position = DEFAULT_POSITION;
            this.mode = DEFAULT_MODE;
            this._renderer.addClass(this._el.nativeElement, _drawerContainer.classes.drawer);
        }
        Object.defineProperty(LyDrawer.prototype, "width", {
            set: function (_val) {
                console.log(LyDrawer.и, this._el.nativeElement);
                throw new Error(LyDrawer.и + ": [width] is deprecated instead use [drawerWidth].");
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyDrawer.prototype, "height", {
            set: function (_val) {
                console.log(LyDrawer.и, this._el.nativeElement);
                throw new Error(LyDrawer.и + ": [height] is deprecated instead use [drawerHeight].");
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyDrawer.prototype, "opened", {
            get: function () {
                return this._opened;
            },
            set: function (val) {
                if (val !== this.opened) {
                    this._opened = ui.toBoolean(val);
                    this._isOpen = this._opened;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyDrawer.prototype, "hasBackdrop", {
            get: function () {
                return this._hasBackdrop;
            },
            set: function (val) {
                this._hasBackdrop = val == null ? null : ui.toBoolean(val);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyDrawer.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (val) {
                if (val !== this.position) {
                    this._position = val;
                    this[0x1] = this._styleRenderer.add(LyDrawer.и + "--position-" + val, function (theme) { return function (className) { return className + "{" + theme.getDirection(val) + ":0;}"; }; }, STYLE_PRIORITY, this[0x1]);
                }
            },
            enumerable: false,
            configurable: true
        });
        LyDrawer.prototype.ngOnChanges = function () {
            this._updateBackdrop();
            this._updateAnimations();
            var __mode = this.mode;
            var __forceModeOverOpened = this._forceModeOverOpened;
            var __opened = this.opened;
            var __width = this.drawerWidth;
            var __height = this.drawerHeight;
            var __position = this.position;
            var __spacingAbove = this.spacingAbove;
            var __spacingBelow = this.spacingBelow;
            var __spacingBefore = this.spacingBefore;
            var __spacingAfter = this.spacingAfter;
            if (__width && __height) {
                throw new Error("`width` and `height` are defined, you can only define one");
            }
            else if (!__width) {
                if (!__height) {
                    /** set default __width if `width` & `height` is `undefined` */
                    __width = DEFAULT_WIDTH;
                }
            }
            if ((this._isOpen && __opened) || (this._isOpen) || __forceModeOverOpened) {
                /** create styles for mode side */
                this._drawerClass = this._theme.updateClass(this._el.nativeElement, this._renderer, this._drawerContainer.classes.drawerOpened, this._drawerClass);
                // styles for <ly-drawer-content>
                if (__mode === 'side') {
                    var newKeyDrawerContent = "ly-drawer-content----:" + (__width || DEFAULT_VALUE) + "\u00B7" + (__position || DEFAULT_VALUE);
                    this._drawerContentClass = this._theme.addStyle(newKeyDrawerContent, function (theme) {
                        var drawerContentStyles = {};
                        var positionVal = "margin-" + __position;
                        if (__width) {
                            ui.eachMedia(__width, function (val, media) {
                                var newStyleWidth = val === 'over' ? '0px' : toPx(val);
                                if (media) {
                                    var breakPoint = theme.getBreakpoint(media);
                                    var styleOfBreakPoint = createEmptyPropOrUseExisting(drawerContentStyles, breakPoint);
                                    styleOfBreakPoint[positionVal] = newStyleWidth;
                                }
                                else {
                                    drawerContentStyles[positionVal] = newStyleWidth;
                                }
                            });
                        }
                        return drawerContentStyles;
                    }, this._drawerContainer._drawerContent._getHostElement(), this._drawerContentClass);
                }
                else if (this._drawerContentClass) {
                    /** remove styles for <ly-drawer-content> */
                    this._renderer.removeClass(this._drawerContainer._drawerContent._getHostElement(), this._drawerContentClass);
                    this._drawerContentClass = undefined;
                }
            }
            else {
                if (this._drawerContentClass) {
                    this._renderer.removeClass(this._drawerContainer._drawerContent._getHostElement(), this._drawerContentClass);
                    this._drawerContentClass = undefined;
                }
                if (this._drawerClass) {
                    this._renderer.removeClass(this._el.nativeElement, this._drawerClass);
                    this._drawerClass = undefined;
                }
            }
            /** default styles */
            this._drawerRootClass = this._theme.addStyle("ly-drawer-root:" + __width + "\u00B7" + __height + "\u00B7" + __spacingAbove + "\u00B7" + __spacingBelow + "\u00B7" + __spacingBefore + "\u00B7" + __spacingAfter + "\u00B7" + __position + "\u00B7" + __mode + "\u00B7" + __forceModeOverOpened, function (theme) {
                var stylesDrawerRoot = {};
                var pos = theme.getDirection(__position);
                var positionSign = __position === 'above' ? '-' : '+';
                if (__width) {
                    var dirXSign_1 = pos === ui.DirPosition.left ? '-' : '+';
                    ui.eachMedia(__width, function (val, media) {
                        if ((__mode === 'over' || __forceModeOverOpened) && (val === 0 || val === 'over')) {
                            return;
                        }
                        var newVal = val === 'over' ? '0px' : toPx(val);
                        var newStyleWidth = newVal;
                        var newTranslateX = "translateX(" + (dirXSign_1 + newVal) + ")";
                        if (media) {
                            var breakPoint = theme.getBreakpoint(media);
                            var styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);
                            styleOfBreakPoint.width = newStyleWidth;
                            styleOfBreakPoint.transform = newTranslateX;
                        }
                        else {
                            stylesDrawerRoot.width = newStyleWidth;
                            stylesDrawerRoot.transform = newTranslateX;
                        }
                    });
                }
                else if (__height) {
                    ui.eachMedia(__height, function (val, media) {
                        var newStyleHeight = toPx(val);
                        var newTranslateY = "translateY(" + (positionSign + toPx(val)) + ")";
                        if (media) {
                            var breakPoint = theme.getBreakpoint(media);
                            var styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);
                            styleOfBreakPoint.height = newStyleHeight;
                            styleOfBreakPoint.transform = newTranslateY;
                        }
                        else {
                            stylesDrawerRoot.height = newStyleHeight;
                            stylesDrawerRoot.transform = newTranslateY;
                        }
                    });
                }
                if (__position === 'before' || __position === 'after') {
                    ui.eachMedia(__spacingAbove, function (val, media) {
                        var newStyleSpacingTop = toPx(val || 0);
                        if (media) {
                            var breakPoint = theme.getBreakpoint(media);
                            var styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);
                            styleOfBreakPoint.top = newStyleSpacingTop;
                        }
                        else {
                            stylesDrawerRoot.top = newStyleSpacingTop;
                        }
                    });
                    ui.eachMedia(__spacingBelow, function (val, media) {
                        var newStyleSpacingBottom = toPx(val || 0);
                        if (media) {
                            var breakPoint = theme.getBreakpoint(media);
                            var styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);
                            styleOfBreakPoint.bottom = newStyleSpacingBottom;
                        }
                        else {
                            stylesDrawerRoot.bottom = newStyleSpacingBottom;
                        }
                    });
                }
                else if (__position === ui.YPosition.above || __position === ui.YPosition.below) {
                    ui.eachMedia(__spacingBefore, function (val, media) {
                        var newStyleSpacingBefore = toPx(val || 0);
                        if (media) {
                            var breakPoint = theme.getBreakpoint(media);
                            var styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);
                            styleOfBreakPoint.before = newStyleSpacingBefore;
                        }
                        else {
                            stylesDrawerRoot.before = newStyleSpacingBefore;
                        }
                    });
                    ui.eachMedia(__spacingAfter, function (val, media) {
                        var newStyleSpacingAfter = toPx(val || 0);
                        if (media) {
                            var breakPoint = theme.getBreakpoint(media);
                            var styleOfBreakPoint = createEmptyPropOrUseExisting(stylesDrawerRoot, breakPoint);
                            styleOfBreakPoint.after = newStyleSpacingAfter;
                        }
                        else {
                            stylesDrawerRoot.after = newStyleSpacingAfter;
                        }
                    });
                }
                return stylesDrawerRoot;
            }, this._el.nativeElement, this._drawerRootClass, __mode === 'side' ? STYLE_PRIORITY : STYLE_PRIORITY + 1);
            this._fromToggle = false;
        };
        LyDrawer.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this._platform.isBrowser) {
                this._tabResizeSub = this._viewportRuler.change().subscribe(function () {
                    _this.ngOnChanges();
                });
            }
        };
        LyDrawer.prototype.ngOnDestroy = function () {
            if (this._tabResizeSub) {
                this._tabResizeSub.unsubscribe();
            }
        };
        LyDrawer.prototype.toggle = function () {
            var width = getComputedStyle(this._el.nativeElement).width;
            this._fromToggle = true;
            if (width === '0px') {
                this._forceModeOverOpened = true;
                this._isOpen = true;
            }
            else {
                if (this._forceModeOverOpened) {
                    this._forceModeOverOpened = false;
                    this._isOpen = this.opened;
                }
                else {
                    this._isOpen = !this._isOpen;
                }
            }
            this.ngOnChanges();
        };
        LyDrawer.prototype._contentHasMargin = function () {
            var content = this._drawerContainer._drawerContent._getHostElement();
            var container = this._drawerContainer._getHostElement();
            return (content.offsetWidth === container.offsetWidth);
        };
        LyDrawer.prototype._updateBackdrop = function () {
            var _this = this;
            if (((this._isOpen && this.opened) || this._isOpen) &&
                (this.hasBackdrop != null
                    ? this.hasBackdrop
                    : (this.mode === 'over' || (this._forceModeOverOpened && this._contentHasMargin())))) {
                // create only if is necessary
                if (!this._viewRef) {
                    this._zone.run(function () {
                        _this._drawerContainer._openDrawers++;
                        _this._viewRef = _this._vcr.createEmbeddedView(_this._backdrop);
                        _this._cd.markForCheck();
                        _this._viewRef.rootNodes[0].style.zIndex = "" + _this._drawerContainer._openDrawers;
                    });
                }
            }
            else if (this._viewRef) {
                this._zone.run(function () {
                    _this._drawerContainer._openDrawers--;
                    _this._vcr.clear();
                    _this._viewRef = undefined;
                    _this._cd.markForCheck();
                    if (_this._forceModeOverOpened) {
                        _this._forceModeOverOpened = false;
                        _this._isOpen = _this.opened;
                    }
                });
            }
        };
        LyDrawer.prototype._updateAnimations = function () {
            if (this._fromToggle && !this._isAnimation) {
                this._renderer.addClass(this._el.nativeElement, this.classes.transition);
                this._renderer.addClass(this._drawerContainer._drawerContent._getHostElement(), this.classes.transition);
                this._isAnimation = true;
            }
            else if (!this._fromToggle && this._isAnimation) {
                this._renderer.removeClass(this._el.nativeElement, this.classes.transition);
                this._renderer.removeClass(this._drawerContainer._drawerContent._getHostElement(), this.classes.transition);
                this._isAnimation = false;
            }
        };
LyDrawer.ɵfac = function LyDrawer_Factory(t) { return new (t || LyDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LyDrawerContainer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform)); };
LyDrawer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LyDrawer, selectors: [["ly-drawer"]], viewQuery: function LyDrawer_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(core.TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._backdrop = _t.first);
    } }, inputs: { mode: "mode", width: "width", height: "height", opened: "opened", hasBackdrop: "hasBackdrop", position: "position", spacingAbove: "spacingAbove", spacingBelow: "spacingBelow", spacingBefore: "spacingBefore", spacingAfter: "spacingAfter", drawerWidth: "drawerWidth", drawerHeight: "drawerHeight" }, exportAs: ["lyDrawer"], features: [ɵngcc0.ɵɵProvidersFeature([
            ui.StyleRenderer
        ]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[3, "className", "click"]], template: function LyDrawer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, LyDrawer_ng_template_1_Template, 1, 1, "ng-template");
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDrawer, [{
        type: core.Component,
        args: [{
                selector: 'ly-drawer',
                template: "<ng-content></ng-content>\n<ng-template>\n  <div [className]=\"classes.backdrop\" (click)=\"toggle()\"></div>\n</ng-template>",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                exportAs: 'lyDrawer',
                providers: [
                    ui.StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc1.LyTheme2 }, { type: ɵngcc1.StyleRenderer }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: LyDrawerContainer }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc2.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }]; }, { mode: [{
            type: core.Input
        }], width: [{
            type: core.Input
        }], height: [{
            type: core.Input
        }], opened: [{
            type: core.Input
        }], hasBackdrop: [{
            type: core.Input
        }], position: [{
            type: core.Input
        }], _backdrop: [{
            type: core.ViewChild,
            args: [core.TemplateRef]
        }], spacingAbove: [{
            type: core.Input
        }], spacingBelow: [{
            type: core.Input
        }], spacingBefore: [{
            type: core.Input
        }], spacingAfter: [{
            type: core.Input
        }], drawerWidth: [{
            type: core.Input
        }], drawerHeight: [{
            type: core.Input
        }] }); })();
        return LyDrawer;
    }());
    LyDrawer.и = 'LyDrawer';
    LyDrawer.ctorParameters = function () { return [
        { type: ui.LyTheme2 },
        { type: ui.StyleRenderer },
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: LyDrawerContainer },
        { type: core.ViewContainerRef },
        { type: scrolling.ViewportRuler },
        { type: core.ChangeDetectorRef },
        { type: core.NgZone },
        { type: platform.Platform }
    ]; };
    LyDrawer.propDecorators = {
        _backdrop: [{ type: core.ViewChild, args: [core.TemplateRef,] }],
        width: [{ type: core.Input }],
        height: [{ type: core.Input }],
        opened: [{ type: core.Input }],
        mode: [{ type: core.Input }],
        spacingAbove: [{ type: core.Input }],
        spacingBelow: [{ type: core.Input }],
        spacingBefore: [{ type: core.Input }],
        spacingAfter: [{ type: core.Input }],
        drawerWidth: [{ type: core.Input }],
        drawerHeight: [{ type: core.Input }],
        hasBackdrop: [{ type: core.Input }],
        position: [{ type: core.Input }]
    };
    /**
     * convert number to px
     */
    function toPx(val) {
        if (typeof val === 'number') {
            return val + "px";
        }
        else {
            return val;
        }
    }
    function createEmptyPropOrUseExisting(object, key, _new) {
        return key in object
            ? object[key]
            : object[key] = _new || {};
    }

    var LyDrawerModule = /** @class */ (function () {
        function LyDrawerModule() {
        }
LyDrawerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LyDrawerModule });
LyDrawerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LyDrawerModule_Factory(t) { return new (t || LyDrawerModule)(); }, imports: [[
            common.CommonModule,
            ui.LyCommonModule
        ], ɵngcc1.LyCommonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LyDrawerModule, { declarations: [LyDrawer,
        LyDrawerContainer,
        LyDrawerContent], imports: [ɵngcc4.CommonModule, ɵngcc1.LyCommonModule], exports: [LyDrawer,
        LyDrawerContainer,
        LyDrawerContent, ɵngcc1.LyCommonModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDrawerModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    ui.LyCommonModule
                ],
                exports: [
                    LyDrawer,
                    LyDrawerContainer,
                    LyDrawerContent,
                    ui.LyCommonModule
                ],
                declarations: [LyDrawer, LyDrawerContainer, LyDrawerContent]
            }]
    }], function () { return []; }, null); })();
        return LyDrawerModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LyDrawer = LyDrawer;
    exports.LyDrawerContainer = LyDrawerContainer;
    exports.LyDrawerContent = LyDrawerContent;
    exports.LyDrawerModule = LyDrawerModule;
    exports.STYLES = STYLES;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=alyle-ui-drawer.umd.js.map