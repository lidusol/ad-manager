(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@alyle/ui')) :
    typeof define === 'function' && define.amd ? define('@alyle/ui/grid', ['exports', '@angular/core', '@alyle/ui'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ly = global.ly || {}, global.ly.grid = {}), global.ng.core, global.ly.core));
}(this, (function (exports, core, ui) { 'use strict';

    var STYLE_PRIORITY = -1;
    var ALIGN_ALIAS = {
        rowReverse: 'row-reverse',
        columnReverse: 'column-reverse',
        wrapReverse: 'wrap-reverse',
        start: 'flex-start',
        end: 'flex-end',
        between: 'space-between',
        around: 'space-around',
        evenly: 'space-evenly',
    };
    var STYLES = function () { return ({
        $priority: STYLE_PRIORITY,
        $name: LyGrid.Ð¸,
        root: function (className) { return className + "{width:100%;display:flex;flex-wrap:wrap;box-sizing:border-box;}"; },
        item: function (className) { return className + "," + className + " :first-child{box-sizing:border-box;}"; }
    }); };
    /**
     * Grid container
     */
    var LyGrid = /** @class */ (function () {
        function LyGrid(theme, el) {
            this.theme = theme;
            this.el = el;
            /**
             * Styles
             * @docs-private
             */
            this.classes = this.theme.renderStyleSheet(STYLES);
            this.el.nativeElement.classList.add(this.classes.root);
        }
        Object.defineProperty(LyGrid.prototype, "spacingX", {
            get: function () {
                return this._spacingX;
            },
            set: function (val) {
                if (val !== this.spacingX) {
                    this._spacingX = val;
                    this._createSpacingClass(undefined, val);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyGrid.prototype, "spacingY", {
            get: function () {
                return this._spacingY;
            },
            set: function (val) {
                if (val !== this.spacingY) {
                    this._spacingY = val;
                    this._createSpacingClass(undefined, undefined, val);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyGrid.prototype, "spacing", {
            /**
             * Defines the space between the component with the `item` attribute.
             * Support breakpoints
             */
            get: function () {
                return this._spacing;
            },
            set: function (val) {
                if (val !== this.spacing) {
                    this._spacing = val;
                    this._createSpacingClass(val);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Only one param must be defined
         */
        LyGrid.prototype._createSpacingClass = function (xy, x, y) {
            var newSpacingClass = this.theme.addStyle("lyGrid-spacing:" + xy + "\u00B7" + x + "\u00B7" + y, function (theme) {
                var val = (xy || x || y);
                var spacingStyles = {};
                ui.eachMedia(val, function (value, media) {
                    var valuePadding = (+value) / 2 + "px";
                    var padding = xy != null
                        ? valuePadding
                        : x != null
                            ? "0 " + valuePadding
                            : valuePadding + " 0";
                    if (media) {
                        spacingStyles[theme.getBreakpoint(media)] = {
                            padding: padding
                        };
                    }
                    else {
                        spacingStyles.padding = padding;
                    }
                });
                return spacingStyles;
            }, undefined, undefined, STYLE_PRIORITY);
            if (xy) {
                this._spacingClass = newSpacingClass;
            }
            else {
                if (x) {
                    this._spacingXClass = newSpacingClass;
                }
                if (y) {
                    this._spacingYClass = newSpacingClass;
                }
            }
            this._negativeMarginClass = this.theme.addStyle("lyGrid-negative-margin:" + xy + "\u00B7" + x + "\u00B7" + y, function (theme) {
                var val = (xy || x || y);
                var negativeMarginStyles;
                ui.eachMedia(val, function (value, media) {
                    var valueMargin = (-value) / 2 + "px";
                    var margin = xy != null
                        ? valueMargin
                        : x != null
                            ? "0 " + valueMargin
                            : valueMargin + " 0";
                    var negativeMarginstyles = { margin: margin };
                    if (xy != null || x != null) {
                        negativeMarginstyles.width = "calc(100% + " + value + "px)";
                    }
                    if (media) {
                        if (!negativeMarginStyles) {
                            negativeMarginStyles = {};
                        }
                        negativeMarginStyles[theme.getBreakpoint(media)] = negativeMarginstyles;
                    }
                    else {
                        negativeMarginStyles = negativeMarginstyles;
                    }
                });
                return negativeMarginStyles;
            }, this.el.nativeElement, this._negativeMarginClass, STYLE_PRIORITY);
        };
        Object.defineProperty(LyGrid.prototype, "justify", {
            /**
             * Defines the justify-content style property.
             * Support breakpoints
             */
            get: function () {
                return this._justify;
            },
            set: function (val) {
                if (val !== this.justify) {
                    this._justify = val;
                    this._justifyClass = this.theme.addStyle("lyGrid-justify:" + val, function (theme) {
                        var justifyStyles;
                        ui.eachMedia(val, function (value, media) {
                            var newJustifyStyles = {
                                justifyContent: value in ALIGN_ALIAS
                                    ? ALIGN_ALIAS[value]
                                    : value
                            };
                            if (media) {
                                if (!justifyStyles) {
                                    justifyStyles = {};
                                }
                                justifyStyles[theme.getBreakpoint(media)] = newJustifyStyles;
                            }
                            else {
                                justifyStyles = newJustifyStyles;
                            }
                        });
                        return justifyStyles;
                    }, this.el.nativeElement, this._justifyClass, STYLE_PRIORITY);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyGrid.prototype, "direction", {
            /**
             * Defines the justify-content style property.
             * Support breakpoints
             */
            get: function () {
                return this._direction;
            },
            set: function (val) {
                if (val !== this.direction) {
                    this._direction = val;
                    this._directionClass = this.theme.addStyle("lyGrid-direction:" + val, function (theme) {
                        var directionStyles;
                        ui.eachMedia(val, function (value, media) {
                            var newDirectionStyles = {
                                flexDirection: value in ALIGN_ALIAS
                                    ? ALIGN_ALIAS[value]
                                    : value
                            };
                            if (media) {
                                if (!directionStyles) {
                                    directionStyles = {};
                                }
                                directionStyles[theme.getBreakpoint(media)] = newDirectionStyles;
                            }
                            else {
                                directionStyles = newDirectionStyles;
                            }
                        });
                        return directionStyles;
                    }, this.el.nativeElement, this._directionClass, STYLE_PRIORITY);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyGrid.prototype, "alignItems", {
            get: function () {
                return this._alignItems;
            },
            /**
             * Defines the `align-items` style property.
             * Support breakpoints
             */
            set: function (val) {
                this._alignItems = val;
                this._alignItemsClass = this.theme.addStyle("lyGrid.align:" + val, function (theme) {
                    var alignItemsStyles;
                    ui.eachMedia(val, function (value, media) {
                        var newAlignItemsStyles = {
                            alignItems: value in ALIGN_ALIAS
                                ? ALIGN_ALIAS[value]
                                : value
                        };
                        if (media) {
                            if (!alignItemsStyles) {
                                alignItemsStyles = {};
                            }
                            alignItemsStyles[theme.getBreakpoint(media)] = newAlignItemsStyles;
                        }
                        else {
                            alignItemsStyles = newAlignItemsStyles;
                        }
                    });
                    return alignItemsStyles;
                }, this.el.nativeElement, this._alignItemsClass, STYLE_PRIORITY);
            },
            enumerable: false,
            configurable: true
        });
        return LyGrid;
    }());
    LyGrid.Ð¸ = 'LyGrid';
    LyGrid.decorators = [
        { type: core.Directive, args: [{
                    selector: 'ly-grid[container]'
                },] }
    ];
    LyGrid.ctorParameters = function () { return [
        { type: ui.LyTheme2 },
        { type: core.ElementRef }
    ]; };
    LyGrid.propDecorators = {
        spacingX: [{ type: core.Input }],
        spacingY: [{ type: core.Input }],
        spacing: [{ type: core.Input }],
        justify: [{ type: core.Input }],
        direction: [{ type: core.Input }],
        alignItems: [{ type: core.Input }]
    };
    var LyGridItem = /** @class */ (function () {
        function LyGridItem(gridContainer, el, renderer, theme, _sr) {
            this.gridContainer = gridContainer;
            this.el = el;
            this.theme = theme;
            this._sr = _sr;
            if (!gridContainer) {
                throw new Error("Require parent <ly-grid container>");
            }
            renderer.addClass(el.nativeElement, this.gridContainer.classes.item);
        }
        Object.defineProperty(LyGridItem.prototype, "col", {
            /**
             * Defines the number of grids
             * Support breakpoints
             */
            get: function () {
                return this._col;
            },
            set: function (val) {
                var newVal = this._col = val || 0;
                this._colClass = this._sr.add(LyGridItem.Ð¸ + "--col-" + newVal, function (theme) {
                    var medias = new ui.StyleCollection();
                    ui.eachMedia(newVal, function (value, media) {
                        if (typeof value === 'string') {
                            throw new Error(LyGridItem.Ð¸ + ": '" + val + "' is not valid.");
                        }
                        var maxWidth = value ? value * 100 / 12 : 100;
                        var flexBasis = value ? value * 100 / 12 : 0;
                        var flexGrow = value ? 0 : 1;
                        if (media) {
                            medias.add(function (className) { return "@media " + theme.breakpoints[media] + "{" + className + "{max-width:" + maxWidth + "%;flex-basis:" + flexBasis + "%;flex-grow:" + flexGrow + ";}}"; });
                        }
                        else {
                            medias.add(function (className) { return className + "{max-width:" + maxWidth + "%;flex-basis:" + flexBasis + "%;flex-grow:" + flexGrow + ";}"; });
                        }
                    });
                    return medias.css;
                }, STYLE_PRIORITY, this._colClass);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyGridItem.prototype, "gridItemCol", {
            get: function () {
                return this.col;
            },
            set: function (val) {
                this.col = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyGridItem.prototype, "order", {
            /**
             * Defines the order style property.
             * Support breakpoints
             */
            get: function () {
                return this._order;
            },
            set: function (val) {
                if (val !== this.order) {
                    this._order = val;
                    this._orderClass = this.theme.addStyle("lyGrid-order:" + val, function (theme) {
                        var orderStyles;
                        ui.eachMedia("" + val, function (value, media) {
                            var newOrderStyles = {
                                order: value
                            };
                            if (media) {
                                if (!orderStyles) {
                                    orderStyles = {};
                                }
                                orderStyles[theme.getBreakpoint(media)] = newOrderStyles;
                            }
                            else {
                                orderStyles = newOrderStyles;
                            }
                        });
                        return orderStyles;
                    }, this.el.nativeElement, this._orderClass, STYLE_PRIORITY);
                }
            },
            enumerable: false,
            configurable: true
        });
        LyGridItem.prototype.ngOnInit = function () {
            this._updateSpacing();
        };
        LyGridItem.prototype._updateSpacing = function () {
            if (this.gridContainer._spacingClass) {
                this.el.nativeElement.classList.add(this.gridContainer._spacingClass);
            }
            else {
                if (this.gridContainer._spacingXClass) {
                    this.el.nativeElement.classList.add(this.gridContainer._spacingXClass);
                }
                if (this.gridContainer._spacingYClass) {
                    this.el.nativeElement.classList.add(this.gridContainer._spacingYClass);
                }
            }
        };
        return LyGridItem;
    }());
    LyGridItem.Ð¸ = 'LyGridItem';
    LyGridItem.decorators = [
        { type: core.Directive, args: [{
                    selector: 'ly-grid[item], [ly-grid-item], [lyGridItem]',
                    providers: [
                        ui.StyleRenderer
                    ]
                },] }
    ];
    LyGridItem.ctorParameters = function () { return [
        { type: LyGrid },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: ui.LyTheme2 },
        { type: ui.StyleRenderer }
    ]; };
    LyGridItem.propDecorators = {
        col: [{ type: core.Input }],
        gridItemCol: [{ type: core.Input, args: ['lyGridItem',] }],
        order: [{ type: core.Input }]
    };

    var LyGridModule = /** @class */ (function () {
        function LyGridModule() {
        }
        return LyGridModule;
    }());
    LyGridModule.decorators = [
        { type: core.NgModule, args: [{
                    exports: [LyGrid, LyGridItem],
                    declarations: [LyGrid, LyGridItem]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LyGrid = LyGrid;
    exports.LyGridItem = LyGridItem;
    exports.LyGridModule = LyGridModule;
    exports.STYLES = STYLES;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui-grid.umd.js.map
