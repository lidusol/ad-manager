{"version":3,"sources":["../../../lib/grid/grid.ts","../../../lib/grid/grid.module.ts"],"names":["ALIGN_ALIAS","rowReverse","columnReverse","wrapReverse","start","end","between","around","evenly","STYLES","$priority","$name","LyGrid","и","root","className","item","theme","el","this","classes","renderStyleSheet","nativeElement","classList","add","Object","defineProperty","prototype","_spacingX","val","spacingX","_createSpacingClass","undefined","_spacingY","spacingY","_spacing","spacing","xy","x","y","newSpacingClass","addStyle","spacingStyles","eachMedia","value","media","valuePadding","padding","getBreakpoint","_spacingClass","_spacingXClass","_spacingYClass","_negativeMarginClass","negativeMarginStyles","valueMargin","negativeMarginstyles","margin","width","_justify","justify","_justifyClass","justifyStyles","newJustifyStyles","justifyContent","_direction","direction","_directionClass","directionStyles","newDirectionStyles","flexDirection","_alignItems","_alignItemsClass","alignItemsStyles","newAlignItemsStyles","alignItems","Directive","args","selector","LyTheme2","ElementRef","Input","LyGridItem","gridContainer","renderer","_sr","Error","addClass","_col","newVal","_colClass","medias","StyleCollection","maxWidth","flexBasis","flexGrow","breakpoints","css","col","_order","order","_orderClass","orderStyles","newOrderStyles","ngOnInit","_updateSpacing","providers","StyleRenderer","Renderer2","NgModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\nimport {\n  LyTheme2,\n  eachMedia,\n  ThemeVariables,\n  StyleCollection,\n  StyleTemplate,\n  StyleRenderer } from '@alyle/ui';\n\nconst STYLE_PRIORITY = -1;\n\nconst ALIGN_ALIAS = {\n  rowReverse: 'row-reverse',\n  columnReverse: 'column-reverse',\n  wrapReverse: 'wrap-reverse',\n  start: 'flex-start',\n  end: 'flex-end',\n  between: 'space-between',\n  around: 'space-around',\n  evenly: 'space-evenly',\n};\n\nexport type AlignItems = 'start' | 'center' | 'end' | 'stretch' | 'baseline';\n\nexport const STYLES = () => ({\n  $priority: STYLE_PRIORITY,\n  $name: LyGrid.и,\n  root: (className: string) => `${className}{width:100%;display:flex;flex-wrap:wrap;box-sizing:border-box;}`,\n  item: (className: string) => `${className},${className} :first-child{box-sizing:border-box;}`\n});\n\nexport type Justify = 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';\nexport type Direction = 'row' | 'rowReverse' | 'column' | 'columnReverse';\n\n/**\n * Grid container\n */\n@Directive({\n  selector: 'ly-grid[container]'\n})\nexport class LyGrid {\n  static readonly и = 'LyGrid';\n  /**\n   * Styles\n   * @docs-private\n   */\n  readonly classes = this.theme.renderStyleSheet(STYLES);\n\n  private _spacing: string | number;\n  _spacingClass?: string;\n\n  private _spacingX: string | number;\n  _spacingXClass?: string;\n\n  private _spacingY: string | number;\n  _spacingYClass?: string;\n\n\n  private _negativeMarginClass?: string;\n\n  private _justify: Justify;\n  private _justifyClass?: string;\n\n  private _direction: Direction;\n  private _directionClass?: string;\n\n  private _alignItems: AlignItems;\n  private _alignItemsClass?: string;\n\n  @Input()\n  get spacingX(): string | number {\n    return this._spacingX;\n  }\n  set spacingX(val: string | number) {\n    if (val !== this.spacingX) {\n      this._spacingX = val;\n      this._createSpacingClass(undefined, val);\n    }\n  }\n\n  @Input()\n  get spacingY(): string | number {\n    return this._spacingY;\n  }\n  set spacingY(val: string | number) {\n    if (val !== this.spacingY) {\n      this._spacingY = val;\n      this._createSpacingClass(undefined, undefined, val);\n    }\n  }\n\n  /**\n   * Defines the space between the component with the `item` attribute.\n   * Support breakpoints\n   */\n  @Input()\n  get spacing(): string | number {\n    return this._spacing;\n  }\n  set spacing(val: string | number) {\n    if (val !== this.spacing) {\n      this._spacing = val;\n      this._createSpacingClass(val);\n    }\n  }\n\n  /**\n   * Only one param must be defined\n   */\n  private _createSpacingClass(xy?: string | number, x?: string | number, y?: string | number) {\n    const newSpacingClass = this.theme.addStyle(`lyGrid-spacing:${xy}·${x}·${y}`, (theme: ThemeVariables) => {\n      const val = (xy || x || y) as string | number;\n      const spacingStyles: {\n        padding?: string\n      } = {};\n      eachMedia(val, (value, media) => {\n        const valuePadding = `${(+value) / 2}px`;\n        const padding = xy != null\n          ? valuePadding\n          : x != null\n            ? `0 ${valuePadding}`\n            : `${valuePadding} 0`;\n        if (media) {\n          spacingStyles[theme.getBreakpoint(media)] = {\n            padding\n          };\n        } else {\n          spacingStyles.padding = padding;\n        }\n      });\n      return spacingStyles;\n    }, undefined, undefined, STYLE_PRIORITY);\n\n    if (xy) {\n      this._spacingClass = newSpacingClass;\n    } else {\n      if (x) {\n        this._spacingXClass = newSpacingClass;\n      }\n      if (y) {\n        this._spacingYClass = newSpacingClass;\n      }\n    }\n\n    this._negativeMarginClass = this.theme.addStyle(`lyGrid-negative-margin:${xy}·${x}·${y}`, (theme: ThemeVariables) => {\n      const val = (xy || x || y) as string | number;\n      let negativeMarginStyles: {\n        margin?: string\n        width?: string\n      };\n      eachMedia(val, (value, media) => {\n        const valueMargin = `${(-value) / 2}px`;\n        const margin = xy != null\n          ? valueMargin\n          : x != null\n            ? `0 ${valueMargin}`\n            : `${valueMargin} 0`;\n        const negativeMarginstyles: {\n          margin: string\n          width?: string\n        } = { margin };\n\n        if (xy != null || x != null) {\n          negativeMarginstyles.width = `calc(100% + ${value}px)`;\n        }\n        if (media) {\n          if (!negativeMarginStyles) {\n            negativeMarginStyles = {};\n          }\n          negativeMarginStyles[theme.getBreakpoint(media)] = negativeMarginstyles;\n        } else {\n          negativeMarginStyles = negativeMarginstyles;\n        }\n      });\n      return negativeMarginStyles!;\n    }, this.el.nativeElement, this._negativeMarginClass, STYLE_PRIORITY);\n  }\n\n  /**\n   * Defines the justify-content style property.\n   * Support breakpoints\n   */\n  @Input()\n  get justify(): Justify {\n    return this._justify;\n  }\n  set justify(val: Justify) {\n    if (val !== this.justify) {\n      this._justify = val;\n      this._justifyClass = this.theme.addStyle(`lyGrid-justify:${val}`, (theme: ThemeVariables) => {\n        let justifyStyles: {\n          justifyContent?: string\n        };\n        eachMedia(val, (value, media) => {\n          const newJustifyStyles = {\n            justifyContent: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (media) {\n            if (!justifyStyles) {\n              justifyStyles = {};\n            }\n            justifyStyles[theme.getBreakpoint(media)] = newJustifyStyles;\n          } else {\n            justifyStyles = newJustifyStyles;\n          }\n        });\n        return justifyStyles!;\n      }, this.el.nativeElement, this._justifyClass, STYLE_PRIORITY);\n    }\n  }\n\n  /**\n   * Defines the justify-content style property.\n   * Support breakpoints\n   */\n  @Input()\n  get direction(): Direction {\n    return this._direction;\n  }\n  set direction(val: Direction) {\n    if (val !== this.direction) {\n      this._direction = val;\n      this._directionClass = this.theme.addStyle(`lyGrid-direction:${val}`, (theme: ThemeVariables) => {\n        let directionStyles: {\n          flexDirection?: string\n        };\n        eachMedia(val, (value, media) => {\n          const newDirectionStyles = {\n            flexDirection: value in ALIGN_ALIAS\n            ? ALIGN_ALIAS[value]\n            : value\n          };\n          if (media) {\n            if (!directionStyles) {\n              directionStyles = {};\n            }\n            directionStyles[theme.getBreakpoint(media)] = newDirectionStyles;\n          } else {\n            directionStyles = newDirectionStyles;\n          }\n        });\n        return directionStyles!;\n      }, this.el.nativeElement, this._directionClass, STYLE_PRIORITY);\n    }\n  }\n\n  /**\n   * Defines the `align-items` style property.\n   * Support breakpoints\n   */\n  @Input()\n  set alignItems(val: AlignItems) {\n    this._alignItems = val;\n    this._alignItemsClass = this.theme.addStyle(`lyGrid.align:${val}`, (theme: ThemeVariables) => {\n      let alignItemsStyles: {\n        alignItems?: string,\n        [media: string]: {\n          alignItems?: string\n        } | string | undefined\n      };\n      eachMedia(val, (value, media) => {\n        const newAlignItemsStyles = {\n          alignItems: value in ALIGN_ALIAS\n          ? ALIGN_ALIAS[value]\n          : value\n        };\n        if (media) {\n          if (!alignItemsStyles) {\n            alignItemsStyles = {};\n          }\n          alignItemsStyles[theme.getBreakpoint(media)] = newAlignItemsStyles;\n        } else {\n          alignItemsStyles = newAlignItemsStyles;\n        }\n      });\n      return alignItemsStyles!;\n    }, this.el.nativeElement, this._alignItemsClass, STYLE_PRIORITY);\n  }\n  get alignItems() {\n    return this._alignItems;\n  }\n\n  constructor(\n    private theme: LyTheme2,\n    private el: ElementRef,\n  ) {\n    this.el.nativeElement.classList.add(this.classes.root);\n  }\n}\n\n@Directive({\n  selector: 'ly-grid[item], [ly-grid-item], [lyGridItem]',\n  providers: [\n    StyleRenderer\n  ]\n})\nexport class LyGridItem implements OnInit {\n  static readonly и = 'LyGridItem';\n  private _col: string | number;\n  private _colClass: string | null;\n\n  private _order: string | number;\n  private _orderClass: string;\n\n  /**\n   * Defines the number of grids\n   * Support breakpoints\n   */\n  @Input()\n  get col(): string | number {\n    return this._col;\n  }\n  set col(val: string | number) {\n    const newVal = this._col = val || 0;\n    this._colClass = this._sr.add(`${LyGridItem.и}--col-${newVal}`, (theme: ThemeVariables) => {\n      const medias = new StyleCollection<StyleTemplate>();\n      eachMedia(newVal, (value, media) => {\n        if (typeof value === 'string') {\n          throw new Error(`${LyGridItem.и}: '${val}' is not valid.`);\n        }\n        const maxWidth = value ? value * 100 / 12 : 100;\n        const flexBasis = value ? value * 100 / 12 : 0;\n        const flexGrow = value ? 0 : 1;\n\n        if (media) {\n          medias.add(\n            (className: string) => `@media ${theme.breakpoints[media]}{${className}{max-width:${maxWidth}%;flex-basis:${flexBasis}%;flex-grow:${flexGrow};}}`\n          );\n        } else {\n          medias.add(\n            (className: string) => `${className}{max-width:${maxWidth}%;flex-basis:${flexBasis}%;flex-grow:${flexGrow};}`\n          );\n        }\n      });\n      return medias.css;\n    }, STYLE_PRIORITY, this._colClass);\n  }\n\n  @Input('lyGridItem')\n  set gridItemCol(val: string | number) {\n    this.col = val;\n  }\n  get gridItemCol() {\n    return this.col;\n  }\n\n  /**\n   * Defines the order style property.\n   * Support breakpoints\n   */\n  @Input()\n  get order(): string | number {\n    return this._order;\n  }\n  set order(val: string | number) {\n    if (val !== this.order) {\n      this._order = val;\n      this._orderClass = this.theme.addStyle(`lyGrid-order:${val}`, (theme: ThemeVariables) => {\n        let orderStyles: {\n          order?: string | number\n        };\n        eachMedia(`${val}`, (value, media) => {\n          const newOrderStyles = {\n            order: value\n          };\n          if (media) {\n            if (!orderStyles) {\n              orderStyles = {};\n            }\n            orderStyles[theme.getBreakpoint(media)] = newOrderStyles;\n          } else {\n            orderStyles = newOrderStyles;\n          }\n        });\n        return orderStyles!;\n      }, this.el.nativeElement, this._orderClass, STYLE_PRIORITY);\n    }\n  }\n\n  constructor(\n    private gridContainer: LyGrid,\n    private el: ElementRef,\n    renderer: Renderer2,\n    private theme: LyTheme2,\n    private _sr: StyleRenderer\n  ) {\n    if (!gridContainer) {\n      throw new Error(`Require parent <ly-grid container>`);\n    }\n    renderer.addClass(el.nativeElement, this.gridContainer.classes.item);\n  }\n\n  ngOnInit() {\n    this._updateSpacing();\n  }\n\n  private _updateSpacing() {\n    if (this.gridContainer._spacingClass) {\n      this.el.nativeElement.classList.add(this.gridContainer._spacingClass);\n    } else {\n      if (this.gridContainer._spacingXClass) {\n        this.el.nativeElement.classList.add(this.gridContainer._spacingXClass);\n      }\n      if (this.gridContainer._spacingYClass) {\n        this.el.nativeElement.classList.add(this.gridContainer._spacingYClass);\n      }\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { LyGrid, LyGridItem } from './grid';\n\n@NgModule({\n  exports: [LyGrid, LyGridItem],\n  declarations: [LyGrid, LyGridItem]\n})\nexport class LyGridModule { }\n"]}