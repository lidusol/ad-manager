(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@alyle/ui'),exports, require('@angular/core'), require('@alyle/ui')) :
    typeof define === 'function' && define.amd ? define('@alyle/ui/responsive', ['@angular/core','@alyle/ui','exports', '@angular/core', '@alyle/ui'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.alyle.ui,(global.ly = global.ly || {}, global.ly.responsive = {}), global.ng.core, global.ly.core));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, ui) { 'use strict';

    var MEDIA_PRIORITY = 999;
    var styles = {
        hide: {
            display: 'none'
        }
    };
    /**
     * @deprecated use `[lyDisplay]` instead.
     */
    var MediaDirective = /** @class */ (function () {
        function MediaDirective(_renderer, _elementRef, theme) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.theme = theme;
            /**
             * Styles
             * @ignore
             */
            this.classes = this.theme.addStyleSheet(styles);
        }
        Object.defineProperty(MediaDirective.prototype, "lyShow", {
            /**
             * Shows the item when the value is resolved as true
             */
            get: function () {
                return this._show;
            },
            set: function (val) {
                this._show = val;
                this._showClass = this.theme.addStyle("lyMedia-show:" + val, function (theme) {
                    var _a;
                    return (_a = {},
                        _a[theme.getBreakpoint(val)] = {
                            display: 'block'
                        },
                        _a);
                }, this._elementRef.nativeElement, this._showClass, MEDIA_PRIORITY);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MediaDirective.prototype, "lyHide", {
            get: function () {
                return this._hide;
            },
            /**
             * Hides the item when the value is resolved as true
             */
            set: function (val) {
                this._hide = val;
                this._hideClass = this.theme.addStyle("lyMedia-hide:" + val, function (theme) {
                    var _a;
                    return (_a = {},
                        _a[theme.getBreakpoint(val)] = {
                            display: 'none'
                        },
                        _a);
                }, this._elementRef.nativeElement, this._hideClass, MEDIA_PRIORITY);
            },
            enumerable: false,
            configurable: true
        });
        MediaDirective.prototype.ngOnInit = function () {
            if (!this.lyHide) {
                this._renderer.addClass(this._elementRef.nativeElement, this.classes.hide);
            }
        };
        MediaDirective.prototype.ngOnChanges = function () {
            if (this.lyHide && this.lyShow) {
                throw new Error("use only `lyHide` or `lyShow` per element");
            }
        };
MediaDirective.ɵfac = function MediaDirective_Factory(t) { return new (t || MediaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2)); };
MediaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MediaDirective, selectors: [["", "lyShow", ""], ["", "lyHide", ""]], inputs: { lyShow: "lyShow", lyHide: "lyHide" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaDirective, [{
        type: core.Directive,
        args: [{
                selector: '[lyShow], [lyHide]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.LyTheme2 }]; }, { lyShow: [{
            type: core.Input
        }], lyHide: [{
            type: core.Input
        }] }); })();
        return MediaDirective;
    }());
    MediaDirective.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: ui.LyTheme2 }
    ]; };
    MediaDirective.propDecorators = {
        lyShow: [{ type: core.Input }],
        lyHide: [{ type: core.Input }]
    };

    /**
     * @deprecated use instead `[lyDisplay]` or `[lyStyle]`
     */
    var ResponsiveModule = /** @class */ (function () {
        function ResponsiveModule() {
        }
ResponsiveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ResponsiveModule });
ResponsiveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ResponsiveModule_Factory(t) { return new (t || ResponsiveModule)(); }, imports: [ɵngcc1.LyCommonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ResponsiveModule, { declarations: [MediaDirective], exports: [MediaDirective, ɵngcc1.LyCommonModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResponsiveModule, [{
        type: core.NgModule,
        args: [{
                declarations: [MediaDirective],
                exports: [MediaDirective, ui.LyCommonModule]
            }]
    }], function () { return []; }, null); })();
        return ResponsiveModule;
    }());

    var Breakpoints = {
        XSmall: '(max-width: 599px)',
        Small: '(min-width: 600px) and (max-width: 959px)',
        Medium: '(min-width: 960px) and (max-width: 1279px)',
        Large: '(min-width: 1280px) and (max-width: 1919px)',
        XLarge: '(min-width: 1920px)',
        Handset: '(max-width: 599px) and (orientation: portrait), ' +
            '(max-width: 959px) and (orientation: landscape)',
        Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +
            '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',
        Web: '(min-width: 840px) and (orientation: portrait), ' +
            '(min-width: 1280px) and (orientation: landscape)',
        HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',
        TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',
        WebPortrait: '(min-width: 840px) and (orientation: portrait)',
        HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',
        TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',
        WebLandscape: '(min-width: 1280px) and (orientation: landscape)',
    };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.Breakpoints = Breakpoints;
    exports.MediaDirective = MediaDirective;
    exports.ResponsiveModule = ResponsiveModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=alyle-ui-responsive.umd.js.map