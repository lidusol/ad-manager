{"version":3,"sources":["../../../lib/responsive/media.directive.ts","../../../lib/responsive/responsive.module.ts","../../../lib/responsive/media-queries.ts"],"names":["styles","hide","display","MediaDirective","_renderer","_elementRef","theme","this","classes","addStyleSheet","Object","defineProperty","prototype","_show","val","_showClass","addStyle","_a","getBreakpoint","nativeElement","_hide","_hideClass","ngOnInit","lyHide","addClass","ngOnChanges","lyShow","Error","Directive","args","selector","Renderer2","ElementRef","LyTheme2","Input","NgModule","declarations","exports","LyCommonModule","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"mappings":"8XAWA,IAEMA,EAAS,CACbC,KAAM,CACJC,QAAS,sBAiEX,SAAAC,EACUC,EACAC,EACAC,GAFAC,KAAAH,UAAAA,EACAG,KAAAF,YAAAA,EACAE,KAAAD,MAAAA,EAhDVC,KAAAC,QAAUD,KAAKD,MAAMG,cAAcT,UAKnCU,OAAAC,eACIR,EAAAS,UAAA,SAAM,KADV,WAEE,OAAOL,KAAKM,WAEd,SAAWC,GACTP,KAAKM,MAAQC,EACbP,KAAKQ,WAAaR,KAAKD,MAAMU,SAAS,gBAAgBF,GAAO,SAACR,SAC9D,OAAAW,EAAA,IACGX,EAAMY,cAAcJ,IAAO,CAC1BZ,QAAS,aAGbK,KAAKF,YAAYc,cACjBZ,KAAKQ,WA1Cc,sCAkDrBL,OAAAC,eACIR,EAAAS,UAAA,SAAM,KAcV,WACE,OAAOL,KAAKa,WAhBd,SACWN,GACTP,KAAKa,MAAQN,EACbP,KAAKc,WAAad,KAAKD,MAAMU,SAAS,gBAAgBF,GAAO,SAACR,SAC9D,OAAAW,EAAA,IACGX,EAAMY,cAAcJ,IAAO,CAC1BZ,QAAS,YAGbK,KAAKF,YAAYc,cACjBZ,KAAKc,WA5Dc,sCA2ErBlB,EAAAS,UAAAU,SAAA,WACOf,KAAKgB,QACRhB,KAAKH,UAAUoB,SAASjB,KAAKF,YAAYc,cAAeZ,KAAKC,QAAQP,OAIzEE,EAAAS,UAAAa,YAAA,WACE,GAAIlB,KAAKgB,QAAUhB,KAAKmB,OACtB,MAAM,IAAIC,MAAM,uEAxErBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kEAlBVC,EAAAA,iBACAC,EAAAA,kBAGOC,EAAAA,4CA+BNC,EAAAA,sBAqBAA,EAAAA,eClDH,iCAJCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,aAAc,CAACjC,GACfkC,QAAS,CAAClC,EAAgBmC,EAAAA,kCCTD,CACzBC,OAAQ,qBACRC,MAAO,4CACPC,OAAQ,6CACRC,MAAO,8CACPC,OAAQ,sBAERC,QAAS,kGAETC,OAAQ,iJAERC,IAAK,mGAGLC,gBAAiB,iDACjBC,eAAgB,wEAChBC,YAAa,iDAEbC,iBAAkB,kDAClBC,gBAAiB,0EACjBC,aAAc","sourcesContent":["import {\n  Directive,\n  Input,\n  OnInit,\n  OnChanges,\n  Renderer2,\n  ElementRef\n} from '@angular/core';\n\nimport { LyTheme2, ThemeVariables } from '@alyle/ui';\n\nconst MEDIA_PRIORITY = 999;\n\nconst styles = {\n  hide: {\n    display: 'none'\n  }\n};\n\n/**\n * @deprecated use `[lyDisplay]` instead.\n */\n@Directive({\n  selector: '[lyShow], [lyHide]'\n})\nexport class MediaDirective implements OnInit, OnChanges {\n  private _show: string;\n  private _showClass: string;\n  private _hide: string;\n  private _hideClass: string;\n\n  /**\n   * Styles\n   * @ignore\n   */\n  classes = this.theme.addStyleSheet(styles);\n\n  /**\n   * Shows the item when the value is resolved as true\n   */\n  @Input()\n  get lyShow(): string {\n    return this._show;\n  }\n  set lyShow(val: string) {\n    this._show = val;\n    this._showClass = this.theme.addStyle(`lyMedia-show:${val}`, (theme: ThemeVariables) =>\n    ({\n      [theme.getBreakpoint(val)]: {\n        display: 'block'\n      }\n    }),\n    this._elementRef.nativeElement,\n    this._showClass,\n    MEDIA_PRIORITY\n    );\n  }\n\n  /**\n   * Hides the item when the value is resolved as true\n   */\n  @Input()\n  set lyHide(val: string) {\n    this._hide = val;\n    this._hideClass = this.theme.addStyle(`lyMedia-hide:${val}`, (theme: ThemeVariables) =>\n    ({\n      [theme.getBreakpoint(val)]: {\n        display: 'none'\n      }\n    }),\n    this._elementRef.nativeElement,\n    this._hideClass,\n    MEDIA_PRIORITY\n    );\n  }\n\n  get lyHide(): string {\n    return this._hide;\n  }\n\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    private theme: LyTheme2\n  ) { }\n\n  ngOnInit() {\n    if (!this.lyHide) {\n      this._renderer.addClass(this._elementRef.nativeElement, this.classes.hide);\n    }\n  }\n\n  ngOnChanges() {\n    if (this.lyHide && this.lyShow) {\n      throw new Error(`use only \\`lyHide\\` or \\`lyShow\\` per element`);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MediaDirective } from './media.directive';\nimport { LyCommonModule } from '@alyle/ui';\n\n/**\n * @deprecated use instead `[lyDisplay]` or `[lyStyle]`\n */\n@NgModule({\n  declarations: [MediaDirective],\n  exports: [MediaDirective, LyCommonModule],\n})\nexport class ResponsiveModule { }\n","export const Breakpoints = {\n  XSmall: '(max-width: 599px)',\n  Small: '(min-width: 600px) and (max-width: 959px)',\n  Medium: '(min-width: 960px) and (max-width: 1279px)',\n  Large: '(min-width: 1280px) and (max-width: 1919px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599px) and (orientation: portrait), ' +\n           '(max-width: 959px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n"]}