(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@alyle/ui/color'), require('@angular/core'), require('@angular/common'), require('@angular/cdk/platform'), require('rxjs'), require('rxjs/operators'), require('@angular/platform-browser'), require('@angular/cdk/scrolling')) :
    typeof define === 'function' && define.amd ? define('@alyle/ui', ['exports', '@alyle/ui/color', '@angular/core', '@angular/common', '@angular/cdk/platform', 'rxjs', 'rxjs/operators', '@angular/platform-browser', '@angular/cdk/scrolling'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ly = global.ly || {}, global.ly.core = {}), global.ly.color, global.ng.core, global.ng.common, global.ng.cdk.platform, global.rxjs, global.rxjs.operators, global.ng.platformBrowser, global.ng.cdk.scrolling));
}(this, (function (exports, color, i0, i1, i2, rxjs, operators, platformBrowser, scrolling) { 'use strict';

    function getContrastYIQ(hexcolor) {
        var r = parseInt(hexcolor.substr(0, 2), 16);
        var g = parseInt(hexcolor.substr(2, 2), 16);
        var b = parseInt(hexcolor.substr(4, 2), 16);
        var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        return (yiq >= 128) ? 'black' : 'white';
    }

    var shadowKeyUmbraOpacity = 0.2;
    var shadowKeyPenumbraOpacity = 0.14;
    var shadowAmbientShadowOpacity = 0.12;
    var Shadows = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1],
        [0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2],
        [0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2],
        [0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0],
        [0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0],
        [0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0],
        [0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1],
        [0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2],
        [0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2],
        [0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3],
        [0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3],
        [0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4],
        [0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4],
        [0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4],
        [0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5],
        [0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5],
        [0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5],
        [0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6],
        [0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6],
        [0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7],
        [0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7],
        [0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7],
        [0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8],
        [0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8]
    ];
    function shadowBuilder(elevation, color$1) {
        var _color = color$1 || new color.Color(0, 0, 0);
        var rgb = _color.rgba();
        if (!(rgb[0] === rgb[1] && rgb[0] === rgb[2])) {
            // Darken and saturate if the color is not in the grayscale
            _color = _color.darken().saturate(2);
        }
        var colors = [
            _color.alpha(shadowKeyUmbraOpacity).css(),
            _color.alpha(shadowKeyPenumbraOpacity).css(),
            _color.alpha(shadowAmbientShadowOpacity).css()
        ];
        var e = Shadows[elevation];
        // tslint:disable-next-line:max-line-length
        return e[0] + "px " + e[1] + "px " + e[2] + "px " + e[3] + "px " + colors[0] + "," + e[4] + "px " + e[5] + "px " + e[6] + "px " + e[7] + "px " + colors[1] + "," + e[8] + "px " + e[9] + "px " + e[10] + "px " + e[11] + "px " + colors[2];
    }

    var THEME_VARIABLES = new i0.InjectionToken('ly.theme.variables');
    var IS_CORE_THEME = new i0.InjectionToken('ly.is.root');

    // Whether the current platform supports the V8 Break Iterator. The V8 check
    // is necessary to detect all Blink based browsers.
    var hasV8BreakIterator = (typeof (Intl) !== 'undefined' && Intl.v8BreakIterator);
    /**
     * Service to detect the current platform by comparing the userAgent strings and
     * checking browser-specific global properties.
     * @deprecated Use Angular CDK instead
     * `import { Platform } from '@angular/cdk/platform'`
     */
    var Platform = /** @class */ (function () {
        function Platform() {
        }
        return Platform;
    }());
    Platform.isBrowser = typeof document === 'object' && !!document;
    /** Layout Engines */
    Platform.EDGE = Platform.isBrowser && /(edge)/i.test(navigator.userAgent);
    Platform.TRIDENT = Platform.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
    // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.
    Platform.BLINK = Platform.isBrowser &&
        (!!(window.chrome || hasV8BreakIterator) && !!CSS && !Platform.EDGE && !Platform.TRIDENT);
    // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
    // ensure that Webkit runs standalone and is not used as another engine's base.
    Platform.WEBKIT = Platform.isBrowser &&
        /AppleWebKit/i.test(navigator.userAgent) && !Platform.BLINK && !Platform.EDGE && !Platform.TRIDENT;
    /** Browsers and Platform Types */
    Platform.IOS = Platform.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    // It's difficult to detect the plain Gecko engine, because most of the browsers identify
    // them self as Gecko-like browsers and modify the userAgent's according to that.
    // Since we only cover one explicit Firefox case, we can simply check for Firefox
    // instead of having an unstable check for Gecko.
    Platform.FIREFOX = Platform.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
    // Trident on mobile adds the android platform to the userAgent to trick detections.
    Platform.ANDROID = Platform.isBrowser && /android/i.test(navigator.userAgent) && !Platform.TRIDENT;
    // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
    // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
    // Safari browser should also use Webkit as its layout engine.
    Platform.SAFARI = Platform.isBrowser && /safari/i.test(navigator.userAgent) && Platform.WEBKIT;

    var supportsPassive;
    function supportsPassiveEventListeners() {
        if (supportsPassive === void 0) {
            try {
                var opts = Object.defineProperty({}, 'passive', {
                    get: function () {
                        supportsPassive = true;
                    }
                });
                window.addEventListener('testPassive', null, opts);
                window.removeEventListener('testPassive', null, opts);
            }
            catch (e) { }
        }
        return supportsPassive;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var LY_THEME_GLOBAL_VARIABLES = new i0.InjectionToken('ly.theme.global.variables');
    var LY_THEME = new i0.InjectionToken('ly_theme_config');
    var LY_THEME_NAME = new i0.InjectionToken('ly.theme.name');
    /**
     * Add a prefix to the class name that will be generated for styles.
     * Only works in production mode.
     */
    var LY_CLASS_NAME_PREFIX = new i0.InjectionToken('LY_CLASS_NAME_PREFIX');

    function memoize(fn) {
        var cache = {};
        return (function (key) {
            if (cache[key] === undefined) {
                cache[key] = fn(key);
            }
            return cache[key];
        });
    }

    /**
     * For internal use only
     * @docsPrivate
     */
    var _STYLE_MAP = new Map();
    (function (TypeStyle) {
        TypeStyle[TypeStyle["Multiple"] = 0] = "Multiple";
        TypeStyle[TypeStyle["OnlyOne"] = 1] = "OnlyOne";
        /**
         * A lyl Style
         */
        TypeStyle[TypeStyle["LylStyle"] = 2] = "LylStyle";
    })(exports.TypeStyle || (exports.TypeStyle = {}));
    var ɵ0 = function (themeId) {
        return themeId + "<~(selectors)";
    };
    var getThemeNameForSelectors = memoize(ɵ0);

    var LINE_FEED_REGEX = function () { return /(\n?[^\n]+\n?)/g; };
    var ɵ0$1 = LINE_FEED_REGEX;
    var AMPERSAND_REGEX = function () { return /&/g; };
    var ɵ1 = AMPERSAND_REGEX;
    var STYLE_TEMPLATE_REGEX = function () { return /__LY_EXPRESSION__\[[\w]+\]/g; };
    var ɵ2 = STYLE_TEMPLATE_REGEX;
    var id = 0;
    /**
     * Transform a lyl style block to CSS
     */
    var LylParse = /** @class */ (function () {
        function LylParse(_template, _className) {
            if (_className === void 0) { _className = '${className}'; }
            this._template = _template;
            this._className = _className;
        }
        LylParse.prototype.toCss = function () {
            var _this = this;
            var selectors = [];
            var selector = null;
            var rules = new Map();
            this._template
                .replace(/(\/\/\s[^\n\r]*(?:[\n\r]+|$))/g, '')
                .replace(/,\n/g, ',')
                .replace(LINE_FEED_REGEX(), function (_ex, fullLine) {
                fullLine = fullLine.trim();
                if (fullLine.endsWith('{')) {
                    if (selectors.length === 0) {
                        selectors.push([_this._className]);
                        selector = selectors[0][0];
                    }
                    else {
                        var line_1 = fullLine.slice(0, fullLine.length - 1).trim();
                        var isMediaQuery = line_1.includes('@');
                        if (isMediaQuery) {
                            selectors.push([line_1.trim()]);
                            if (!rules.has(line_1)) {
                                rules.set(line_1, []);
                            }
                        }
                        else {
                            selectors.push(line_1
                                .split(',')
                                .map(function (_) { return _.trim(); }));
                        }
                        selector = _this._resolveSelectors(selectors);
                    }
                    if (!rules.has(selector)) {
                        rules.set(selector, []);
                    }
                }
                else if (fullLine.length === 1 && fullLine.endsWith('}')) {
                    selectors.pop();
                    if (selectors.length) {
                        selector = _this._resolveSelectors(selectors);
                        if (!rules.has(selector)) {
                            rules.set(selector, []);
                        }
                    }
                }
                else if (fullLine.startsWith('/* >> ds')) {
                    selector = _this._resolveSelectors(selectors);
                    var lin = fullLine;
                    // Ignore compiled css
                    rules.get(selector).push(lin);
                    // fullLine = lin;
                    // /** For non LylModule< */else {
                    //   fullLine = `\${(${lin.slice(2, lin.length - 1)})(\`${selector}\`)}`;
                    //   rules.set(createUniqueCommentSelector('ds'), fullLine);
                    // } /** for non LylModule>  */
                }
                else if (fullLine.startsWith('...')) {
                    // for non LylModule>
                    var content = fullLine.slice(3);
                    selector = _this._resolveSelectors(selectors);
                    // Ignore compiled css
                    rules.get(selector).push("" + createUniqueCommentSelector('cc') + content);
                }
                else {
                    if (fullLine) {
                        if (fullLine.includes('undefined') || fullLine.startsWith('// ')) {
                            return '';
                        }
                        if (fullLine.endsWith(';')) {
                            throw new Error("Do not require semicolon in [" + fullLine + "]");
                        }
                        if (fullLine.includes(': ')) {
                            fullLine = fullLine.replace(': ', ':');
                        }
                        fullLine += ';';
                        rules.get(selector).push(fullLine);
                    }
                }
                return '';
            });
            // Join media queries & keyframes
            rules.forEach(function (val, key) {
                var matchArray = key.match(/(@[^\${]*(?:\${[^{]*)*){/);
                if (matchArray) {
                    var media = matchArray[1];
                    if (media !== key && val.length) {
                        var after = rules.get(media);
                        var sel_1 = key.replace(media + '{', '');
                        var newValue = after + val.reduce(function (previous, current) {
                            var last = previous[previous.length - 1];
                            // __READY__ is added to be ignored by content.startsWith ('/ * >> xx')
                            if (current.startsWith('/* >> ds')) {
                                previous.push('/* __READY__ */' + current.replace(/\|\|\&\|\|/g, sel_1));
                            }
                            else if (current.startsWith('/* >> cc')) {
                                previous.push('/* __READY__ */' + transformCC(current, sel_1));
                            }
                            else {
                                if (Array.isArray(last)) {
                                    last.push(current);
                                }
                                else {
                                    previous.push([current]);
                                }
                            }
                            return previous;
                        }, [])
                            .map(function (item) { return Array.isArray(item) ? sel_1 + "{" + item.join('') + "}" : item; }).join('');
                        // const newValue = after
                        // + sel
                        // + `{${val.join('')}}`;
                        rules.set(media, [newValue]);
                        rules.delete(key);
                    }
                }
            });
            return Array.from(rules.entries())
                .filter(function (rule) { return rule[1]; })
                .map(function (rule) {
                var sel = rule[0];
                var contents = rule[1];
                var css = [];
                var contentRendered = [];
                var set = new Set();
                for (var index = 0; index < contents.length; index++) {
                    var content = contents[index];
                    if (content) {
                        if (content.startsWith('/* >> ds')) {
                            contentRendered.push(content.replace(/\|\|\&\|\|/g, sel));
                            set.add(contentRendered);
                        }
                        else if (content.startsWith('/* >> cc')) {
                            contentRendered.push(transformCC(content, sel));
                            set.add(contentRendered);
                        }
                        else {
                            // css += `${sel}{${content}}`;
                            css.push(content);
                            set.add(css);
                        }
                    }
                }
                return Array.from(set).map(function (_) {
                    if (_ === css) {
                        return css.length
                            ? sel + "{" + css.join('') + "}"
                            : '';
                    }
                    else {
                        return _.join('');
                    }
                }).join('');
            }).join('');
        };
        LylParse.prototype._resolveSelectors = function (selectors) {
            var media = null;
            var sel = selectors
                .map(function (_) { return _.filter(function (__) {
                if (__.startsWith('@')) {
                    // save media
                    media = __;
                    return false;
                }
                return __;
            }); })
                .filter(function (_) { return _.length; })
                .reduce(function (prev, current) {
                var result = prev.map(function (item) { return current.map(function (cu) {
                    if (cu.includes('&')) {
                        return cu.replace(AMPERSAND_REGEX(), item);
                    }
                    return item + " " + cu;
                }); });
                return Array.prototype.concat.apply([], result);
            })
                .join(',');
            if (media) {
                return media + "{" + sel;
            }
            return sel;
        };
        return LylParse;
    }());
    function transformCC(content, sel) {
        content = content.replace(/\/\* >> cc[^\/\*]+\*\//g, '');
        var expression = content.slice(2, content.length - 1);
        expression = "st2c((" + expression + "), `" + sel + "`)";
        return "${" + expression + "}";
    }
    function lyl(literals) {
        var placeholders = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            placeholders[_i - 1] = arguments[_i];
        }
        return function (className) {
            var result = '';
            // Save expressions
            var exMap = {};
            for (var i = 0; i < placeholders.length; i++) {
                var placeholder = placeholders[i];
                result += literals[i];
                if (result.endsWith('...')) {
                    result = result.slice(0, result.length - 3);
                    if (typeof placeholder === 'function'
                        || placeholder instanceof StyleCollection) {
                        result += "" + createUniqueCommentSelector('ds') + st2c(placeholder, '||&||');
                    }
                }
                else {
                    var newID = "__LY_EXPRESSION__[__" + (id++).toString(36) + "]";
                    result += newID;
                    exMap[newID] = "" + placeholder;
                }
            }
            // add the last literal
            result += literals[literals.length - 1];
            var css = new LylParse(result, className).toCss();
            return css.replace(STYLE_TEMPLATE_REGEX(), function (str) {
                if (str in exMap) {
                    return exMap[str];
                }
                return '';
            });
        };
    }
    function createUniqueCommentSelector(text) {
        if (text === void 0) { text = 'id'; }
        return "/* >> " + text + " -- " + Math.floor(new Date().valueOf() * Math.random()).toString(36) + " */";
    }
    var StyleCollection = /** @class */ (function () {
        function StyleCollection() {
            var templates = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                templates[_i] = arguments[_i];
            }
            this._templates = templates;
            this.css = this.css.bind(this);
        }
        StyleCollection.prototype.add = function () {
            var _a;
            var templates = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                templates[_i] = arguments[_i];
            }
            // return new StyleCollection(...[...this._templates, ...templates]);
            (_a = this._templates).push.apply(_a, __spread(templates));
            return this;
        };
        /** Transform style */
        StyleCollection.prototype.setTransformer = function (transformer) {
            this._transformer = transformer;
            return this;
        };
        /**
         * @return StyleTemplate
         * @docs-private
         */
        StyleCollection.prototype.css = function (className) {
            var lin = '';
            var templates = this._templates;
            for (var index = 0; index < templates.length; index++) {
                var template = void 0;
                if (this._transformer) {
                    template = ((this._transformer(templates[index])));
                }
                else {
                    template = templates[index];
                }
                lin += template(className);
            }
            return lin;
        };
        return StyleCollection;
    }());
    /**
     * Transform a ...{style} to css
     * For internal use purposes only
     * @param fn StyleTemplate or StyleCollection
     * @param className class name
     */
    function st2c(fn, className) {
        if (fn == null) {
            return '';
        }
        if (fn instanceof StyleCollection) {
            return fn.css(className);
        }
        return fn(className);
    }
    // export function normalizeStyleTemplate(
    //   fn: StyleTemplate
    //   ) {
    //   if (fn.length) {
    //     return fn as StyleTemplate;
    //   } else {
    //     return (fn as (() => StyleTemplate))();
    //   }
    // }
    var StringIdGenerator = /** @class */ (function () {
        function StringIdGenerator(chars) {
            if (chars === void 0) { chars = 'abcdefghijklmnopqrstuvwxyz'; }
            this._chars = chars;
            this._nextId = [0];
        }
        StringIdGenerator.prototype.next = function () {
            var e_1, _a;
            var r = [];
            try {
                for (var _b = __values(this._nextId), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var char = _c.value;
                    r.unshift(this._chars[char]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this._increment();
            return r.join('');
        };
        StringIdGenerator.prototype._increment = function () {
            for (var i = 0; i < this._nextId.length; i++) {
                var val = ++this._nextId[i];
                if (val >= this._chars.length) {
                    this._nextId[i] = 0;
                }
                else {
                    return;
                }
            }
            this._nextId.push(0);
        };
        return StringIdGenerator;
    }());

    var LyStyleUtils = /** @class */ (function () {
        function LyStyleUtils() {
            /** Returns top */
            this.above = 'top';
            /** Returns bottom */
            this.below = 'bottom';
        }
        Object.defineProperty(LyStyleUtils.prototype, "before", {
            /** Returns left or right according to the direction */
            get: function () {
                return this.getDirection(exports.DirAlias.before);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyStyleUtils.prototype, "after", {
            /** Returns left or right according to the direction */
            get: function () {
                return this.getDirection(exports.DirAlias.after);
            },
            enumerable: false,
            configurable: true
        });
        LyStyleUtils.prototype.pxToRem = function (value) {
            var size = this.typography.fontSize / 14;
            return value / this.typography.htmlFontSize * size + "rem";
        };
        LyStyleUtils.prototype.colorOf = function (value, optional) {
            if (typeof value === 'number') {
                return new color.Color(value);
            }
            if (value[0] === '#' && value.length === 7) {
                return new color.Color(color.hexColorToInt(value));
            }
            var color$1 = get(this, value, optional);
            if (color$1) {
                return color$1;
            }
            /** Create invalid color */
            return new color.Color();
        };
        LyStyleUtils.prototype.getBreakpoint = function (key) {
            return "@media " + (this.breakpoints[key] || key);
        };
        LyStyleUtils.prototype.selectorsOf = function (styles) {
            var styleMap = _STYLE_MAP.get(styles);
            if (styleMap) {
                return styleMap.classes || styleMap[this.name];
            }
            else {
                throw Error('Classes not found');
            }
        };
        LyStyleUtils.prototype.getDirection = function (val) {
            if (val === exports.DirAlias.before) {
                return this.direction === 'rtl' ? 'right' : 'left';
            }
            else if (val === exports.DirAlias.after) {
                return this.direction === 'rtl' ? 'left' : 'right';
            }
            else if (val === 'above') {
                return 'top';
            }
            else if (val === 'below') {
                return 'bottom';
            }
            return val;
        };
        return LyStyleUtils;
    }());
    (function (Dir) {
        Dir["rtl"] = "rtl";
        Dir["ltr"] = "ltr";
    })(exports.Dir || (exports.Dir = {}));
    (function (DirAlias) {
        DirAlias["before"] = "before";
        DirAlias["after"] = "after";
    })(exports.DirAlias || (exports.DirAlias = {}));
    (function (DirPosition) {
        DirPosition["left"] = "left";
        DirPosition["right"] = "right";
    })(exports.DirPosition || (exports.DirPosition = {}));
    /**
     * get color of object
     * @param obj object
     * @param path path
     * @param optional get optional value, if not exist return default if not is string
     */
    function get(obj, path, optional) {
        if (path === 'transparent') {
            return new color.Color(0, 0, 0, 0);
        }
        var _path = path instanceof Array ? path : path.split(':');
        for (var i = 0; i < _path.length; i++) {
            var posibleOb = obj[_path[i]];
            if (posibleOb) {
                obj = posibleOb;
            }
            else {
                /** if not exist */
                return new color.Color();
            }
        }
        if (obj instanceof color.Color) {
            return obj;
        }
        else if (optional) {
            return obj[optional] || obj['default'];
        }
        else {
            return obj['default'];
        }
        // return typeof obj === 'string' ? obj as string : obj['default'] as string;
    }
    /**
     * Extract breakpoints from a string to make it a unique `StyleTemplate`
     * @param str Media Queries in inline style
     * @param transformer A function with parameters to create a `StyleTemplate`
     * @deprecated
     */
    function withMediaInline(str, transformer) {
        var styleCollection = new StyleCollection();
        if (typeof str === 'string') {
            var values = parseMediaQueriesFromString(str);
            for (var index = 0; index < values.length; index++) {
                parseMediaQueryFromString(values[index]).forEach(function (_) {
                    styleCollection.add(transformer(_[0], _[1]));
                });
            }
        }
        else if (typeof str === 'number' || str === null || str === undefined) {
            styleCollection.add(transformer(str, null));
        }
        else {
            for (var index = 0; index < str.length; index++) {
                var val = str[index];
                if (typeof val === 'number' || val === null || val === undefined) {
                    styleCollection.add(transformer(val, null));
                }
                if (typeof val === 'string') {
                    parseMediaQueryFromString(val).forEach(function (_) {
                        styleCollection.add(transformer(_[0], _[1]));
                    });
                }
            }
        }
        return styleCollection.css;
    }
    var ɵ0$2 = function (key) {
        var valItem = key.split(/\@/g);
        var strValue = valItem.shift();
        var len = valItem.length;
        var value = isNaN(+strValue) ? strValue : +strValue;
        var re = [];
        if (len) {
            for (var j = 0; j < len; j++) {
                re.push([value, valItem[j]]);
            }
        }
        else {
            re.push([value, null]);
        }
        return re;
    };
    /**
     * Extract media query from a string
     */
    var parseMediaQueryFromString = memoize(ɵ0$2);
    var ɵ1$1 = function (key) {
        return key.split(' ');
    };
    /**
     * Extract media queries from a string
     */
    var parseMediaQueriesFromString = memoize(ɵ1$1);
    /**
     * @depracated use `withMediaInline` instead.
     */
    function eachMedia(str, fn, withStyleCollection) {
        var styleCollection;
        if (withStyleCollection) {
            styleCollection = new StyleCollection();
        }
        if (typeof str === 'string') {
            var values = str.split(/\ /g);
            for (var index = 0; index < values.length; index++) {
                var valItem = values[index].split(/\@/g);
                var strValue = valItem.shift();
                var len = valItem.length;
                var value = isNaN(+strValue) ? strValue : +strValue;
                if (len) {
                    for (var j = 0; j < len; j++) {
                        resolveMediaEachItemStyle(fn, value, valItem[j], index, styleCollection);
                    }
                }
                else {
                    resolveMediaEachItemStyle(fn, value, null, index, styleCollection);
                }
            }
        }
        else if (typeof str === 'number' || typeof str === 'string' || str === null || str === undefined) {
            resolveMediaEachItemStyle(fn, str, null, 0, styleCollection);
        }
        else {
            // is array
            for (var index = 0; index < str.length; index++) {
                var val = str[index];
                if (typeof val === 'number' || typeof val === 'string') {
                    resolveMediaEachItemStyle(fn, val, null, index, styleCollection);
                }
                else {
                    var medias = val[1].split(/\@/g).filter(function (media) { return media; });
                    var strValue = val[0];
                    var len = medias.length;
                    if (len) {
                        for (var ii = 0; ii < len; ii++) {
                            resolveMediaEachItemStyle(fn, strValue, medias[ii], index, styleCollection);
                        }
                    }
                    else {
                        resolveMediaEachItemStyle(fn, strValue, null, index, styleCollection);
                    }
                }
            }
        }
        if (styleCollection) {
            return styleCollection.css;
        }
    }
    function resolveMediaEachItemStyle(fn, val, media, index, styleCollection) {
        var styl = fn(val, media, index);
        if (styleCollection && styl) {
            styleCollection.add(styl);
        }
    }
    /**
     * Simple object check.
     * @param item
     */
    function isObject(item) {
        return (item && typeof item === 'object' && !Array.isArray(item));
    }
    /**
     * Deep merge two objects.
     * @param target
     * @param ...sources
     */
    function mergeDeep(target) {
        var _a, _b;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length) {
            return target;
        }
        var source = sources.shift();
        if (isObject(target) && isObject(source)) {
            for (var key in source) {
                if (isObject(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_a = {}, _a[key] = {}, _a));
                    }
                    mergeDeep(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                }
            }
        }
        return mergeDeep.apply(void 0, __spread([target], sources));
    }
    /**
     * Simple object check.
     * @param item
     */
    function isObjectForTheme(item) {
        return (item && typeof item === 'object' && !Array.isArray(item))
            && !(item instanceof StyleCollection)
            && !(item instanceof color.Color);
    }
    function mergeThemes(target) {
        var _a, _b;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length) {
            return target;
        }
        var source = sources.shift();
        if (isObjectForTheme(target) && isObjectForTheme(source)) {
            for (var key in source) {
                if (isObjectForTheme(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_a = {}, _a[key] = {}, _a));
                    }
                    mergeThemes(target[key], source[key]);
                }
                else {
                    var targetKey = target[key];
                    var sourceKey = source[key];
                    // Merge styles
                    if (targetKey instanceof StyleCollection && typeof sourceKey === 'function') {
                        target[key] = target[key].add(sourceKey);
                    }
                    else if (sourceKey instanceof color.Color) {
                        target[key] = sourceKey;
                    }
                    else {
                        Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                    }
                }
            }
        }
        return mergeThemes.apply(void 0, __spread([target], sources));
    }

    var CoreTheme = /** @class */ (function () {
        function CoreTheme(rendererFactory, _document, platform, _classNamePrefix) {
            this.rendererFactory = rendererFactory;
            this._classNamePrefix = _classNamePrefix;
            this.themes = new Set();
            this._themeMap = new Map();
            this._styleMap = new Map();
            this._document = _document;
            if (!i0.isDevMode() && _classNamePrefix) {
                this.classNamePrefix = _classNamePrefix;
            }
            if (platform.isBrowser) {
                // Clean
                var nodes = this._document.body.querySelectorAll('ly-s-c');
                if (nodes.length) {
                    for (var index = 0; index < nodes.length; index++) {
                        var element = nodes.item(index);
                        this._document.body.removeChild(element);
                    }
                }
            }
            this.firstElement = this._document.body.firstChild;
            this.renderer = this.rendererFactory.createRenderer(null, {
                id: 'ly',
                encapsulation: i0.ViewEncapsulation.None,
                styles: [],
                data: {}
            });
        }
        CoreTheme.prototype.initializeTheme = function (themeConfig, globalVariables) {
            var _this = this;
            var allThemes = Array.isArray(themeConfig) ? themeConfig : [themeConfig];
            var themes = new Map();
            allThemes.forEach(function (item) {
                // Do not install themes that are already initialized.
                if (_this.hasTheme(item.name)) {
                    // throw new Error(`Theme '${item.name}' is already initialized.`);
                    // }
                }
                if (themes.has(item.name)) {
                    themes.get(item.name).push(item);
                }
                else {
                    themes.set(item.name, [item]);
                }
            });
            themes.forEach(function (items) {
                if (globalVariables) {
                    items.push(globalVariables);
                }
                if (items.length > 1) {
                    mergeThemes.apply(void 0, __spread([items[0]], items.slice(1)));
                }
                _this._add(items[0]);
                _this.themes.add(items[0].name);
            });
        };
        /**
         * add new theme
         * @param theme: ThemeVariables
         */
        CoreTheme.prototype._add = function (theme) {
            this._themeMap.set(theme.name, theme);
            this._styleMap.set(theme.name, new Map());
        };
        CoreTheme.prototype.hasTheme = function (theme) {
            var name = typeof theme === 'string' ? theme : theme.name;
            return this._themeMap.has(name);
        };
        CoreTheme.prototype.get = function (name) {
            return this._themeMap.get(name);
        };
        CoreTheme.prototype.updateClassName = function (element, renderer, newClassname, oldClassname) {
            if (oldClassname) {
                renderer.removeClass(element, oldClassname);
            }
            renderer.addClass(element, newClassname);
        };
        return CoreTheme;
    }());
    CoreTheme.ɵprov = i0.ɵɵdefineInjectable({ factory: function CoreTheme_Factory() { return new CoreTheme(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(LY_CLASS_NAME_PREFIX, 8)); }, token: CoreTheme, providedIn: "root" });
    CoreTheme.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    CoreTheme.ctorParameters = function () { return [
        { type: i0.RendererFactory2 },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: i2.Platform },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LY_CLASS_NAME_PREFIX,] }] }
    ]; };

    (function (YPosition) {
        YPosition["above"] = "above";
        YPosition["below"] = "below";
    })(exports.YPosition || (exports.YPosition = {}));
    (function (XPosition) {
        XPosition["before"] = "before";
        XPosition["after"] = "after";
        XPosition["left"] = "left";
        XPosition["right"] = "right";
    })(exports.XPosition || (exports.XPosition = {}));
    var INITIAL_V = 'initial';
    /**
     * @deprecated Use `OverlayPosition` instead.
     */
    var Positioning = /** @class */ (function () {
        function Positioning(placement, xPosition, yPosition, origin, overlayElement, _themeVariables, _offset, _flip) {
            if (_offset === void 0) { _offset = 0; }
            if (_flip === void 0) { _flip = true; }
            this.placement = placement;
            this.xPosition = xPosition;
            this.yPosition = yPosition;
            this.origin = origin;
            this.overlayElement = overlayElement;
            this._themeVariables = _themeVariables;
            this._offset = _offset;
            this._offsetCheck = 16;
            this._originRect = this.origin.getBoundingClientRect();
            this._overlayElementRect = this.overlayElement.getBoundingClientRect();
            this.width = INITIAL_V;
            this.height = INITIAL_V;
            var offsetCheckx2 = this._offsetCheck * 2;
            this.createPosition();
            if (_flip) {
                for (var index = 0; index < 2; index++) {
                    if (this.checkAll(false, true)) {
                        this.createPosition();
                    }
                }
            }
            // when there is not enough space
            if (this.checkAll(true, false)) {
                var requireUpdateOrigin = false;
                var _max_width = this._overlayElementRect.width + offsetCheckx2 > window.innerWidth;
                var _max_height = this._overlayElementRect.height + offsetCheckx2 > window.innerHeight;
                if (_max_height) {
                    this.y = this._offsetCheck;
                    this.height = window.innerHeight - offsetCheckx2 + "px";
                    requireUpdateOrigin = true;
                }
                else if (this.checkBottom(false, false)) {
                    this.y += this.checkBottom(true, false);
                    requireUpdateOrigin = true;
                }
                else if (this.checkTop(false, false)) {
                    this.y -= this.checkTop(true, false);
                    requireUpdateOrigin = true;
                }
                if (_max_width) {
                    this.x = this._offsetCheck;
                    this.width = window.innerWidth - offsetCheckx2 + "px";
                    requireUpdateOrigin = true;
                }
                else if (this.checkRight(false, false)) {
                    this.x += this.checkRight(true, false);
                    requireUpdateOrigin = true;
                }
                else if (this.checkLeft(false, false)) {
                    this.x -= this.checkLeft(true, false);
                    requireUpdateOrigin = true;
                }
                if (requireUpdateOrigin) {
                    this.updateOrigin();
                }
            }
            if (this._offset) {
                this.updateOrigin();
            }
            // round result
            this.x = Math.round(this.x);
            this.y = Math.round(this.y);
            this.ax = Math.round(this.ax);
            this.ay = Math.round(this.ay);
        }
        Object.defineProperty(Positioning.prototype, "offsetX", {
            get: function () {
                return typeof this._offset === 'number'
                    ? this._offset
                    : this._offset.x || 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Positioning.prototype, "offsetY", {
            get: function () {
                return typeof this._offset === 'number'
                    ? this._offset
                    : this._offset.y || 0;
            },
            enumerable: false,
            configurable: true
        });
        Positioning.prototype.createPosition = function () {
            if (this.xPosition && this.yPosition) {
                throw new Error("You can not use `xPosition` and `yPosition` together, use only one of them.");
            }
            // if ((this.xPosition || this.yPosition) && !this.placement) {
            //   throw new Error(`\`placement\` is required.`);
            // }
            var x = this._originRect.x, y = this._originRect.y, ox = 'center', oy = 'center';
            // if (this.placement) {
            if (this.placement === exports.YPosition.above) {
                x += (this._originRect.width - this._overlayElementRect.width) / 2;
                y += -this._overlayElementRect.height;
                oy = 'bottom';
                // set offset
                y -= this.offsetY;
            }
            else if (this.placement === exports.YPosition.below) {
                x += (this._originRect.width - this._overlayElementRect.width) / 2;
                y += this._originRect.height;
                oy = 'top';
                // set offset
                y += this.offsetY;
            }
            else {
                var dir = this._themeVariables.getDirection(this.placement);
                if (dir === exports.DirPosition.left) {
                    ox = '100%';
                    x += -this._overlayElementRect.width;
                    y += (this._originRect.height - this._overlayElementRect.height) / 2;
                    // set offset
                    x -= this.offsetX;
                }
                else if (dir === exports.DirPosition.right) {
                    ox = '0%';
                    x += this._originRect.width;
                    y += (this._originRect.height - this._overlayElementRect.height) / 2;
                    // set offset
                    x += this.offsetX;
                }
            }
            if (this.xPosition) {
                var dir = this._themeVariables.getDirection(this.xPosition);
                if (dir === exports.DirPosition.right) {
                    ox = '0%';
                    x = this._originRect.x;
                    // set offset
                    x += this.offsetX;
                }
                else if (dir === exports.DirPosition.left) {
                    ox = '100%';
                    x = this._originRect.x + this._originRect.width - this._overlayElementRect.width;
                    // set offset
                    x -= this.offsetX;
                }
            }
            else if (this.yPosition) {
                if (this.yPosition === exports.YPosition.above) {
                    y = this._originRect.y + this._originRect.height - this._overlayElementRect.height;
                    oy = '100%';
                    // set offset
                    y += this.offsetY;
                }
                else if (this.yPosition === exports.YPosition.below) {
                    y = this._originRect.y;
                    oy = '0%';
                    // set offset
                    y -= this.offsetY;
                }
            }
            // }
            this.x = x;
            this.y = y;
            this.ax = x;
            this.ay = y;
            this.ox = ox;
            this.oy = oy;
            return {
                x: Math.round(x),
                y: Math.round(y),
                ox: ox,
                oy: oy
            };
        };
        Positioning.prototype.checkLeft = function (returnVal, invertIfNeed) {
            var rest = this.ax - this._offsetCheck;
            if (returnVal) {
                return rest;
            }
            if (rest < 0) {
                if (invertIfNeed) {
                    if (this.placement !== exports.YPosition.above && this.placement !== exports.YPosition.below) {
                        this.placement = invertPlacement(this.placement);
                    }
                    if (this.xPosition) {
                        this.xPosition = invertPlacement(this.xPosition);
                    }
                }
                return true;
            }
            return false;
        };
        Positioning.prototype.checkRight = function (returnVal, invertIfNeed) {
            var rest = window.innerWidth - (this.ax + this._overlayElementRect.width + this._offsetCheck);
            if (returnVal) {
                return rest;
            }
            if (rest < 0) {
                if (invertIfNeed) {
                    if (this.placement !== exports.YPosition.above && this.placement !== exports.YPosition.below) {
                        this.placement = invertPlacement(this.placement);
                    }
                    if (this.xPosition) {
                        this.xPosition = invertPlacement(this.xPosition);
                    }
                }
                return true;
            }
            return false;
        };
        Positioning.prototype.checkTop = function (returnVal, invertIfNeed) {
            var rest = this.ay - this._offsetCheck;
            if (returnVal) {
                return rest;
            }
            if (rest < 0) {
                if (invertIfNeed) {
                    if (this.placement === exports.YPosition.above || this.placement === exports.YPosition.below) {
                        this.placement = invertPlacement(this.placement);
                    }
                    if (this.yPosition) {
                        this.yPosition = invertPlacement(this.yPosition);
                    }
                }
                return true;
            }
            return false;
        };
        Positioning.prototype.checkBottom = function (returnVal, invertIfNeed) {
            var rest = window.innerHeight - (this.ay + this._overlayElementRect.height + this._offsetCheck);
            if (returnVal) {
                return rest;
            }
            if (rest < 0) {
                if (invertIfNeed) {
                    if (this.placement === exports.YPosition.above || this.placement === exports.YPosition.below) {
                        this.placement = invertPlacement(this.placement);
                    }
                    if (this.yPosition) {
                        this.yPosition = invertPlacement(this.yPosition);
                    }
                }
                return true;
            }
            return false;
        };
        Positioning.prototype.checkAll = function (returnVal, invertIfNeed) {
            return this.checkLeft(returnVal, invertIfNeed) ||
                this.checkRight(returnVal, invertIfNeed) ||
                this.checkTop(returnVal, invertIfNeed) ||
                this.checkBottom(returnVal, invertIfNeed);
        };
        Positioning.prototype.updateOrigin = function () {
            // do not update if it is defined
            if (this._origin) {
                return;
            }
            this._origin = true;
            var oax = this._originRect.x + this._originRect.width / 2;
            var oay = this._originRect.y + this._originRect.height / 2;
            var vax = this.x + this._overlayElementRect.width / 2;
            var vay = this.y + this._overlayElementRect.height / 2;
            this.ox = oax - vax + this._overlayElementRect.width / 2 + "px";
            this.oy = oay - vay + this._overlayElementRect.height / 2 + "px";
        };
        return Positioning;
    }());
    function invertPlacement(placement) {
        if (placement === exports.YPosition.above) {
            return exports.YPosition.below;
        }
        else if (placement === exports.YPosition.below) {
            return exports.YPosition.above;
        }
        else if (placement === exports.XPosition.after) {
            return exports.XPosition.before;
        }
        else if (placement === exports.XPosition.before) {
            return exports.XPosition.after;
        }
        else if (placement === exports.XPosition.right) {
            return exports.XPosition.left;
        }
        else if (placement === exports.XPosition.left) {
            return exports.XPosition.right;
        }
        return placement;
    }

    var REF_REG_EXP = /\{([\w-]+)\}/g;
    var nextKeyFrameId = 0;
    var yClassID = new StringIdGenerator();
    var keyframesUniqueId = new StringIdGenerator();
    var StylesInDocument = /** @class */ (function () {
        function StylesInDocument() {
            this.styles = {};
            this.styleContainers = new Map();
            this.styleElementGlobalMap = new Map();
        }
        return StylesInDocument;
    }());
    StylesInDocument.ɵprov = i0.ɵɵdefineInjectable({ factory: function StylesInDocument_Factory() { return new StylesInDocument(); }, token: StylesInDocument, providedIn: "root" });
    StylesInDocument.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    var THEME_MAP = new Map();
    var LyTheme2 = /** @class */ (function () {
        function LyTheme2(stylesInDocument, core, themeName, themeConfig, globalVariables, _document, _ngZone, _platform) {
            this.stylesInDocument = stylesInDocument;
            this.core = core;
            this._document = _document;
            this._ngZone = _ngZone;
            this._platform = _platform;
            this._elementsMap = new Map();
            /** Event emitted when the direction has changed. */
            this._directionChanged = new rxjs.Subject();
            this.themeMap = THEME_MAP;
            /** ssr or hmr */
            this.isDevOrServer = i0.isDevMode() || !this._platform.isBrowser;
            if (themeConfig) {
                core.initializeTheme(themeConfig, globalVariables);
            }
            if (themeName) {
                this.setUpTheme(themeName);
            }
        }
        Object.defineProperty(LyTheme2.prototype, "directionChanged", {
            get: function () {
                return this._directionChanged.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyTheme2.prototype, "variables", {
            /** Get Theme Variables */
            get: function () {
                return this.config;
            },
            enumerable: false,
            configurable: true
        });
        LyTheme2.prototype.setUpTheme = function (themeName) {
            if (!this.config) {
                var theme = this.core.get(themeName);
                if (theme === undefined) {
                    throw new Error("Theme " + themeName + " not found in CoreTheme");
                }
                this.config = theme;
                this._styleMap = new Map();
                this.elements = themeName in this.stylesInDocument.styles
                    ? this.stylesInDocument.styles[themeName]
                    : this.stylesInDocument.styles[themeName] = new Map();
                if (!this.initialTheme) {
                    this.initialTheme = this.config.name;
                }
                if (!this.themeMap.has(this.initialTheme)) {
                    this.themeMap.set(this.initialTheme, {
                        base: this.initialTheme,
                        change: null
                    });
                }
            }
        };
        /**
         * Build multiple styles and render them in the DOM
         */
        LyTheme2.prototype.renderStyleSheet = function (styles) {
            return this._createStyleContent2(styles, null, null, exports.TypeStyle.Multiple);
        };
        /**
         * Build the styles and render them in the DOM
         */
        LyTheme2.prototype.renderStyle = function (styleOrId, priorityOrStyle, priority) {
            if (typeof styleOrId === 'string') {
                return this._createStyleContent2(priorityOrStyle, styleOrId, priority, exports.TypeStyle.LylStyle);
            }
            return this._createStyleContent2(styleOrId, null, priorityOrStyle, exports.TypeStyle.LylStyle);
        };
        /**
         * Add a new dynamic style, use only within @Input()
         * @param id Unique id
         * @param style Styles
         * @param el Element
         * @param instance The instance of this, this replaces the existing style with a new one when it changes
         * @param parentStyle Parent Style
         */
        LyTheme2.prototype.addStyle = function (id, style, el, instance, priority, parentStyle) {
            var newClass = this._createStyleContent2(style, id, priority, exports.TypeStyle.OnlyOne, false, parentStyle);
            if (newClass === instance) {
                return newClass;
            }
            if (el) {
                if (instance) {
                    el.classList.remove(instance);
                }
                el.classList.add(newClass);
            }
            return newClass;
        };
        /**
         * Create basic style
         * @param style Styles.
         * Note: Use only with immutable variable.
         * @param priority Priority of style
         * @param parentStyle
         */
        LyTheme2.prototype.style = function (style, priority, parentStyle) {
            return this._createStyleContent2(style, null, priority, exports.TypeStyle.OnlyOne, false, parentStyle);
        };
        LyTheme2.prototype.updateClassName = function (element, renderer, newClassname, oldClassname) {
            this.core.updateClassName(element, renderer, newClassname, oldClassname);
        };
        LyTheme2.prototype.updateClass = function (element, renderer, newClass, oldClass) {
            if (newClass === oldClass) {
                return newClass;
            }
            this.updateClassName(element, renderer, newClass, oldClass);
            return newClass;
        };
        /**
         * Change the current theme for another.
         * @param themeName theme name
         */
        LyTheme2.prototype.setTheme = function (themeName) {
            if (!this._platform.isBrowser) {
                throw new Error("`theme.setTheme('theme-name')` is only available in browser platform");
            }
            if (themeName !== this.config.name) {
                var theme = this.themeMap.get(this.initialTheme);
                if (theme == null) {
                    throw new Error("Theme " + themeName + " not found in themeMap");
                }
                theme.change = themeName;
                this.config = this.core.get(themeName);
                this._updateAllStyles();
            }
        };
        /** Toggle right-to-left/left-to-right */
        LyTheme2.prototype.toggleDirection = function () {
            var current = this.config.direction;
            this.config.direction = current === exports.Dir.ltr ? exports.Dir.rtl : exports.Dir.ltr;
            this._updateAllStyles();
            this._directionChanged.next();
        };
        LyTheme2.prototype._updateAllStyles = function () {
            var _this = this;
            this.elements.forEach(function (_, key) {
                var styleData = _STYLE_MAP.get(key);
                if (styleData.requireUpdate) {
                    _this._createStyleContent2(styleData.styles, styleData.id, styleData.priority, styleData.type, true, styleData.parentStyle);
                }
            });
        };
        /**
         * Create a simple style
         * return className
         * @param id id of style
         * @param css style object or string
         * @param priority style priority(default: 0)
         */
        LyTheme2.prototype.addSimpleStyle = function (id, css, priority, parentStyle) {
            return this._createStyleContent2(css, id, priority, exports.TypeStyle.OnlyOne, false, parentStyle);
        };
        /**
         * Add new add a new style sheet
         * @param styles styles
         * @param priority priority for style
         */
        LyTheme2.prototype.addStyleSheet = function (styles, priority) {
            return this._createStyleContent2(styles, null, priority, exports.TypeStyle.Multiple);
        };
        /**
         * Check if a style exist
         * @param stylesOrId Style or Id of a style
         */
        LyTheme2.prototype.existStyle = function (stylesOrId) {
            if (_STYLE_MAP.has(stylesOrId)) {
                var styleMap = _STYLE_MAP.get(stylesOrId);
                return !!(styleMap.classes || styleMap[this.initialTheme]);
            }
            return false;
        };
        /**
         * return selectors if exists
         *
         * e.g.
         *
         * ```ts
         * {
         *   root: '.c'
         * }
         * ```
         * @param styles id
         */
        LyTheme2.prototype.selectorsOf = function (styles) {
            var themeName = this.initialTheme;
            if (!_STYLE_MAP.has(styles)) {
                _STYLE_MAP.set(styles, {
                    isNewStyle: true,
                    styles: styles,
                    type: exports.TypeStyle.Multiple,
                    css: {},
                    id: null
                });
            }
            var styleMap = _STYLE_MAP.get(styles);
            var themeNameForSelectors = getThemeNameForSelectors(themeName);
            var classesMap = styleMap[themeNameForSelectors] || (styleMap[themeNameForSelectors] = {});
            return classesMap;
        };
        LyTheme2.prototype.selectorOf = function (styles) {
            var themeName = this.initialTheme;
            var styleMap = _STYLE_MAP.get(styles);
            return styleMap.classes || styleMap[themeName];
        };
        /**
         * For internal use only
         * @docs-private
         */
        LyTheme2.prototype._createStyleContent2 = function (styles, id, priority, type, forChangeTheme, parentStyle) {
            var newId = id || styles;
            if (!_STYLE_MAP.has(newId)) {
                _STYLE_MAP.set(newId, {
                    isNewStyle: true,
                    priority: priority,
                    styles: styles,
                    type: type,
                    css: {},
                    id: id,
                    parentStyle: parentStyle
                });
            }
            var styleMap = _STYLE_MAP.get(newId);
            var themeName = this.initialTheme;
            var isCreated = styleMap.isNewStyle || !(styleMap.classes || styleMap[themeName]);
            if (isCreated || forChangeTheme) {
                styleMap.isNewStyle = false;
                // create new style for new theme
                var css = void 0;
                var themeMap = this.themeMap.get(this.initialTheme);
                var config = this.core.get(themeMap.change || themeName);
                if (typeof styles === 'function') {
                    styleMap.requireUpdate = true;
                    css = type === exports.TypeStyle.LylStyle
                        ? createLylStyle(styleMap, styles(config, this), themeName, this.core.classNamePrefix)
                        : groupStyleToString(styleMap, styles(config, this), themeName, id, type, config, this.core.classNamePrefix);
                    if (!forChangeTheme) {
                        styleMap.css[themeName] = css;
                    }
                }
                else {
                    /** create a new id for style that does not <-<require>-> changes */
                    css = groupStyleToString(styleMap, styles, themeName, newId, type, config, this.core.classNamePrefix);
                    styleMap.css = css;
                }
                if (!this.elements.has(newId)) {
                    var newEl = this._createElementStyle(css);
                    if (styleMap.requireUpdate) {
                        // This is required for when a theme changes
                        this.elements.set(newId, newEl);
                    }
                    else if (this.isDevOrServer) {
                        // in dev mode or server it is not necessary
                        // since the styles will not change
                        this.stylesInDocument.styleElementGlobalMap.set(newId, newEl);
                    }
                    this.core.renderer.appendChild(this._createStyleContainer(styleMap.priority), newEl);
                }
                if (forChangeTheme) {
                    var el = this.elements.get(newId);
                    el.innerText = css;
                }
            }
            else if (this.isDevOrServer) {
                /**
                 * append child style if not exist in dom
                 * for ssr or hmr
                 */
                if (!this.elements.has(newId)) {
                    var _css = styleMap.css[themeName] || styleMap.css;
                    var map = this.stylesInDocument.styleElementGlobalMap;
                    if (styleMap.requireUpdate) {
                        this.elements.set(newId, this._createElementStyle(_css));
                        this.core.renderer.appendChild(this._createStyleContainer(styleMap.priority), this.elements.get(newId));
                    }
                    else if (!map.has(newId)) {
                        map.set(newId, this._createElementStyle(_css));
                        this.core.renderer.appendChild(this._createStyleContainer(styleMap.priority), map.get(newId));
                    }
                }
            }
            return styleMap.classes || styleMap[themeName];
        };
        LyTheme2.prototype._createStyleContainer = function (priority) {
            priority = priority || 0;
            var styleContainers = this.stylesInDocument.styleContainers;
            if (!styleContainers.has(priority)) {
                var el = this.core.renderer.createElement("ly-s-c");
                if (i0.isDevMode()) {
                    this.core.renderer.setAttribute(el, 'priority', "" + priority);
                }
                styleContainers.set(priority, el);
                if (styleContainers.size === 0) {
                    this.core.renderer.insertBefore(this._document.body, el, this._document.body.firstChild);
                    return el;
                }
            }
            else {
                return styleContainers.get(priority);
            }
            var refChild = this.findNode(priority);
            this.core.renderer.insertBefore(this._document.body, styleContainers.get(priority), refChild);
            return styleContainers.get(priority);
        };
        LyTheme2.prototype.findNode = function (index) {
            var styleContainers = this.stylesInDocument.styleContainers;
            var keys = (Array.from(styleContainers.keys())).sort();
            var key = keys.find(function (_) { return index < _; });
            return (key !== undefined && styleContainers.get(key)) || this.core.firstElement;
        };
        LyTheme2.prototype._createElementStyle = function (css) {
            var styleElement = this.core.renderer.createElement('style');
            var styleText = this.core.renderer.createText(css);
            this.core.renderer.appendChild(styleElement, styleText);
            return styleElement;
        };
        LyTheme2.prototype.requestAnimationFrame = function (fn) {
            if (typeof requestAnimationFrame === 'function') {
                this._ngZone.runOutsideAngular(function () {
                    requestAnimationFrame(function () {
                        fn();
                    });
                });
            }
            else {
                fn();
            }
        };
        return LyTheme2;
    }());
    LyTheme2.decorators = [
        { type: i0.Injectable }
    ];
    LyTheme2.ctorParameters = function () { return [
        { type: StylesInDocument },
        { type: CoreTheme },
        { type: undefined, decorators: [{ type: i0.Inject, args: [LY_THEME_NAME,] }] },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LY_THEME,] }] },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LY_THEME_GLOBAL_VARIABLES,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: i0.NgZone },
        { type: i2.Platform }
    ]; };
    function createLylStyle(styleMap, styles, themeName, classNamePrefix) {
        // use current class or set new
        var className;
        className = styleMap[themeName]
            || (styleMap[themeName] = i0.isDevMode()
                ? styleMap.id
                    ? toValidClassName(styleMap.id) + "-" + createNextClassId(classNamePrefix)
                    : (styleMap.styles.name || 'ii') + "-" + createNextClassId(classNamePrefix)
                : createNextClassId(classNamePrefix));
        return styles("." + className);
    }
    function groupStyleToString(styleMap, styles, themeName, id, typeStyle, themeVariables, classNamePrefix) {
        // for styles type string
        if (typeStyle === exports.TypeStyle.OnlyOne) {
            // use current class or set new
            var className = styleMap.requireUpdate
                ? styleMap[themeName] || (styleMap[themeName] = createNextClassId(classNamePrefix))
                : styleMap.classes
                    ? styleMap.classes
                    : styleMap.classes = createNextClassId(classNamePrefix);
            var rules = void 0;
            if (typeof styles === 'string') {
                rules = "." + className + "{" + styles + "}";
            }
            else {
                rules = styleToString(id, null, styles, themeVariables, className);
            }
            if (styleMap.parentStyle) {
                var styleMapOfParentStyle = _STYLE_MAP.get(styleMap.parentStyle);
                if (!styleMapOfParentStyle) {
                    throw new Error("The parentStyle not exist or is called before being created.");
                }
                return replaceRefs(rules, styleMapOfParentStyle[themeName]);
            }
            return rules;
        }
        // for multiples styles
        var themeNameForSelectors = getThemeNameForSelectors(themeName);
        var classesMap = styleMap[themeName] || (styleMap[themeName] = {});
        var selectorsMap = styleMap[themeNameForSelectors] || (styleMap[themeNameForSelectors] = {});
        var styleGroup = styles;
        var content = '';
        var name = styleGroup.$name ? styleGroup.$name + "-" : '';
        // set priority
        if (styleGroup.$priority != null) {
            styleMap.priority = styleGroup.$priority;
        }
        if (!styleMap.keys) {
            styleMap.keys = Object.keys(styles);
        }
        var keys = styleMap.keys;
        /** This loop creates the classes if necessary */
        for (var index = 0; index < keys.length; index++) {
            var key = keys[index];
            var value = styles[key];
            if (key === '$global' || key === '$keyframes') {
                continue;
            }
            if (typeof value === 'function') {
                // lyl
                // set new id if not exist
                if (!(key in classesMap)) {
                    classesMap[key] = i0.isDevMode()
                        ? toValidClassName(name + key) + "-" + createNextClassId(classNamePrefix)
                        : createNextClassId(classNamePrefix);
                }
            }
            else if (typeof value === 'object' || value === null) {
                // set new id if not exist
                if (!(key in classesMap)) {
                    classesMap[key] = i0.isDevMode()
                        ? toValidClassName("y-" + name + key + "-" + createNextClassId(classNamePrefix))
                        : createNextClassId(classNamePrefix);
                }
            }
            else {
                continue;
            }
            if (!(key in selectorsMap)) {
                selectorsMap[key] = "." + classesMap[key];
            }
        }
        for (var index = 0; index < keys.length; index++) {
            var key = keys[index];
            var value = styles[key];
            if (typeof value === 'function') {
                // lyl
                if (key === '$global') {
                    if (value.length) {
                        content += value("/* Global Style */");
                    }
                    else {
                        content += value()("/* Global Style */");
                    }
                }
                else {
                    var selector = selectorsMap[key];
                    if (value.length) {
                        content += value(selector);
                    }
                    else {
                        var st = value();
                        if (st) {
                            content += st(selector);
                        }
                    }
                }
            }
            else if (key === '$keyframes') {
                content += keyframesToString(name, classesMap, value, themeVariables);
            }
            else if (typeof value === 'object' || value === null) {
                var currentClassName = classesMap[key];
                var style = styleToString(key, styleGroup.$name, value, themeVariables, currentClassName);
                content += style;
            }
        }
        return replaceRefs(content, classesMap);
    }
    function replaceRefs(str, data) {
        return str.replace(REF_REG_EXP, function (_match, token) {
            var className = data[token];
            if (className) {
                return "." + data[token];
            }
            else {
                return data["@\u0433.->-" + token];
            }
        });
    }
    /**
     * {color:'red'} to .className{color: red}
     */
    function styleToString(key, $name, ob, themeVariables, currentKey, parentKey) {
        var content = '';
        var subContent = '';
        var keyAndValue = '';
        var newKey;
        if (parentKey) {
            if (currentKey.indexOf('&') !== -1) {
                newKey = currentKey.replace(/&/g, parentKey);
            }
            else if (currentKey.indexOf('@media') === 0) {
                newKey = "" + currentKey;
            }
            else if (currentKey === '@global' || parentKey === '@global') {
                newKey = currentKey;
            }
            else {
                newKey = parentKey + " " + currentKey;
            }
        }
        else if (key === '@global') {
            newKey = key;
        }
        else {
            newKey = "." + currentKey;
        }
        for (var styleKey in ob) {
            if (ob.hasOwnProperty(styleKey)) {
                var element = ob[styleKey];
                // Omit style with value null
                if (element != null) {
                    // Check if is Object literal
                    if (element.constructor === Object) {
                        subContent += styleToString(key, $name, element, themeVariables, styleKey, newKey);
                    }
                    else {
                        keyAndValue += convertToStyleValue(styleKey, element, themeVariables);
                    }
                }
            }
        }
        if (keyAndValue) {
            if (i0.isDevMode()) {
                var lin = '\n\n';
                if ($name) {
                    lin += "/** Style Sheet name: " + $name + " */\n";
                }
                lin += "/** Style Key: " + key + " */\n";
                content += "" + lin;
            }
            if (newKey.indexOf('@media') === 0) {
                content += "" + newKey;
                keyAndValue = parentKey + "{" + keyAndValue + "}";
            }
            else if (parentKey && parentKey === '@global') {
                content += "" + currentKey;
            }
            else {
                content += "" + newKey;
            }
            content += "{" + keyAndValue + "}";
        }
        return content + subContent;
    }
    function convertToStyleValue(key, value, themeVariables) {
        var newStyleKey = converterToCssKeyAndStyleCache(key, themeVariables);
        if (value.constructor === Array) {
            var lin = '';
            for (var index = 0; index < value.length; index++) {
                lin += newStyleKey + ":" + value[index] + ";";
            }
            return lin;
        }
        else {
            return newStyleKey + ":" + value + ";";
        }
    }
    function keyframesToString(styleName, keysMap, keyframes, themeVariables) {
        var content = '';
        for (var name in keyframes) {
            if (keyframes.hasOwnProperty(name)) {
                var keyframe = keyframes[name];
                // Sometimes the name of a class can be the same as the name of a keyframe,
                // so we add a character to be different
                var newUniqueName = "@\u0433.->-" + name;
                // set new id if not exist
                var newName = newUniqueName in keysMap
                    ? keysMap[newUniqueName]
                    : keysMap[newUniqueName] = i0.isDevMode() ? toValidClassName("" + styleName + name + "-" + createNextKeyframeId() + "-v") : createNextKeyframeId();
                content += "@keyframes " + newName + "{";
                for (var percent in keyframe) {
                    if (keyframe.hasOwnProperty(percent)) {
                        content += percent + "%{";
                        var styles = keyframe[percent];
                        for (var key in styles) {
                            if (styles.hasOwnProperty(key)) {
                                var val = styles[key];
                                content += convertToStyleValue(key, val, themeVariables);
                            }
                        }
                        content += "}";
                    }
                }
                content += "}";
            }
        }
        return content;
    }
    function converterToCssKeyAndStyle(str, themeVariables) {
        var hyphenCase = toHyphenCase(str);
        if (hyphenCase.indexOf(exports.DirAlias.before) !== -1) {
            return dirCache(str, hyphenCase, themeVariables, exports.DirAlias.before);
        }
        else if (hyphenCase.indexOf(exports.DirAlias.after) !== -1) {
            return dirCache(str, hyphenCase, themeVariables, exports.DirAlias.after);
        }
        else if (hyphenCase.indexOf(exports.YPosition.above) !== -1) {
            return YPositionCache(str, hyphenCase, themeVariables, exports.YPosition.above, TOP);
        }
        else if (hyphenCase.indexOf(exports.YPosition.below) !== -1) {
            return YPositionCache(str, hyphenCase, themeVariables, exports.YPosition.below, BOTTOM);
        }
        return hyphenCase;
    }
    function toValidClassName(str) {
        var s = str.replace(/^[0-9]|[^\w\-]/g, function (_) {
            return "_" + _.charCodeAt(0);
        });
        return s;
    }
    function toHyphenCase(str) {
        return str.replace(/([A-Z])/g, function (g) { return "-" + g[0].toLowerCase(); });
    }
    function converterToCssKeyAndStyleCache(str, themeVariables) {
        var map = STYLE_KEYS_MAP[themeVariables.direction];
        return str in map
            ? map[str]
            : map[str] = converterToCssKeyAndStyle(str, themeVariables);
    }
    var ignoreCSSKEY = {
        'break-after': 'break-after',
        'break-before': 'break-before',
        'page-break-after': 'page-break-after',
        'page-break-before': 'page-break-before'
    };
    var STYLE_KEYS_MAP = {
        rtl: Object.assign({}, ignoreCSSKEY),
        ltr: Object.assign({}, ignoreCSSKEY)
    };
    var BOTTOM = 'bottom';
    var TOP = 'top';
    function dirCache(original, val, themeVariables, dirAlias) {
        var map = STYLE_KEYS_MAP[themeVariables.direction];
        // Replace in original, for do not repeat this again
        return map[original] = val.replace(dirAlias, themeVariables.getDirection(dirAlias));
    }
    function YPositionCache(original, val, themeVariables, pos, to) {
        var map = STYLE_KEYS_MAP[themeVariables.direction];
        // Replace in original, for do not repeat this again
        return map[original] = val.replace(pos, to);
    }
    function capitalizeFirstLetter(str) {
        return str[0].toUpperCase() + str.slice(1);
    }
    function createNextClassId(classNamePrefix) {
        return classNamePrefix
            ? "" + classNamePrefix + yClassID.next()
            : yClassID.next();
    }
    function createNextKeyframeId() {
        return "k" + (nextKeyFrameId++).toString(36);
    }

    var NgTranscludeDirective = /** @class */ (function () {
        function NgTranscludeDirective(vcr, _platform) {
            this.vcr = vcr;
            this._platform = _platform;
        }
        Object.defineProperty(NgTranscludeDirective.prototype, "ngTransclude", {
            set: function (templateRef) {
                if (templateRef && !this._ngTransclude) {
                    if (this._platform.isBrowser && this._timeoutId != null) {
                        window.clearTimeout(this._timeoutId);
                        this._timeoutId = null;
                        this.vcr.clear();
                    }
                    this._ngTransclude = templateRef;
                    this.vcr.createEmbeddedView(templateRef);
                }
                else if (this._ngTransclude && !templateRef) {
                    this._ngTransclude = null;
                    this.clear();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgTranscludeDirective.prototype, "getNgTransclude", {
            get: function () {
                return this._ngTransclude;
            },
            enumerable: false,
            configurable: true
        });
        NgTranscludeDirective.prototype.clear = function () {
            var _this = this;
            if (this._platform.isBrowser && this.timeout) {
                this._timeoutId = window.setTimeout(function () {
                    _this.vcr.clear();
                    _this._timeoutId = null;
                }, this.timeout);
            }
            else {
                this.vcr.clear();
            }
        };
        NgTranscludeDirective.prototype.ngOnDestroy = function () {
            if (this._platform.isBrowser) {
                window.clearTimeout(this._timeoutId);
            }
            this.vcr.clear();
        };
        return NgTranscludeDirective;
    }());
    NgTranscludeDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[ngTransclude]',
                    exportAs: 'ngTransclude'
                },] }
    ];
    NgTranscludeDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i2.Platform }
    ]; };
    NgTranscludeDirective.propDecorators = {
        timeout: [{ type: i0.Input }],
        ngTransclude: [{ type: i0.Input }]
    };
    var NgTranscludeModule = /** @class */ (function () {
        function NgTranscludeModule() {
        }
        return NgTranscludeModule;
    }());
    NgTranscludeModule.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [NgTranscludeDirective],
                    declarations: [NgTranscludeDirective]
                },] }
    ];
    /**
     * @ignore
     */
    function getNativeElement(element) {
        return element instanceof i0.ElementRef ? element.nativeElement : element;
    }

    var DEFAULT_VALUE = '';
    var STYLE_PRIORITY = -1;
    function mixinStyleUpdater(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            class_1.prototype.setAutoContrast = function () {
                this._autoContrast = true;
            };
            class_1.prototype.updateStyle = function (element) {
                var __bg = this._superHyperInternalPropertyBg;
                var __color = this._superHyperInternalPropertyColor === 'auto'
                    ? ''
                    : this._superHyperInternalPropertyColor;
                var __raised = this._superHyperInternalPropertyRaised;
                var __elevation = this._superHyperInternalPropertyElevation;
                var __disabled = this._superHyperInternalPropertyDisabled;
                var __outlined = this._superHyperInternalPropertyOutlined;
                var __shadowColor = this._superHyperInternalPropertyShadowColor;
                var __isContrast = this._autoContrast || this._superHyperInternalPropertyColor === 'auto';
                var el = getNativeElement(element);
                var newKey = "c--" + (__bg || DEFAULT_VALUE) + "_" + (__color || DEFAULT_VALUE) + "_" + (__raised || DEFAULT_VALUE) + "_" + (__elevation || DEFAULT_VALUE) + "_" + (__disabled || DEFAULT_VALUE) + "_" + (__outlined || DEFAULT_VALUE) + "_" + (__shadowColor || DEFAULT_VALUE) + "_" + (__isContrast || DEFAULT_VALUE);
                var newClass = this._theme.renderStyle(newKey, function (theme) {
                    var sColor;
                    var sBackground;
                    var sBorder;
                    var sPointerEvents;
                    var sBoxShadow;
                    var sBoxShadowActive;
                    if (__outlined) {
                        sBorder = '1px solid currentColor';
                    }
                    if (__disabled) {
                        sColor = theme.disabled.contrast;
                        sPointerEvents = 'none';
                        if (__bg || __raised) {
                            sBackground = theme.disabled.default;
                        }
                    }
                    else {
                        if (__bg) {
                            sBackground = colorOf(theme, __bg);
                            if (__isContrast && !__color) {
                                sColor = theme.colorOf(__bg + ":contrast");
                                // Generate auto contrast if is necessary
                                if (sColor.css().includes('invalid')) {
                                    var lum = (__bg instanceof color.Color ? __bg : theme.colorOf(__bg)).luminance();
                                    sColor = lum < 0.5 ? theme.text.light : theme.text.dark;
                                }
                            }
                        }
                        if (!sColor && __color) {
                            sColor = colorOf(theme, __color);
                        }
                        if (__raised || (__elevation != null)) {
                            if (!__bg) {
                                sBackground = theme.background.primary.default;
                            }
                            var backgroundColorCss = sBackground !== __bg && colorOf(theme, __bg || 'background:primary', 'shadow');
                            var shadowColor = (__shadowColor && colorOf(theme, __shadowColor)) || backgroundColorCss || sBackground || sColor || theme.shadow;
                            if (__elevation != null) {
                                sBoxShadow = shadowBuilder(__elevation, shadowColor);
                            }
                            else {
                                sBoxShadow = shadowBuilder(3, shadowColor);
                                sBoxShadowActive = shadowBuilder(8, shadowColor);
                            }
                        }
                    }
                    return function (className) { return className + "{" + (sColor ? 'color:' + sColor : '') + ";" + (sBackground ? 'background:' + sBackground : '') + ";" + (sBorder ? 'border:' + sBorder : '') + ";" + (sPointerEvents ? 'pointer-events:' + sPointerEvents : '') + ";" + (sBoxShadow ? 'box-shadow:' + sBoxShadow : '') + ";}" + className + ":active{" + (sBoxShadowActive ? 'box-shadow:' + sBoxShadowActive : '') + ";}"; };
                }, STYLE_PRIORITY);
                el.classList.remove(this._classNameAnonymous);
                el.classList.add(newClass);
                this._classNameAnonymous = newClass;
            };
            return class_1;
        }(base));
    }
    function colorOf(theme, color$1, optional) {
        return color$1 instanceof color.Color ? color$1 : theme.colorOf(color$1, optional);
    }

    function toBoolean(value) {
        return value != null && "" + value !== 'false';
    }

    var RippleRef = /** @class */ (function () {
        function RippleRef() {
            this.state = true;
            this.timestamp = -Date.now();
            this.container = document.createElement('span');
        }
        RippleRef.prototype.end = function () {
            this.state = false;
            this.timestamp += Date.now();
        };
        return RippleRef;
    }());
    var Ripple = /** @class */ (function () {
        function Ripple(_themeVariables, _ngZone, classes, _containerElement, platform, _triggerElement) {
            this._themeVariables = _themeVariables;
            this._ngZone = _ngZone;
            this.classes = classes;
            this._containerElement = _containerElement;
            this._triggerElement = _triggerElement;
            this._eventHandlers = new Map();
            this.config = {};
            this._transitionDuration = this._themeVariables.ripple.duration;
            this._eventOptions = { passive: true };
            if (platform.isBrowser) {
                if (typeof PointerEvent === 'function' && typeof TouchEvent === 'function') {
                    this._eventHandlers.set('pointerdown', this.onPointerDown.bind(this));
                }
                else {
                    this._eventHandlers.set('mousedown', this.onPointerDown.bind(this));
                }
                this._eventHandlers.set('touchend', this.onPointerLeave.bind(this));
                this._eventHandlers.set('touchcancel', this.onPointerLeave.bind(this));
                this._eventHandlers.set('mouseup', this.onPointerLeave.bind(this));
                this._eventHandlers.set('mouseleave', this.onPointerLeave.bind(this));
                if (!_triggerElement) {
                    _triggerElement = _containerElement;
                }
                this.setTriggerElement(_triggerElement);
            }
        }
        Ripple.prototype.setConfig = function (config) {
            this.config = config;
        };
        Object.defineProperty(Ripple.prototype, "_rectContainer", {
            get: function () {
                return this._containerElement.getBoundingClientRect();
            },
            enumerable: false,
            configurable: true
        });
        Ripple.prototype.setTriggerElement = function (element) {
            var _this = this;
            if (element) {
                this._ngZone.runOutsideAngular(function () {
                    _this._eventHandlers.forEach(function (fn, type) { return element.addEventListener(type, fn, _this._eventOptions); });
                });
            }
            this._triggerElement = element;
        };
        Ripple.prototype.createRipple = function (styles) {
            this._rippleRef = new RippleRef();
            var container = this._rippleRef.container;
            container.className = this.classes.rippleContainer;
            for (var key in styles) {
                if (styles.hasOwnProperty(key)) {
                    var element = styles[key];
                    if (typeof element === 'number') {
                        container.style[key] = element + "px";
                    }
                    else {
                        container.style[key] = element;
                    }
                }
            }
            this._containerElement.appendChild(container);
            window.getComputedStyle(container).getPropertyValue('opacity');
            container.style.transform = "scale(1)";
        };
        Ripple.prototype.onPointerDown = function (event) {
            if (!this.config.disabled) {
                /**Destroy previous ripple if exist */
                this.endRipple();
                this.startRipple(event, this.config);
            }
        };
        Ripple.prototype.onPointerLeave = function (_event) {
            if (!this.config.disabled) {
                this.endRipple();
            }
        };
        Ripple.prototype.startRipple = function (event, rippleConfig) {
            var containerRect = this._rectContainer;
            var x = event.clientX, y = event.clientY;
            if (rippleConfig.centered) {
                x = containerRect.left + containerRect.width / 2;
                y = containerRect.top + containerRect.height / 2;
            }
            var left = x - containerRect.left;
            var top = y - containerRect.top;
            var radius = rippleConfig.radius === 'containerSize' ? maxSize(containerRect) / 2 : rippleConfig.radius || rippleRadius(x, y, containerRect);
            if (rippleConfig.percentageToIncrease) {
                radius += radius * rippleConfig.percentageToIncrease / 100;
            }
            this.createRipple({
                left: left - radius,
                top: top - radius,
                width: radius * 2,
                height: radius * 2,
                transitionDuration: this._transitionDuration + "ms"
            });
        };
        Ripple.prototype.runTimeoutOutsideZone = function (fn, delay) {
            if (delay === void 0) { delay = 0; }
            this._ngZone.runOutsideAngular(function () { return setTimeout(fn, delay); });
        };
        Ripple.prototype.endRipple = function () {
            var _this = this;
            var rippleRef = this._rippleRef;
            var duration = this._transitionDuration;
            if (rippleRef && rippleRef.state) {
                rippleRef.end();
                this.runTimeoutOutsideZone(function () {
                    rippleRef.container.style.opacity = '0';
                    rippleRef.container.style.transitionDuration = _this._transitionDuration / 5 + "ms";
                    // }, rippleRef.timestamp < duration ? duration : 0);
                    // }, rippleRef.timestamp < duration ? duration / (duration * .001 + 1) : 0);
                }, rippleRef.timestamp < duration ? duration * .15 : 0);
                this.runTimeoutOutsideZone(function () {
                    rippleRef.container.parentNode.removeChild(rippleRef.container);
                    // }, rippleRef.timestamp < duration ? duration * 2 : duration);
                    // }, rippleRef.timestamp < duration ? duration / (duration * .001 + 1) * 2 : duration);
                }, rippleRef.timestamp < duration ? duration * 2 : duration);
                this._rippleRef = undefined;
            }
        };
        Ripple.prototype.removeEvents = function () {
            var _this = this;
            if (this._triggerElement) {
                this._eventHandlers.forEach(function (fn, type) {
                    _this._triggerElement.removeEventListener(type, fn, _this._eventOptions);
                });
            }
        };
        return Ripple;
    }());
    function rippleRadius(x, y, rect) {
        var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
        var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
        return Math.sqrt(distX * distX + distY * distY);
    }
    function maxSize(rect) {
        return Math.max(rect.width, rect.height);
    }

    var ɵ0$3 = function (className) { return className + "{position:absolute;top:0;bottom:0;left:0;right:0;}"; }, ɵ1$2 = function (className) { return className + "{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;outline:0;-webkit-appearance:none;-moz-appearance:none;}"; }, ɵ2$1 = function (className) { return className + "{-webkit-tap-highlight-color:transparent;background-color:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;margin:0;outline:none;box-sizing:border-box;position:relative;text-decoration-line:none;-webkit-text-decoration-line:none;}" + className + "::-moz-focus-inner:{border:0;}"; };
    var LY_COMMON_STYLES = {
        fill: ɵ0$3,
        visuallyHidden: ɵ1$2,
        button: ɵ2$1
    };
    var LY_COMMON_STYLES_DEPRECATED = {
        fill: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
        },
        visuallyHidden: {
            border: 0,
            clip: 'rect(0 0 0 0)',
            height: '1px',
            margin: '-1px',
            overflow: 'hidden',
            padding: 0,
            position: 'absolute',
            width: '1px',
            outline: 0,
            '-webkit-appearance': 'none',
            '-moz-appearance': 'none'
        },
        button: {
            '-webkit-tap-highlight-color': 'transparent',
            backgroundColor: "transparent",
            border: 0,
            '-moz-appearance': 'none',
            '-webkit-appearance': 'none',
            margin: 0,
            outline: 'none',
            boxSizing: 'border-box',
            position: 'relative',
            textDecorationLine: 'none',
            '-webkit-text-decoration-line': 'none',
            '&::-moz-focus-inner': {
                border: 0
            }
        }
    };
    var LyCoreStyles = /** @class */ (function () {
        function LyCoreStyles(theme) {
            this.theme = theme;
            this.classes = this.theme.addStyleSheet(LY_COMMON_STYLES_DEPRECATED);
        }
        return LyCoreStyles;
    }());
    LyCoreStyles.ɵprov = i0.ɵɵdefineInjectable({ factory: function LyCoreStyles_Factory() { return new LyCoreStyles(i0.ɵɵinject(LyTheme2)); }, token: LyCoreStyles, providedIn: "root" });
    LyCoreStyles.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    LyCoreStyles.ctorParameters = function () { return [
        { type: LyTheme2 }
    ]; };

    var styles = function (theme) { return ({
        rippleContainer: {
            position: 'absolute',
            width: '2px',
            height: '2px',
            background: 'currentColor',
            opacity: '.2',
            borderRadius: '50%',
            transform: 'scale(0)',
            transition: "opacity " + theme.ripple.transition.opacity + ",transform " + theme.ripple.transition.transform,
            pointerEvents: 'none'
        },
        container: Object.assign(Object.assign({}, LY_COMMON_STYLES_DEPRECATED.fill), { overflow: 'hidden', pointerEvents: 'none', borderRadius: 'inherit' })
    }); };
    var LyRippleService = /** @class */ (function () {
        function LyRippleService(theme) {
            this.theme = theme;
            this.classes = this.theme.addStyleSheet(styles);
        }
        return LyRippleService;
    }());
    LyRippleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LyRippleService_Factory() { return new LyRippleService(i0.ɵɵinject(LyTheme2)); }, token: LyRippleService, providedIn: "root" });
    LyRippleService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    LyRippleService.ctorParameters = function () { return [
        { type: LyTheme2 }
    ]; };

    function mixinDisableRipple(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this._rippleConfig = {};
                return _this;
            }
            Object.defineProperty(class_1.prototype, "disableRipple", {
                get: function () { return this._disableRipple; },
                set: function (val) {
                    var _this = this;
                    if (this._platform.isBrowser && val !== this._disableRipple) {
                        var newVal = this._disableRipple = toBoolean(val);
                        // remove previous ripple if exist
                        this._removeRippleEvents();
                        if (!newVal) {
                            // add ripple
                            Promise.resolve(null).then(function () {
                                var triggerElement = _this._triggerElement.nativeElement;
                                var rippleContainer = (_this._rippleContainer && _this._rippleContainer.nativeElement) || triggerElement;
                                _this._ripple = new Ripple(_this._theme.variables, _this._ngZone, _this._theme.addStyleSheet(styles), rippleContainer, _this._platform, triggerElement);
                                _this._ripple.setConfig(_this._rippleConfig);
                            });
                        }
                    }
                },
                enumerable: false,
                configurable: true
            });
            class_1.prototype._removeRippleEvents = function () {
                if (this._platform.isBrowser) {
                    if (this._ripple) {
                        this._ripple.removeEvents();
                        this._ripple = null;
                    }
                }
            };
            return class_1;
        }(base));
    }

    function mixinDisabled(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this._superHyperInternalPropertyDisabled = false;
                return _this;
            }
            Object.defineProperty(class_1.prototype, "disabled", {
                get: function () { return this._superHyperInternalPropertyDisabled; },
                set: function (value) { this._superHyperInternalPropertyDisabled = toBoolean(value); },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    function mixinColor(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            Object.defineProperty(class_1.prototype, "color", {
                get: function () { return this._superHyperInternalPropertyColor; },
                set: function (val) {
                    var defaultColor = val;
                    if (defaultColor !== this.color) {
                        this._superHyperInternalPropertyColor = defaultColor;
                    }
                },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    function mixinBg(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            Object.defineProperty(class_1.prototype, "bg", {
                get: function () { return this._superHyperInternalPropertyBg; },
                set: function (val) {
                    var defaultColor = val;
                    if (defaultColor !== this.bg) {
                        this._superHyperInternalPropertyBg = defaultColor;
                    }
                },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    function mixinRaised(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            Object.defineProperty(class_1.prototype, "raised", {
                get: function () { return this._superHyperInternalPropertyRaised; },
                set: function (value) { this._superHyperInternalPropertyRaised = toBoolean(value); },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    function mixinOutlined(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            Object.defineProperty(class_1.prototype, "outlined", {
                get: function () { return this._superHyperInternalPropertyOutlined; },
                set: function (value) { this._superHyperInternalPropertyOutlined = toBoolean(value); },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    function mixinElevation(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            Object.defineProperty(class_1.prototype, "elevation", {
                get: function () { return this._superHyperInternalPropertyElevation; },
                set: function (value) { this._superHyperInternalPropertyElevation = value; },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    function mixinShadowColor(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            Object.defineProperty(class_1.prototype, "shadowColor", {
                get: function () { return this._superHyperInternalPropertyShadowColor; },
                set: function (value) { this._superHyperInternalPropertyShadowColor = value; },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    var DEFAULT_TAB_INDEX = 0;
    function mixinTabIndex(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this._tabIndex = DEFAULT_TAB_INDEX;
                return _this;
            }
            Object.defineProperty(class_1.prototype, "tabIndex", {
                get: function () {
                    return this.disabled ? -1 : this._tabIndex;
                },
                set: function (value) {
                    this._tabIndex = value != null ? value : DEFAULT_TAB_INDEX;
                },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    var DEFAULT_BG = 'paper';
    var LyPaperBase = /** @class */ (function () {
        function LyPaperBase(_theme, _ngZone, _platform) {
            this._theme = _theme;
            this._ngZone = _ngZone;
            this._platform = _platform;
        }
        return LyPaperBase;
    }());
    var LyPaperMixinBase = mixinStyleUpdater(mixinBg(mixinColor(mixinRaised(mixinOutlined(mixinElevation(mixinShadowColor(mixinDisableRipple(LyPaperBase))))))));
    var LyPaper = /** @class */ (function (_super) {
        __extends(LyPaper, _super);
        function LyPaper(theme, ngZone, _el, _renderer, platform) {
            var _this = _super.call(this, theme, ngZone, platform) || this;
            _this._el = _el;
            _this._renderer = _renderer;
            _this.setAutoContrast();
            _this._triggerElement = _this._el;
            _this._rippleContainer = _this._el;
            return _this;
        }
        Object.defineProperty(LyPaper.prototype, "hasText", {
            get: function () {
                return this._hasText;
            },
            set: function (val) {
                this._hasText = toBoolean(val);
            },
            enumerable: false,
            configurable: true
        });
        LyPaper.prototype.ngOnChanges = function () {
            this.updateStyle(this._el);
        };
        LyPaper.prototype.ngOnInit = function () {
            if (!this.bg && !this.hasText) {
                this.bg = DEFAULT_BG;
                this.updateStyle(this._el);
                this._renderer.addClass(this._el.nativeElement, this._theme.addSimpleStyle('lyPaper', ({
                    display: 'block'
                })));
            }
        };
        LyPaper.prototype.ngOnDestroy = function () {
            this._removeRippleEvents();
        };
        return LyPaper;
    }(LyPaperMixinBase));
    LyPaper.decorators = [
        { type: i0.Directive, args: [{
                    selector: "ly-paper, [ly-paper], [ly-text]",
                    inputs: [
                        'bg',
                        'color',
                        'raised',
                        'outlined',
                        'elevation',
                        'shadowColor',
                        'disableRipple'
                    ]
                },] }
    ];
    LyPaper.ctorParameters = function () { return [
        { type: LyTheme2 },
        { type: i0.NgZone },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i2.Platform }
    ]; };
    LyPaper.propDecorators = {
        hasText: [{ type: i0.Input, args: ['ly-text',] }]
    };

    var LyWithClass = /** @class */ (function () {
        function LyWithClass(el) {
            this.el = el;
        }
        Object.defineProperty(LyWithClass.prototype, "withClass", {
            set: function (val) {
                if (!val) {
                    throw new Error("'" + val + "' is not valid className");
                }
                this.el.nativeElement.classList.add(val);
            },
            enumerable: false,
            configurable: true
        });
        return LyWithClass;
    }());
    LyWithClass.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[withClass]'
                },] }
    ];
    LyWithClass.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    LyWithClass.propDecorators = {
        withClass: [{ type: i0.Input }]
    };

    var StyleRenderer = /** @class */ (function () {
        function StyleRenderer(_theme, _el, _renderer) {
            this._theme = _theme;
            this._renderer = _renderer;
            this._set = new Set();
            if (_el) {
                this._nEl = _el.nativeElement;
                this._set = new Set();
            }
        }
        /**
         * Build multiple styles and render them in the DOM.
         * @param styles Styles
         * @param applyRootClass If `applyToRoot` is `true` and the root property is defined,
         * it will automatically be added to the component.
         *
         * e.g.
         *
         * ```ts
         * const STYLES = () => ({
         *   root: lyl `{...}`, // this class will be added to the root component
         *   item: lyl `{...}`
         * })
         * ```
         *
         * Also accepts the name of a class.
         *
         * e.g.
         *
         * ```ts
         * renderSheet(STYLES, 'item')
         * ```
         */
        StyleRenderer.prototype.renderSheet = function (styles, applyRootClass) {
            var classes = this._theme.renderStyleSheet(styles);
            if (applyRootClass === true && classes.root) {
                this.addClass(classes.root);
                return classes;
            }
            if (applyRootClass) {
                var customClass = classes[applyRootClass];
                if (customClass) {
                    this.addClass(customClass);
                }
            }
            return classes;
        };
        /**
         * Render style and apply class name to host Component or Directive,
         * require provide `StyleRenderer` in your Component.
         * e.g.
         * @Component({
         *   ...
         *   providers: [ StyleRenderer ]
         * })
         */
        StyleRenderer.prototype.add = function (id, style, priority, oldClass) {
            var args = arguments;
            /** Class name or keyframe name */
            var className;
            var len = args.length;
            // clean
            if (len === 4 && args[3] == null) {
                len -= 1;
            }
            if (len === 3 && args[2] == null) {
                len -= 1;
            }
            if (len === 1) {
                className = this._theme._createStyleContent2(id, null, null, exports.TypeStyle.LylStyle);
            }
            else if (len === 2) {
                if (typeof id === 'string') {
                    className = this._theme._createStyleContent2(style, id, null, exports.TypeStyle.LylStyle);
                }
                else if (typeof style === 'number') {
                    className = this._theme._createStyleContent2(id, null, style, exports.TypeStyle.LylStyle);
                }
                else {
                    className = this._theme._createStyleContent2(id, null, null, exports.TypeStyle.LylStyle);
                    oldClass = style;
                }
            }
            else if (len === 3) {
                if (typeof id === 'string') {
                    if (typeof priority === 'number') {
                        // (id, style, priority)
                        className = this._theme._createStyleContent2(style, id, priority, exports.TypeStyle.LylStyle);
                    }
                    else {
                        // (id, style, oldClass)
                        className = this._theme._createStyleContent2(style, id, null, exports.TypeStyle.LylStyle);
                        oldClass = priority;
                    }
                }
                else {
                    // (style, priority, oldClass)
                    className = this._theme._createStyleContent2(id, null, style, exports.TypeStyle.LylStyle);
                    oldClass = priority;
                }
            }
            else if (len === 4) {
                className = this._theme._createStyleContent2(style, id, priority, exports.TypeStyle.LylStyle);
            }
            if (this._nEl) {
                return this.updateClass(className, oldClass);
            }
            throw new Error("StyleRenderer is required on the Component!\n"
                + "Add provider for StyleRenderer in Component or Directive:\n\n"
                + "e.g:\n\n"
                + "@Component({\n"
                + "  providers: [ StyleRenderer ]\n"
                + "})\n");
        };
        /**
         * Only render style and return class name.
         */
        StyleRenderer.prototype.render = function (styleOrId, priorityOrStyle, priority) {
            if (typeof styleOrId === 'string') {
                return this._theme._createStyleContent2(priorityOrStyle, styleOrId, priority, exports.TypeStyle.LylStyle);
            }
            return this._theme._createStyleContent2(styleOrId, null, priority, exports.TypeStyle.LylStyle);
        };
        StyleRenderer.prototype.addClass = function (className) {
            if (!this._set.has(className)) {
                this._set.add(className);
                this._renderer.addClass(this._nEl, className);
            }
        };
        StyleRenderer.prototype.removeClass = function (className) {
            if (className && this._set.has(className)) {
                this._set.delete(className);
                this._renderer.removeClass(this._nEl, className);
            }
        };
        StyleRenderer.prototype.removeClasses = function (rawClassVal) {
            var _this = this;
            if (rawClassVal) {
                rawClassVal.forEach(function (klass) { return _this.removeClass(klass); });
            }
        };
        StyleRenderer.prototype.toggleClass = function (className, enabled) {
            if (enabled) {
                this.addClass(className);
            }
            else {
                this.removeClass(className);
            }
        };
        StyleRenderer.prototype.updateClass = function (newClassName, oldClassName) {
            this.removeClass(oldClassName);
            this.addClass(newClassName);
            return newClassName;
        };
        return StyleRenderer;
    }());
    StyleRenderer.decorators = [
        { type: i0.Injectable }
    ];
    StyleRenderer.ctorParameters = function () { return [
        { type: LyTheme2 },
        { type: i0.ElementRef, decorators: [{ type: i0.Optional }] },
        { type: i0.Renderer2, decorators: [{ type: i0.Optional }] }
    ]; };
    /**
     * Parameter decorator to be used for create Dynamic style together with `@Input`
     * @param style style
     * @param priority priority of style, default: 0
     * @decorator
     */
    function Style(style, priority) {
        return function (target, propertyKey, descriptor) {
            target.constructor[propertyKey] = style;
            // const _propertyKeyClass = `_${propertyKey}Class`;
            var _propertyKey = "_" + propertyKey;
            if (descriptor) {
                var set_1 = descriptor.set;
                descriptor.set = function (val) {
                    createStyle(this, propertyKey, val, style, priority);
                    set_1.call(this, val);
                };
                if (!descriptor.get) {
                    descriptor.get = function () {
                        return this[_propertyKey];
                    };
                }
            }
            else {
                Object.defineProperty(target, propertyKey, {
                    configurable: true,
                    enumerable: true,
                    set: function (val) {
                        createStyle(this, propertyKey, val, style, priority);
                    },
                    get: function () {
                        return this[_propertyKey];
                    }
                });
            }
        };
    }
    /**
     * Create a responsive style for component with a key
     * @param c The component
     * @param propertyKeyConfig Style key
     * @param value value
     * @param style style template
     * @param priority priority of style
     */
    function createStyle(c, propertyKeyConfig, value, style, priority) {
        var propertyKey = typeof propertyKeyConfig === 'string' ? propertyKeyConfig : propertyKeyConfig.key;
        var _propertyKeyClass = "_" + propertyKey + "Class";
        var _propertyKey = "_" + propertyKey;
        var oldValue = c[_propertyKey];
        c[_propertyKey] = value;
        if (value === null || value === undefined || value === false) {
            // Remove classes
            var classesForRemove = c[_propertyKeyClass];
            if (classesForRemove && classesForRemove.length) {
                classesForRemove.forEach(function (className) { return c.sRenderer.removeClass(className); });
            }
        }
        else if (typeof value === 'string') {
            if (oldValue !== value) {
                c.sRenderer.removeClasses(c[_propertyKeyClass]);
                var values = parseMediaQueriesFromString(value);
                for (var index = 0; index < values.length; index++) {
                    var valAndMediaKey = values[index];
                    parseMediaQueryFromString(valAndMediaKey).forEach(function (_) {
                        _renderStyle(c, propertyKeyConfig, _[0], _[1], style, priority);
                    });
                }
            }
        }
        else if (typeof value === 'number' || value === true) {
            if (oldValue !== value) {
                c.sRenderer.removeClasses(c[_propertyKeyClass]);
                _renderStyle(c, propertyKeyConfig, value, null, style, priority);
            }
        }
        else if (oldValue !== "" + value) {
            c.sRenderer.removeClasses(c[_propertyKeyClass]);
            // Is array
            for (var index = 0; index < value.length; index++) {
                var val = value[index];
                if (typeof val === 'number' || val === null || val === undefined) {
                    _renderStyle(c, propertyKeyConfig, val, null, style, priority);
                }
                else if (typeof val === 'string') {
                    parseMediaQueryFromString(val).forEach(function (_) {
                        _renderStyle(c, propertyKeyConfig, _[0], _[1], style, priority);
                    });
                }
            }
        }
    }
    function _renderStyle(c, propertyKeyConfig, val, media, style, priority) {
        var propertyKey = typeof propertyKeyConfig === 'string' ? propertyKeyConfig : propertyKeyConfig.key;
        var _propertyKeyClass = "_" + propertyKey + "Class";
        var styleTemplate = style(val, media, c);
        if (styleTemplate == null) {
            // Remove classes
            var classesForRemove = c[_propertyKeyClass];
            if (classesForRemove && classesForRemove.length) {
                classesForRemove.forEach(function (className) { return c.sRenderer.removeClass(className); });
                c[_propertyKeyClass] = [];
            }
        }
        else {
            if (c[_propertyKeyClass] === undefined) {
                c[_propertyKeyClass] = [];
            }
            c[_propertyKeyClass].push(c.sRenderer.add((typeof propertyKeyConfig === 'string' ? getComponentName(c) : propertyKeyConfig.и) + "--" + propertyKey + "-" + (media ? val + '_' + media : val), styleTemplate, getComponentPriority(c, priority), c[_propertyKeyClass]));
        }
    }
    function getComponentName(comp) {
        return comp.constructor.и || comp.constructor.name || 'unnamed';
    }
    function getComponentPriority(comp, priority) {
        var _a, _b;
        return (_b = (_a = priority !== null && priority !== void 0 ? priority : comp.$priority) !== null && _a !== void 0 ? _a : comp.constructor.$priority) !== null && _b !== void 0 ? _b : 0;
    }

    var STYLE_PRIORITY$1 = -0.5;
    var ɵ0$4 = function (value) { return function (theme) { return (function (className) { return className + "{color:" + theme.colorOf(value) + ";}"; }); }; }, ɵ1$3 = function (value) { return function (theme) { return (function (className) { return className + "{background:" + theme.colorOf(value) + ";}"; }); }; }, ɵ2$2 = function (value, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{padding:" + to8Px(value) + ";}}"; });
    }; }, ɵ3 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints, after = _a.after;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{padding-" + after + ":" + to8Px(val) + ";}}"; });
    }; }, ɵ4 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints, before = _a.before;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{padding-" + before + ":" + to8Px(val) + ";}}"; });
    }; }, ɵ5 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{padding-top:" + to8Px(val) + ";}}"; });
    }; }, ɵ6 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{padding-bottom:" + to8Px(val) + ";}}"; });
    }; }, ɵ7 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{padding:0 " + to8Px(val) + ";}}"; });
    }; }, ɵ8 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{padding:" + to8Px(val) + " 0;}}"; });
    }; }, ɵ9 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{margin:" + to8Px(val) + ";}}"; });
    }; }, ɵ10 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints, after = _a.after;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{margin-" + after + ":" + to8Px(val) + ";}}"; });
    }; }, ɵ11 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints, before = _a.before;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{margin-" + before + ":" + to8Px(val) + ";}}"; });
    }; }, ɵ12 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{margin-top:" + to8Px(val) + ";}}"; });
    }; }, ɵ13 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{margin-bottom:" + to8Px(val) + ";}}"; });
    }; }, ɵ14 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{margin:0 " + to8Px(val) + ";}}"; });
    }; }, ɵ15 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{margin:" + to8Px(val) + " 0;}}"; });
    }; }, ɵ16 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{width:" + transform(val) + ";}}"; });
    }; }, ɵ17 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{max-width:" + transform(val) + ";}}"; });
    }; }, ɵ18 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{min-width:" + transform(val) + ";}}"; });
    }; }, ɵ19 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{height:" + transform(val) + ";}}"; });
    }; }, ɵ20 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{max-height:" + transform(val) + ";}}"; });
    }; }, ɵ21 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{min-height:" + transform(val) + ";}}"; });
    }; }, ɵ22 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{display:" + val + ";}}"; });
    }; }, ɵ23 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{flex:" + val + ";}}"; });
    }; }, ɵ24 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{flex-basis:" + val + ";}}"; });
    }; }, ɵ25 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{flex-direction:" + val + ";}}"; });
    }; }, ɵ26 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{flex-grow:" + val + ";}}"; });
    }; }, ɵ27 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{flex-self:" + val + ";}}"; });
    }; }, ɵ28 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{flex-shrink:" + val + ";}}"; });
    }; }, ɵ29 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{flex-wrap:" + val + ";}}"; });
    }; }, ɵ30 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{justify-content:" + val + ";}}"; });
    }; }, ɵ31 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{justify-items:" + val + ";}}"; });
    }; }, ɵ32 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{justify-self:" + val + ";}}"; });
    }; }, ɵ33 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{align-content:" + val + ";}}"; });
    }; }, ɵ34 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{align-items:" + val + ";}}"; });
    }; }, ɵ35 = function (val, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && breakpoints[media]) || 'all') + "{" + className + "{order:" + val + ";}}"; });
    }; }, ɵ36 = function (value, media) { return function (_a) {
        var breakpoints = _a.breakpoints;
        return (function (className) { return "@media " + ((media && (breakpoints[media] || media)) || 'all') + "{" + className + "{" + value + ";}}"; });
    }; };
    /**
     * @dynamic
     */
    var LyStyle = /** @class */ (function () {
        function LyStyle(sRenderer) {
            this.sRenderer = sRenderer;
        }
        Object.defineProperty(LyStyle.prototype, "size", {
            set: function (value) {
                this.width = value;
                this.height = value;
            },
            enumerable: false,
            configurable: true
        });
        return LyStyle;
    }());
    /** @docs-private */
    LyStyle.и = 'LyStyle';
    LyStyle.$priority = STYLE_PRIORITY$1;
    LyStyle.decorators = [
        { type: i0.Directive, args: [{
                    selector: "[lyStyle],\n              [lyColor],\n              [lyP], [lyPf], [lyPe], [lyPt], [lyPb], [lyPx], [lyPy],\n              [lyM], [lyMf], [lyMe], [lyMt], [lyMb], [lyMx], [lyMy],\n              [lySize],\n              [lyWidth], [lyMaxWidth], [lyMinWidth],\n              [lyHeight], [lyMaxHeight], [lyMinHeight],\n              [lyDisplay],\n              [lyFlex],\n              [lyFlexBasis],\n              [lyFlexDirection],\n              [lyFlexGrow],\n              [lyFlexSelf],\n              [lyFlexShrink],\n              [lyFlexWrap],\n              [lyJustifyContent],\n              [lyJustifyItems],\n              [lyJustifySelf],\n              [lyAlignContent],\n              [lyAlignItems],\n              [lyOrder]",
                    providers: [
                        StyleRenderer
                    ],
                    inputs: [
                        'lyStyle',
                        'color: lyColor',
                        'bg: lyBg',
                        'p: lyP', 'pf: lyPf', 'pe: lyPe', 'pt: lyPt', 'pb: lyPb', 'px: lyPx', 'py: lyPy',
                        'm: lyM', 'mf: lyMf', 'me: lyMe', 'mt: lyMt', 'mb: lyMb', 'mx: lyMx', 'my: lyMy',
                        'size: lySize',
                        'width: lyWidth', 'maxWidth: lyMaxWidth', 'minWidth: lyMinWidth',
                        'height: lyHeight', 'maxHeight: lyMaxHeight', 'minHeight: lyMinHeight',
                        'display: lyDisplay',
                        'flex: lyFlex',
                        'flexBasis: lyFlexBasis',
                        'flexDirection: lyFlexDirection',
                        'flexGrow: lyFlexGrow',
                        'flexSelf: lyFlexSelf',
                        'flexShrink: lyFlexShrink',
                        'flexWrap: lyFlexWrap',
                        'justifyContent: lyJustifyContent',
                        'justifyItems: lyJustifyItems',
                        'justifySelf: lyJustifySelf',
                        'alignContent: lyAlignContent',
                        'alignItems: lyAlignItems',
                        'order: lyOrder'
                    ]
                },] }
    ];
    LyStyle.ctorParameters = function () { return [
        { type: StyleRenderer }
    ]; };
    __decorate([
        Style(ɵ0$4)
    ], LyStyle.prototype, "color", void 0);
    __decorate([
        Style(ɵ1$3)
    ], LyStyle.prototype, "bg", void 0);
    __decorate([
        Style(ɵ2$2)
    ], LyStyle.prototype, "p", void 0);
    __decorate([
        Style(ɵ3)
    ], LyStyle.prototype, "pf", void 0);
    __decorate([
        Style(ɵ4)
    ], LyStyle.prototype, "pe", void 0);
    __decorate([
        Style(ɵ5)
    ], LyStyle.prototype, "pt", void 0);
    __decorate([
        Style(ɵ6)
    ], LyStyle.prototype, "pb", void 0);
    __decorate([
        Style(ɵ7)
    ], LyStyle.prototype, "px", void 0);
    __decorate([
        Style(ɵ8)
    ], LyStyle.prototype, "py", void 0);
    __decorate([
        Style(ɵ9)
    ], LyStyle.prototype, "m", void 0);
    __decorate([
        Style(ɵ10)
    ], LyStyle.prototype, "mf", void 0);
    __decorate([
        Style(ɵ11)
    ], LyStyle.prototype, "me", void 0);
    __decorate([
        Style(ɵ12)
    ], LyStyle.prototype, "mt", void 0);
    __decorate([
        Style(ɵ13)
    ], LyStyle.prototype, "mb", void 0);
    __decorate([
        Style(ɵ14)
    ], LyStyle.prototype, "mx", void 0);
    __decorate([
        Style(ɵ15)
    ], LyStyle.prototype, "my", void 0);
    __decorate([
        Style(ɵ16)
    ], LyStyle.prototype, "width", void 0);
    __decorate([
        Style(ɵ17)
    ], LyStyle.prototype, "maxWidth", void 0);
    __decorate([
        Style(ɵ18)
    ], LyStyle.prototype, "minWidth", void 0);
    __decorate([
        Style(ɵ19)
    ], LyStyle.prototype, "height", void 0);
    __decorate([
        Style(ɵ20)
    ], LyStyle.prototype, "maxHeight", void 0);
    __decorate([
        Style(ɵ21)
    ], LyStyle.prototype, "minHeight", void 0);
    __decorate([
        Style(ɵ22)
    ], LyStyle.prototype, "display", void 0);
    __decorate([
        Style(ɵ23)
    ], LyStyle.prototype, "flex", void 0);
    __decorate([
        Style(ɵ24)
    ], LyStyle.prototype, "flexBasis", void 0);
    __decorate([
        Style(ɵ25)
    ], LyStyle.prototype, "flexDirection", void 0);
    __decorate([
        Style(ɵ26)
    ], LyStyle.prototype, "flexGrow", void 0);
    __decorate([
        Style(ɵ27)
    ], LyStyle.prototype, "flexSelf", void 0);
    __decorate([
        Style(ɵ28)
    ], LyStyle.prototype, "flexShrink", void 0);
    __decorate([
        Style(ɵ29)
    ], LyStyle.prototype, "flexWrap", void 0);
    __decorate([
        Style(ɵ30)
    ], LyStyle.prototype, "justifyContent", void 0);
    __decorate([
        Style(ɵ31)
    ], LyStyle.prototype, "justifyItems", void 0);
    __decorate([
        Style(ɵ32)
    ], LyStyle.prototype, "justifySelf", void 0);
    __decorate([
        Style(ɵ33)
    ], LyStyle.prototype, "alignContent", void 0);
    __decorate([
        Style(ɵ34)
    ], LyStyle.prototype, "alignItems", void 0);
    __decorate([
        Style(ɵ35)
    ], LyStyle.prototype, "order", void 0);
    __decorate([
        Style(ɵ36)
    ], LyStyle.prototype, "lyStyle", void 0);
    /**
     * @dynamic
     * @deprecated
     * Spacing
     * [p], [pf], [pe], [pt], [pb], [px], [py],
     * [m], [mf], [me], [mt], [mb], [mx], [my],
     * Sizing
     * [size],
     * [width], [maxWidth], [minWidth],
     * [height], [maxHeight], [minHeight],
     * Others
     * [lyStyle]
     */
    var LyStyleDeprecated = /** @class */ (function (_super) {
        __extends(LyStyleDeprecated, _super);
        function LyStyleDeprecated(sRenderer, _el) {
            var _this = _super.call(this, sRenderer) || this;
            _this._el = _el;
            return _this;
        }
        LyStyleDeprecated.prototype.ngOnChanges = function (changes) {
            if (i0.isDevMode()) {
                for (var key in changes) {
                    if (changes.hasOwnProperty(key)) {
                        var message = "[" + key + "] is deprecated, use [ly" + (key.charAt(0).toUpperCase() + key.slice(1)) + "] instead.";
                        console.warn({
                            message: message,
                            element: this._el.nativeElement
                        });
                    }
                }
            }
        };
        return LyStyleDeprecated;
    }(LyStyle));
    LyStyleDeprecated.decorators = [
        { type: i0.Directive, args: [{
                    selector: "\n              [p], [pf], [pe], [pt], [pb], [px], [py],\n              [m], [mf], [me], [mt], [mb], [mx], [my],\n              [size]:not([ly-button]),\n              [width]:not(svg):not(canvas):not(embed):not(iframe):not(img):not(input):not(object):not(video),\n              [maxWidth], [minWidth],\n              [height]:not(svg):not(canvas):not(embed):not(iframe):not(img):not(input):not(object):not(video),\n              [maxHeight], [minHeight],\n              [display],\n              [flex],\n              [flexBasis],\n              [flexDirection],\n              [flexGrow],\n              [flexSelf],\n              [flexShrink],\n              [flexWrap],\n              [justifyContent],\n              [justifyItems],\n              [justifySelf],\n              [alignContent],\n              [alignItems],\n              [order]",
                    providers: [
                        StyleRenderer
                    ],
                    inputs: [
                        'p', 'pf', 'pe', 'pt', 'pb', 'px', 'py',
                        'm', 'mf', 'me', 'mt', 'mb', 'mx', 'my',
                        'size',
                        'width', 'maxWidth', 'minWidth',
                        'height', 'maxHeight', 'minHeight',
                        'display',
                        'flex',
                        'flexBasis',
                        'flexDirection',
                        'flexGrow',
                        'flexSelf',
                        'flexShrink',
                        'flexWrap',
                        'justifyContent',
                        'justifyItems',
                        'justifySelf',
                        'alignContent',
                        'alignItems',
                        'order',
                    ]
                },] }
    ];
    LyStyleDeprecated.ctorParameters = function () { return [
        { type: StyleRenderer },
        { type: i0.ElementRef }
    ]; };
    /**
     * Convert to px if the value is a number, otherwise leave it as is
     * @docs-private
     */
    function to8Px(val) {
        return typeof val === 'number'
            ? val * 8 + "px"
            : val.includes(' ')
                ? val.split(' ').map(function (_) { return strTo8Px(_); }).join(' ')
                : strTo8Px(val);
    }
    function strTo8Px(val) {
        var num = +val;
        return isNaN(num) ? val : num * 8 + "px";
    }
    function strToPx(val) {
        var num = +val;
        return isNaN(num) ? val : num + "px";
    }
    function transform(value) {
        return value <= 1
            ? value * 100 + "%"
            : typeof value === 'number'
                ? value + "px"
                : value.includes(' ')
                    ? value.split(' ').map(function (_) { return strToPx(_); }).join(' ')
                    : strToPx(value);
    }

    var LyCommonModule = /** @class */ (function () {
        function LyCommonModule() {
        }
        return LyCommonModule;
    }());
    LyCommonModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [LyStyle, LyWithClass, LyPaper],
                    exports: [LyStyle, LyWithClass, LyPaper]
                },] }
    ];
    /**
     * @deprecated
     */
    var LyStyleDeprecatedModule = /** @class */ (function () {
        function LyStyleDeprecatedModule() {
        }
        return LyStyleDeprecatedModule;
    }());
    LyStyleDeprecatedModule.decorators = [
        { type: i0.NgModule, args: [{
                    exports: [LyStyleDeprecated],
                    declarations: [LyStyleDeprecated]
                },] }
    ];

    function defaultEntry(value, defaultValue) {
        return value !== '' && value !== void 0 ? value : defaultValue;
    }

    /**
     * @experimental
     * Element to move, time in ms to animate
     */
    function scrollTo(element, duration) {
        var e = document.documentElement;
        if (e.scrollTop === 0) {
            var t = e.scrollTop;
            ++e.scrollTop;
            e = t + 1 === e.scrollTop-- ? e : document.body;
        }
        scrollToFromTo(e, e.scrollTop, element, duration);
    }
    // Element to move, element or px from, element or px to, time in ms to animate
    function scrollToFromTo(element, from, to, duration) {
        if (duration <= 0) {
            return;
        }
        if (typeof from === 'object') {
            from = from.offsetTop;
        }
        if (typeof to === 'object') {
            to = to.offsetTop;
        }
        createScrollWithAnimation(element, from, to, 0, 1 / duration, 20, easeOutCuaic);
    }
    /**
     * @experimental
     */
    function scrollWithAnimation(element, to, duration, p, motion) {
        var _motion = motion || easeOutCuaic;
        var scrollLeft = element.scrollLeft;
        return createScrollWithAnimation(element, scrollLeft, to, 0, 1 / duration, 20, _motion, p);
    }
    function createScrollWithAnimation(element, xFrom, xTo, t01, speed, step, motion, p) {
        var scrollT = p === 'y' ? 'scrollTop' : 'scrollLeft';
        if (t01 < 0 || t01 > 1 || speed <= 0) {
            element[scrollT] = xTo;
            return;
        }
        element[scrollT] = xFrom - (xFrom - xTo) * motion(t01);
        t01 += speed * step;
        setTimeout(function () {
            createScrollWithAnimation(element, xFrom, xTo, t01, speed, step, motion, p);
        }, step);
    }
    // function linearTween(t: number) {
    //   return t;
    // }
    // function easeInQuad(t: number) {
    //   return t * t;
    // }
    // function easeOutQuad(t: number) {
    //   return -t * (t - 2);
    // }
    // function easeInOutQuad(t: number) {
    //   t /= 0.5;
    //   if (t < 1) {return t * t / 2; }
    //   t--;
    //   return (t * (t - 2) - 1) / 2;
    // }
    // function easeInCuaic(t: number) {
    //   return t * t * t;
    // }
    function easeOutCuaic(t) {
        t--;
        return t * t * t + 1;
    }
    // function easeInOutCuaic(t: number) {
    //   t /= 0.5;
    //   if (t < 1) {return t * t * t / 2; }
    //   t -= 2;
    //   return (t * t * t + 2) / 2;
    // }
    // function easeInQuart(t: number) {
    //   return t * t * t * t;
    // }
    // function easeOutQuart(t: number) {
    //   t--;
    //   return -(t * t * t * t - 1);
    // }
    // function easeInOutQuart(t: number) {
    //   t /= 0.5;
    //   if (t < 1) {return 0.5 * t * t * t * t; }
    //   t -= 2;
    //   return -(t * t * t * t - 2) / 2;
    // }
    // function easeInQuint(t: number) {
    //   return t * t * t * t * t;
    // }
    // function easeOutQuint(t: number) {
    //   t--;
    //   return t * t * t * t * t + 1;
    // }
    // function easeInOutQuint(t: number) {
    //   t /= 0.5;
    //   if (t < 1) {return t * t * t * t * t / 2; }
    //   t -= 2;
    //   return (t * t * t * t * t + 2) / 2;
    // }
    // function easeInSine(t: number) {
    //   return -Math.cos(t / (Math.PI / 2)) + 1;
    // }
    // function easeOutSine(t: number) {
    //   return Math.sin(t / (Math.PI / 2));
    // }
    // function easeInOutSine(t: number) {
    //   return -(Math.cos(Math.PI * t) - 1) / 2;
    // }
    // function easeInExpo(t: number) {
    //   return Math.pow(2, 10 * (t - 1));
    // }
    // function easeOutExpo(t: number) {
    //   return -Math.pow(2, -10 * t) + 1;
    // }
    // function easeInOutExpo(t: number) {
    //   t /= 0.5;
    //   if (t < 1) {return Math.pow(2, 10 * (t - 1)) / 2; }
    //   t--;
    //   return (-Math.pow(2, -10 * t) + 2) / 2;
    // }
    // function easeInCirc(t: number) {
    //   return -Math.sqrt(1 - t * t) - 1;
    // }
    // function easeOutCirc(t: number) {
    //   t--;
    //   return Math.sqrt(1 - t * t);
    // }
    // function easeInOutCirc(t: number) {
    //   t /= 0.5;
    //   if (t < 1) {return -(Math.sqrt(1 - t * t) - 1) / 2; }
    //   t -= 2;
    //   return (Math.sqrt(1 - t * t) + 1) / 2;
    // }

    function toNumber(val, _default) {
        var num = typeof val === 'number'
            ? val
            : typeof val === 'string' && val.length
                ? +val
                : _default;
        return isNaN(num) ? (_default === void 0 ? 0 : _default) : num;
    }

    function componentDestroyed(component) {
        var modifiedComponent = component;
        if (modifiedComponent.__componentDestroyed$) {
            return modifiedComponent.__componentDestroyed$;
        }
        var oldNgOnDestroy = component.ngOnDestroy;
        var stop$ = new rxjs.ReplaySubject();
        modifiedComponent.ngOnDestroy = function () {
            if (oldNgOnDestroy) {
                oldNgOnDestroy.apply(component);
            }
            stop$.next();
            stop$.complete();
        };
        return modifiedComponent.__componentDestroyed$ = stop$.asObservable();
    }
    function untilComponentDestroyed(component) {
        return function (source) { return source.pipe(operators.takeUntil(componentDestroyed(component))); };
    }

    var LyHostClass = /** @class */ (function () {
        function LyHostClass(_el, _renderer) {
            this._renderer = _renderer;
            this._set = new Set();
            this._nEl = _el.nativeElement;
            console.log("LyHostClass: Deprecated use instead StyleRenderer");
        }
        LyHostClass.prototype.add = function (className) {
            if (!this._set.has(className)) {
                this._set.add(className);
                this._renderer.addClass(this._nEl, className);
            }
        };
        LyHostClass.prototype.remove = function (className) {
            if (className && this._set.has(className)) {
                this._set.delete(className);
                this._renderer.removeClass(this._nEl, className);
            }
        };
        LyHostClass.prototype.toggle = function (className, enabled) {
            if (enabled) {
                this.add(className);
            }
            else {
                this.remove(className);
            }
        };
        LyHostClass.prototype.update = function (newClassName, oldClassName) {
            this.remove(oldClassName);
            this.add(newClassName);
            return newClassName;
        };
        return LyHostClass;
    }());
    LyHostClass.decorators = [
        { type: i0.Injectable }
    ];
    LyHostClass.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };

    (function (FocusStatus) {
        /**mouse and/or touch*/
        FocusStatus["DEFAULT"] = "default";
        /** keyboard and/or program*/
        FocusStatus["KEYBOARD"] = "keyboard";
    })(exports.FocusStatus || (exports.FocusStatus = {}));
    var LyFocusState = /** @class */ (function () {
        function LyFocusState(_ngZone, _platform) {
            this._ngZone = _ngZone;
            this._platform = _platform;
            this._elementMap = new Map();
            this._count = 0;
        }
        LyFocusState.prototype.listen = function (element, keyElement) {
            var _this = this;
            if (!this._platform.isBrowser) {
                // return null if it is not browser platform
                return null;
            }
            var nativeElement = getNativeElement(element);
            var key = keyElement && getNativeElement(keyElement) || nativeElement;
            if (this._elementMap.has(key)) {
                return this._elementMap.get(key).subject.asObservable();
            }
            var focusState = {
                unlisten: null,
                subject: new rxjs.Subject()
            };
            this._incrementCount();
            var focusListener = function (event) { return _this._on(event, focusState.subject); };
            var blurListener = function (event) { return _this._on(event, focusState.subject); };
            focusState.unlisten = function () {
                nativeElement.removeEventListener('focus', focusListener, true);
                nativeElement.removeEventListener('blur', blurListener, true);
            };
            this._elementMap.set(key, focusState);
            this._ngZone.runOutsideAngular(function () {
                nativeElement.addEventListener('focus', focusListener, true);
                nativeElement.addEventListener('blur', blurListener, true);
            });
            return focusState.subject.asObservable();
        };
        LyFocusState.prototype.focusElement = function (element, origin, options) {
            var nativeElement = getNativeElement(element);
            this._currentEvent = origin;
            if (typeof nativeElement.focus === 'function') {
                nativeElement.focus(options);
            }
        };
        LyFocusState.prototype.unlisten = function (element) {
            if (!this._platform.isBrowser) {
                return;
            }
            var el = getNativeElement(element);
            var focusStateInfo = this._elementMap.get(el);
            if (focusStateInfo) {
                focusStateInfo.unlisten();
                this._elementMap.delete(el);
                this._decrementCount();
            }
        };
        LyFocusState.prototype._on = function (event, subject) {
            var by = null;
            if (event.type === 'focus') {
                by = this._currentEvent || 'keyboard';
            }
            this._ngZone.run(function () { return subject.next(by); });
        };
        LyFocusState.prototype._addGlobalListeners = function () {
            var _this = this;
            if (!this._platform.isBrowser) {
                return;
            }
            var eventListenerOptions = supportsPassiveEventListeners()
                ? {
                    passive: true,
                    capture: true
                } : false;
            var documentKeydownListener = function () { return _this._ngZone.runOutsideAngular(function () { return _this._currentEvent = 'keyboard'; }); };
            var documentMousedownListener = function () { return _this._ngZone.runOutsideAngular(function () { return _this._currentEvent = 'mouse'; }); };
            this._ngZone.runOutsideAngular(function () {
                document.addEventListener('keydown', documentKeydownListener, eventListenerOptions);
                document.addEventListener('mousedown', documentMousedownListener, eventListenerOptions);
            });
            this._removeGlobalListeners = function () {
                document.removeEventListener('keydown', documentKeydownListener, eventListenerOptions);
                document.removeEventListener('mousedown', documentMousedownListener, eventListenerOptions);
            };
        };
        LyFocusState.prototype._incrementCount = function () {
            if (++this._count === 1) {
                this._addGlobalListeners();
            }
        };
        LyFocusState.prototype._decrementCount = function () {
            if (!--this._count) {
                this._removeGlobalListeners();
            }
        };
        LyFocusState.prototype.ngOnDestroy = function () {
            var _this = this;
            this._elementMap.forEach(function (_, element) { return _this.unlisten(element); });
        };
        return LyFocusState;
    }());
    LyFocusState.ɵprov = i0.ɵɵdefineInjectable({ factory: function LyFocusState_Factory() { return new LyFocusState(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.Platform)); }, token: LyFocusState, providedIn: "root" });
    LyFocusState.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    LyFocusState.ctorParameters = function () { return [
        { type: i0.NgZone },
        { type: i2.Platform }
    ]; };

    var AUI_VERSION = '10.5.1';
    var AUI_LAST_UPDATE = '2021-01-20T00:15:41.465Z';

    var LY_HAMMER_OPTIONS = new i0.InjectionToken('LY_HAMMER_OPTIONS');
    var HAMMER_GESTURES_EVENTS = [
        'slide',
        'slidestart',
        'slideend',
        'slideright',
        'slideleft',
        'slidecancel'
    ];
    var ɵ0$5 = function () { }, ɵ1$4 = function () { };
    /**
     * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not
     * been loaded on the page.
     */
    var noopHammerInstance = {
        on: ɵ0$5,
        off: ɵ1$4,
    };
    var LyHammerGestureConfig = /** @class */ (function (_super) {
        __extends(LyHammerGestureConfig, _super);
        function LyHammerGestureConfig(_hammerOptions) {
            var _this = _super.call(this) || this;
            _this._hammerOptions = _hammerOptions;
            _this.events = HAMMER_GESTURES_EVENTS;
            return _this;
        }
        LyHammerGestureConfig.prototype.buildHammer = function (element) {
            var hammer = typeof window !== 'undefined' ? window.Hammer : null;
            if (!hammer) {
                return noopHammerInstance;
            }
            var mc = new hammer(element, this._hammerOptions || {});
            var pan = new hammer.Pan();
            var swipe = new hammer.Swipe();
            var slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);
            pan.recognizeWith(swipe);
            // Add customized gestures to Hammer manager
            mc.add([swipe, pan, slide]);
            return mc;
        };
        /** Creates a new recognizer, without affecting the default recognizers of HammerJS */
        LyHammerGestureConfig.prototype._createRecognizer = function (base, options) {
            var inheritances = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                inheritances[_i - 2] = arguments[_i];
            }
            var recognizer = new (base.constructor)(options);
            inheritances.push(base);
            inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });
            return recognizer;
        };
        return LyHammerGestureConfig;
    }(platformBrowser.HammerGestureConfig));
    LyHammerGestureConfig.decorators = [
        { type: i0.Injectable }
    ];
    LyHammerGestureConfig.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LY_HAMMER_OPTIONS,] }] }
    ]; };

    var LyThemeModule = /** @class */ (function () {
        function LyThemeModule() {
        }
        LyThemeModule.setTheme = function (themeName) {
            return {
                ngModule: LyThemeModule,
                providers: [
                    [LyTheme2],
                    [StyleRenderer],
                    { provide: LY_THEME_NAME, useValue: themeName }
                ]
            };
        };
        return LyThemeModule;
    }());
    LyThemeModule.decorators = [
        { type: i0.NgModule }
    ];

    var Undefined = /** @class */ (function () {
        function Undefined() {
        }
        return Undefined;
    }());
    var UndefinedValue = new Undefined();

    // @Injectable()
    var LyOverlayRef = /** @class */ (function () {
        function LyOverlayRef() {
        }
        return LyOverlayRef;
    }());

    var styles$1 = function (theme) { return ({
        overlay: {
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            zIndex: theme.zIndex.overlay,
            pointerEvents: 'none'
        }
    }); };
    var ɵ0$6 = styles$1;
    var LyOverlayContainer = /** @class */ (function () {
        function LyOverlayContainer(theme, _platform) {
            this.theme = theme;
            this._platform = _platform;
            this._classes = this.theme.addStyleSheet(styles$1);
            this._items = new Set();
            if (this._platform.isBrowser) {
                var container = document.createElement('ly-overlay-container');
                document.body.appendChild(container);
                this._containerElement = container;
            }
        }
        Object.defineProperty(LyOverlayContainer.prototype, "overlayLen", {
            get: function () {
                return this._items.size;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyOverlayContainer.prototype, "containerElement", {
            get: function () {
                return this._containerElement;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Add instance
         * @ignore
         */
        LyOverlayContainer.prototype._add = function (item, elementAfter) {
            this._items.add(item);
            if ((elementAfter === null || elementAfter === void 0 ? void 0 : elementAfter.parentElement) && item.parentElement === elementAfter.parentElement) {
                this.containerElement.insertBefore(item, elementAfter);
            }
            else {
                this.containerElement.appendChild(item);
            }
            this._update();
        };
        /**
       * Remove instance
       * @ignore
       */
        LyOverlayContainer.prototype._remove = function (item) {
            this.containerElement.removeChild(item);
            this._items.delete(item);
            this._update();
        };
        /**
         * Update styles for overlay container
         * @ignore
         */
        LyOverlayContainer.prototype._update = function () {
            if (this._items.size) {
                if (!this._isActiveOverlayContainer) {
                    this._isActiveOverlayContainer = true;
                    this._containerElement.classList.add(this._classes.overlay);
                }
            }
            else if (this._isActiveOverlayContainer) {
                this._containerElement.classList.remove(this._classes.overlay);
                this._isActiveOverlayContainer = false;
            }
        };
        return LyOverlayContainer;
    }());
    LyOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function LyOverlayContainer_Factory() { return new LyOverlayContainer(i0.ɵɵinject(LyTheme2), i0.ɵɵinject(i2.Platform)); }, token: LyOverlayContainer, providedIn: "root" });
    LyOverlayContainer.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    LyOverlayContainer.ctorParameters = function () { return [
        { type: LyTheme2 },
        { type: i2.Platform }
    ]; };

    var LyOverlayConfig = /** @class */ (function () {
        function LyOverlayConfig() {
            this.hasBackdrop = true;
            /**
             * Whether the user can click on the backdrop to close the overlay.
             */
            this.disableClose = false;
        }
        return LyOverlayConfig;
    }());

    var STYLE_PRIORITY$2 = -2;
    var STYLES_BACKDROP_ROOT = function () { return function (className) { return "" + st2c((LY_COMMON_STYLES.fill), "" + className) + className + "{width:100vw;height:100vh;pointer-events:all;user-select:none;}"; }; };
    var LyOverlayBackdrop = /** @class */ (function () {
        function LyOverlayBackdrop(_el, _theme, sRenderer, _config) {
            this._el = _el;
            this.sRenderer = sRenderer;
            this._config = _config;
            _el.nativeElement.classList.add(sRenderer.add(STYLES_BACKDROP_ROOT, STYLE_PRIORITY$2));
            // this applies custom class for backdrop,
            // if one is not defined, do nothing.
            var backdropClass = _config.backdropClass;
            if (backdropClass) {
                this._el.nativeElement.classList.add(backdropClass);
            }
        }
        LyOverlayBackdrop.prototype.onclick = function () {
            if (!this._config.disableClose) {
                this._config.fnDestroy();
            }
        };
        return LyOverlayBackdrop;
    }());
    LyOverlayBackdrop.decorators = [
        { type: i0.Component, args: [{
                    selector: 'ly-overlay-backdrop',
                    template: "",
                    providers: [
                        StyleRenderer
                    ]
                },] }
    ];
    LyOverlayBackdrop.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: LyTheme2 },
        { type: StyleRenderer },
        { type: LyOverlayConfig }
    ]; };
    LyOverlayBackdrop.propDecorators = {
        onclick: [{ type: i0.HostListener, args: ['click',] }]
    };

    function createOverlayInjector(parent, config, overlayFactory) {
        return i0.Injector.create({
            providers: [
                {
                    provide: LyOverlayConfig,
                    useValue: config
                },
                {
                    provide: LyOverlayRef,
                    useValue: overlayFactory
                }
            ],
            parent: parent
        });
    }

    var OverlayFactory = /** @class */ (function () {
        function OverlayFactory(_componentFactoryResolver, _appRef, _templateRefOrComponent, _overlayContainer, _context, _injector, _scrollDispatcher, _viewportRuler, _config) {
            var _this = this;
            this._componentFactoryResolver = _componentFactoryResolver;
            this._appRef = _appRef;
            this._overlayContainer = _overlayContainer;
            this._injector = _injector;
            this._windowSRSub = rxjs.Subscription.EMPTY;
            var config = Object.assign(Object.assign({}, new LyOverlayConfig()), _config);
            this._el = document.createElement('div');
            var __styles = {
                position: 'absolute',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                pointerEvents: 'all'
            };
            if (config) {
                Object.assign(__styles, config.styles);
            }
            var newInjector = this._newInjector = createOverlayInjector(config.injector || this._injector, Object.assign(Object.assign({ fnDestroy: this.destroy.bind(this) }, config), { styles: __styles }), this);
            this._updateStyles(__styles);
            if (config) {
                if (config.onResizeScroll) {
                    this.onResizeScroll = config.onResizeScroll;
                }
                this._windowSRSub = rxjs.merge(_scrollDispatcher.scrolled(0), _viewportRuler.change()).subscribe(function () {
                    if (_this.onResizeScroll) {
                        _this.onResizeScroll();
                    }
                });
                if (config.classes) {
                    var classes = config.classes;
                    classes.forEach(function (className) { return _this._el.classList.add(className); });
                }
            }
            this.updateBackdrop(!!config.hasBackdrop);
            this._appendComponentToBody(_templateRefOrComponent, _context, newInjector);
            this._updateBackdropPosition();
        }
        Object.defineProperty(OverlayFactory.prototype, "injector", {
            get: function () {
                return this._newInjector;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OverlayFactory.prototype, "containerElement", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OverlayFactory.prototype, "componentRef", {
            get: function () {
                return this._compRef;
            },
            enumerable: false,
            configurable: true
        });
        OverlayFactory.prototype.updateBackdrop = function (hasBackdrop) {
            if (hasBackdrop) {
                if (this._compRefOverlayBackdrop) {
                    return;
                }
                this._compRefOverlayBackdrop = this._generateComponent(LyOverlayBackdrop, this._newInjector);
                this._appRef.attachView(this._compRefOverlayBackdrop.hostView);
                this._backdropElement = this._compRefOverlayBackdrop.location.nativeElement;
                this._overlayContainer._add(this._backdropElement);
            }
            else if (this._compRefOverlayBackdrop) {
                this._appRef.detachView(this._compRefOverlayBackdrop.hostView);
                this._backdropElement = this._compRefOverlayBackdrop.location.nativeElement;
                this._overlayContainer._remove(this._backdropElement);
                this._compRefOverlayBackdrop = null;
            }
            this._updateBackdropPosition();
        };
        OverlayFactory.prototype._updateStyles = function (__styles) {
            /** Apply styles */
            /** set styles */
            for (var key in __styles) {
                if (__styles.hasOwnProperty(key)) {
                    var styleVal = __styles[key];
                    if (styleVal != null) {
                        this._el.style[key] = typeof __styles[key] === 'number' ? styleVal + "px" : styleVal;
                    }
                }
            }
        };
        OverlayFactory.prototype._appendComponentToBody = function (type, context, injector) {
            var _this = this;
            if (type instanceof i0.TemplateRef) {
                // Create a component reference from the component
                var viewRef = this._viewRef = type.createEmbeddedView(context || {});
                this._appRef.attachView(viewRef);
                // Get DOM element from component
                viewRef.rootNodes.forEach(function (_) { return _this._el.appendChild(_); });
                // Append DOM element to the body
                this._overlayContainer._add(this._el);
            }
            else if (typeof type === 'string') {
                this._el.innerText = type;
                this._overlayContainer._add(this._el);
            }
            else {
                this._compRef = this._generateComponent(type, injector);
                this._appRef.attachView(this._compRef.hostView);
                this._el.appendChild(this._compRef.location.nativeElement);
                this._overlayContainer._add(this._el);
            }
        };
        OverlayFactory.prototype._updateBackdropPosition = function () {
            var _a, _b;
            var container = this._overlayContainer.containerElement;
            if (((_a = this._backdropElement) === null || _a === void 0 ? void 0 : _a.parentElement) === container
                && ((_b = this._el) === null || _b === void 0 ? void 0 : _b.parentElement) === container) {
                this._overlayContainer.containerElement.insertBefore(this._backdropElement, this._el);
            }
        };
        OverlayFactory.prototype._generateComponent = function (type, injector) {
            var factory = this._componentFactoryResolver.resolveComponentFactory(type);
            return factory.create(injector);
        };
        /** Detaches a view from dirty checking again of ApplicationRef. */
        OverlayFactory.prototype.detach = function () {
            if (this._viewRef) {
                this._appRef.detachView(this._viewRef);
            }
            if (this._compRef) {
                this._appRef.detachView(this._compRef.hostView);
            }
        };
        /** Remove element of DOM */
        OverlayFactory.prototype.remove = function () {
            if (this._viewRef) {
                this._viewRef.destroy();
                this._overlayContainer._remove(this._el);
                this._el = undefined;
            }
            else if (this._compRef) {
                this._compRef.destroy();
                this._overlayContainer._remove(this._el);
                this._el = undefined;
                this._compRef = null;
            }
            else if (this._el) {
                // remove if template is string
                this._overlayContainer._remove(this._el);
                this._el = undefined;
            }
            this.updateBackdrop(false);
            this._windowSRSub.unsubscribe();
        };
        /** Detach & remove */
        OverlayFactory.prototype.destroy = function () {
            this.detach();
            this.remove();
        };
        return OverlayFactory;
    }());

    var LyOverlay = /** @class */ (function () {
        function LyOverlay(_overlayContainer, _componentFactoryResolver, _appRef, _injector, _scrollDispatcher, _viewportRuler) {
            this._overlayContainer = _overlayContainer;
            this._componentFactoryResolver = _componentFactoryResolver;
            this._appRef = _appRef;
            this._injector = _injector;
            this._scrollDispatcher = _scrollDispatcher;
            this._viewportRuler = _viewportRuler;
        }
        LyOverlay.prototype.create = function (templateOrComponent, context, config) {
            return new OverlayFactory(this._componentFactoryResolver, this._appRef, templateOrComponent, this._overlayContainer, context, this._injector, this._scrollDispatcher, this._viewportRuler, config);
        };
        return LyOverlay;
    }());
    LyOverlay.decorators = [
        { type: i0.Injectable }
    ];
    LyOverlay.ctorParameters = function () { return [
        { type: LyOverlayContainer },
        { type: i0.ComponentFactoryResolver },
        { type: i0.ApplicationRef },
        { type: i0.Injector },
        { type: scrolling.ScrollDispatcher },
        { type: scrolling.ViewportRuler }
    ]; };

    var LyOverlayModule = /** @class */ (function () {
        function LyOverlayModule() {
        }
        return LyOverlayModule;
    }());
    LyOverlayModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [LyOverlayBackdrop],
                    entryComponents: [LyOverlayBackdrop],
                    providers: [
                        LyOverlay
                    ]
                },] }
    ];

    var STYLES_BACKDROP_DARK = ({
        backgroundColor: 'rgba(0,0,0,.32)'
    });

    var MUTATION_OBSERVER_INIT = {
        characterData: true,
        childList: true,
        subtree: true
    };
    var MutationObserverFactory = /** @class */ (function () {
        function MutationObserverFactory() {
        }
        MutationObserverFactory.prototype.create = function (callback) {
            return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
        };
        return MutationObserverFactory;
    }());
    MutationObserverFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: "root" });
    MutationObserverFactory.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    var ElementObserver = /** @class */ (function () {
        function ElementObserver(_mutationObserverFactory) {
            this._mutationObserverFactory = _mutationObserverFactory;
            this._observedElements = new Map();
        }
        ElementObserver.prototype.ngOnDestroy = function () {
            var _this = this;
            this._observedElements.forEach(function (_, element) { return _this.destroy(element); });
        };
        ElementObserver.prototype.observe = function (elementOrRef, fn, options) {
            var element = elementOrRef instanceof i0.ElementRef ? elementOrRef.nativeElement : elementOrRef;
            if (!this._observedElements.has(element)) {
                var observer = this._mutationObserverFactory.create(fn);
                if (observer) {
                    observer.observe(element, options || MUTATION_OBSERVER_INIT);
                }
                this._observedElements.set(element, observer);
            }
            return this._observedElements.get(element);
        };
        /**
         * Destroy Observer
         */
        ElementObserver.prototype.destroy = function (elementOrRef) {
            var element = elementOrRef instanceof i0.ElementRef ? elementOrRef.nativeElement : elementOrRef;
            if (this._observedElements.has(element)) {
                var observer = this._observedElements.get(element);
                if (observer) {
                    this._observedElements.get(element).disconnect();
                }
                this._observedElements.delete(element);
            }
        };
        return ElementObserver;
    }());
    ElementObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ElementObserver_Factory() { return new ElementObserver(i0.ɵɵinject(MutationObserverFactory)); }, token: ElementObserver, providedIn: "root" });
    ElementObserver.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ElementObserver.ctorParameters = function () { return [
        { type: MutationObserverFactory }
    ]; };

    /**
     * @deprecated use ViewportRuler instead
     * import { ViewportRuler } from '@angular/cdk/scrolling';
     */
    var WinResize = /** @class */ (function () {
        function WinResize(document, ngZone) {
            var _this = this;
            this.document = document;
            if (Platform.isBrowser) {
                ngZone.runOutsideAngular(function () {
                    _this.resize$ = rxjs.fromEvent(window, 'resize').pipe(operators.auditTime(20), operators.map(function () {
                        return window.innerHeight || _this.document.documentElement.clientHeight;
                    }), operators.share());
                });
            }
            else {
                this.resize$ = rxjs.empty();
            }
        }
        return WinResize;
    }());
    WinResize.ɵprov = i0.ɵɵdefineInjectable({ factory: function WinResize_Factory() { return new WinResize(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone)); }, token: WinResize, providedIn: "root" });
    WinResize.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    WinResize.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: i0.NgZone }
    ]; };

    /**
     * @deprecated use ScrollDispatcher instead
     * import { ScrollDispatcher } from '@angular/cdk/scrolling';
     */
    var WinScroll = /** @class */ (function () {
        function WinScroll(_document, ngZone) {
            var _this = this;
            this._document = _document;
            if (Platform.isBrowser) {
                ngZone.runOutsideAngular(function () {
                    _this.scroll$ = rxjs.fromEvent(window.document, 'scroll').pipe(operators.auditTime(20), operators.map(function () {
                        return window.scrollY || _this._document.documentElement.scrollTop;
                    }), operators.share());
                });
            }
            else {
                this.scroll$ = rxjs.empty();
            }
        }
        return WinScroll;
    }());
    WinScroll.ɵprov = i0.ɵɵdefineInjectable({ factory: function WinScroll_Factory() { return new WinScroll(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone)); }, token: WinScroll, providedIn: "root" });
    WinScroll.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    WinScroll.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: i0.NgZone }
    ]; };

    var LyOverlayPosition = /** @class */ (function () {
        function LyOverlayPosition(_theme, _viewportRuler, _trigger, _overlay) {
            this._theme = _theme;
            this._viewportRuler = _viewportRuler;
            this._trigger = _trigger;
            this._overlay = _overlay;
            this._xAxis = exports.XPosition.after;
            this._yAxis = exports.YPosition.below;
            this._flip = false;
            this._viewportOffset = 16;
            this._viewportHeight = 0;
            this._viewportWidth = 0;
        }
        Object.defineProperty(LyOverlayPosition.prototype, "x", {
            get: function () {
                return this._x;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyOverlayPosition.prototype, "y", {
            get: function () {
                return this._y;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyOverlayPosition.prototype, "xo", {
            get: function () {
                return this._xo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyOverlayPosition.prototype, "yo", {
            get: function () {
                return this._yo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyOverlayPosition.prototype, "width", {
            get: function () {
                return this._width;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyOverlayPosition.prototype, "height", {
            get: function () {
                return this._height;
            },
            enumerable: false,
            configurable: true
        });
        LyOverlayPosition.prototype.build = function () {
            this._updateRects();
            this._setDefaultAnchor();
            this._updateDir();
            this._callTransformIfExists();
            this._calculateResponsive();
            this._calculateOrigin();
            this._round();
            return this;
        };
        LyOverlayPosition.prototype._updateRects = function () {
            this._triggerRect = getMutableClientRect(this._trigger);
            this._overlayRect = getMutableClientRect(this._overlay);
            var _a = this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;
            this._viewportWidth = width;
            this._viewportHeight = height;
        };
        LyOverlayPosition.prototype._setDefaultAnchor = function () {
            if (!this._xAnchor) {
                this._xAnchor = this._xAxis === exports.XPosition.after ? exports.XPosition.before : exports.XPosition.after;
            }
            if (!this._yAnchor) {
                this._yAnchor = this._yAxis;
            }
        };
        LyOverlayPosition.prototype._callTransformIfExists = function () {
            if (this._transform) {
                this._transform(this._triggerRect, this._overlayRect);
            }
        };
        LyOverlayPosition.prototype._updateDir = function () {
            // If it is not number
            if (typeof this._xAnchor !== 'number') {
                this._anchorDir = this._theme.variables.getDirection(this._xAnchor);
            }
            this._axisDir = this._theme.variables.getDirection(this._xAxis);
        };
        LyOverlayPosition.prototype._calculateResponsive = function () {
            this._calculate();
            if (this._flip && typeof this._xAnchor === 'string' && typeof this._yAnchor === 'string') {
                if (this._isOverflowX() && (this._overlayRect.width < (this._xa - this._viewportOffset))) {
                    this.setXAxis(flipPosition(this._xAxis))
                        .setXAnchor(flipPosition(this._xAnchor));
                    this._updateDir();
                    this._calculate();
                }
                if (this._isOverflowY() && (this._overlayRect.height < (this._ya - this._viewportOffset))) {
                    this.setYAxis(flipPosition(this._yAxis))
                        .setYAnchor(flipPosition(this._yAnchor));
                    this._calculate();
                }
            }
            if (this._isOverflowX()) {
                if (this._overlayRect.width > this._viewportWidth - (this._viewportOffset * 2)) {
                    this._x = this._viewportOffset;
                    this._width = this._viewportWidth - (this._viewportOffset * 2);
                }
                else if (this._isOverflowLeft()) {
                    this._x = this._viewportOffset;
                }
                else if (this._isOverflowRight()) {
                    this._x = this._viewportWidth - this._overlayRect.width - this._viewportOffset;
                }
            }
            if (this._isOverflowY()) {
                if (this._overlayRect.height > this._viewportHeight - (this._viewportOffset * 2)) {
                    this._y = this._viewportOffset;
                    this._height = this._viewportHeight - (this._viewportOffset * 2);
                }
                else if (this._isOverflowTop()) {
                    this._y = this._viewportOffset;
                }
                else if (this._isOverflowBottom()) {
                    this._y = this._viewportHeight - this._overlayRect.height - this._viewportOffset;
                }
            }
        };
        /**
         * Return true if the menu overflows vertically
         */
        LyOverlayPosition.prototype._isOverflowX = function () {
            return this._isOverflowLeft() // Left
                || this._isOverflowRight(); // Right
        };
        LyOverlayPosition.prototype._isOverflowLeft = function () {
            return this.x < this._viewportOffset;
        };
        LyOverlayPosition.prototype._isOverflowRight = function () {
            return (this.x + this._overlayRect.width) > (this._viewportWidth - this._viewportOffset);
        };
        /** Return true the menu overflows horizontally */
        LyOverlayPosition.prototype._isOverflowY = function () {
            return this._isOverflowTop() // Top
                || this._isOverflowBottom(); // Bottom
        };
        LyOverlayPosition.prototype._isOverflowTop = function () {
            return this.y < this._viewportOffset;
        };
        LyOverlayPosition.prototype._isOverflowBottom = function () {
            return (this.y + this._overlayRect.height) > (this._viewportHeight - this._viewportOffset);
        };
        LyOverlayPosition.prototype._calculate = function () {
            this._calculateAnchorPosition();
            this._calculateAxis();
        };
        LyOverlayPosition.prototype._calculateAnchorPosition = function () {
            if (this._anchorDir === 'left' || this._anchorDir === 'right') {
                this._xa = this._triggerRect[this._anchorDir];
            }
            if (this._yAnchor === exports.YPosition.above) {
                this._ya = this._triggerRect.top;
            }
            else {
                this._ya = this._triggerRect.bottom;
            }
        };
        LyOverlayPosition.prototype._calculateAxis = function () {
            if (this._axisDir === 'left') {
                this._x = this._xa - this._overlayRect.width;
            }
            else {
                this._x = this._xa;
            }
            if (this._yAxis === exports.YPosition.above) {
                this._y = this._ya - this._overlayRect.height;
            }
            else {
                this._y = this._ya;
            }
        };
        /** Calculate origin for overlay */
        LyOverlayPosition.prototype._calculateOrigin = function () {
            var xAnchorCenter = this._xa;
            var yAnchorCenter = this._ya;
            var xOverlayCenter = this.x + (this._overlayRect.width / 2);
            var yOverlayCenter = this.y + (this._overlayRect.height / 2);
            var xo = (xAnchorCenter - xOverlayCenter) + this._overlayRect.width / 2;
            var yo = (yAnchorCenter - yOverlayCenter) + this._overlayRect.height / 2;
            this._xo = xo;
            this._yo = yo;
        };
        LyOverlayPosition.prototype._round = function () {
            this._x = Math.round(this.x);
            this._y = Math.round(this.y);
        };
        // setTrigger(val: Element) {
        //   this._trigger = val;
        //   return this;
        // }
        // setOverlay(val: Element) {
        //   this._overlay = val;
        //   return this;
        // }
        LyOverlayPosition.prototype.setXAnchor = function (val) {
            this._xAnchor = val;
            return this;
        };
        LyOverlayPosition.prototype.setYAnchor = function (val) {
            this._yAnchor = val;
            return this;
        };
        LyOverlayPosition.prototype.setXAxis = function (val) {
            this._xAxis = val !== null && val !== void 0 ? val : exports.XPosition.after;
            return this;
        };
        LyOverlayPosition.prototype.setYAxis = function (val) {
            this._yAxis = val !== null && val !== void 0 ? val : exports.YPosition.below;
            return this;
        };
        LyOverlayPosition.prototype.setFlip = function (flip) {
            if (flip === void 0) { flip = true; }
            this._flip = flip;
            return this;
        };
        /**
         * Offset from the edge of the viewport to the center.
         * It is the minimum space that must be between the window and the overlay.
         */
        LyOverlayPosition.prototype.setViewportOffset = function (val) {
            this._viewportOffset = val;
            return this;
        };
        LyOverlayPosition.prototype.setTransform = function (transform) {
            this._transform = transform;
        };
        return LyOverlayPosition;
    }());
    /** Gets a mutable version of an element's bounding `ClientRect`. */
    function getMutableClientRect(element) {
        var clientRect = element.getBoundingClientRect();
        // We need to clone the `clientRect` here, because all the values on it are readonly
        // and we need to be able to update them. Also we can't use a spread here, because
        // the values on a `ClientRect` aren't own properties. See:
        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes
        return {
            top: clientRect.top,
            right: clientRect.right,
            bottom: clientRect.bottom,
            left: clientRect.left,
            width: clientRect.width,
            height: clientRect.height
        };
    }
    function flipPosition(position) {
        switch (position) {
            case exports.XPosition.after:
                return exports.XPosition.before;
            case exports.XPosition.before:
                return exports.XPosition.after;
            case exports.XPosition.left:
                return exports.XPosition.right;
            case exports.XPosition.right:
                return exports.XPosition.left;
            case exports.YPosition.above:
                return exports.YPosition.below;
            case exports.YPosition.below:
                return exports.YPosition.above;
        }
    }

    (function (AlignAlias) {
        AlignAlias["rowReverse"] = "row-reverse";
        AlignAlias["columnReverse"] = "column-reverse";
        AlignAlias["wrapReverse"] = "wrap-reverse";
        AlignAlias["start"] = "flex-start";
        AlignAlias["end"] = "flex-end";
        AlignAlias["between"] = "space-between";
        AlignAlias["around"] = "space-around";
        AlignAlias["evenly"] = "space-evenly";
    })(exports.AlignAlias || (exports.AlignAlias = {}));

    function same(o) {
        return o;
    }
    var LySelectionModel = /** @class */ (function () {
        function LySelectionModel(opts) {
            this._selectionMap = new Map();
            this._getKeyFn = same;
            if (!opts) {
                return;
            }
            var multiple = opts.multiple, getKey = opts.getKey;
            if (getKey) {
                this._getKeyFn = getKey;
            }
            if (multiple === true) {
                this._multiple = true;
                var selecteds = opts.selecteds;
                if (Array.isArray(selecteds) && selecteds.length) {
                    this.select.apply(this, __spread(selecteds));
                }
            }
            else {
                var selecteds = opts.selecteds;
                if (selecteds) {
                    this._markSelected(selecteds);
                }
            }
        }
        Object.defineProperty(LySelectionModel.prototype, "selected", {
            /** Selected values. */
            get: function () {
                if (!this._selected) {
                    this._selected = Array.from(this._selectionMap.values());
                }
                return this._selected;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Toggles a value between selected and deselected.
         */
        LySelectionModel.prototype.toggle = function (value) {
            this.isSelected(value) ? this.deselect(value) : this.select(value);
        };
        /**
         * Selects one or several values.
         */
        LySelectionModel.prototype.select = function () {
            var _this = this;
            var values = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                values[_i] = arguments[_i];
            }
            values.forEach(function (value) { return _this._markSelected(value); });
            this._clearSelectedValues();
        };
        /**
         * Deselects a value or an array of values.
         */
        LySelectionModel.prototype.deselect = function () {
            var _this = this;
            var values = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                values[_i] = arguments[_i];
            }
            values.forEach(function (value) { return _this._unmarkSelected(value); });
            this._clearSelectedValues();
        };
        /**
         * Determines whether a value is selected.
         */
        LySelectionModel.prototype.isSelected = function (value) {
            var key = this._getKeyFn(value);
            return this._selectionMap.has(key);
        };
        /**
         * Determines whether the model does not have a value.
         */
        LySelectionModel.prototype.isEmpty = function () {
            return this._selectionMap.size === 0;
        };
        /**
         * Determines whether the model has a value.
         */
        LySelectionModel.prototype.hasValue = function () {
            return this._selectionMap.size !== 0;
        };
        /**
         * Gets whether multiple values can be selected.
         */
        LySelectionModel.prototype.isMultipleSelection = function () {
            return this._multiple;
        };
        /**
         * Clears all of the selected values.
         */
        LySelectionModel.prototype.clear = function () {
            this._unmarkAll();
            this._clearSelectedValues();
        };
        /** Selects a value. */
        LySelectionModel.prototype._markSelected = function (value) {
            if (!this.isSelected(value)) {
                if (!this._multiple) {
                    this._unmarkAll();
                }
                var key = this._getKeyFn(value);
                this._selectionMap.set(key, value);
            }
        };
        /** Deselects a value. */
        LySelectionModel.prototype._unmarkSelected = function (value) {
            if (this.isSelected(value)) {
                var key = this._getKeyFn(value);
                this._selectionMap.delete(key);
            }
        };
        /** Clears out the selected values. */
        LySelectionModel.prototype._unmarkAll = function () {
            if (!this.isEmpty()) {
                this._selectionMap.clear();
            }
        };
        /** Clear the selected values so they can be re-cached. */
        LySelectionModel.prototype._clearSelectedValues = function () {
            this._selected = null;
        };
        return LySelectionModel;
    }());

    function getLyThemeVariableUndefinedError(variable) {
        return Error("Variable '" + variable + "' undefined in Theme.");
    }
    function getLyThemeVariableOptionUndefinedError(comp, variable) {
        return Error(comp + ": variable " + variable + " is undefined in Theme.");
    }
    function getLyThemeStyleUndefinedError(comp, input, val) {
        return Error(comp + ": no styles defined in the theme have been found for `@Input() " + input + "`,"
            + (" the value given is `" + val + "`."));
    }

    var STYLES = function (theme) { return ({
        root: {
            width: '1em',
            height: '1em',
            display: 'inline-block',
            position: 'relative',
            fontSize: '24px'
        },
        line: {
            top: 'calc(0.5em - 1px)',
            position: 'absolute',
            width: 1 / 3 + "em",
            height: '2px',
            backgroundColor: 'currentColor',
            display: 'inline-block',
            transition: "all " + theme.animations.durations.entering + "ms " + theme.animations.curves.standard,
            '&:first-of-type': {
                left: '0.25em',
                '-webkit-transform': 'rotate(45deg)',
                transform: 'rotate(45deg)'
            },
            '&:last-of-type': {
                right: '0.25em',
                '-webkit-transform': 'rotate(-45deg)',
                transform: 'rotate(-45deg)'
            }
        },
        up: {
            '{line}:first-of-type': {
                '-webkit-transform': 'rotate(-45deg)',
                transform: 'rotate(-45deg)'
            },
            '{line}:last-of-type': {
                '-webkit-transform': 'rotate(45deg)',
                transform: 'rotate(45deg)'
            }
        }
    }); };
    var ɵ0$7 = STYLES;
    var LyExpansionIcon = /** @class */ (function () {
        function LyExpansionIcon(_theme, _renderer, _el) {
            this._theme = _theme;
            this._renderer = _renderer;
            this._el = _el;
            this.classes = this._theme.addStyleSheet(STYLES);
            this._up = false;
            _renderer.addClass(_el.nativeElement, this.classes.root);
        }
        Object.defineProperty(LyExpansionIcon.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (val) {
                this._colorClass = this._theme.addStyle('LyExpansionIcon.color', function (theme) { return ({
                    '{line}': {
                        backgroundColor: theme.colorOf(val)
                    }
                }); }, this._el.nativeElement, this._colorClass, null, STYLES);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LyExpansionIcon.prototype, "up", {
            get: function () {
                return this._up;
            },
            set: function (val) {
                var newVal = toBoolean(val);
                if (newVal !== this.up) {
                    this._up = newVal;
                    if (newVal) {
                        this._renderer.addClass(this._el.nativeElement, this.classes.up);
                    }
                    else {
                        this._renderer.removeClass(this._el.nativeElement, this.classes.up);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        LyExpansionIcon.prototype.toggle = function () {
            this.up = !this.up;
        };
        return LyExpansionIcon;
    }());
    LyExpansionIcon.decorators = [
        { type: i0.Component, args: [{
                    selector: 'ly-expansion-icon',
                    template: "<span [className]=\"classes.line\"></span>\n<span [className]=\"classes.line\"></span>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    LyExpansionIcon.ctorParameters = function () { return [
        { type: LyTheme2 },
        { type: i0.Renderer2 },
        { type: i0.ElementRef }
    ]; };
    LyExpansionIcon.propDecorators = {
        color: [{ type: i0.Input }],
        up: [{ type: i0.Input }]
    };

    var LyExpansionIconModule = /** @class */ (function () {
        function LyExpansionIconModule() {
        }
        return LyExpansionIconModule;
    }());
    LyExpansionIconModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [LyExpansionIcon],
                    exports: [LyExpansionIcon]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AUI_LAST_UPDATE = AUI_LAST_UPDATE;
    exports.AUI_VERSION = AUI_VERSION;
    exports.CoreTheme = CoreTheme;
    exports.ElementObserver = ElementObserver;
    exports.IS_CORE_THEME = IS_CORE_THEME;
    exports.LY_CLASS_NAME_PREFIX = LY_CLASS_NAME_PREFIX;
    exports.LY_COMMON_STYLES = LY_COMMON_STYLES;
    exports.LY_COMMON_STYLES_DEPRECATED = LY_COMMON_STYLES_DEPRECATED;
    exports.LY_HAMMER_OPTIONS = LY_HAMMER_OPTIONS;
    exports.LY_THEME = LY_THEME;
    exports.LY_THEME_GLOBAL_VARIABLES = LY_THEME_GLOBAL_VARIABLES;
    exports.LY_THEME_NAME = LY_THEME_NAME;
    exports.LyCommonModule = LyCommonModule;
    exports.LyCoreStyles = LyCoreStyles;
    exports.LyExpansionIcon = LyExpansionIcon;
    exports.LyExpansionIconModule = LyExpansionIconModule;
    exports.LyFocusState = LyFocusState;
    exports.LyHammerGestureConfig = LyHammerGestureConfig;
    exports.LyHostClass = LyHostClass;
    exports.LyOverlay = LyOverlay;
    exports.LyOverlayBackdrop = LyOverlayBackdrop;
    exports.LyOverlayConfig = LyOverlayConfig;
    exports.LyOverlayContainer = LyOverlayContainer;
    exports.LyOverlayModule = LyOverlayModule;
    exports.LyOverlayPosition = LyOverlayPosition;
    exports.LyOverlayRef = LyOverlayRef;
    exports.LyPaper = LyPaper;
    exports.LyPaperBase = LyPaperBase;
    exports.LyPaperMixinBase = LyPaperMixinBase;
    exports.LyRippleService = LyRippleService;
    exports.LySelectionModel = LySelectionModel;
    exports.LyStyle = LyStyle;
    exports.LyStyleDeprecated = LyStyleDeprecated;
    exports.LyStyleDeprecatedModule = LyStyleDeprecatedModule;
    exports.LyStyleUtils = LyStyleUtils;
    exports.LyTheme2 = LyTheme2;
    exports.LyThemeModule = LyThemeModule;
    exports.LylParse = LylParse;
    exports.MutationObserverFactory = MutationObserverFactory;
    exports.NgTranscludeDirective = NgTranscludeDirective;
    exports.NgTranscludeModule = NgTranscludeModule;
    exports.OverlayFactory = OverlayFactory;
    exports.Platform = Platform;
    exports.Positioning = Positioning;
    exports.Ripple = Ripple;
    exports.STYLES_BACKDROP_DARK = STYLES_BACKDROP_DARK;
    exports.STYLES_BACKDROP_ROOT = STYLES_BACKDROP_ROOT;
    exports.Shadows = Shadows;
    exports.StringIdGenerator = StringIdGenerator;
    exports.Style = Style;
    exports.StyleCollection = StyleCollection;
    exports.StyleRenderer = StyleRenderer;
    exports.StylesInDocument = StylesInDocument;
    exports.THEME_VARIABLES = THEME_VARIABLES;
    exports.Undefined = Undefined;
    exports.UndefinedValue = UndefinedValue;
    exports.WinResize = WinResize;
    exports.WinScroll = WinScroll;
    exports._STYLE_MAP = _STYLE_MAP;
    exports._renderStyle = _renderStyle;
    exports.capitalizeFirstLetter = capitalizeFirstLetter;
    exports.converterToCssKeyAndStyle = converterToCssKeyAndStyle;
    exports.createOverlayInjector = createOverlayInjector;
    exports.createStyle = createStyle;
    exports.defaultEntry = defaultEntry;
    exports.eachMedia = eachMedia;
    exports.getContrastYIQ = getContrastYIQ;
    exports.getLyThemeStyleUndefinedError = getLyThemeStyleUndefinedError;
    exports.getLyThemeVariableOptionUndefinedError = getLyThemeVariableOptionUndefinedError;
    exports.getLyThemeVariableUndefinedError = getLyThemeVariableUndefinedError;
    exports.getNativeElement = getNativeElement;
    exports.getThemeNameForSelectors = getThemeNameForSelectors;
    exports.invertPlacement = invertPlacement;
    exports.keyframesUniqueId = keyframesUniqueId;
    exports.lyl = lyl;
    exports.memoize = memoize;
    exports.mergeDeep = mergeDeep;
    exports.mergeThemes = mergeThemes;
    exports.mixinBg = mixinBg;
    exports.mixinColor = mixinColor;
    exports.mixinDisableRipple = mixinDisableRipple;
    exports.mixinDisabled = mixinDisabled;
    exports.mixinElevation = mixinElevation;
    exports.mixinOutlined = mixinOutlined;
    exports.mixinRaised = mixinRaised;
    exports.mixinShadowColor = mixinShadowColor;
    exports.mixinStyleUpdater = mixinStyleUpdater;
    exports.mixinTabIndex = mixinTabIndex;
    exports.parseMediaQueriesFromString = parseMediaQueriesFromString;
    exports.parseMediaQueryFromString = parseMediaQueryFromString;
    exports.scrollTo = scrollTo;
    exports.scrollWithAnimation = scrollWithAnimation;
    exports.shadowBuilder = shadowBuilder;
    exports.st2c = st2c;
    exports.supportsPassiveEventListeners = supportsPassiveEventListeners;
    exports.toBoolean = toBoolean;
    exports.toNumber = toNumber;
    exports.untilComponentDestroyed = untilComponentDestroyed;
    exports.withMediaInline = withMediaInline;
    exports.ɵ0 = ɵ0$4;
    exports.ɵ1 = ɵ1$3;
    exports.ɵ10 = ɵ10;
    exports.ɵ11 = ɵ11;
    exports.ɵ12 = ɵ12;
    exports.ɵ13 = ɵ13;
    exports.ɵ14 = ɵ14;
    exports.ɵ15 = ɵ15;
    exports.ɵ16 = ɵ16;
    exports.ɵ17 = ɵ17;
    exports.ɵ18 = ɵ18;
    exports.ɵ19 = ɵ19;
    exports.ɵ2 = ɵ2$2;
    exports.ɵ20 = ɵ20;
    exports.ɵ21 = ɵ21;
    exports.ɵ22 = ɵ22;
    exports.ɵ23 = ɵ23;
    exports.ɵ24 = ɵ24;
    exports.ɵ25 = ɵ25;
    exports.ɵ26 = ɵ26;
    exports.ɵ27 = ɵ27;
    exports.ɵ28 = ɵ28;
    exports.ɵ29 = ɵ29;
    exports.ɵ3 = ɵ3;
    exports.ɵ30 = ɵ30;
    exports.ɵ31 = ɵ31;
    exports.ɵ32 = ɵ32;
    exports.ɵ33 = ɵ33;
    exports.ɵ34 = ɵ34;
    exports.ɵ35 = ɵ35;
    exports.ɵ36 = ɵ36;
    exports.ɵ4 = ɵ4;
    exports.ɵ5 = ɵ5;
    exports.ɵ6 = ɵ6;
    exports.ɵ7 = ɵ7;
    exports.ɵ8 = ɵ8;
    exports.ɵ9 = ɵ9;
    exports.ɵa = LyWithClass;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=alyle-ui.umd.js.map
