import { ElementRef, Renderer2, NgZone, OnDestroy, OnInit, AfterViewInit, OnChanges, InjectionToken } from '@angular/core';
import { LyTheme2, ThemeVariables, LyRippleService, LyFocusState, StyleTemplate, LyClasses, ThemeRef, StyleCollection, StyleRenderer } from '@alyle/ui';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export interface LyButtonTheme {
    /** Styles for Button Component */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
    appearance?: {
        icon?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        fab?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        miniFab?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        [name: string]: ((classes: LyClasses<typeof STYLES>) => StyleTemplate) | undefined;
    };
    size?: {
        small?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        medium?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        large?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        [name: string]: ((classes: LyClasses<typeof STYLES>) => StyleTemplate) | undefined;
    };
}
export interface LyButtonDefaultOptions {
    size?: string;
    appearance?: string;
}
export interface LyButtonVariables {
    button?: LyButtonTheme;
}
export declare const LY_BUTTON_DEFAULT_OPTIONS: InjectionToken<LyButtonDefaultOptions>;
export declare const STYLES: (theme: ThemeVariables & LyButtonVariables, ref: ThemeRef) => {
    $priority: number;
    $name: string;
    root: () => (className: string) => string;
    content: (className: string) => string;
    /** When focus by keyboard */
    onFocusByKeyboard: any;
    animations: (className: string) => string;
};
/** @docs-private */
export declare class LyButtonBase {
    _theme: LyTheme2;
    _ngZone: NgZone;
    _platform: Platform;
    constructor(_theme: LyTheme2, _ngZone: NgZone, _platform: Platform);
}
/** @docs-private */
export declare const LyButtonMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/build-common-behaviors").CanStyleUpdater> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/bg").CanBg> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/color").CanColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/raised").CanRaised> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/alyle-ui").CanDisable> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/outlined").CanOutlined> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/elevation").CanElevation> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/shadow-color").CanShadowColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/disable-ripple").CanDisableRipple> & typeof LyButtonBase;
export declare class LyButton extends LyButtonMixinBase implements OnChanges, OnInit, AfterViewInit, OnDestroy {
    protected _el: ElementRef<HTMLButtonElement | HTMLAnchorElement>;
    protected _renderer: Renderer2;
    _rippleService: LyRippleService;
    private _focusState;
    readonly sRenderer: StyleRenderer;
    private _defaultConfig;
    static readonly и = "LyButton";
    /**
     * Style
     * @docs-private
     */
    readonly classes: Pick<{
        $priority: string;
        $name: string;
        root: string;
        content: string;
        onFocusByKeyboard: string;
        animations: string;
    }, "root" | "content" | "onFocusByKeyboard" | "animations">;
    private _rippleSensitive;
    private _size;
    private _sizeClass;
    private _appearance;
    private _appearanceClass;
    private _onFocusByKeyboardState;
    _rippleContainer: ElementRef;
    /** @docs-private */
    get rippleSensitive(): boolean;
    set rippleSensitive(value: boolean);
    /** Button size */
    get size(): string;
    set size(val: string);
    /** Button appearance */
    get appearance(): string;
    set appearance(val: string);
    /** @docs-private */
    get hostElement(): HTMLButtonElement | HTMLAnchorElement;
    constructor(_el: ElementRef<HTMLButtonElement | HTMLAnchorElement>, _renderer: Renderer2, _theme: LyTheme2, _ngZone: NgZone, _rippleService: LyRippleService, _focusState: LyFocusState, sRenderer: StyleRenderer, platform: Platform, _defaultConfig: LyButtonDefaultOptions);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    focus(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyButton, [null, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyButton, "button[ly-button], a[ly-button]", ["lyButton"], { "bg": "bg"; "color": "color"; "raised": "raised"; "disabled": "disabled"; "outlined": "outlined"; "elevation": "elevation"; "shadowColor": "shadowColor"; "disableRipple": "disableRipple"; "rippleSensitive": "sensitive"; "size": "size"; "appearance": "appearance"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIsIFRoZW1lVmFyaWFibGVzLCBMeVJpcHBsZVNlcnZpY2UsIEx5Rm9jdXNTdGF0ZSwgU3R5bGVUZW1wbGF0ZSwgTHlDbGFzc2VzLCBUaGVtZVJlZiwgU3R5bGVDb2xsZWN0aW9uLCBTdHlsZVJlbmRlcmVyIH0gZnJvbSAnQGFseWxlL3VpJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmV4cG9ydCBpbnRlcmZhY2UgTHlCdXR0b25UaGVtZSB7XG4gICAgLyoqIFN0eWxlcyBmb3IgQnV0dG9uIENvbXBvbmVudCAqL1xuICAgIHJvb3Q/OiBTdHlsZUNvbGxlY3Rpb248KChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGUpPiB8ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKTtcbiAgICBhcHBlYXJhbmNlPzoge1xuICAgICAgICBpY29uPzogKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZTtcbiAgICAgICAgZmFiPzogKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZTtcbiAgICAgICAgbWluaUZhYj86IChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGU7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiAoKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZSkgfCB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBzaXplPzoge1xuICAgICAgICBzbWFsbD86IChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGU7XG4gICAgICAgIG1lZGl1bT86IChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGU7XG4gICAgICAgIGxhcmdlPzogKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZTtcbiAgICAgICAgW25hbWU6IHN0cmluZ106ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKSB8IHVuZGVmaW5lZDtcbiAgICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBMeUJ1dHRvbkRlZmF1bHRPcHRpb25zIHtcbiAgICBzaXplPzogc3RyaW5nO1xuICAgIGFwcGVhcmFuY2U/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEx5QnV0dG9uVmFyaWFibGVzIHtcbiAgICBidXR0b24/OiBMeUJ1dHRvblRoZW1lO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgTFlfQlVUVE9OX0RFRkFVTFRfT1BUSU9OUzogSW5qZWN0aW9uVG9rZW48THlCdXR0b25EZWZhdWx0T3B0aW9ucz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBTVFlMRVM6ICh0aGVtZTogVGhlbWVWYXJpYWJsZXMgJiBMeUJ1dHRvblZhcmlhYmxlcywgcmVmOiBUaGVtZVJlZikgPT4ge1xuICAgICRwcmlvcml0eTogbnVtYmVyO1xuICAgICRuYW1lOiBzdHJpbmc7XG4gICAgcm9vdDogKCkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgY29udGVudDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgLyoqIFdoZW4gZm9jdXMgYnkga2V5Ym9hcmQgKi9cbiAgICBvbkZvY3VzQnlLZXlib2FyZDogYW55O1xuICAgIGFuaW1hdGlvbnM6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xufTtcbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeUJ1dHRvbkJhc2Uge1xuICAgIF90aGVtZTogTHlUaGVtZTI7XG4gICAgX25nWm9uZTogTmdab25lO1xuICAgIF9wbGF0Zm9ybTogUGxhdGZvcm07XG4gICAgY29uc3RydWN0b3IoX3RoZW1lOiBMeVRoZW1lMiwgX25nWm9uZTogTmdab25lLCBfcGxhdGZvcm06IFBsYXRmb3JtKTtcbn1cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBMeUJ1dHRvbk1peGluQmFzZTogaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vYnVpbGQtY29tbW9uLWJlaGF2aW9yc1wiKS5DYW5TdHlsZVVwZGF0ZXI+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vYmdcIikuQ2FuQmc+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29sb3JcIikuQ2FuQ29sb3I+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vcmFpc2VkXCIpLkNhblJhaXNlZD4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvYWx5bGUtdWlcIikuQ2FuRGlzYWJsZT4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9vdXRsaW5lZFwiKS5DYW5PdXRsaW5lZD4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9lbGV2YXRpb25cIikuQ2FuRWxldmF0aW9uPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL3NoYWRvdy1jb2xvclwiKS5DYW5TaGFkb3dDb2xvcj4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9kaXNhYmxlLXJpcHBsZVwiKS5DYW5EaXNhYmxlUmlwcGxlPiAmIHR5cGVvZiBMeUJ1dHRvbkJhc2U7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeUJ1dHRvbiBleHRlbmRzIEx5QnV0dG9uTWl4aW5CYXNlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIF9lbDogRWxlbWVudFJlZjxIVE1MQnV0dG9uRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50PjtcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgX3JpcHBsZVNlcnZpY2U6IEx5UmlwcGxlU2VydmljZTtcbiAgICBwcml2YXRlIF9mb2N1c1N0YXRlO1xuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcjtcbiAgICBwcml2YXRlIF9kZWZhdWx0Q29uZmlnO1xuICAgIHN0YXRpYyByZWFkb25seSDQuCA9IFwiTHlCdXR0b25cIjtcbiAgICAvKipcbiAgICAgKiBTdHlsZVxuICAgICAqIEBkb2NzLXByaXZhdGVcbiAgICAgKi9cbiAgICByZWFkb25seSBjbGFzc2VzOiBQaWNrPHtcbiAgICAgICAgJHByaW9yaXR5OiBzdHJpbmc7XG4gICAgICAgICRuYW1lOiBzdHJpbmc7XG4gICAgICAgIHJvb3Q6IHN0cmluZztcbiAgICAgICAgY29udGVudDogc3RyaW5nO1xuICAgICAgICBvbkZvY3VzQnlLZXlib2FyZDogc3RyaW5nO1xuICAgICAgICBhbmltYXRpb25zOiBzdHJpbmc7XG4gICAgfSwgXCJyb290XCIgfCBcImNvbnRlbnRcIiB8IFwib25Gb2N1c0J5S2V5Ym9hcmRcIiB8IFwiYW5pbWF0aW9uc1wiPjtcbiAgICBwcml2YXRlIF9yaXBwbGVTZW5zaXRpdmU7XG4gICAgcHJpdmF0ZSBfc2l6ZTtcbiAgICBwcml2YXRlIF9zaXplQ2xhc3M7XG4gICAgcHJpdmF0ZSBfYXBwZWFyYW5jZTtcbiAgICBwcml2YXRlIF9hcHBlYXJhbmNlQ2xhc3M7XG4gICAgcHJpdmF0ZSBfb25Gb2N1c0J5S2V5Ym9hcmRTdGF0ZTtcbiAgICBfcmlwcGxlQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgZ2V0IHJpcHBsZVNlbnNpdGl2ZSgpOiBib29sZWFuO1xuICAgIHNldCByaXBwbGVTZW5zaXRpdmUodmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKiBCdXR0b24gc2l6ZSAqL1xuICAgIGdldCBzaXplKCk6IHN0cmluZztcbiAgICBzZXQgc2l6ZSh2YWw6IHN0cmluZyk7XG4gICAgLyoqIEJ1dHRvbiBhcHBlYXJhbmNlICovXG4gICAgZ2V0IGFwcGVhcmFuY2UoKTogc3RyaW5nO1xuICAgIHNldCBhcHBlYXJhbmNlKHZhbDogc3RyaW5nKTtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGdldCBob3N0RWxlbWVudCgpOiBIVE1MQnV0dG9uRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKF9lbDogRWxlbWVudFJlZjxIVE1MQnV0dG9uRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50PiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIF90aGVtZTogTHlUaGVtZTIsIF9uZ1pvbmU6IE5nWm9uZSwgX3JpcHBsZVNlcnZpY2U6IEx5UmlwcGxlU2VydmljZSwgX2ZvY3VzU3RhdGU6IEx5Rm9jdXNTdGF0ZSwgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyLCBwbGF0Zm9ybTogUGxhdGZvcm0sIF9kZWZhdWx0Q29uZmlnOiBMeUJ1dHRvbkRlZmF1bHRPcHRpb25zKTtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19