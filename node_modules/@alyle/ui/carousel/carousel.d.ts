import { QueryList, AfterViewInit, OnDestroy, ElementRef, ChangeDetectorRef, OnInit, Renderer2 } from '@angular/core';
import { LyTheme2, ThemeVariables, ThemeRef, StyleCollection, LyClasses, StyleTemplate, StyleRenderer } from '@alyle/ui';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export interface LyCarouselTheme {
    /** Styles for Carousel Component */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
}
export interface LyCarouselVariables {
    carousel?: LyCarouselTheme;
}
export declare const STYLES: (theme: ThemeVariables & LyCarouselVariables, ref: ThemeRef) => {
    $priority: number;
    $global: (className: string) => string;
    root: () => (className: string) => string;
    actions: (className: string) => string;
    slideContainer: (className: string) => string;
    slide: (className: string) => string;
    slideContent: (className: string) => string;
    slideAnim: (className: string) => string;
    slideNoEvent: (className: string) => string;
    indicators: () => (className: string) => string;
    indicator: () => (className: string) => string;
    indicatorIcon: () => (className: string) => string;
    indicatorActive: () => (className: string) => string;
    barContainer: (className: string) => string;
    bar: (className: string) => string;
};
/** @docs-private */
export declare enum CarouselMode {
    /** full */
    default = 0,
    inline = 1
}
export declare class LyCarousel implements OnInit, AfterViewInit, OnDestroy {
    private _el;
    private _cd;
    private _theme;
    private _renderer;
    readonly sRenderer: StyleRenderer;
    private _platform;
    /** @docs-private */
    readonly classes: Pick<{
        $priority: string;
        $global: string;
        root: string;
        actions: string;
        slideContainer: string;
        slide: string;
        slideContent: string;
        slideAnim: string;
        slideNoEvent: string;
        indicators: string;
        indicator: string;
        indicatorIcon: string;
        indicatorActive: string;
        barContainer: string;
        bar: string;
    }, "root" | "actions" | "slideContainer" | "slide" | "slideContent" | "slideAnim" | "slideNoEvent" | "indicators" | "indicator" | "indicatorIcon" | "indicatorActive" | "barContainer" | "bar">;
    private _intervalFn;
    slideContainer: ElementRef;
    _slide: ElementRef;
    _progressBar: ElementRef<HTMLDivElement>;
    lyItems: QueryList<LyCarouselItem>;
    /** @docs-private */
    mode: CarouselMode;
    selectedIndex: number;
    _selectedElement: HTMLElement;
    private _touch;
    private _autoplay;
    private _hasProgressBar;
    private _interval;
    private _slideClass;
    /** Emits whenever the component is destroyed. */
    private readonly _destroy;
    /** @internal */
    get _isIntervalFn(): boolean;
    /**
     * It will pause the slide change when the mouse cursor passes
     * through the carousel.
     */
    get pauseOnHover(): boolean;
    set pauseOnHover(val: boolean);
    private _pauseOnHover;
    set touch(val: boolean);
    get touch(): boolean;
    set autoplay(val: boolean);
    get autoplay(): boolean;
    set hasProgressBar(val: boolean);
    get hasProgressBar(): boolean;
    set interval(val: number);
    get interval(): number;
    set hasNavigationArrows(val: boolean);
    get hasNavigationArrows(): boolean;
    private _hasNavigationArrows;
    set hasNavigationIndicators(val: boolean);
    get hasNavigationIndicators(): boolean;
    private _hasNavigationIndicators;
    constructor(_el: ElementRef, _cd: ChangeDetectorRef, _theme: LyTheme2, _renderer: Renderer2, sRenderer: StyleRenderer, _platform: Platform);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    _onMouseEnter(): void;
    _onMouseLeave(): void;
    /** @docs-private */
    _onDragStart(): void;
    _onDrag(e: any): void;
    _onDragEnd(e: any): void;
    _onDragCancel(): void;
    _select(val: number, notResetInterval?: boolean): void;
    prev(): void;
    next(notResetInterval?: boolean): void;
    stop(): void;
    private _resetInterval;
    private _restartProgressBarAnimation;
    private _onPan;
    private _markForCheck;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyCarousel, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyCarousel, "ly-carousel", never, { "mode": "mode"; "selectedIndex": "selectedIndex"; "pauseOnHover": "pauseOnHover"; "touch": "touch"; "autoplay": "autoplay"; "hasProgressBar": "hasProgressBar"; "interval": "interval"; "hasNavigationArrows": "hasNavigationArrows"; "hasNavigationIndicators": "hasNavigationIndicators"; }, {}, ["lyItems"], ["*"]>;
}
export declare class LyCarouselItem {
    private _theme;
    private _className;
    set srcImg(value: string);
    _nativeElement: HTMLElement;
    constructor(_theme: LyTheme2, _el: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyCarouselItem, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyCarouselItem, "ly-carousel-item", never, { "srcImg": "srcImg"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuZC50cyIsInNvdXJjZXMiOlsiY2Fyb3VzZWwuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlMaXN0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdG9yUmVmLCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIsIFRoZW1lVmFyaWFibGVzLCBUaGVtZVJlZiwgU3R5bGVDb2xsZWN0aW9uLCBMeUNsYXNzZXMsIFN0eWxlVGVtcGxhdGUsIFN0eWxlUmVuZGVyZXIgfSBmcm9tICdAYWx5bGUvdWknO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuZXhwb3J0IGludGVyZmFjZSBMeUNhcm91c2VsVGhlbWUge1xuICAgIC8qKiBTdHlsZXMgZm9yIENhcm91c2VsIENvbXBvbmVudCAqL1xuICAgIHJvb3Q/OiBTdHlsZUNvbGxlY3Rpb248KChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGUpPiB8ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTHlDYXJvdXNlbFZhcmlhYmxlcyB7XG4gICAgY2Fyb3VzZWw/OiBMeUNhcm91c2VsVGhlbWU7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBTVFlMRVM6ICh0aGVtZTogVGhlbWVWYXJpYWJsZXMgJiBMeUNhcm91c2VsVmFyaWFibGVzLCByZWY6IFRoZW1lUmVmKSA9PiB7XG4gICAgJHByaW9yaXR5OiBudW1iZXI7XG4gICAgJGdsb2JhbDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgcm9vdDogKCkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgYWN0aW9uczogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgc2xpZGVDb250YWluZXI6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIHNsaWRlOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBzbGlkZUNvbnRlbnQ6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIHNsaWRlQW5pbTogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgc2xpZGVOb0V2ZW50OiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBpbmRpY2F0b3JzOiAoKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBpbmRpY2F0b3I6ICgpID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGluZGljYXRvckljb246ICgpID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGluZGljYXRvckFjdGl2ZTogKCkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgYmFyQ29udGFpbmVyOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBiYXI6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xufTtcbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBlbnVtIENhcm91c2VsTW9kZSB7XG4gICAgLyoqIGZ1bGwgKi9cbiAgICBkZWZhdWx0ID0gMCxcbiAgICBpbmxpbmUgPSAxXG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeUNhcm91c2VsIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX2VsO1xuICAgIHByaXZhdGUgX2NkO1xuICAgIHByaXZhdGUgX3RoZW1lO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcjtcbiAgICBwcml2YXRlIF9wbGF0Zm9ybTtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgJGdsb2JhbDogc3RyaW5nO1xuICAgICAgICByb290OiBzdHJpbmc7XG4gICAgICAgIGFjdGlvbnM6IHN0cmluZztcbiAgICAgICAgc2xpZGVDb250YWluZXI6IHN0cmluZztcbiAgICAgICAgc2xpZGU6IHN0cmluZztcbiAgICAgICAgc2xpZGVDb250ZW50OiBzdHJpbmc7XG4gICAgICAgIHNsaWRlQW5pbTogc3RyaW5nO1xuICAgICAgICBzbGlkZU5vRXZlbnQ6IHN0cmluZztcbiAgICAgICAgaW5kaWNhdG9yczogc3RyaW5nO1xuICAgICAgICBpbmRpY2F0b3I6IHN0cmluZztcbiAgICAgICAgaW5kaWNhdG9ySWNvbjogc3RyaW5nO1xuICAgICAgICBpbmRpY2F0b3JBY3RpdmU6IHN0cmluZztcbiAgICAgICAgYmFyQ29udGFpbmVyOiBzdHJpbmc7XG4gICAgICAgIGJhcjogc3RyaW5nO1xuICAgIH0sIFwicm9vdFwiIHwgXCJhY3Rpb25zXCIgfCBcInNsaWRlQ29udGFpbmVyXCIgfCBcInNsaWRlXCIgfCBcInNsaWRlQ29udGVudFwiIHwgXCJzbGlkZUFuaW1cIiB8IFwic2xpZGVOb0V2ZW50XCIgfCBcImluZGljYXRvcnNcIiB8IFwiaW5kaWNhdG9yXCIgfCBcImluZGljYXRvckljb25cIiB8IFwiaW5kaWNhdG9yQWN0aXZlXCIgfCBcImJhckNvbnRhaW5lclwiIHwgXCJiYXJcIj47XG4gICAgcHJpdmF0ZSBfaW50ZXJ2YWxGbjtcbiAgICBzbGlkZUNvbnRhaW5lcjogRWxlbWVudFJlZjtcbiAgICBfc2xpZGU6IEVsZW1lbnRSZWY7XG4gICAgX3Byb2dyZXNzQmFyOiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcbiAgICBseUl0ZW1zOiBRdWVyeUxpc3Q8THlDYXJvdXNlbEl0ZW0+O1xuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgbW9kZTogQ2Fyb3VzZWxNb2RlO1xuICAgIHNlbGVjdGVkSW5kZXg6IG51bWJlcjtcbiAgICBfc2VsZWN0ZWRFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF90b3VjaDtcbiAgICBwcml2YXRlIF9hdXRvcGxheTtcbiAgICBwcml2YXRlIF9oYXNQcm9ncmVzc0JhcjtcbiAgICBwcml2YXRlIF9pbnRlcnZhbDtcbiAgICBwcml2YXRlIF9zbGlkZUNsYXNzO1xuICAgIC8qKiBFbWl0cyB3aGVuZXZlciB0aGUgY29tcG9uZW50IGlzIGRlc3Ryb3llZC4gKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kZXN0cm95O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBnZXQgX2lzSW50ZXJ2YWxGbigpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEl0IHdpbGwgcGF1c2UgdGhlIHNsaWRlIGNoYW5nZSB3aGVuIHRoZSBtb3VzZSBjdXJzb3IgcGFzc2VzXG4gICAgICogdGhyb3VnaCB0aGUgY2Fyb3VzZWwuXG4gICAgICovXG4gICAgZ2V0IHBhdXNlT25Ib3ZlcigpOiBib29sZWFuO1xuICAgIHNldCBwYXVzZU9uSG92ZXIodmFsOiBib29sZWFuKTtcbiAgICBwcml2YXRlIF9wYXVzZU9uSG92ZXI7XG4gICAgc2V0IHRvdWNoKHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IHRvdWNoKCk6IGJvb2xlYW47XG4gICAgc2V0IGF1dG9wbGF5KHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IGF1dG9wbGF5KCk6IGJvb2xlYW47XG4gICAgc2V0IGhhc1Byb2dyZXNzQmFyKHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IGhhc1Byb2dyZXNzQmFyKCk6IGJvb2xlYW47XG4gICAgc2V0IGludGVydmFsKHZhbDogbnVtYmVyKTtcbiAgICBnZXQgaW50ZXJ2YWwoKTogbnVtYmVyO1xuICAgIHNldCBoYXNOYXZpZ2F0aW9uQXJyb3dzKHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IGhhc05hdmlnYXRpb25BcnJvd3MoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9oYXNOYXZpZ2F0aW9uQXJyb3dzO1xuICAgIHNldCBoYXNOYXZpZ2F0aW9uSW5kaWNhdG9ycyh2YWw6IGJvb2xlYW4pO1xuICAgIGdldCBoYXNOYXZpZ2F0aW9uSW5kaWNhdG9ycygpOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2hhc05hdmlnYXRpb25JbmRpY2F0b3JzO1xuICAgIGNvbnN0cnVjdG9yKF9lbDogRWxlbWVudFJlZiwgX2NkOiBDaGFuZ2VEZXRlY3RvclJlZiwgX3RoZW1lOiBMeVRoZW1lMiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlciwgX3BsYXRmb3JtOiBQbGF0Zm9ybSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIF9vbk1vdXNlRW50ZXIoKTogdm9pZDtcbiAgICBfb25Nb3VzZUxlYXZlKCk6IHZvaWQ7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBfb25EcmFnU3RhcnQoKTogdm9pZDtcbiAgICBfb25EcmFnKGU6IGFueSk6IHZvaWQ7XG4gICAgX29uRHJhZ0VuZChlOiBhbnkpOiB2b2lkO1xuICAgIF9vbkRyYWdDYW5jZWwoKTogdm9pZDtcbiAgICBfc2VsZWN0KHZhbDogbnVtYmVyLCBub3RSZXNldEludGVydmFsPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJldigpOiB2b2lkO1xuICAgIG5leHQobm90UmVzZXRJbnRlcnZhbD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHN0b3AoKTogdm9pZDtcbiAgICBwcml2YXRlIF9yZXNldEludGVydmFsO1xuICAgIHByaXZhdGUgX3Jlc3RhcnRQcm9ncmVzc0JhckFuaW1hdGlvbjtcbiAgICBwcml2YXRlIF9vblBhbjtcbiAgICBwcml2YXRlIF9tYXJrRm9yQ2hlY2s7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeUNhcm91c2VsSXRlbSB7XG4gICAgcHJpdmF0ZSBfdGhlbWU7XG4gICAgcHJpdmF0ZSBfY2xhc3NOYW1lO1xuICAgIHNldCBzcmNJbWcodmFsdWU6IHN0cmluZyk7XG4gICAgX25hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKF90aGVtZTogTHlUaGVtZTIsIF9lbDogRWxlbWVudFJlZik7XG59XG4iXX0=