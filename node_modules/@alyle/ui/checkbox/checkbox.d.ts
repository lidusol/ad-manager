import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { LyCoreStyles as LyCommonStyles, LyFocusState, LyTheme2, ThemeVariables, ThemeRef, StyleRenderer, StyleCollection, LyClasses, StyleTemplate, WithStyles } from '@alyle/ui';
import { Color } from '@alyle/ui/color';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export interface LyCheckboxTheme {
    /** Styles for Checkbox Component. */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
    /** Styles that apply when a color is set. */
    color?: (classes: LyClasses<typeof STYLES>, color: Color) => StyleTemplate;
}
export interface LyCheckboxVariables {
    checkbox?: LyCheckboxTheme;
}
export declare const STYLES: (theme: ThemeVariables & LyCheckboxVariables, ref: ThemeRef) => {
    $name: string;
    $priority: number;
    root: () => (className: string) => string;
    layout: () => (className: string) => string;
    icon: (className: string) => string;
    label: (className: string) => string;
    checked: () => (className: string) => string;
    input: (className: string) => string;
    onFocusByKeyboard: any;
    disabled: () => (className: string) => string;
    animations: () => (className: string) => string;
};
/**
 * This allows it to support [(ngModel)].
 * @ignore
 */
export declare const LY_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;
/** Change event object emitted by LyCheckbox. */
export declare class LyCheckboxChange {
    /** The source LyCheckbox of the event. */
    source: LyCheckbox;
    /** The new `checked` value of the checkbox. */
    checked: boolean;
}
/** @docs-private */
export declare class LyCheckboxBase {
    _theme: LyTheme2;
    _ngZone: NgZone;
    _platform: Platform;
    constructor(_theme: LyTheme2, _ngZone: NgZone, _platform: Platform);
}
/** @docs-private */
export declare const LyCheckboxMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/disable-ripple").CanDisableRipple> & typeof LyCheckboxBase;
/**
 * @dynamic
 */
export declare class LyCheckbox extends LyCheckboxMixinBase implements WithStyles, ControlValueAccessor, OnInit, AfterViewInit, OnDestroy {
    _commonStyles: LyCommonStyles;
    private _el;
    private _renderer;
    private _changeDetectorRef;
    private _focusState;
    readonly sRenderer: StyleRenderer;
    /** @ignore */
    static readonly и = "LyCheckbox";
    /**
     * styles
     * @ignore
     */
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        layout: string;
        icon: string;
        label: string;
        checked: string;
        input: string;
        onFocusByKeyboard: string;
        disabled: string;
        animations: string;
    }, "root" | "layout" | "icon" | "label" | "checked" | "input" | "onFocusByKeyboard" | "disabled" | "animations">;
    protected _color: string;
    protected _colorClass: string;
    protected _required: boolean;
    protected _indeterminate: boolean;
    protected _checked: boolean;
    protected _disabled: any;
    private _onFocusByKeyboardState;
    _innerContainer: ElementRef<HTMLDivElement>;
    /** The value attribute of the native input element */
    value: string;
    /** Checkbox color when checked */
    color: string | null;
    /**
     * Whether the checkbox is checked.
     */
    get checked(): boolean;
    set checked(val: boolean);
    get required(): boolean;
    set required(val: boolean);
    get disabled(): boolean;
    set disabled(val: boolean);
    /** Event emitted when the checkbox's `checked` value changes. */
    readonly change: EventEmitter<LyCheckboxChange>;
    /** The native `<input type="checkbox">` element */
    _inputElement: ElementRef<HTMLInputElement>;
    _onTouched: () => any;
    private _controlValueAccessorChangeFn;
    constructor(_commonStyles: LyCommonStyles, _theme: LyTheme2, _el: ElementRef, _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef, _focusState: LyFocusState, sRenderer: StyleRenderer, ngZone: NgZone, platform: Platform);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    writeValue(value: any): void;
    /** @docs-private */
    registerOnChange(fn: (value: any) => void): void;
    /** @docs-private */
    registerOnTouched(fn: any): void;
    /** @docs-private */
    setDisabledState(isDisabled: boolean): void;
    /** Toggles the `checked` state of the checkbox. */
    toggle(): void;
    _onInputClick(event: Event): void;
    _onChange(event: Event): void;
    private _emitChangeEvent;
    private _markForCheck;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyCheckbox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyCheckbox, "ly-checkbox", ["lyCheckbox"], { "disableRipple": "disableRipple"; "checked": "checked"; "required": "required"; "disabled": "disabled"; "color": "color"; "value": "value"; }, { "change": "change"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guZC50cyIsInNvdXJjZXMiOlsiY2hlY2tib3guZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTHlDb3JlU3R5bGVzIGFzIEx5Q29tbW9uU3R5bGVzLCBMeUZvY3VzU3RhdGUsIEx5VGhlbWUyLCBUaGVtZVZhcmlhYmxlcywgVGhlbWVSZWYsIFN0eWxlUmVuZGVyZXIsIFN0eWxlQ29sbGVjdGlvbiwgTHlDbGFzc2VzLCBTdHlsZVRlbXBsYXRlLCBXaXRoU3R5bGVzIH0gZnJvbSAnQGFseWxlL3VpJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnQGFseWxlL3VpL2NvbG9yJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmV4cG9ydCBpbnRlcmZhY2UgTHlDaGVja2JveFRoZW1lIHtcbiAgICAvKiogU3R5bGVzIGZvciBDaGVja2JveCBDb21wb25lbnQuICovXG4gICAgcm9vdD86IFN0eWxlQ29sbGVjdGlvbjwoKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZSk+IHwgKChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGUpO1xuICAgIC8qKiBTdHlsZXMgdGhhdCBhcHBseSB3aGVuIGEgY29sb3IgaXMgc2V0LiAqL1xuICAgIGNvbG9yPzogKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPiwgY29sb3I6IENvbG9yKSA9PiBTdHlsZVRlbXBsYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSBMeUNoZWNrYm94VmFyaWFibGVzIHtcbiAgICBjaGVja2JveD86IEx5Q2hlY2tib3hUaGVtZTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNUWUxFUzogKHRoZW1lOiBUaGVtZVZhcmlhYmxlcyAmIEx5Q2hlY2tib3hWYXJpYWJsZXMsIHJlZjogVGhlbWVSZWYpID0+IHtcbiAgICAkbmFtZTogc3RyaW5nO1xuICAgICRwcmlvcml0eTogbnVtYmVyO1xuICAgIHJvb3Q6ICgpID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGxheW91dDogKCkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgaWNvbjogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgbGFiZWw6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGNoZWNrZWQ6ICgpID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGlucHV0OiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBvbkZvY3VzQnlLZXlib2FyZDogYW55O1xuICAgIGRpc2FibGVkOiAoKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBhbmltYXRpb25zOiAoKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbn07XG4vKipcbiAqIFRoaXMgYWxsb3dzIGl0IHRvIHN1cHBvcnQgWyhuZ01vZGVsKV0uXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IExZX0NIRUNLQk9YX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IGFueTtcbi8qKiBDaGFuZ2UgZXZlbnQgb2JqZWN0IGVtaXR0ZWQgYnkgTHlDaGVja2JveC4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5Q2hlY2tib3hDaGFuZ2Uge1xuICAgIC8qKiBUaGUgc291cmNlIEx5Q2hlY2tib3ggb2YgdGhlIGV2ZW50LiAqL1xuICAgIHNvdXJjZTogTHlDaGVja2JveDtcbiAgICAvKiogVGhlIG5ldyBgY2hlY2tlZGAgdmFsdWUgb2YgdGhlIGNoZWNrYm94LiAqL1xuICAgIGNoZWNrZWQ6IGJvb2xlYW47XG59XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlDaGVja2JveEJhc2Uge1xuICAgIF90aGVtZTogTHlUaGVtZTI7XG4gICAgX25nWm9uZTogTmdab25lO1xuICAgIF9wbGF0Zm9ybTogUGxhdGZvcm07XG4gICAgY29uc3RydWN0b3IoX3RoZW1lOiBMeVRoZW1lMiwgX25nWm9uZTogTmdab25lLCBfcGxhdGZvcm06IFBsYXRmb3JtKTtcbn1cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBMeUNoZWNrYm94TWl4aW5CYXNlOiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9kaXNhYmxlLXJpcHBsZVwiKS5DYW5EaXNhYmxlUmlwcGxlPiAmIHR5cGVvZiBMeUNoZWNrYm94QmFzZTtcbi8qKlxuICogQGR5bmFtaWNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlDaGVja2JveCBleHRlbmRzIEx5Q2hlY2tib3hNaXhpbkJhc2UgaW1wbGVtZW50cyBXaXRoU3R5bGVzLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIF9jb21tb25TdHlsZXM6IEx5Q29tbW9uU3R5bGVzO1xuICAgIHByaXZhdGUgX2VsO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgX2ZvY3VzU3RhdGU7XG4gICAgcmVhZG9ubHkgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyO1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgc3RhdGljIHJlYWRvbmx5INC4ID0gXCJMeUNoZWNrYm94XCI7XG4gICAgLyoqXG4gICAgICogc3R5bGVzXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkbmFtZTogc3RyaW5nO1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgcm9vdDogc3RyaW5nO1xuICAgICAgICBsYXlvdXQ6IHN0cmluZztcbiAgICAgICAgaWNvbjogc3RyaW5nO1xuICAgICAgICBsYWJlbDogc3RyaW5nO1xuICAgICAgICBjaGVja2VkOiBzdHJpbmc7XG4gICAgICAgIGlucHV0OiBzdHJpbmc7XG4gICAgICAgIG9uRm9jdXNCeUtleWJvYXJkOiBzdHJpbmc7XG4gICAgICAgIGRpc2FibGVkOiBzdHJpbmc7XG4gICAgICAgIGFuaW1hdGlvbnM6IHN0cmluZztcbiAgICB9LCBcInJvb3RcIiB8IFwibGF5b3V0XCIgfCBcImljb25cIiB8IFwibGFiZWxcIiB8IFwiY2hlY2tlZFwiIHwgXCJpbnB1dFwiIHwgXCJvbkZvY3VzQnlLZXlib2FyZFwiIHwgXCJkaXNhYmxlZFwiIHwgXCJhbmltYXRpb25zXCI+O1xuICAgIHByb3RlY3RlZCBfY29sb3I6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgX2NvbG9yQ2xhc3M6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgX3JlcXVpcmVkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfaW5kZXRlcm1pbmF0ZTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX2NoZWNrZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlZDogYW55O1xuICAgIHByaXZhdGUgX29uRm9jdXNCeUtleWJvYXJkU3RhdGU7XG4gICAgX2lubmVyQ29udGFpbmVyOiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcbiAgICAvKiogVGhlIHZhbHVlIGF0dHJpYnV0ZSBvZiB0aGUgbmF0aXZlIGlucHV0IGVsZW1lbnQgKi9cbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIC8qKiBDaGVja2JveCBjb2xvciB3aGVuIGNoZWNrZWQgKi9cbiAgICBjb2xvcjogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAqL1xuICAgIGdldCBjaGVja2VkKCk6IGJvb2xlYW47XG4gICAgc2V0IGNoZWNrZWQodmFsOiBib29sZWFuKTtcbiAgICBnZXQgcmVxdWlyZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgcmVxdWlyZWQodmFsOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZGlzYWJsZWQodmFsOiBib29sZWFuKTtcbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBjaGVja2JveCdzIGBjaGVja2VkYCB2YWx1ZSBjaGFuZ2VzLiAqL1xuICAgIHJlYWRvbmx5IGNoYW5nZTogRXZlbnRFbWl0dGVyPEx5Q2hlY2tib3hDaGFuZ2U+O1xuICAgIC8qKiBUaGUgbmF0aXZlIGA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCI+YCBlbGVtZW50ICovXG4gICAgX2lucHV0RWxlbWVudDogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PjtcbiAgICBfb25Ub3VjaGVkOiAoKSA9PiBhbnk7XG4gICAgcHJpdmF0ZSBfY29udHJvbFZhbHVlQWNjZXNzb3JDaGFuZ2VGbjtcbiAgICBjb25zdHJ1Y3RvcihfY29tbW9uU3R5bGVzOiBMeUNvbW1vblN0eWxlcywgX3RoZW1lOiBMeVRoZW1lMiwgX2VsOiBFbGVtZW50UmVmLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgX2ZvY3VzU3RhdGU6IEx5Rm9jdXNTdGF0ZSwgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyLCBuZ1pvbmU6IE5nWm9uZSwgcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKiBUb2dnbGVzIHRoZSBgY2hlY2tlZGAgc3RhdGUgb2YgdGhlIGNoZWNrYm94LiAqL1xuICAgIHRvZ2dsZSgpOiB2b2lkO1xuICAgIF9vbklucHV0Q2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBfb25DaGFuZ2UoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIF9lbWl0Q2hhbmdlRXZlbnQ7XG4gICAgcHJpdmF0ZSBfbWFya0ZvckNoZWNrO1xufVxuIl19