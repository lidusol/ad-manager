import { OnInit, ComponentFactory, TemplateRef, Injector, ApplicationRef, Renderer2, ElementRef, ChangeDetectorRef, DoCheck } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { LyOverlayRef, LyTheme2, ThemeVariables, LyClasses, StyleCollection, StyleTemplate, ThemeRef, StyleRenderer, WithStyles } from '@alyle/ui';
import { Subject } from 'rxjs';
import { LyDialogRef } from './dialog-ref';
import { Color } from '@alyle/ui/color';
import * as ɵngcc0 from '@angular/core';
export interface LyDialogTheme {
    /** Styles for Dialog Component. */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
    /** Styles that apply when a color is set. */
    color?: (classes: LyClasses<typeof STYLES>, color: Color) => StyleTemplate;
}
export interface LyDialogVariables {
    dialog?: LyDialogTheme;
}
/** @docs-private */
declare const STYLES: (theme: ThemeVariables & LyDialogVariables, ref: ThemeRef) => {
    root: () => (className: string) => string;
};
/** @docs-private */
export declare class LyDialogContainer implements WithStyles, OnInit, DoCheck {
    readonly sRenderer: StyleRenderer;
    private _appRef;
    private _overlayRef;
    private _theme;
    private _el;
    private _cd;
    private _renderer;
    /** @docs-private */
    readonly classes: Pick<{
        root: string;
    }, "root">;
    private _embeddedViewRef;
    private _componentRef;
    /** @internal */
    readonly _afterOpened: Subject<void>;
    /** @internal */
    readonly _beforeClosed: Subject<any>;
    /** @internal */
    readonly _afterClosed: Subject<any>;
    /**
     * State of the dialog animation.
     * @internal
     */
    _state: 'void' | 'enter' | 'exit';
    /** @internal */
    private readonly viewContainerRef;
    /** @internal */
    private _componentFactoryOrTemplate;
    private _newInjector;
    constructor(sRenderer: StyleRenderer, _appRef: ApplicationRef, _overlayRef: LyOverlayRef, _theme: LyTheme2, _el: ElementRef<HTMLElement>, _cd: ChangeDetectorRef, _renderer: Renderer2);
    ngOnInit(): void;
    ngDoCheck(): void;
    /** @internal */
    _init(componentFactoryOrTemplate: ComponentFactory<any> | TemplateRef<any>, newInjector: Injector): void;
    /**
     * Start to close, starts the dialog exit animation.
     * @internal
     */
    _startClose(): void;
    _onAnimationStart(event: AnimationEvent): void;
    /** @internal */
    _onAnimationDone(event: AnimationEvent): void;
    private _destroy;
    /** @internal */
    _getHostElement(): HTMLElement;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyDialogContainer, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyDialogContainer, "ly-dialog-container", never, {}, {}, never, never>;
}
export declare class LyDialogContext {
    private _injector;
    $implicit: any;
    dialogRef: LyDialogRef;
    get data(): unknown;
    constructor(_injector: Injector);
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNvbnRhaW5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGlhbG9nLWNvbnRhaW5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIENvbXBvbmVudEZhY3RvcnksIFRlbXBsYXRlUmVmLCBJbmplY3RvciwgQXBwbGljYXRpb25SZWYsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIERvQ2hlY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBMeU92ZXJsYXlSZWYsIEx5VGhlbWUyLCBUaGVtZVZhcmlhYmxlcywgTHlDbGFzc2VzLCBTdHlsZUNvbGxlY3Rpb24sIFN0eWxlVGVtcGxhdGUsIFRoZW1lUmVmLCBTdHlsZVJlbmRlcmVyLCBXaXRoU3R5bGVzIH0gZnJvbSAnQGFseWxlL3VpJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEx5RGlhbG9nUmVmIH0gZnJvbSAnLi9kaWFsb2ctcmVmJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnQGFseWxlL3VpL2NvbG9yJztcbmV4cG9ydCBpbnRlcmZhY2UgTHlEaWFsb2dUaGVtZSB7XG4gICAgLyoqIFN0eWxlcyBmb3IgRGlhbG9nIENvbXBvbmVudC4gKi9cbiAgICByb290PzogU3R5bGVDb2xsZWN0aW9uPCgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKT4gfCAoKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZSk7XG4gICAgLyoqIFN0eWxlcyB0aGF0IGFwcGx5IHdoZW4gYSBjb2xvciBpcyBzZXQuICovXG4gICAgY29sb3I/OiAoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+LCBjb2xvcjogQ29sb3IpID0+IFN0eWxlVGVtcGxhdGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIEx5RGlhbG9nVmFyaWFibGVzIHtcbiAgICBkaWFsb2c/OiBMeURpYWxvZ1RoZW1lO1xufVxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmRlY2xhcmUgY29uc3QgU1RZTEVTOiAodGhlbWU6IFRoZW1lVmFyaWFibGVzICYgTHlEaWFsb2dWYXJpYWJsZXMsIHJlZjogVGhlbWVSZWYpID0+IHtcbiAgICByb290OiAoKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbn07XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlEaWFsb2dDb250YWluZXIgaW1wbGVtZW50cyBXaXRoU3R5bGVzLCBPbkluaXQsIERvQ2hlY2sge1xuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcjtcbiAgICBwcml2YXRlIF9hcHBSZWY7XG4gICAgcHJpdmF0ZSBfb3ZlcmxheVJlZjtcbiAgICBwcml2YXRlIF90aGVtZTtcbiAgICBwcml2YXRlIF9lbDtcbiAgICBwcml2YXRlIF9jZDtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICByb290OiBzdHJpbmc7XG4gICAgfSwgXCJyb290XCI+O1xuICAgIHByaXZhdGUgX2VtYmVkZGVkVmlld1JlZjtcbiAgICBwcml2YXRlIF9jb21wb25lbnRSZWY7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IF9hZnRlck9wZW5lZDogU3ViamVjdDx2b2lkPjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcmVhZG9ubHkgX2JlZm9yZUNsb3NlZDogU3ViamVjdDxhbnk+O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBfYWZ0ZXJDbG9zZWQ6IFN1YmplY3Q8YW55PjtcbiAgICAvKipcbiAgICAgKiBTdGF0ZSBvZiB0aGUgZGlhbG9nIGFuaW1hdGlvbi5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfc3RhdGU6ICd2b2lkJyB8ICdlbnRlcicgfCAnZXhpdCc7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdmlld0NvbnRhaW5lclJlZjtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBfY29tcG9uZW50RmFjdG9yeU9yVGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBfbmV3SW5qZWN0b3I7XG4gICAgY29uc3RydWN0b3Ioc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyLCBfYXBwUmVmOiBBcHBsaWNhdGlvblJlZiwgX292ZXJsYXlSZWY6IEx5T3ZlcmxheVJlZiwgX3RoZW1lOiBMeVRoZW1lMiwgX2VsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgX2NkOiBDaGFuZ2VEZXRlY3RvclJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9pbml0KGNvbXBvbmVudEZhY3RvcnlPclRlbXBsYXRlOiBDb21wb25lbnRGYWN0b3J5PGFueT4gfCBUZW1wbGF0ZVJlZjxhbnk+LCBuZXdJbmplY3RvcjogSW5qZWN0b3IpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRvIGNsb3NlLCBzdGFydHMgdGhlIGRpYWxvZyBleGl0IGFuaW1hdGlvbi5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfc3RhcnRDbG9zZSgpOiB2b2lkO1xuICAgIF9vbkFuaW1hdGlvblN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9vbkFuaW1hdGlvbkRvbmUoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIF9kZXN0cm95O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfZ2V0SG9zdEVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeURpYWxvZ0NvbnRleHQge1xuICAgIHByaXZhdGUgX2luamVjdG9yO1xuICAgICRpbXBsaWNpdDogYW55O1xuICAgIGRpYWxvZ1JlZjogTHlEaWFsb2dSZWY7XG4gICAgZ2V0IGRhdGEoKTogdW5rbm93bjtcbiAgICBjb25zdHJ1Y3RvcihfaW5qZWN0b3I6IEluamVjdG9yKTtcbn1cbmV4cG9ydCB7fTtcbiJdfQ==