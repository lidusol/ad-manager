import { ElementRef, OnChanges, Renderer2, TemplateRef, ViewContainerRef, AfterViewInit, OnDestroy, ChangeDetectorRef, NgZone } from '@angular/core';
import { LyTheme2, ThemeVariables, Placement, StyleRenderer, ThemeRef, StyleCollection, StyleTemplate, LyClasses, WithStyles } from '@alyle/ui';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export interface LyDrawerTheme {
    /** Styles for Button Component */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
}
export interface LyDrawerVariables {
    drawer?: LyDrawerTheme;
}
export declare type LyDrawerPosition = Placement;
export declare type LyDrawerMode = 'side' | 'over';
export declare const STYLES: (theme: ThemeVariables & LyDrawerVariables, ref: ThemeRef) => {
    $name: string;
    $priority: number;
    root: () => StyleTemplate;
    drawerContainer: (className: string) => string;
    drawer: (className: string) => string;
    drawerContent: (className: string) => string;
    drawerOpened: (className: string) => string;
    drawerClosed: any;
    backdrop: (className: string) => string;
    transition: (className: string) => string;
};
export declare class LyDrawerContent {
    private _renderer;
    private _el;
    static readonly и = "LyDrawerContent";
    constructor(_renderer: Renderer2, _el: ElementRef, drawerContainer: any);
    _getHostElement(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyDrawerContent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyDrawerContent, "ly-drawer-content", never, {}, {}, never>;
}
export declare class LyDrawerContainer implements WithStyles {
    private _renderer;
    private _el;
    readonly sRenderer: StyleRenderer;
    /** @docs-private */
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        drawerContainer: string;
        drawer: string;
        drawerContent: string;
        drawerOpened: string;
        drawerClosed: string;
        backdrop: string;
        transition: string;
    }, "root" | "drawerContainer" | "drawer" | "drawerContent" | "drawerOpened" | "drawerClosed" | "backdrop" | "transition">;
    _openDrawers: number;
    _drawerContent: LyDrawerContent;
    constructor(_renderer: Renderer2, _el: ElementRef, sRenderer: StyleRenderer);
    _getHostElement(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyDrawerContainer, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyDrawerContainer, "ly-drawer-container", never, {}, {}, ["_drawerContent"]>;
}
export declare class LyDrawer implements OnChanges, AfterViewInit, OnDestroy {
    private _theme;
    private _styleRenderer;
    private _renderer;
    private _el;
    private _drawerContainer;
    private _vcr;
    private _viewportRuler;
    private _cd;
    private _zone;
    private _platform;
    static readonly и = "LyDrawer";
    /**
     * Styles
     * @docs-private
     */
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        drawerContainer: string;
        drawer: string;
        drawerContent: string;
        drawerOpened: string;
        drawerClosed: string;
        backdrop: string;
        transition: string;
    }, "root" | "drawerContainer" | "drawer" | "drawerContent" | "drawerOpened" | "drawerClosed" | "backdrop" | "transition">;
    private _forceModeOverOpened;
    private _fromToggle;
    private _opened;
    private _viewRef?;
    private _isAnimation;
    private _hasBackdrop;
    private _position;
    private _drawerRootClass;
    private _drawerClass?;
    private _drawerContentClass?;
    private _tabResizeSub;
    private _isOpen;
    _backdrop: TemplateRef<any>;
    set width(_val: string);
    set height(_val: string);
    set opened(val: boolean);
    get opened(): boolean;
    mode: LyDrawerMode;
    spacingAbove: string | number;
    spacingBelow: string | number;
    spacingBefore: string | number;
    spacingAfter: string | number;
    drawerWidth: number | string;
    drawerHeight: number | string;
    get hasBackdrop(): any;
    set hasBackdrop(val: any);
    set position(val: LyDrawerPosition);
    get position(): LyDrawerPosition;
    [0x1]: string;
    constructor(_theme: LyTheme2, _styleRenderer: StyleRenderer, _renderer: Renderer2, _el: ElementRef, _drawerContainer: LyDrawerContainer, _vcr: ViewContainerRef, _viewportRuler: ViewportRuler, _cd: ChangeDetectorRef, _zone: NgZone, _platform: Platform);
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    toggle(): void;
    private _contentHasMargin;
    private _updateBackdrop;
    private _updateAnimations;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyDrawer, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyDrawer, "ly-drawer", ["lyDrawer"], { "mode": "mode"; "width": "width"; "height": "height"; "opened": "opened"; "hasBackdrop": "hasBackdrop"; "position": "position"; "spacingAbove": "spacingAbove"; "spacingBelow": "spacingBelow"; "spacingBefore": "spacingBefore"; "spacingAfter": "spacingAfter"; "drawerWidth": "drawerWidth"; "drawerHeight": "drawerHeight"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLmQudHMiLCJzb3VyY2VzIjpbImRyYXdlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIsIFRoZW1lVmFyaWFibGVzLCBQbGFjZW1lbnQsIFN0eWxlUmVuZGVyZXIsIFRoZW1lUmVmLCBTdHlsZUNvbGxlY3Rpb24sIFN0eWxlVGVtcGxhdGUsIEx5Q2xhc3NlcywgV2l0aFN0eWxlcyB9IGZyb20gJ0BhbHlsZS91aSc7XG5pbXBvcnQgeyBWaWV3cG9ydFJ1bGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5leHBvcnQgaW50ZXJmYWNlIEx5RHJhd2VyVGhlbWUge1xuICAgIC8qKiBTdHlsZXMgZm9yIEJ1dHRvbiBDb21wb25lbnQgKi9cbiAgICByb290PzogU3R5bGVDb2xsZWN0aW9uPCgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKT4gfCAoKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZSk7XG59XG5leHBvcnQgaW50ZXJmYWNlIEx5RHJhd2VyVmFyaWFibGVzIHtcbiAgICBkcmF3ZXI/OiBMeURyYXdlclRoZW1lO1xufVxuZXhwb3J0IGRlY2xhcmUgdHlwZSBMeURyYXdlclBvc2l0aW9uID0gUGxhY2VtZW50O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBMeURyYXdlck1vZGUgPSAnc2lkZScgfCAnb3Zlcic7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBTVFlMRVM6ICh0aGVtZTogVGhlbWVWYXJpYWJsZXMgJiBMeURyYXdlclZhcmlhYmxlcywgcmVmOiBUaGVtZVJlZikgPT4ge1xuICAgICRuYW1lOiBzdHJpbmc7XG4gICAgJHByaW9yaXR5OiBudW1iZXI7XG4gICAgcm9vdDogKCkgPT4gU3R5bGVUZW1wbGF0ZTtcbiAgICBkcmF3ZXJDb250YWluZXI6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGRyYXdlcjogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgZHJhd2VyQ29udGVudDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgZHJhd2VyT3BlbmVkOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBkcmF3ZXJDbG9zZWQ6IGFueTtcbiAgICBiYWNrZHJvcDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgdHJhbnNpdGlvbjogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG59O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlEcmF3ZXJDb250ZW50IHtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBwcml2YXRlIF9lbDtcbiAgICBzdGF0aWMgcmVhZG9ubHkg0LggPSBcIkx5RHJhd2VyQ29udGVudFwiO1xuICAgIGNvbnN0cnVjdG9yKF9yZW5kZXJlcjogUmVuZGVyZXIyLCBfZWw6IEVsZW1lbnRSZWYsIGRyYXdlckNvbnRhaW5lcjogYW55KTtcbiAgICBfZ2V0SG9zdEVsZW1lbnQoKTogYW55O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlEcmF3ZXJDb250YWluZXIgaW1wbGVtZW50cyBXaXRoU3R5bGVzIHtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBwcml2YXRlIF9lbDtcbiAgICByZWFkb25seSBzUmVuZGVyZXI6IFN0eWxlUmVuZGVyZXI7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICByZWFkb25seSBjbGFzc2VzOiBQaWNrPHtcbiAgICAgICAgJG5hbWU6IHN0cmluZztcbiAgICAgICAgJHByaW9yaXR5OiBzdHJpbmc7XG4gICAgICAgIHJvb3Q6IHN0cmluZztcbiAgICAgICAgZHJhd2VyQ29udGFpbmVyOiBzdHJpbmc7XG4gICAgICAgIGRyYXdlcjogc3RyaW5nO1xuICAgICAgICBkcmF3ZXJDb250ZW50OiBzdHJpbmc7XG4gICAgICAgIGRyYXdlck9wZW5lZDogc3RyaW5nO1xuICAgICAgICBkcmF3ZXJDbG9zZWQ6IHN0cmluZztcbiAgICAgICAgYmFja2Ryb3A6IHN0cmluZztcbiAgICAgICAgdHJhbnNpdGlvbjogc3RyaW5nO1xuICAgIH0sIFwicm9vdFwiIHwgXCJkcmF3ZXJDb250YWluZXJcIiB8IFwiZHJhd2VyXCIgfCBcImRyYXdlckNvbnRlbnRcIiB8IFwiZHJhd2VyT3BlbmVkXCIgfCBcImRyYXdlckNsb3NlZFwiIHwgXCJiYWNrZHJvcFwiIHwgXCJ0cmFuc2l0aW9uXCI+O1xuICAgIF9vcGVuRHJhd2VyczogbnVtYmVyO1xuICAgIF9kcmF3ZXJDb250ZW50OiBMeURyYXdlckNvbnRlbnQ7XG4gICAgY29uc3RydWN0b3IoX3JlbmRlcmVyOiBSZW5kZXJlcjIsIF9lbDogRWxlbWVudFJlZiwgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyKTtcbiAgICBfZ2V0SG9zdEVsZW1lbnQoKTogYW55O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlEcmF3ZXIgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfdGhlbWU7XG4gICAgcHJpdmF0ZSBfc3R5bGVSZW5kZXJlcjtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBwcml2YXRlIF9lbDtcbiAgICBwcml2YXRlIF9kcmF3ZXJDb250YWluZXI7XG4gICAgcHJpdmF0ZSBfdmNyO1xuICAgIHByaXZhdGUgX3ZpZXdwb3J0UnVsZXI7XG4gICAgcHJpdmF0ZSBfY2Q7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICBwcml2YXRlIF9wbGF0Zm9ybTtcbiAgICBzdGF0aWMgcmVhZG9ubHkg0LggPSBcIkx5RHJhd2VyXCI7XG4gICAgLyoqXG4gICAgICogU3R5bGVzXG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkbmFtZTogc3RyaW5nO1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgcm9vdDogc3RyaW5nO1xuICAgICAgICBkcmF3ZXJDb250YWluZXI6IHN0cmluZztcbiAgICAgICAgZHJhd2VyOiBzdHJpbmc7XG4gICAgICAgIGRyYXdlckNvbnRlbnQ6IHN0cmluZztcbiAgICAgICAgZHJhd2VyT3BlbmVkOiBzdHJpbmc7XG4gICAgICAgIGRyYXdlckNsb3NlZDogc3RyaW5nO1xuICAgICAgICBiYWNrZHJvcDogc3RyaW5nO1xuICAgICAgICB0cmFuc2l0aW9uOiBzdHJpbmc7XG4gICAgfSwgXCJyb290XCIgfCBcImRyYXdlckNvbnRhaW5lclwiIHwgXCJkcmF3ZXJcIiB8IFwiZHJhd2VyQ29udGVudFwiIHwgXCJkcmF3ZXJPcGVuZWRcIiB8IFwiZHJhd2VyQ2xvc2VkXCIgfCBcImJhY2tkcm9wXCIgfCBcInRyYW5zaXRpb25cIj47XG4gICAgcHJpdmF0ZSBfZm9yY2VNb2RlT3Zlck9wZW5lZDtcbiAgICBwcml2YXRlIF9mcm9tVG9nZ2xlO1xuICAgIHByaXZhdGUgX29wZW5lZDtcbiAgICBwcml2YXRlIF92aWV3UmVmPztcbiAgICBwcml2YXRlIF9pc0FuaW1hdGlvbjtcbiAgICBwcml2YXRlIF9oYXNCYWNrZHJvcDtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjtcbiAgICBwcml2YXRlIF9kcmF3ZXJSb290Q2xhc3M7XG4gICAgcHJpdmF0ZSBfZHJhd2VyQ2xhc3M/O1xuICAgIHByaXZhdGUgX2RyYXdlckNvbnRlbnRDbGFzcz87XG4gICAgcHJpdmF0ZSBfdGFiUmVzaXplU3ViO1xuICAgIHByaXZhdGUgX2lzT3BlbjtcbiAgICBfYmFja2Ryb3A6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgc2V0IHdpZHRoKF92YWw6IHN0cmluZyk7XG4gICAgc2V0IGhlaWdodChfdmFsOiBzdHJpbmcpO1xuICAgIHNldCBvcGVuZWQodmFsOiBib29sZWFuKTtcbiAgICBnZXQgb3BlbmVkKCk6IGJvb2xlYW47XG4gICAgbW9kZTogTHlEcmF3ZXJNb2RlO1xuICAgIHNwYWNpbmdBYm92ZTogc3RyaW5nIHwgbnVtYmVyO1xuICAgIHNwYWNpbmdCZWxvdzogc3RyaW5nIHwgbnVtYmVyO1xuICAgIHNwYWNpbmdCZWZvcmU6IHN0cmluZyB8IG51bWJlcjtcbiAgICBzcGFjaW5nQWZ0ZXI6IHN0cmluZyB8IG51bWJlcjtcbiAgICBkcmF3ZXJXaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIGRyYXdlckhlaWdodDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIGdldCBoYXNCYWNrZHJvcCgpOiBhbnk7XG4gICAgc2V0IGhhc0JhY2tkcm9wKHZhbDogYW55KTtcbiAgICBzZXQgcG9zaXRpb24odmFsOiBMeURyYXdlclBvc2l0aW9uKTtcbiAgICBnZXQgcG9zaXRpb24oKTogTHlEcmF3ZXJQb3NpdGlvbjtcbiAgICBbMHgxXTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKF90aGVtZTogTHlUaGVtZTIsIF9zdHlsZVJlbmRlcmVyOiBTdHlsZVJlbmRlcmVyLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2VsOiBFbGVtZW50UmVmLCBfZHJhd2VyQ29udGFpbmVyOiBMeURyYXdlckNvbnRhaW5lciwgX3ZjcjogVmlld0NvbnRhaW5lclJlZiwgX3ZpZXdwb3J0UnVsZXI6IFZpZXdwb3J0UnVsZXIsIF9jZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIF96b25lOiBOZ1pvbmUsIF9wbGF0Zm9ybTogUGxhdGZvcm0pO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICBwcml2YXRlIF9jb250ZW50SGFzTWFyZ2luO1xuICAgIHByaXZhdGUgX3VwZGF0ZUJhY2tkcm9wO1xuICAgIHByaXZhdGUgX3VwZGF0ZUFuaW1hdGlvbnM7XG59XG4iXX0=