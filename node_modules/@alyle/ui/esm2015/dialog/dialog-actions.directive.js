import { Directive, ElementRef, Renderer2 } from '@angular/core';
import { LyTheme2 } from '@alyle/ui';
/** @docs-private */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -2;
/** @docs-private */
const STYLES_DIALOG_ACTIONS = () => (className) => `${className}{display:flex;flex:0 0 auto;padding:8px;flex-wrap:wrap;min-height:52px;align-items:center;}`;
const ɵ0 = STYLES_DIALOG_ACTIONS;
export class LyDialogActions {
    constructor(_renderer, _el, _theme) {
        this._renderer = _renderer;
        this._el = _el;
        this._theme = _theme;
    }
    ngOnInit() {
        this._renderer.addClass(this._el.nativeElement, this._theme.renderStyle(STYLES_DIALOG_ACTIONS, STYLE_PRIORITY));
    }
}
LyDialogActions.ɵfac = function LyDialogActions_Factory(t) { return new (t || LyDialogActions)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2)); };
LyDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyDialogActions, selectors: [["ly-dialog-actions"], ["", "ly-dialog-actions", ""], ["", "lyDialogActions", ""]], exportAs: ["lyDialogActions"] });
LyDialogActions.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: LyTheme2 }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDialogActions, [{
        type: Directive,
        args: [{
                selector: 'ly-dialog-actions, [ly-dialog-actions], [lyDialogActions]',
                exportAs: 'lyDialogActions'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.LyTheme2 }]; }, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWFjdGlvbnMuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvZGlhbG9nL2RpYWxvZy1hY3Rpb25zLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUNMLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU5QixvQkFBb0I7OztBQUNwQixNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUUxQixvQkFBb0I7QUFDcEIsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUFDLEdBQUcsU0FBUyw2RkFBNkYsQ0FBQztBQUNySztBQUtBLE1BQU0sT0FBTyxlQUFlO0FBQUcsSUFDN0IsWUFDVSxTQUFvQixFQUNwQixHQUE0QixFQUM1QixNQUFnQjtBQUFJLFFBRnBCLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUNyQixRQUFHLEdBQUgsR0FBRyxDQUF5QjtBQUFDLFFBQzdCLFdBQU0sR0FBTixNQUFNLENBQVU7QUFBQyxJQUFHLENBQUM7QUFDakMsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztBQUM5RixJQUFFLENBQUM7QUFDSDsyQ0FkQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLDJEQUEyRCxrQkFDckUsUUFBUSxFQUFFLGlCQUFpQixjQUM1QjswTUFDSTtBQUFDO0FBQXlDLFlBZFAsU0FBUztBQUFJLFlBQWpDLFVBQVU7QUFBSSxZQUVoQyxRQUFRO0FBQUc7Ozs7Ozs7a0lBQUU7QUFBQztBQUNoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEx5VGhlbWUyIH0gZnJvbSAnQGFseWxlL3VpJztcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmNvbnN0IFNUWUxFX1BSSU9SSVRZID0gLTI7XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5jb25zdCBTVFlMRVNfRElBTE9HX0FDVElPTlMgPSAoKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IGAke2NsYXNzTmFtZX17ZGlzcGxheTpmbGV4O2ZsZXg6MCAwIGF1dG87cGFkZGluZzo4cHg7ZmxleC13cmFwOndyYXA7bWluLWhlaWdodDo1MnB4O2FsaWduLWl0ZW1zOmNlbnRlcjt9YDtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbHktZGlhbG9nLWFjdGlvbnMsIFtseS1kaWFsb2ctYWN0aW9uc10sIFtseURpYWxvZ0FjdGlvbnNdJyxcbiAgZXhwb3J0QXM6ICdseURpYWxvZ0FjdGlvbnMnXG59KVxuZXhwb3J0IGNsYXNzIEx5RGlhbG9nQWN0aW9ucyBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByaXZhdGUgX3RoZW1lOiBMeVRoZW1lMikgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB0aGlzLl90aGVtZS5yZW5kZXJTdHlsZShTVFlMRVNfRElBTE9HX0FDVElPTlMsIFNUWUxFX1BSSU9SSVRZKSk7XG4gIH1cbn1cbiJdfQ==