import { Injectable, TemplateRef, ComponentFactoryResolver, Injector } from '@angular/core';
import { LyOverlay, LyOverlayRef, LyTheme2, STYLES_BACKDROP_DARK, createStyle, LyStyle } from '@alyle/ui';
import { LyDialogContainer } from './dialog-container.component';
import { LyDialogRef } from './dialog-ref';
import { DynamicInjector } from './dynamic-injector';
import { LyDialogConfig } from './dialog-config';
import { LY_DIALOG_DATA } from './dialog-data';
const dialogContainerStyleProperties = [
    'width',
    'maxWidth',
    'minWidth',
    'height',
    'maxHeight',
    'minHeight',
];
export class LyDialog {
    constructor(_overlay, _componentFactoryResolver, _theme, _injector) {
        this._overlay = _overlay;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._theme = _theme;
        this._injector = _injector;
    }
    open(componentOrTemplateRef, config) {
        // merge with default config
        config = Object.assign(Object.assign({}, new LyDialogConfig()), config);
        let componentFactoryOrTemplate;
        if (componentOrTemplateRef instanceof TemplateRef) {
            componentFactoryOrTemplate = componentOrTemplateRef;
        }
        else {
            componentFactoryOrTemplate = this._componentFactoryResolver.resolveComponentFactory(componentOrTemplateRef);
        }
        const onReziseScroll = () => {
            // I would have used FlexBox to position, but not,
            // because it creates a blurring effect in the text
            // when the `dialog` is opened
            const dialogContainerElement = overlayRef.containerElement;
            const x = window.innerWidth / 2 - dialogContainerElement.offsetWidth / 2;
            const y = window.innerHeight / 2 - dialogContainerElement.offsetHeight / 2;
            dialogContainerElement.style.transform = `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;
        };
        const overlayRef = this._overlay.create(LyDialogContainer, null, {
            styles: {
                top: 0,
                left: 0
            },
            hasBackdrop: config.hasBackdrop,
            onResizeScroll: onReziseScroll,
            disableClose: config.disableClose,
            backdropClass: config.backdropClass || this._theme.style(STYLES_BACKDROP_DARK),
            fnDestroy: () => {
                dialogRef.close();
            }
        });
        const instance = overlayRef.componentRef.instance;
        dialogContainerStyleProperties.forEach(property => {
            if (config[property]) {
                createStyle(instance, { key: property, и: LyStyle.и }, config[property], LyStyle[property]);
            }
        });
        const providers = [
            {
                provide: LyDialogRef,
                useValue: new LyDialogRef(overlayRef.componentRef.injector.get(LyOverlayRef))
            },
            {
                provide: LyDialogConfig,
                useValue: config
            }
        ];
        if (config.data != null) {
            providers.push({
                provide: LY_DIALOG_DATA,
                useValue: config.data
            });
        }
        const newInjector = new DynamicInjector(Injector.create(providers, overlayRef.componentRef.injector), this._injector);
        instance._init(componentFactoryOrTemplate, newInjector);
        const dialogRef = newInjector.get(LyDialogRef);
        return dialogRef;
    }
}
LyDialog.decorators = [
    { type: Injectable }
];
LyDialog.ctorParameters = () => [
    { type: LyOverlay },
    { type: ComponentFactoryResolver },
    { type: LyTheme2 },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2RpYWxvZy9kaWFsb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBUSxXQUFXLEVBQUUsd0JBQXdCLEVBQW9CLFFBQVEsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDcEksT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQW1CLE1BQU0sV0FBVyxDQUFDO0FBRTNILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9DLE1BQU0sOEJBQThCLEdBQUc7SUFDckMsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0NBQ1osQ0FBQztBQUdGLE1BQU0sT0FBTyxRQUFRO0lBRW5CLFlBQ1UsUUFBbUIsRUFDbkIseUJBQW1ELEVBQ25ELE1BQWdCLEVBQ2hCLFNBQW1CO1FBSG5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEwQjtRQUNuRCxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQVU7SUFDekIsQ0FBQztJQUNMLElBQUksQ0FBb0Isc0JBQWdELEVBQ2hELE1BQTZCO1FBRW5ELDRCQUE0QjtRQUM1QixNQUFNLG1DQUFRLElBQUksY0FBYyxFQUFFLEdBQUssTUFBTSxDQUFFLENBQUM7UUFFaEQsSUFBSSwwQkFBb0UsQ0FBQztRQUN6RSxJQUFJLHNCQUFzQixZQUFZLFdBQVcsRUFBRTtZQUNqRCwwQkFBMEIsR0FBRyxzQkFBc0IsQ0FBQztTQUNyRDthQUFNO1lBQ0wsMEJBQTBCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLHVCQUF1QixDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDN0c7UUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7WUFDMUIsa0RBQWtEO1lBQ2xELG1EQUFtRDtZQUNuRCw4QkFBOEI7WUFDOUIsTUFBTSxzQkFBc0IsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7WUFDM0QsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztZQUN6RSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1lBQzNFLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsZUFBZSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUNwRyxDQUFDLENBQUM7UUFFRixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQUU7WUFDL0QsTUFBTSxFQUFFO2dCQUNOLEdBQUcsRUFBRSxDQUFDO2dCQUNOLElBQUksRUFBRSxDQUFDO2FBQ1I7WUFDRCxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVc7WUFDL0IsY0FBYyxFQUFFLGNBQWM7WUFDOUIsWUFBWSxFQUFFLE1BQU0sQ0FBQyxZQUFZO1lBQ2pDLGFBQWEsRUFBRSxNQUFNLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDO1lBQzlFLFNBQVMsRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3BCLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBc0IsVUFBVSxDQUFDLFlBQWEsQ0FBQyxRQUFRLENBQUM7UUFFdEUsOEJBQThCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2hELElBQUksTUFBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNyQixXQUFXLENBQ1QsUUFBUSxFQUNSLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUMvQixNQUFPLENBQUMsUUFBUSxDQUFDLEVBQ2pCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FDbEIsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBcUI7WUFDbEM7Z0JBQ0UsT0FBTyxFQUFFLFdBQVc7Z0JBQ3BCLFFBQVEsRUFBRSxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsWUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDL0U7WUFDRDtnQkFDRSxPQUFPLEVBQUUsY0FBYztnQkFDdkIsUUFBUSxFQUFFLE1BQU07YUFDakI7U0FDRixDQUFDO1FBRUYsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtZQUN2QixTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUNiLE9BQU8sRUFBRSxjQUFjO2dCQUN2QixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUk7YUFDdEIsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FDbkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLFlBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkYsUUFBUSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN4RCxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7OztZQWxGRixVQUFVOzs7WUFqQkYsU0FBUztZQURzQix3QkFBd0I7WUFDOUIsUUFBUTtZQUQwQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgVHlwZSwgVGVtcGxhdGVSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50RmFjdG9yeSwgSW5qZWN0b3IsIFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeU92ZXJsYXksIEx5T3ZlcmxheVJlZiwgTHlUaGVtZTIsIFNUWUxFU19CQUNLRFJPUF9EQVJLLCBjcmVhdGVTdHlsZSwgTHlTdHlsZSwgTWVkaWFRdWVyeUFycmF5IH0gZnJvbSAnQGFseWxlL3VpJztcblxuaW1wb3J0IHsgTHlEaWFsb2dDb250YWluZXIgfSBmcm9tICcuL2RpYWxvZy1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEx5RGlhbG9nUmVmIH0gZnJvbSAnLi9kaWFsb2ctcmVmJztcbmltcG9ydCB7IER5bmFtaWNJbmplY3RvciB9IGZyb20gJy4vZHluYW1pYy1pbmplY3Rvcic7XG5pbXBvcnQgeyBMeURpYWxvZ0NvbmZpZyB9IGZyb20gJy4vZGlhbG9nLWNvbmZpZyc7XG5pbXBvcnQgeyBMWV9ESUFMT0dfREFUQSB9IGZyb20gJy4vZGlhbG9nLWRhdGEnO1xuXG5jb25zdCBkaWFsb2dDb250YWluZXJTdHlsZVByb3BlcnRpZXMgPSBbXG4gICd3aWR0aCcsXG4gICdtYXhXaWR0aCcsXG4gICdtaW5XaWR0aCcsXG4gICdoZWlnaHQnLFxuICAnbWF4SGVpZ2h0JyxcbiAgJ21pbkhlaWdodCcsXG5dO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHlEaWFsb2cge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX292ZXJsYXk6IEx5T3ZlcmxheSxcbiAgICBwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIF90aGVtZTogTHlUaGVtZTIsXG4gICAgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yXG4gICkgeyB9XG4gIG9wZW48VCwgREFUQSA9IHVua25vd24+KGNvbXBvbmVudE9yVGVtcGxhdGVSZWY6IFR5cGU8VD4gfCBUZW1wbGF0ZVJlZjxUPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnPzogTHlEaWFsb2dDb25maWc8REFUQT4pOiBMeURpYWxvZ1JlZiB7XG5cbiAgICAvLyBtZXJnZSB3aXRoIGRlZmF1bHQgY29uZmlnXG4gICAgY29uZmlnID0geyAuLi5uZXcgTHlEaWFsb2dDb25maWcoKSwgLi4uY29uZmlnIH07XG5cbiAgICBsZXQgY29tcG9uZW50RmFjdG9yeU9yVGVtcGxhdGU6IENvbXBvbmVudEZhY3Rvcnk8YW55PiB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgaWYgKGNvbXBvbmVudE9yVGVtcGxhdGVSZWYgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgY29tcG9uZW50RmFjdG9yeU9yVGVtcGxhdGUgPSBjb21wb25lbnRPclRlbXBsYXRlUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnRGYWN0b3J5T3JUZW1wbGF0ZSA9IHRoaXMuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnRPclRlbXBsYXRlUmVmKTtcbiAgICB9XG5cbiAgICBjb25zdCBvblJlemlzZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgIC8vIEkgd291bGQgaGF2ZSB1c2VkIEZsZXhCb3ggdG8gcG9zaXRpb24sIGJ1dCBub3QsXG4gICAgICAvLyBiZWNhdXNlIGl0IGNyZWF0ZXMgYSBibHVycmluZyBlZmZlY3QgaW4gdGhlIHRleHRcbiAgICAgIC8vIHdoZW4gdGhlIGBkaWFsb2dgIGlzIG9wZW5lZFxuICAgICAgY29uc3QgZGlhbG9nQ29udGFpbmVyRWxlbWVudCA9IG92ZXJsYXlSZWYuY29udGFpbmVyRWxlbWVudDtcbiAgICAgIGNvbnN0IHggPSB3aW5kb3cuaW5uZXJXaWR0aCAvIDIgLSBkaWFsb2dDb250YWluZXJFbGVtZW50Lm9mZnNldFdpZHRoIC8gMjtcbiAgICAgIGNvbnN0IHkgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIC0gZGlhbG9nQ29udGFpbmVyRWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyO1xuICAgICAgZGlhbG9nQ29udGFpbmVyRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHtNYXRoLnJvdW5kKHgpfXB4LCAke01hdGgucm91bmQoeSl9cHgsIDApYDtcbiAgICB9O1xuXG4gICAgY29uc3Qgb3ZlcmxheVJlZiA9IHRoaXMuX292ZXJsYXkuY3JlYXRlKEx5RGlhbG9nQ29udGFpbmVyLCBudWxsLCB7XG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwXG4gICAgICB9LFxuICAgICAgaGFzQmFja2Ryb3A6IGNvbmZpZy5oYXNCYWNrZHJvcCxcbiAgICAgIG9uUmVzaXplU2Nyb2xsOiBvblJlemlzZVNjcm9sbCxcbiAgICAgIGRpc2FibGVDbG9zZTogY29uZmlnLmRpc2FibGVDbG9zZSxcbiAgICAgIGJhY2tkcm9wQ2xhc3M6IGNvbmZpZy5iYWNrZHJvcENsYXNzIHx8IHRoaXMuX3RoZW1lLnN0eWxlKFNUWUxFU19CQUNLRFJPUF9EQVJLKSxcbiAgICAgIGZuRGVzdHJveTogKCkgPT4ge1xuICAgICAgICBkaWFsb2dSZWYuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGluc3RhbmNlOiBMeURpYWxvZ0NvbnRhaW5lciA9IG92ZXJsYXlSZWYuY29tcG9uZW50UmVmIS5pbnN0YW5jZTtcblxuICAgIGRpYWxvZ0NvbnRhaW5lclN0eWxlUHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIGlmIChjb25maWchW3Byb3BlcnR5XSkge1xuICAgICAgICBjcmVhdGVTdHlsZTxzdHJpbmcgfCBNZWRpYVF1ZXJ5QXJyYXkgfCBudW1iZXIgfCBudWxsLCBMeURpYWxvZ0NvbnRhaW5lcj4oXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgeyBrZXk6IHByb3BlcnR5LCDQuDogTHlTdHlsZS7QuCB9LFxuICAgICAgICAgIGNvbmZpZyFbcHJvcGVydHldLFxuICAgICAgICAgIEx5U3R5bGVbcHJvcGVydHldXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IEx5RGlhbG9nUmVmLFxuICAgICAgICB1c2VWYWx1ZTogbmV3IEx5RGlhbG9nUmVmKG92ZXJsYXlSZWYuY29tcG9uZW50UmVmIS5pbmplY3Rvci5nZXQoTHlPdmVybGF5UmVmKSlcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IEx5RGlhbG9nQ29uZmlnLFxuICAgICAgICB1c2VWYWx1ZTogY29uZmlnXG4gICAgICB9XG4gICAgXTtcblxuICAgIGlmIChjb25maWcuZGF0YSAhPSBudWxsKSB7XG4gICAgICBwcm92aWRlcnMucHVzaCh7XG4gICAgICAgIHByb3ZpZGU6IExZX0RJQUxPR19EQVRBLFxuICAgICAgICB1c2VWYWx1ZTogY29uZmlnLmRhdGFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0luamVjdG9yID0gbmV3IER5bmFtaWNJbmplY3RvcihcbiAgICAgICAgSW5qZWN0b3IuY3JlYXRlKHByb3ZpZGVycywgb3ZlcmxheVJlZi5jb21wb25lbnRSZWYhLmluamVjdG9yKSwgdGhpcy5faW5qZWN0b3IpO1xuICAgIGluc3RhbmNlLl9pbml0KGNvbXBvbmVudEZhY3RvcnlPclRlbXBsYXRlLCBuZXdJbmplY3Rvcik7XG4gICAgY29uc3QgZGlhbG9nUmVmID0gbmV3SW5qZWN0b3IuZ2V0KEx5RGlhbG9nUmVmKTtcbiAgICByZXR1cm4gZGlhbG9nUmVmO1xuICB9XG59XG5cbiJdfQ==