import { Directive, Input } from '@angular/core';
import { StyleRenderer, toBoolean } from '@alyle/ui';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLES = (theme) => (className) => `${className}{display:block;background-color:${theme.divider};height:1px;}`;
const ɵ0 = STYLES;
export class LyDivider {
    constructor(sRenderer) {
        this.sRenderer = sRenderer;
    }
    /** Add indentation (72px) */
    set inset(val) {
        const newVal = this._inset = toBoolean(val);
        if (newVal) {
            this[0x1] = this.sRenderer.add(`${LyDivider.и}--inset`, ({ before }) => (className) => `${className}{margin-${before}:74px;}`, this[0x1]);
        }
        else {
            this.sRenderer.removeClass(this[0x1]);
        }
    }
    get inset() {
        return this._inset;
    }
    ngOnInit() {
        this.sRenderer.add(STYLES);
    }
}
LyDivider.ɵfac = function LyDivider_Factory(t) { return new (t || LyDivider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer)); };
LyDivider.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyDivider, selectors: [["ly-divider"]], inputs: { inset: "inset" }, features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ])] });
LyDivider.и = 'LyDivider';
LyDivider.ctorParameters = () => [
    { type: StyleRenderer }
];
LyDivider.propDecorators = {
    inset: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDivider, [{
        type: Directive,
        args: [{
                selector: 'ly-divider',
                providers: [
                    StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc1.StyleRenderer }]; }, { inset: [{
            type: Input
        }] }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGl2aWRlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2RpdmlkZXIvZGl2aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBRUwsYUFBYSxFQUNiLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7O0FBRS9CLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBcUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FBQyxHQUFHLFNBQVMsbUNBQW1DLEtBQUssQ0FBQyxPQUFPLGVBQWUsQ0FBQztBQUM3STtBQU9BLE1BQU0sT0FBTyxTQUFTO0FBQUcsSUF1QnZCLFlBQ1csU0FBd0I7QUFDbEMsUUFEVSxjQUFTLEdBQVQsU0FBUyxDQUFlO0FBQ3JDLElBQU0sQ0FBQztBQUNQLElBdEJFLDZCQUE2QjtBQUMvQixJQUFFLElBQ0ksS0FBSyxDQUFDLEdBQVk7QUFDeEIsUUFBSSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRCxRQUFJLElBQUksTUFBTSxFQUFFO0FBQ2hCLFlBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUM1QixHQUFHLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFDdkIsQ0FBQyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUFDLEdBQUcsU0FBUyxXQUFXLE1BQU0sU0FBUyxFQUMzRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQ1YsQ0FBQztBQUNSLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFJLEtBQUs7QUFDWCxRQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QixJQUFFLENBQUM7QUFDSCxJQU1FLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLElBQUUsQ0FBQztBQUNIOzs7O2VBQUM7QUE3QmlCLFdBQUMsR0FBRyxXQUFXLENBQUMsQUFEN0I7QUFBQztFQU5MLFNBQVMsU0FBQyxwQkFNOEIsWUFYdkMsYUFBYTtBQUNkO09BS0MsUUFBUSxFQUFFLGpCQUxSO0FBS29CLGtCQUN0QixTQUFTLDNCQUpYLG9CQWFHLEtBQUs7QUFUSyxBQVVaO21CQVRHLGFBQWEsa0JBQ2QsY0FDRjs7Ozs7Ozs7OztvQkFPRTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIFRoZW1lVmFyaWFibGVzLFxuICBTdHlsZVJlbmRlcmVyLFxuICB0b0Jvb2xlYW4gfSBmcm9tICdAYWx5bGUvdWknO1xuXG5jb25zdCBTVFlMRVMgPSAodGhlbWU6IFRoZW1lVmFyaWFibGVzKSA9PiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IGAke2NsYXNzTmFtZX17ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kLWNvbG9yOiR7dGhlbWUuZGl2aWRlcn07aGVpZ2h0OjFweDt9YDtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbHktZGl2aWRlcicsXG4gIHByb3ZpZGVyczogW1xuICAgIFN0eWxlUmVuZGVyZXJcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMeURpdmlkZXIgaW1wbGVtZW50cyBPbkluaXQge1xuICBzdGF0aWMgcmVhZG9ubHkg0LggPSAnTHlEaXZpZGVyJztcbiAgcHJpdmF0ZSBfaW5zZXQ6IGJvb2xlYW47XG5cbiAgLyoqIEFkZCBpbmRlbnRhdGlvbiAoNzJweCkgKi9cbiAgQElucHV0KClcbiAgc2V0IGluc2V0KHZhbDogYm9vbGVhbikge1xuICAgIGNvbnN0IG5ld1ZhbCA9IHRoaXMuX2luc2V0ID0gdG9Cb29sZWFuKHZhbCk7XG4gICAgaWYgKG5ld1ZhbCkge1xuICAgICAgdGhpc1sweDFdID0gdGhpcy5zUmVuZGVyZXIuYWRkKFxuICAgICAgICBgJHtMeURpdmlkZXIu0Lh9LS1pbnNldGAsXG4gICAgICAgICh7YmVmb3JlfSkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBgJHtjbGFzc05hbWV9e21hcmdpbi0ke2JlZm9yZX06NzRweDt9YCxcbiAgICAgICAgdGhpc1sweDFdXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNSZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzWzB4MV0pO1xuICAgIH1cbiAgfVxuICBnZXQgaW5zZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luc2V0O1xuICB9XG4gIFsweDFdOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zUmVuZGVyZXIuYWRkKFNUWUxFUyk7XG4gIH1cbn1cbiJdfQ==