import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { toBoolean, LyTheme2, getLyThemeVariableUndefinedError } from '@alyle/ui';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -0.9;
export const STYLES = (theme, ref) => {
    const classes = ref.selectorsOf(STYLES);
    const { after } = theme;
    return {
        $priority: STYLE_PRIORITY,
        $name: LyAccordion.и,
        $global: () => (className) => `${className} ${classes.panelTitle},${className} ${classes.panelDescription}{display:flex;margin-${after}:16px;}${className} ${classes.panel}:not(${classes.disabled}) ${classes.panelTitle}{color:${theme.text.default};}${className} ${classes.panel}:not(${classes.disabled}) ${classes.panelDescription}{color:${theme.text.secondary};}`,
        root: (theme.expansion && theme.expansion.root) ? () => theme.expansion.root(classes) : null,
        panel: () => (className) => `${className}{display:block;overflow:hidden;position:relative;}${className}:not(${classes.disabled}) ${classes.panelHeader}{cursor:pointer;}`,
        panelHeader: () => (className) => `${className}{display:flex;position:relative;flex-direction:row;align-items:center;padding:0 24px;transition:height ${theme.animations.durations.entering}ms ${theme.animations.curves.standard};font-family:${theme.typography.fontFamily};font-size:${theme.pxToRem(15)};font-weight:400;}${classes.panel}:not(${classes.expanded}):not(${classes.disabled}) ${className}:hover{background:${theme.hover};}@media (hover: none){${classes.panel}:not(${classes.expanded}):not(${classes.disabled}) ${className}:hover{background:none;}}`,
        panelHeaderContent: (className) => `${className}{display:flex;flex:1;flex-direction:row;align-items:center;overflow:hidden;}`,
        panelContent: (className) => `${className}{display:flex;flex-direction:column;overflow:visible;}`,
        panelBody: (className) => `${className}{visibility:hidden;padding:0 24px 16px;transition:visibility ${theme.animations.durations.entering}ms ${theme.animations.curves.standard};font-family:${theme.typography.fontFamily};font-size:${theme.pxToRem(14)};font-weight:400;line-height:${theme.pxToRem(20)};}`,
        panelTitle: (className) => `${className}{flex-grow:1;}`,
        panelDescription: (className) => `${className}{flex-grow:2;}`,
        panelActionRow: (className) => `${className}{border-top:1px solid ${theme.divider};display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;}`,
        expanded: () => (className) => `${className} ${classes.panelBody}{visibility:visible;}`,
        disabled: (className) => `${className}{color:${theme.disabled.contrast};}`
    };
};
export class LyAccordion {
    constructor(_theme, _renderer, _el) {
        this._theme = _theme;
        this._renderer = _renderer;
        this._el = _el;
        /** @docs-private */
        this.classes = this._theme.addStyleSheet(STYLES);
        this._hasToggle = true;
        /** Stream that emits true/false when openAll/closeAll is triggered. */
        this._openCloseAllActions = new Subject();
    }
    set appearance(val) {
        this._appearance = val;
        this._appearanceClass = this._theme.addStyle(`lyAccordion.appearance:${val}`, (theme, ref) => {
            if (!(theme.expansion.appearance && theme.expansion.appearance[val])) {
                throw new Error(`Value expansion.appearance['${val}'] not found in ThemeVariables`);
            }
            const classes = ref.selectorsOf(STYLES);
            return theme.expansion.appearance[val](classes);
        }, this._el.nativeElement, this._appearanceClass, STYLE_PRIORITY);
    }
    get appearance() {
        return this._appearance;
    }
    set multiple(val) {
        this._multiple = toBoolean(val);
    }
    get multiple() {
        return this._multiple;
    }
    set hasToggle(val) {
        this._hasToggle = toBoolean(val);
    }
    get hasToggle() {
        return this._hasToggle;
    }
    ngOnInit() {
        const { expansion } = this._theme.variables;
        if (expansion) {
            this._renderer.addClass(this._el.nativeElement, this.classes.root);
            // Apply default config
            if (expansion.defaultConfig && expansion.defaultConfig.appearance) {
                if (this.appearance == null) {
                    this.appearance = expansion.defaultConfig.appearance;
                }
            }
        }
        else {
            throw getLyThemeVariableUndefinedError('expansion');
        }
    }
    closeAll() {
        this._openCloseAll(true);
    }
    openAll() {
        this._openCloseAll(false);
    }
    _openCloseAll(expanded) {
        if (this.multiple) {
            this._openCloseAllActions.next(expanded);
        }
    }
}
LyAccordion.ɵfac = function LyAccordion_Factory(t) { return new (t || LyAccordion)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LyAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyAccordion, selectors: [["ly-accordion"]], inputs: { appearance: "appearance", multiple: "multiple", hasToggle: "hasToggle" }, exportAs: ["lyAccordion"] });
/** @docs-private */
LyAccordion.и = 'LyAccordion';
LyAccordion.ctorParameters = () => [
    { type: LyTheme2 },
    { type: Renderer2 },
    { type: ElementRef }
];
LyAccordion.propDecorators = {
    appearance: [{ type: Input }],
    multiple: [{ type: Input }],
    hasToggle: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyAccordion, [{
        type: Directive,
        args: [{
                selector: 'ly-accordion',
                exportAs: 'lyAccordion'
            }]
    }], function () { return [{ type: ɵngcc1.LyTheme2 }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { appearance: [{
            type: Input
        }], multiple: [{
            type: Input
        }], hasToggle: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,