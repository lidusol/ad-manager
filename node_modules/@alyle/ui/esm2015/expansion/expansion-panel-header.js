import { Component, ElementRef, Renderer2, Inject } from '@angular/core';
import { LyAccordion } from './accordion';
import { LyExpansionPanel } from './expansion-panel';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@alyle/ui';

function LyExpansionPanelHeader_ly_expansion_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ly-expansion-icon", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("up", ctx_r0._expansionPanel.expanded);
} }
const _c0 = [[["ly-panel-title"]], [["ly-panel-description"]], "*"];
const _c1 = ["ly-panel-title", "ly-panel-description", "*"];
export class LyExpansionPanelHeader {
    constructor(el, renderer, _accordion, _expansionPanel) {
        this._accordion = _accordion;
        this._expansionPanel = _expansionPanel;
        /** @docs-private */
        this.classes = this._accordion.classes;
        renderer.addClass(el.nativeElement, this._accordion.classes.panelHeader);
    }
}
LyExpansionPanelHeader.ɵfac = function LyExpansionPanelHeader_Factory(t) { return new (t || LyExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(LyAccordion), ɵngcc0.ɵɵdirectiveInject(LyExpansionPanel)); };
LyExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LyExpansionPanelHeader, selectors: [["ly-expansion-panel-header"]], hostBindings: function LyExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function LyExpansionPanelHeader_click_HostBindingHandler() { return ctx._expansionPanel.toggle(); });
    } }, ngContentSelectors: _c1, decls: 5, vars: 2, consts: [[3, "className"], [3, "up", 4, "ngIf"], [3, "up"]], template: function LyExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵprojection(2, 1);
        ɵngcc0.ɵɵprojection(3, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, LyExpansionPanelHeader_ly_expansion_icon_4_Template, 1, 1, "ly-expansion-icon", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("className", ctx.classes.panelHeaderContent);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx._expansionPanel.disabled && ctx._expansionPanel.hasToggle);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.LyExpansionIcon], encapsulation: 2 });
LyExpansionPanelHeader.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LyAccordion, decorators: [{ type: Inject, args: [LyAccordion,] }] },
    { type: LyExpansionPanel, decorators: [{ type: Inject, args: [LyExpansionPanel,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyExpansionPanelHeader, [{
        type: Component,
        args: [{
                selector: 'ly-expansion-panel-header',
                template: "<span [className]=\"classes.panelHeaderContent\">\n  <ng-content select=\"ly-panel-title\"></ng-content>\n  <ng-content select=\"ly-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<ly-expansion-icon\n  *ngIf=\"!_expansionPanel.disabled && _expansionPanel.hasToggle\"\n  [up]=\"_expansionPanel.expanded\"\n></ly-expansion-icon>",
                host: {
                    '(click)': '_expansionPanel.toggle()'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: LyAccordion, decorators: [{
                type: Inject,
                args: [LyAccordion]
            }] }, { type: LyExpansionPanel, decorators: [{
                type: Inject,
                args: [LyExpansionPanel]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWhlYWRlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2V4cGFuc2lvbi9leHBhbnNpb24tcGFuZWwtaGVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7OztBQVNyRCxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBRUUsWUFDRSxFQUFjLEVBQ2QsUUFBbUIsRUFDVyxVQUF1QixFQUNsQixlQUFpQztBQUNyRSxRQUYrQixlQUFVLEdBQVYsVUFBVSxDQUFhO0FBQUMsUUFDbkIsb0JBQWUsR0FBZixlQUFlLENBQWtCO0FBQ3hFLFFBUEUsb0JBQW9CO0FBQ3RCLFFBQVcsWUFBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO0FBQzdDLFFBTUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzdFLElBQUUsQ0FBQztBQUNIO2tEQWxCQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLDJCQUEyQixrQkFDckM7b05BQTBDO2VBQzFDLElBQUksRUFBRSxzQkFDSixTQUFTLEVBQUUsMEJBQTBCLGtCQUN0QyxjQUNGOzs7Ozs7Ozs7Ozs7O2dGQUNJO0FBQUM7QUFDVSxZQVpJLFVBQVU7QUFBSSxZQUFGLFNBQVM7QUFBSSxZQUNwQyxXQUFXLHVCQWdCZixNQUFNLFNBQUMsV0FBVztBQUFTLFlBZnZCLGdCQUFnQix1QkFnQnBCLE1BQU0sU0FBQyxnQkFBZ0I7QUFBUTs7Ozs7Ozs7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlBY2NvcmRpb24gfSBmcm9tICcuL2FjY29yZGlvbic7XG5pbXBvcnQgeyBMeUV4cGFuc2lvblBhbmVsIH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdseS1leHBhbnNpb24tcGFuZWwtaGVhZGVyJyxcbiAgdGVtcGxhdGVVcmw6ICdleHBhbnNpb24tcGFuZWwtaGVhZGVyLmh0bWwnLFxuICBob3N0OiB7XG4gICAgJyhjbGljayknOiAnX2V4cGFuc2lvblBhbmVsLnRvZ2dsZSgpJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIEx5RXhwYW5zaW9uUGFuZWxIZWFkZXIge1xuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICByZWFkb25seSBjbGFzc2VzID0gdGhpcy5fYWNjb3JkaW9uLmNsYXNzZXM7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsOiBFbGVtZW50UmVmLFxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgQEluamVjdChMeUFjY29yZGlvbikgcmVhZG9ubHkgX2FjY29yZGlvbjogTHlBY2NvcmRpb24sXG4gICAgQEluamVjdChMeUV4cGFuc2lvblBhbmVsKSByZWFkb25seSBfZXhwYW5zaW9uUGFuZWw6IEx5RXhwYW5zaW9uUGFuZWxcbiAgKSB7XG4gICAgcmVuZGVyZXIuYWRkQ2xhc3MoZWwubmF0aXZlRWxlbWVudCwgdGhpcy5fYWNjb3JkaW9uLmNsYXNzZXMucGFuZWxIZWFkZXIpO1xuICB9XG5cbn1cbiJdfQ==