import { Directive, Inject } from '@angular/core';
import { StyleRenderer } from '@alyle/ui';
import { LY_FIELD_STYLES_TOKEN } from './field-styles-token';
/**
 * Only show when input is not focused, and hides input`.
 * You can use it to display formatted values.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
export class LyDisplayWith {
    constructor(sRenderer, styles) {
        this.sRenderer = sRenderer;
        sRenderer.renderSheet(styles, 'displayWith');
    }
}
LyDisplayWith.ɵfac = function LyDisplayWith_Factory(t) { return new (t || LyDisplayWith)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer), ɵngcc0.ɵɵdirectiveInject(LY_FIELD_STYLES_TOKEN)); };
LyDisplayWith.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyDisplayWith, selectors: [["ly-display-with"]], features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ])] });
LyDisplayWith.ctorParameters = () => [
    { type: StyleRenderer },
    { type: undefined, decorators: [{ type: Inject, args: [LY_FIELD_STYLES_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyDisplayWith, [{
        type: Directive,
        args: [{
                selector: 'ly-display-with',
                providers: [
                    StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc1.StyleRenderer }, { type: undefined, decorators: [{
                type: Inject,
                args: [LY_FIELD_STYLES_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheS13aXRoLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvZmllbGQvZGlzcGxheS13aXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQWMsTUFBTSxXQUFXLENBQUM7QUFDdEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBT0gsTUFBTSxPQUFPLGFBQWE7QUFBRyxJQUMzQixZQUNXLFNBQXdCLEVBQ0YsTUFBVztBQUMzQyxRQUZVLGNBQVMsR0FBVCxTQUFTLENBQWU7QUFBQyxRQUdsQyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNqRCxJQUFFLENBQUM7QUFDSDt5Q0FiQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGlCQUFpQixrQkFDM0IsU0FBUyxFQUFFLHNCQUNULGFBQWEsa0JBQ2Q7VUFDRjs7ZUFDSTtBQUFDO0FBQXVDLFlBYnBDLGFBQWE7QUFBSSw0Q0FnQnJCLE1BQU0sU0FBQyxxQkFBcUI7QUFBUTs7Ozs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3R5bGVSZW5kZXJlciwgV2l0aFN0eWxlcyB9IGZyb20gJ0BhbHlsZS91aSc7XG5pbXBvcnQgeyBMWV9GSUVMRF9TVFlMRVNfVE9LRU4gfSBmcm9tICcuL2ZpZWxkLXN0eWxlcy10b2tlbic7XG5cbi8qKlxuICogT25seSBzaG93IHdoZW4gaW5wdXQgaXMgbm90IGZvY3VzZWQsIGFuZCBoaWRlcyBpbnB1dGAuXG4gKiBZb3UgY2FuIHVzZSBpdCB0byBkaXNwbGF5IGZvcm1hdHRlZCB2YWx1ZXMuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2x5LWRpc3BsYXktd2l0aCcsXG4gIHByb3ZpZGVyczogW1xuICAgIFN0eWxlUmVuZGVyZXJcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMeURpc3BsYXlXaXRoIGltcGxlbWVudHMgV2l0aFN0eWxlcyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcixcbiAgICBASW5qZWN0KExZX0ZJRUxEX1NUWUxFU19UT0tFTikgc3R5bGVzOiBhbnlcbiAgKSB7XG4gICAgc1JlbmRlcmVyLnJlbmRlclNoZWV0KHN0eWxlcywgJ2Rpc3BsYXlXaXRoJyk7XG4gIH1cbn1cbiJdfQ==