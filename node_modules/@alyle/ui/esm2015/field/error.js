import { Directive, Renderer2, ElementRef, Inject } from '@angular/core';
import { LyTheme2 } from '@alyle/ui';
import { LY_FIELD_STYLES_TOKEN } from './field-styles-token';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -2;
export class LyError {
    constructor(renderer, el, theme, styles) {
        const className = theme.addStyleSheet(styles, STYLE_PRIORITY).error;
        renderer.addClass(el.nativeElement, className);
    }
}
LyError.ɵfac = function LyError_Factory(t) { return new (t || LyError)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(LY_FIELD_STYLES_TOKEN)); };
LyError.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyError, selectors: [["ly-error"]] });
LyError.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: LyTheme2 },
    { type: undefined, decorators: [{ type: Inject, args: [LY_FIELD_STYLES_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyError, [{
        type: Directive,
        args: [{
                selector: 'ly-error'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.LyTheme2 }, { type: undefined, decorators: [{
                type: Inject,
                args: [LY_FIELD_STYLES_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9maWVsZC9lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7OztBQUU3RCxNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUsxQixNQUFNLE9BQU8sT0FBTztBQUNwQixJQUFFLFlBQ0UsUUFBbUIsRUFDbkIsRUFBYyxFQUNkLEtBQWUsRUFDZ0IsTUFBVztBQUMzQyxRQUNDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN4RSxRQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNuRCxJQUFFLENBQUM7QUFDSDttQ0FiQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFVBQVUsY0FDckI7c0ZBQ0k7QUFBQztBQUVMLFlBWG1CLFNBQVM7QUFBSSxZQUFGLFVBQVU7QUFBSSxZQUNwQyxRQUFRO0FBQUksNENBYWhCLE1BQU0sU0FBQyxxQkFBcUI7QUFBUTs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeVRoZW1lMiB9IGZyb20gJ0BhbHlsZS91aSc7XG5pbXBvcnQgeyBMWV9GSUVMRF9TVFlMRVNfVE9LRU4gfSBmcm9tICcuL2ZpZWxkLXN0eWxlcy10b2tlbic7XG5cbmNvbnN0IFNUWUxFX1BSSU9SSVRZID0gLTI7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2x5LWVycm9yJ1xufSlcbmV4cG9ydCBjbGFzcyBMeUVycm9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBlbDogRWxlbWVudFJlZixcbiAgICB0aGVtZTogTHlUaGVtZTIsXG4gICAgQEluamVjdChMWV9GSUVMRF9TVFlMRVNfVE9LRU4pIHN0eWxlczogYW55XG4gICAgKSB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gdGhlbWUuYWRkU3R5bGVTaGVldChzdHlsZXMsIFNUWUxFX1BSSU9SSVRZKS5lcnJvcjtcbiAgICByZW5kZXJlci5hZGRDbGFzcyhlbC5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICB9XG59XG4iXX0=