import { Directive, Renderer2, ElementRef, Input, Inject } from '@angular/core';
import { LyTheme2 } from '@alyle/ui';
import { LY_FIELD_STYLES_TOKEN } from './field-styles-token';
/** LyHint */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -2;
/** Hint text to be shown underneath the field. */
export class LyHint {
    constructor(_renderer, _el, _theme, styles) {
        this._renderer = _renderer;
        this._el = _el;
        this._theme = _theme;
        this.classes = this._theme.addStyleSheet(styles, STYLE_PRIORITY);
        _renderer.addClass(_el.nativeElement, this.classes.hint);
    }
    set align(val) {
        if (val) {
            if (val === 'after') {
                this._renderer.addClass(this._el.nativeElement, this.classes.hintAfter);
                this._alignClass = this.classes.hintAfter;
            }
            else {
                this._renderer.addClass(this._el.nativeElement, this.classes.hintBefore);
                this._alignClass = this.classes.hintBefore;
            }
        }
        else if (this._alignClass) {
            this._renderer.removeClass(this._el.nativeElement, this._alignClass);
            this._alignClass = undefined;
        }
        this._align = val;
    }
    get align() {
        return this._align;
    }
}
LyHint.ɵfac = function LyHint_Factory(t) { return new (t || LyHint)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(LY_FIELD_STYLES_TOKEN)); };
LyHint.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyHint, selectors: [["ly-hint"]], inputs: { align: "align" } });
LyHint.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: LyTheme2 },
    { type: undefined, decorators: [{ type: Inject, args: [LY_FIELD_STYLES_TOKEN,] }] }
];
LyHint.propDecorators = {
    align: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyHint, [{
        type: Directive,
        args: [{
                selector: 'ly-field > ly-hint'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.LyTheme2 }, { type: undefined, decorators: [{
                type: Inject,
                args: [LY_FIELD_STYLES_TOKEN]
            }] }]; }, { align: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2ZpZWxkL2hpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUk3RCxhQUFhOzs7QUFDYixNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUUxQixrREFBa0Q7QUFJbEQsTUFBTSxPQUFPLE1BQU07QUFDbkIsSUF3QkUsWUFDVSxTQUFvQixFQUNwQixHQUFlLEVBQ2YsTUFBZ0IsRUFDTyxNQUFXO0FBQzNDLFFBSlMsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLFFBQ3JCLFFBQUcsR0FBSCxHQUFHLENBQVk7QUFBQyxRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFVO0FBQUMsUUFHdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdkUsUUFBTSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvRCxJQUFFLENBQUM7QUFDSCxJQTVCRSxJQUNJLEtBQUssQ0FBQyxHQUFnQjtBQUM1QixRQUFJLElBQUksR0FBRyxFQUFFO0FBQ2IsWUFBTSxJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUU7QUFDM0IsZ0JBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRixnQkFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xELGFBQU87QUFBQyxpQkFBSztBQUNiLGdCQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakYsZ0JBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNuRCxhQUFPO0FBQ1AsU0FBSztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ2pDLFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNFLFlBQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDbkMsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDdEIsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFJLEtBQUs7QUFDWCxRQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QixJQUFFLENBQUM7QUFDSDtrQ0E1QkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxvQkFBb0IsY0FDL0I7K0dBQ0k7QUFBQztBQUNVLFlBZEksU0FBUztBQUFJLFlBQUYsVUFBVTtBQUFJLFlBQ3BDLFFBQVE7QUFBSSw0Q0F5Q2hCLE1BQU0sU0FBQyxxQkFBcUI7QUFBUTtBQUFHO0FBRTdCLG9CQXpCWixLQUFLO0FBQ1A7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgSW5wdXQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIgfSBmcm9tICdAYWx5bGUvdWknO1xuaW1wb3J0IHsgTFlfRklFTERfU1RZTEVTX1RPS0VOIH0gZnJvbSAnLi9maWVsZC1zdHlsZXMtdG9rZW4nO1xuXG5leHBvcnQgdHlwZSBMeUhpbnRBbGlnbiA9ICdiZWZvcmUnIHwgJ2FmdGVyJztcblxuLyoqIEx5SGludCAqL1xuY29uc3QgU1RZTEVfUFJJT1JJVFkgPSAtMjtcblxuLyoqIEhpbnQgdGV4dCB0byBiZSBzaG93biB1bmRlcm5lYXRoIHRoZSBmaWVsZC4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2x5LWZpZWxkID4gbHktaGludCdcbn0pXG5leHBvcnQgY2xhc3MgTHlIaW50IHtcbiAgcmVhZG9ubHkgY2xhc3Nlczoge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZ1xuICB9O1xuICBwcml2YXRlIF9hbGlnbjogTHlIaW50QWxpZ247XG4gIHByaXZhdGUgX2FsaWduQ2xhc3M/OiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIHNldCBhbGlnbih2YWw6IEx5SGludEFsaWduKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgaWYgKHZhbCA9PT0gJ2FmdGVyJykge1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmNsYXNzZXMuaGludEFmdGVyKTtcbiAgICAgICAgdGhpcy5fYWxpZ25DbGFzcyA9IHRoaXMuY2xhc3Nlcy5oaW50QWZ0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmNsYXNzZXMuaGludEJlZm9yZSk7XG4gICAgICAgIHRoaXMuX2FsaWduQ2xhc3MgPSB0aGlzLmNsYXNzZXMuaGludEJlZm9yZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX2FsaWduQ2xhc3MpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuX2FsaWduQ2xhc3MpO1xuICAgICAgdGhpcy5fYWxpZ25DbGFzcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5fYWxpZ24gPSB2YWw7XG4gIH1cbiAgZ2V0IGFsaWduKCkge1xuICAgIHJldHVybiB0aGlzLl9hbGlnbjtcbiAgfVxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgX3RoZW1lOiBMeVRoZW1lMixcbiAgICBASW5qZWN0KExZX0ZJRUxEX1NUWUxFU19UT0tFTikgc3R5bGVzOiBhbnlcbiAgICApIHtcbiAgICAgIHRoaXMuY2xhc3NlcyA9IHRoaXMuX3RoZW1lLmFkZFN0eWxlU2hlZXQoc3R5bGVzLCBTVFlMRV9QUklPUklUWSk7XG4gICAgICBfcmVuZGVyZXIuYWRkQ2xhc3MoX2VsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY2xhc3Nlcy5oaW50KTtcbiAgfVxufVxuIl19