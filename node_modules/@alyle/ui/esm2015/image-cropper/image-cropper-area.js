import { __decorate } from "tslib";
import { Component, ElementRef, NgZone, Input, ChangeDetectionStrategy, Inject, ViewChild } from '@angular/core';
import { normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { Style, StyleRenderer } from '@alyle/ui';
import { STYLES, LyImageCropper } from './image-cropper';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["resizer"];
function LyCropperArea_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", null, 1);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r0.classes.resizer);
} }
const activeEventOptions = normalizePassiveListenerOptions({ passive: false });
const pos = (100 * Math.sqrt(2) - 100) / 2 / Math.sqrt(2);
const ɵ0 = (_value, _, { classes: __ }) => ({ after }) => (className) => `${className}{border-radius:50%;}${className} .${__.resizer}{${after}:${pos}%;bottom:${pos}%;transform:translate(4px, 4px);}`;
/**
 * @dynamic
 */
export class LyCropperArea {
    constructor(sRenderer, _elementRef, _ngZone, _cropper, _document) {
        this.sRenderer = sRenderer;
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._cropper = _cropper;
        this.classes = this.sRenderer.renderSheet(STYLES, 'area');
        this._pointerDown = (event) => {
            // Don't do anything if the
            // user is using anything other than the main mouse button.
            if (this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {
                return;
            }
            event.preventDefault();
            this._ngZone.run(() => {
                this._isSliding = true;
                this._lastPointerEvent = event;
                this._startPointerEvent = getGesturePointFromEvent(event);
                this._startAreaRect = this._cropper._areaCropperRect();
                this._startImgRect = this._cropper._canvasRect();
                event.preventDefault();
                this._bindGlobalEvents(event);
            });
        };
        this._pointerMove = (event) => {
            if (this._isSliding) {
                event.preventDefault();
                this._lastPointerEvent = event;
                const element = this._elementRef.nativeElement;
                const { width, height, minWidth, minHeight } = this._cropper.config;
                const point = getGesturePointFromEvent(event);
                const deltaX = point.x - this._startPointerEvent.x;
                const deltaY = point.y - this._startPointerEvent.y;
                const startAreaRect = this._startAreaRect;
                const startImgRect = this._startImgRect;
                const round = this.round;
                const keepAspectRatio = this._cropper.config.keepAspectRatio || event.shiftKey;
                let newWidth = 0;
                let newHeight = 0;
                const rootRect = this._cropper._rootRect();
                if (round) {
                    // The distance from the center of the cropper area to the pointer
                    const originX = ((width / 2 / Math.sqrt(2)) + deltaX);
                    const originY = ((height / 2 / Math.sqrt(2)) + deltaY);
                    // Leg
                    const side = Math.sqrt(Math.pow(originX, 2) + Math.pow(originY, 2));
                    newWidth = newHeight = side * 2;
                }
                else if (keepAspectRatio) {
                    newWidth = width + deltaX * 2;
                    newHeight = height + deltaY * 2;
                    if (width !== height) {
                        if (width > height) {
                            newHeight = height / (width / newWidth);
                        }
                        else if (height > width) {
                            newWidth = width / (height / newHeight);
                        }
                    }
                    else {
                        newWidth = newHeight = Math.max(newWidth, newHeight);
                    }
                }
                else {
                    newWidth = width + deltaX * 2;
                    newHeight = height + deltaY * 2;
                }
                // To min width
                if (newWidth < minWidth) {
                    newWidth = minWidth;
                }
                // To min height
                if (newHeight < minHeight) {
                    newHeight = minHeight;
                }
                // Do not overflow the cropper area
                const centerX = startAreaRect.x + startAreaRect.width / 2;
                const centerY = startAreaRect.y + startAreaRect.height / 2;
                const topOverflow = startImgRect.y > centerY - (newHeight / 2);
                const bottomOverflow = centerY + (newHeight / 2) > startImgRect.bottom;
                const minHeightOnOverflow = Math.min((centerY - startImgRect.y) * 2, (startImgRect.bottom - centerY) * 2);
                const leftOverflow = startImgRect.x > centerX - (newWidth / 2);
                const rightOverflow = centerX + (newWidth / 2) > startImgRect.right;
                const minWidthOnOverflow = Math.min((centerX - startImgRect.x) * 2, (startImgRect.right - centerX) * 2);
                const minOnOverflow = Math.min(minWidthOnOverflow, minHeightOnOverflow);
                if (round) {
                    if (topOverflow || bottomOverflow || leftOverflow || rightOverflow) {
                        newHeight = newWidth = minOnOverflow;
                    }
                }
                else if (keepAspectRatio) {
                    const newNewWidth = [];
                    const newNewHeight = [];
                    if ((topOverflow || bottomOverflow) && Math.min()) {
                        newHeight = minHeightOnOverflow;
                        newNewHeight.push(newHeight);
                        newWidth = width / (height / minHeightOnOverflow);
                        newNewWidth.push(newWidth);
                    }
                    if ((leftOverflow || rightOverflow)) {
                        newWidth = minWidthOnOverflow;
                        newNewWidth.push(newWidth);
                        newHeight = height / (width / minWidthOnOverflow);
                        newNewHeight.push(newHeight);
                    }
                    if (newNewWidth.length === 2) {
                        newWidth = Math.min(...newNewWidth);
                    }
                    if (newNewHeight.length === 2) {
                        newHeight = Math.min(...newNewHeight);
                    }
                }
                else {
                    if (topOverflow || bottomOverflow) {
                        newHeight = minHeightOnOverflow;
                    }
                    if (leftOverflow || rightOverflow) {
                        newWidth = minWidthOnOverflow;
                    }
                }
                // Do not overflow the container
                if (round) {
                    const min = Math.min(rootRect.width, rootRect.height);
                    if (newWidth > min) {
                        newWidth = newHeight = min;
                    }
                    else if (newHeight > min) {
                        newWidth = newHeight = min;
                    }
                }
                else if (keepAspectRatio) {
                    if (newWidth > rootRect.width) {
                        newWidth = rootRect.width;
                        newHeight = height / (width / rootRect.width);
                    }
                    else if (newHeight > rootRect.height) {
                        newWidth = width / (height / rootRect.height);
                        newHeight = rootRect.height;
                    }
                }
                else {
                    if (newWidth > rootRect.width) {
                        newWidth = rootRect.width;
                    }
                    else if (newHeight > rootRect.height) {
                        newHeight = rootRect.height;
                    }
                }
                // round values
                newWidth = Math.round(newWidth);
                newHeight = Math.round(newHeight);
                element.style.width = `${newWidth}px`;
                element.style.height = `${newHeight}px`;
                this._currentWidth = newWidth;
                this._currentHeight = newHeight;
            }
        };
        /** Called when the user has lifted their pointer. */
        this._pointerUp = (event) => {
            if (this._isSliding) {
                event.preventDefault();
                this._removeGlobalEvents();
                this._cropper._primaryAreaWidth = this._cropper.config.width = this._currentWidth;
                this._cropper._primaryAreaHeight = this._cropper.config.height = this._currentHeight;
                this._cropper.config = this._cropper.config;
                this._cropper._updateMinScale();
                this._isSliding = false;
                this._startPointerEvent = null;
            }
        };
        /** Called when the window has lost focus. */
        this._windowBlur = () => {
            // If the window is blurred while dragging we need to stop dragging because the
            // browser won't dispatch the `mouseup` and `touchend` events anymore.
            if (this._lastPointerEvent) {
                this._pointerUp(this._lastPointerEvent);
            }
        };
        this._document = _document;
    }
    set resizableArea(val) {
        if (val !== this._resizableArea) {
            this._resizableArea = val;
            Promise.resolve(null).then(() => {
                if (val) {
                    this._removeResizableArea();
                    this._addResizableArea();
                }
                else {
                    this._removeResizableArea();
                }
            });
        }
    }
    get resizableArea() {
        return this._resizableArea;
    }
    ngOnDestroy() {
        this._removeResizableArea();
    }
    _addResizableArea() {
        this._ngZone.runOutsideAngular(() => {
            const element = this._resizer.nativeElement;
            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);
            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);
        });
    }
    _removeResizableArea() {
        var _a;
        const element = (_a = this._resizer) === null || _a === void 0 ? void 0 : _a.nativeElement;
        if (element) {
            this._lastPointerEvent = null;
            this._removeGlobalEvents();
            element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);
            element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);
        }
    }
    _bindGlobalEvents(triggerEvent) {
        const element = this._document;
        const isTouch = isTouchEvent(triggerEvent);
        const moveEventName = isTouch ? 'touchmove' : 'mousemove';
        const endEventName = isTouch ? 'touchend' : 'mouseup';
        element.addEventListener(moveEventName, this._pointerMove, activeEventOptions);
        element.addEventListener(endEventName, this._pointerUp, activeEventOptions);
        if (isTouch) {
            element.addEventListener('touchcancel', this._pointerUp, activeEventOptions);
        }
        const window = this._getWindow();
        if (typeof window !== 'undefined' && window) {
            window.addEventListener('blur', this._windowBlur);
        }
    }
    /** Removes any global event listeners that we may have added. */
    _removeGlobalEvents() {
        const element = this._document;
        element.removeEventListener('mousemove', this._pointerMove, activeEventOptions);
        element.removeEventListener('mouseup', this._pointerUp, activeEventOptions);
        element.removeEventListener('touchmove', this._pointerMove, activeEventOptions);
        element.removeEventListener('touchend', this._pointerUp, activeEventOptions);
        element.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);
        const window = this._getWindow();
        if (typeof window !== 'undefined' && window) {
            window.removeEventListener('blur', this._windowBlur);
        }
    }
    /** Use defaultView of injected document if available or fallback to global window reference */
    _getWindow() {
        return this._document.defaultView || window;
    }
}
LyCropperArea.ɵfac = function LyCropperArea_Factory(t) { return new (t || LyCropperArea)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(LyImageCropper), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
LyCropperArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LyCropperArea, selectors: [["ly-cropper-area"]], viewQuery: function LyCropperArea_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._resizer = _t.first);
    } }, inputs: { resizableArea: "resizableArea", keepAspectRatio: "keepAspectRatio", round: "round" }, exportAs: ["lyCropperArea"], features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ])], decls: 1, vars: 1, consts: [[3, "class", 4, "ngIf"], ["resizer", ""]], template: function LyCropperArea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, LyCropperArea_div_0_Template, 2, 2, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.resizableArea);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2, changeDetection: 0 });
LyCropperArea.ctorParameters = () => [
    { type: StyleRenderer },
    { type: ElementRef },
    { type: NgZone },
    { type: LyImageCropper },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
LyCropperArea.propDecorators = {
    _resizer: [{ type: ViewChild, args: ['resizer',] }],
    resizableArea: [{ type: Input }],
    keepAspectRatio: [{ type: Input }],
    round: [{ type: Input }]
};
__decorate([
    Style(ɵ0)
], LyCropperArea.prototype, "round", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyCropperArea, [{
        type: Component,
        args: [{
                selector: 'ly-cropper-area',
                template: "<div #resizer\n  *ngIf=\"resizableArea\"\n  [class]=\"classes.resizer\"\n></div>",
                providers: [
                    StyleRenderer
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'lyCropperArea'
            }]
    }], function () { return [{ type: ɵngcc1.StyleRenderer }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: LyImageCropper }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { resizableArea: [{
            type: Input
        }], _resizer: [{
            type: ViewChild,
            args: ['resizer']
        }], keepAspectRatio: [{
            type: Input
        }], round: [{
            type: Input
        }] }); })();
function getGesturePointFromEvent(event) {
    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.
    const point = isTouchEvent(event)
        ? (event.touches[0] || event.changedTouches[0])
        : event;
    return {
        x: point.clientX,
        y: point.clientY
    };
}
/** Returns whether an event is a touch event. */
function isTouchEvent(event) {
    return event.type[0] === 't';
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,