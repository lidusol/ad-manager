import { Component, Directive, ElementRef, HostListener, Input, Optional, Renderer2, ViewChild, Output, EventEmitter, ContentChildren, forwardRef, HostBinding } from '@angular/core';
import { LyOverlay, LyTheme2, Positioning, shadowBuilder, XPosition, YPosition, StyleCollection, LyOverlayPosition, StyleRenderer } from '@alyle/ui';
import { trigger, style, animate, transition, group } from '@angular/animations';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { Subject, asapScheduler } from 'rxjs';
import { take, delay, debounceTime } from 'rxjs/operators';
const STYLE_PRIORITY = -1;
export const STYLES = (theme, ref) => {
    const menu = ref.selectorsOf(STYLES);
    const { after } = theme;
    return {
        $name: LyMenu.и,
        $priority: STYLE_PRIORITY,
        root: () => {
            var _a;
            return (((_a = theme.menu) === null || _a === void 0 ? void 0 : _a.root) && (theme.menu.root instanceof StyleCollection
                ? theme.menu.root.setTransformer(fn => fn(menu)).css
                : theme.menu.root(menu)));
        },
        container: (className) => `${className}{background:${theme.background.primary.default};border-radius:2px;box-shadow:${shadowBuilder(4)};display:block;padding-top:8px;padding-bottom:8px;transform-origin:inherit;pointer-events:all;overflow:auto;max-height:inherit;max-width:inherit;box-sizing:border-box;}`,
        item: (className) => `${className}{display:flex;min-height:48px;border-radius:0;width:100%;justify-content:flex-start;font-weight:400;}${className} ly-icon{margin-${after}:16px;}`,
        itemSubMenuTrigger: () => (className) => `${className}{padding-${after}:32px;}${className}::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:"";display:inline-block;position:absolute;top:50%;${after}:16px;transform:translateY(-50%);}`
    };
};
const ANIMATIONS = [
    trigger('transformMenu', [
        transition('void => enter', group([
            style({
                opacity: 0,
                transform: 'scale(0.8)'
            }),
            animate('100ms linear', style({
                opacity: 1
            })),
            animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),
        ]))
    ]),
    trigger('transformMenuLeave', [
        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))
    ])
];
/** Menu container */
export class LyMenu {
    constructor(_theme, _el, _renderer, _viewportRuler, sRenderer) {
        this._theme = _theme;
        this._el = _el;
        this._renderer = _renderer;
        this._viewportRuler = _viewportRuler;
        this.sRenderer = sRenderer;
        /**
         * styles
         * @docs-private
         */
        this.classes = this.sRenderer.renderSheet(STYLES, true);
        /** Emits whenever an animation on the menu completes. */
        this._animationDone = new Subject();
        this._hasBackdrop = true;
    }
    /** Menu Trigger */
    set ref(value) {
        this._ref = value;
        this._menuRef = value._menuRef;
    }
    get ref() {
        return this._ref;
    }
    /** Whether the menu has a backdrop. */
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(value) {
        this._hasBackdrop = coerceBooleanProperty(value);
    }
    ngOnChanges() {
        var _a;
        if (((_a = this.ref) === null || _a === void 0 ? void 0 : _a._menuRef) && this._container) {
            // Update backdrop
            this.ref._menuRef.updateBackdrop(this.ref._isItemSubMenuTrigger() ? false : this.hasBackdrop);
            this._updatePlacement();
            this._checkBackdropAndOpenOnHover();
        }
    }
    ngOnInit() {
        if (!this.ref) {
            throw new Error('LyMenu: require @Input() ref');
        }
    }
    ngAfterViewInit() {
        if (this.ref._menuRef) {
            this.ref._menuRef.onResizeScroll = this._updatePlacement.bind(this);
            this.ref._menuRef.updateBackdrop(this.ref._isItemSubMenuTrigger() ? false : this.hasBackdrop);
            this._checkBackdropAndOpenOnHover();
        }
        this._updatePlacement();
        this.ref.menuOpened.emit();
        Promise.resolve(null).then(() => {
            this.ref._setMenuOpenToTrue();
        });
        const hostTrigger = this._getHostMenuTrigger();
        hostTrigger._menuDetached
            .pipe(take(1))
            .subscribe(() => this._ref.closeMenu());
        this._addOpenOnHover();
    }
    ngOnDestroy() {
        this._removeOpenOnHoverListeners();
    }
    _checkBackdropAndOpenOnHover() {
        var _a;
        const hostTrigger = this._getHostMenuTrigger();
        if (this.hasBackdrop && ((_a = hostTrigger._menuOpenOnHoverRef) === null || _a === void 0 ? void 0 : _a.openOnHover)) {
            throw new Error(`${LyMenu.и}: Can't use [hasBackdrop] with [openOnHover] at the same time, set [hasBackdrop] to false to use [openOnHover]`);
        }
    }
    _getHostMenuTrigger() {
        var _a;
        let menuTrigger = this.ref;
        while ((_a = menuTrigger._menu) === null || _a === void 0 ? void 0 : _a.ref) {
            menuTrigger = menuTrigger._menu.ref;
        }
        return menuTrigger;
    }
    _addOpenOnHover() {
        var _a;
        const hostTrigger = this._getHostMenuTrigger();
        if (((_a = hostTrigger._menuOpenOnHoverRef) === null || _a === void 0 ? void 0 : _a.openOnHover) && !this._mouseenterListen && !this._mouseleaveListen) {
            hostTrigger._menuOpenOnHoverRef._handleMouseEnterOrLeave(true);
            this._mouseenterListen = this._renderer
                .listen(this._el.nativeElement, 'mouseenter', () => hostTrigger._menuOpenOnHoverRef._handleMouseEnterOrLeave(true));
            this._mouseleaveListen = this._renderer
                .listen(this._el.nativeElement, 'mouseleave', () => hostTrigger._menuOpenOnHoverRef._handleMouseEnterOrLeave(false));
        }
    }
    /** Remove listeners */
    _removeOpenOnHoverListeners() {
        if (this._mouseenterListen) {
            this._mouseenterListen();
        }
        if (this._mouseleaveListen) {
            this._mouseleaveListen();
        }
    }
    /** Update Menu Position */
    _updatePlacement() {
        var _a, _b;
        const el = (_a = this.ref._menuRef) === null || _a === void 0 ? void 0 : _a.containerElement;
        const container = (_b = this._container) === null || _b === void 0 ? void 0 : _b.nativeElement;
        // Do not update when not available
        if (!el || !container) {
            return;
        }
        // reset height & width
        this._renderer.setStyle(container, 'height', 'initial');
        this._renderer.setStyle(container, 'width', 'initial');
        const position = this.placement
            ? new Positioning(this.placement, this.xPosition, this.yPosition, this.ref._getHostElement(), el, this._theme.variables)
            : !this.ref._isItemSubMenuTrigger()
                ? new LyOverlayPosition(this._theme, this._viewportRuler, this.ref._getHostElement(), el)
                    .setXAnchor(this.xAnchor)
                    .setYAnchor(this.yAnchor)
                    .setXAxis(this.xAxis)
                    .setYAxis(this.yAxis)
                    .setFlip(true)
                    .build()
                : new LyOverlayPosition(this._theme, this._viewportRuler, this.ref._getHostElement(), el)
                    .setXAnchor(XPosition.after)
                    .setYAnchor(YPosition.above)
                    .setFlip(true)
                    .build();
        if (position instanceof Positioning) {
            // set position deprecated
            this._renderer.setStyle(el, 'transform', `translate3d(${position.x}px, ${position.y}px, 0)`);
            this._renderer.setStyle(this._el.nativeElement, 'transform-origin', `${position.ox} ${position.oy} 0`);
            // set height & width deprecated
            this._renderer.setStyle(container, 'height', position.height === 'initial' ? '100%' : position.height);
            this._renderer.setStyle(container, 'width', position.width === 'initial' ? '100%' : position.width);
        }
        else {
            // set position
            this._renderer.setStyle(el, 'left', `${position.x}px`);
            this._renderer.setStyle(el, 'top', `${position.y}px`);
            this._renderer.setStyle(container, 'width', position.width ? `${position.width}px` : '100%');
            this._renderer.setStyle(container, 'height', position.height ? `${position.height}px` : '100%');
            this._renderer.setStyle(this._el.nativeElement, 'transform-origin', `${position.xo}px ${position.yo}px 0`);
        }
    }
    _onAnimationStart(event) {
        this._isAnimating = true;
        if (event.triggerName === 'transformMenuLeave' && event.toState === 'void') {
            this._isDestroying = true;
        }
    }
    _onAnimationDone(event) {
        this._animationDone.next(event);
        this._isAnimating = false;
        if (event.toState === 'void' && event.triggerName === 'transformMenuLeave') {
            this.ref.destroy(this._menuRef);
        }
    }
}
/** @docs-private */
LyMenu.и = 'LyMenu';
LyMenu.decorators = [
    { type: Component, args: [{
                selector: 'ly-menu',
                animations: [...ANIMATIONS],
                template: "<div #container\n  [class]=\"classes.container\"\n  [@transformMenu]=\"'enter'\"\n  (@transformMenu.start)=\"_onAnimationStart($event)\"\n  (@transformMenu.done)=\"_onAnimationDone($event)\"\n>\n  <ng-content></ng-content>\n</div>",
                exportAs: 'lyMenu',
                providers: [
                    StyleRenderer
                ]
            },] }
];
LyMenu.ctorParameters = () => [
    { type: LyTheme2 },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ViewportRuler },
    { type: StyleRenderer }
];
LyMenu.propDecorators = {
    ref: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    _container: [{ type: ViewChild, args: ['container',] }],
    menuItems: [{ type: ContentChildren, args: [forwardRef(() => LyMenuItem),] }],
    xAnchor: [{ type: Input }],
    yAnchor: [{ type: Input }],
    xAxis: [{ type: Input }],
    yAxis: [{ type: Input }],
    placement: [{ type: Input }],
    xPosition: [{ type: Input }],
    yPosition: [{ type: Input }],
    transformMenuLeave: [{ type: HostBinding, args: ['@transformMenuLeave',] }],
    _onAnimationStart: [{ type: HostListener, args: ['@transformMenuLeave.start', ['$event'],] }],
    _onAnimationDone: [{ type: HostListener, args: ['@transformMenuLeave.done', ['$event'],] }]
};
export class LyMenuItem {
    constructor(_menu, el, renderer) {
        this._menu = _menu;
        renderer.addClass(el.nativeElement, _menu.classes.item);
    }
    _handleClick() {
        var _a;
        if (this._menu.ref && this._menu.ref._menuRef) {
            if (!this._getItemSubMenuTrigger()) {
                let currentTrigger = this._menu.ref;
                while (currentTrigger) {
                    currentTrigger.closeMenu();
                    currentTrigger = (_a = currentTrigger._menu) === null || _a === void 0 ? void 0 : _a.ref;
                }
            }
        }
    }
    _handleMouseEnter() {
        const itemSubMenuTrigger = this._getItemSubMenuTrigger();
        if (itemSubMenuTrigger && !this._menu._isDestroying) {
            if (this._menu._isAnimating) {
                this._menu._animationDone
                    .pipe(take(1), delay(0, asapScheduler))
                    .subscribe(() => {
                    itemSubMenuTrigger.openMenu();
                    this._closeOtherMenus();
                });
            }
            else {
                itemSubMenuTrigger.openMenu();
                this._closeOtherMenus();
            }
        }
        else {
            this._closeOtherMenus();
        }
    }
    /** Except for this, close all menus */
    _closeOtherMenus() {
        this._menu.menuItems.forEach(menuItem => {
            var _a;
            if (menuItem !== this) {
                (_a = menuItem._getItemSubMenuTrigger()) === null || _a === void 0 ? void 0 : _a.closeMenu();
            }
        });
    }
    _setItemSubMenuTrigger(menuTrigger) {
        this._itemSubMenuTrigger = menuTrigger;
    }
    _getItemSubMenuTrigger() {
        return this._itemSubMenuTrigger;
    }
}
LyMenuItem.decorators = [
    { type: Directive, args: [{
                selector: '[ly-menu-item]',
                host: {
                    '(click)': '_handleClick()',
                    '(mouseenter)': '_handleMouseEnter()'
                }
            },] }
];
LyMenuItem.ctorParameters = () => [
    { type: LyMenu, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: Renderer2 }
];
export class LyMenuTriggerFor {
    constructor(elementRef, overlay, _menuItem, sRenderer, _menu) {
        this.elementRef = elementRef;
        this.overlay = overlay;
        this._menuItem = _menuItem;
        this.sRenderer = sRenderer;
        this._menu = _menu;
        this.classes = this.sRenderer.renderSheet(STYLES);
        this._menuOpen = false;
        this._menuDetached = new Subject();
        this.menuOpened = new EventEmitter();
        this.menuClosed = new EventEmitter();
        if (this._isItemSubMenuTrigger()) {
            _menuItem._setItemSubMenuTrigger(this);
            sRenderer.addClass(this.classes.itemSubMenuTrigger);
        }
    }
    /** Whether the menu is open. */
    get menuOpen() {
        return this._menuOpen;
    }
    ngOnDestroy() {
        // Not force destruction if it is already being destroyed
        if (!this._destroying) {
            this.closeMenu();
        }
        this._menuDetached.complete();
    }
    _handleClick() {
        if (!this._isItemSubMenuTrigger()) {
            this.toggleMenu();
        }
    }
    /** Opens the menu */
    openMenu() {
        if (!this._menuRef) {
            this._menuRef = this.overlay.create(this.lyMenuTriggerFor, {
                $implicit: this,
                data: this.menuData
            }, {
                styles: {
                    top: 0,
                    left: 0,
                    pointerEvents: null
                },
                fnDestroy: this.detach.bind(this),
                hasBackdrop: false
            });
        }
    }
    /** Closes the menu */
    closeMenu() {
        this.detach();
    }
    /** Toggle menu */
    toggleMenu() {
        if (this._menuRef) {
            this.closeMenu();
        }
        else {
            this.openMenu();
        }
    }
    /** @docs-private */
    detach() {
        if (this._menuRef) {
            this._menuRef.detach();
            this._menuRef = null;
            this._destroying = true;
            this._menuDetached.next();
        }
    }
    /** @docs-private */
    destroy(menuRef) {
        this.menuClosed.emit(null);
        menuRef.remove();
        this._destroying = false;
        Promise.resolve(null).then(() => this._menuOpen = false);
    }
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
    _setMenuOpenToTrue() {
        this._menuOpen = true;
    }
    /**
     * @docs-private
     */
    _isItemSubMenuTrigger() {
        return !!this._menuItem;
    }
}
LyMenuTriggerFor.decorators = [
    { type: Directive, args: [{
                selector: '[lyMenuTriggerFor]',
                host: {
                    '(click)': '_handleClick()'
                },
                exportAs: 'lyMenuTriggerFor',
                providers: [
                    StyleRenderer
                ]
            },] }
];
LyMenuTriggerFor.ctorParameters = () => [
    { type: ElementRef },
    { type: LyOverlay },
    { type: LyMenuItem, decorators: [{ type: Optional }] },
    { type: StyleRenderer },
    { type: LyMenu, decorators: [{ type: Optional }] }
];
LyMenuTriggerFor.propDecorators = {
    lyMenuTriggerFor: [{ type: Input }],
    menuData: [{ type: Input, args: ['lyMenuTriggerData',] }],
    menuOpened: [{ type: Output }],
    menuClosed: [{ type: Output }]
};
export class LyMenuOpenOnHover {
    constructor(_trigger) {
        this._trigger = _trigger;
        this._events = new Subject();
        this._openOnHover = true;
        _trigger._menuOpenOnHoverRef = this;
        this._events
            .pipe(debounceTime(200))
            .subscribe(enterOrLeave => {
            if (this.openOnHover) {
                if (enterOrLeave) {
                    _trigger.openMenu();
                }
                else {
                    _trigger.closeMenu();
                }
            }
        });
    }
    /** Whether menu should open on hover. */
    get openOnHover() {
        return this._openOnHover;
    }
    set openOnHover(value) {
        this._openOnHover = coerceBooleanProperty(value);
        Promise.resolve(null)
            .then(() => this._openOnHover
            ? this._trigger._menuOpenOnHoverRef = this
            : delete this._trigger._menuOpenOnHoverRef);
    }
    ngOnDestroy() {
        this._events.complete();
    }
    /** Handle mouseenter or mouseleave */
    _handleMouseEnterOrLeave(leaveOrEnter) {
        if (this.openOnHover) {
            if (leaveOrEnter) {
                this._trigger.openMenu();
            }
            this._events.next(leaveOrEnter);
        }
    }
}
LyMenuOpenOnHover.decorators = [
    { type: Directive, args: [{
                selector: '[lyMenuTriggerFor][openOnHover]',
                host: {
                    '(mouseenter)': '_handleMouseEnterOrLeave(true)',
                    '(mouseleave)': '_handleMouseEnterOrLeave(false)'
                }
            },] }
];
LyMenuOpenOnHover.ctorParameters = () => [
    { type: LyMenuTriggerFor }
];
LyMenuOpenOnHover.propDecorators = {
    openOnHover: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9tZW51L21lbnUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBR0wsUUFBUSxFQUNSLFNBQVMsRUFFVCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFlBQVksRUFFWixlQUFlLEVBQ2YsVUFBVSxFQUVWLFdBQVcsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN6QixPQUFPLEVBQ0wsU0FBUyxFQUNULFFBQVEsRUFHUixXQUFXLEVBQ1gsYUFBYSxFQUViLFNBQVMsRUFDVCxTQUFTLEVBQ1QsZUFBZSxFQUlmLGlCQUFpQixFQUNqQixhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsT0FBTyxFQUNQLFVBQVUsRUFFVixLQUFLLEVBQ04sTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQWdCLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBWTNELE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRTFCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQXVDLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDL0UsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLE9BQU87UUFDTCxLQUFLLEVB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QU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDOzs7WUE1REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLElBQUksRUFBRTtvQkFDSixjQUFjLEVBQUUsZ0NBQWdDO29CQUNoRCxjQUFjLEVBQUUsaUNBQWlDO2lCQUNsRDthQUNGOzs7WUFvQnFCLGdCQUFnQjs7OzBCQWRuQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgT25DaGFuZ2VzLFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIGZvcndhcmRSZWYsXG4gIFF1ZXJ5TGlzdCxcbiAgSG9zdEJpbmRpbmdcbiAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEx5T3ZlcmxheSxcbiAgTHlUaGVtZTIsXG4gIE92ZXJsYXlGYWN0b3J5LFxuICBQbGFjZW1lbnQsXG4gIFBvc2l0aW9uaW5nLFxuICBzaGFkb3dCdWlsZGVyLFxuICBUaGVtZVZhcmlhYmxlcyxcbiAgWFBvc2l0aW9uLFxuICBZUG9zaXRpb24sXG4gIFN0eWxlQ29sbGVjdGlvbixcbiAgTHlDbGFzc2VzLFxuICBTdHlsZVRlbXBsYXRlLFxuICBUaGVtZVJlZixcbiAgTHlPdmVybGF5UG9zaXRpb24sXG4gIFN0eWxlUmVuZGVyZXIgfSBmcm9tICdAYWx5bGUvdWknO1xuaW1wb3J0IHtcbiAgdHJpZ2dlcixcbiAgc3R5bGUsXG4gIGFuaW1hdGUsXG4gIHRyYW5zaXRpb24sXG4gIEFuaW1hdGlvbkV2ZW50LFxuICBncm91cFxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IFZpZXdwb3J0UnVsZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmltcG9ydCB7IFN1YmplY3QsIGFzYXBTY2hlZHVsZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2UsIGRlbGF5LCBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTHlNZW51VGhlbWUge1xuICAvKiogU3R5bGVzIGZvciBNZW51IENvbXBvbmVudCAqL1xuICByb290PzogU3R5bGVDb2xsZWN0aW9uPCgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKT5cbiAgICB8ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMeU1lbnVWYXJpYWJsZXMge1xuICBtZW51PzogTHlNZW51VGhlbWU7XG59XG5cbmNvbnN0IFNUWUxFX1BSSU9SSVRZID0gLTE7XG5cbmV4cG9ydCBjb25zdCBTVFlMRVMgPSAodGhlbWU6IFRoZW1lVmFyaWFibGVzICYgTHlNZW51VmFyaWFibGVzLCByZWY6IFRoZW1lUmVmKSA9PiB7XG4gIGNvbnN0IG1lbnUgPSByZWYuc2VsZWN0b3JzT2YoU1RZTEVTKTtcbiAgY29uc3QgeyBhZnRlciB9ID0gdGhlbWU7XG4gIHJldHVybiB7XG4gICAgJG5hbWU6IEx5TWVudS7QuCxcbiAgICAkcHJpb3JpdHk6IFNUWUxFX1BSSU9SSVRZLFxuICAgIHJvb3Q6ICgpID0+IChcbiAgICAgIHRoZW1lLm1lbnU/LnJvb3RcbiAgICAgICAgJiYgKHRoZW1lLm1lbnUucm9vdCBpbnN0YW5jZW9mIFN0eWxlQ29sbGVjdGlvblxuICAgICAgICAgID8gdGhlbWUubWVudS5yb290LnNldFRyYW5zZm9ybWVyKGZuID0+IGZuKG1lbnUpKS5jc3NcbiAgICAgICAgICA6IHRoZW1lLm1lbnUucm9vdChtZW51KSlcbiAgICApLFxuICAgIGNvbnRhaW5lcjogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBgJHtjbGFzc05hbWV9e2JhY2tncm91bmQ6JHt0aGVtZS5iYWNrZ3JvdW5kLnByaW1hcnkuZGVmYXVsdH07Ym9yZGVyLXJhZGl1czoycHg7Ym94LXNoYWRvdzoke3NoYWRvd0J1aWxkZXIoNCl9O2Rpc3BsYXk6YmxvY2s7cGFkZGluZy10b3A6OHB4O3BhZGRpbmctYm90dG9tOjhweDt0cmFuc2Zvcm0tb3JpZ2luOmluaGVyaXQ7cG9pbnRlci1ldmVudHM6YWxsO292ZXJmbG93OmF1dG87bWF4LWhlaWdodDppbmhlcml0O21heC13aWR0aDppbmhlcml0O2JveC1zaXppbmc6Ym9yZGVyLWJveDt9YCxcbiAgICBpdGVtOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IGAke2NsYXNzTmFtZX17ZGlzcGxheTpmbGV4O21pbi1oZWlnaHQ6NDhweDtib3JkZXItcmFkaXVzOjA7d2lkdGg6MTAwJTtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDtmb250LXdlaWdodDo0MDA7fSR7Y2xhc3NOYW1lfSBseS1pY29ue21hcmdpbi0ke2FmdGVyfToxNnB4O31gLFxuICAgIGl0ZW1TdWJNZW51VHJpZ2dlcjogKCkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBgJHtjbGFzc05hbWV9e3BhZGRpbmctJHthZnRlcn06MzJweDt9JHtjbGFzc05hbWV9OjphZnRlcnt3aWR0aDowO2hlaWdodDowO2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItd2lkdGg6NXB4IDAgNXB4IDVweDtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgY3VycmVudENvbG9yO2NvbnRlbnQ6XCJcIjtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlOyR7YWZ0ZXJ9OjE2cHg7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSk7fWBcbiAgfTtcbn07XG5cbmNvbnN0IEFOSU1BVElPTlMgPSBbXG4gIHRyaWdnZXIoJ3RyYW5zZm9ybU1lbnUnLCBbXG4gICAgdHJhbnNpdGlvbigndm9pZCA9PiBlbnRlcicsIGdyb3VwKFtcbiAgICAgIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMC44KSdcbiAgICAgIH0pLFxuICAgICAgYW5pbWF0ZSgnMTAwbXMgbGluZWFyJywgc3R5bGUoe1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9KSksXG4gICAgICBhbmltYXRlKCcxMjBtcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKScsIHN0eWxlKHt0cmFuc2Zvcm06ICdzY2FsZSgxKSd9KSksXG4gICAgXSkpXG4gIF0pLFxuICB0cmlnZ2VyKCd0cmFuc2Zvcm1NZW51TGVhdmUnLCBbXG4gICAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgYW5pbWF0ZSgnMTAwbXMgMjVtcyBsaW5lYXInLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpKVxuICBdKVxuXTtcblxuLyoqIE1lbnUgY29udGFpbmVyICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdseS1tZW51JyxcbiAgYW5pbWF0aW9uczogWy4uLkFOSU1BVElPTlNdLFxuICB0ZW1wbGF0ZVVybDogJ21lbnUuaHRtbCcsXG4gIGV4cG9ydEFzOiAnbHlNZW51JyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgU3R5bGVSZW5kZXJlclxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEx5TWVudSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIC8qKiBNZW51IFRyaWdnZXIgKi9cbiAgQElucHV0KClcbiAgc2V0IHJlZih2YWx1ZTogTHlNZW51VHJpZ2dlckZvcikge1xuICAgIHRoaXMuX3JlZiA9IHZhbHVlO1xuICAgIHRoaXMuX21lbnVSZWYgPSB2YWx1ZS5fbWVudVJlZiE7XG4gIH1cbiAgZ2V0IHJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVmO1xuICB9XG5cbiAgLyoqIFdoZXRoZXIgdGhlIG1lbnUgaGFzIGEgYmFja2Ryb3AuICovXG4gIEBJbnB1dCgpXG4gIGdldCBoYXNCYWNrZHJvcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGFzQmFja2Ryb3A7XG4gIH1cbiAgc2V0IGhhc0JhY2tkcm9wKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGFzQmFja2Ryb3AgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdGhlbWU6IEx5VGhlbWUyLFxuICAgIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBfdmlld3BvcnRSdWxlcjogVmlld3BvcnRSdWxlcixcbiAgICByZWFkb25seSBzUmVuZGVyZXI6IFN0eWxlUmVuZGVyZXJcbiAgKSB7IH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkg0LggPSAnTHlNZW51JztcblxuXG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9oYXNCYWNrZHJvcDogQm9vbGVhbklucHV0O1xuXG4gIC8qKlxuICAgKiBzdHlsZXNcbiAgICogQGRvY3MtcHJpdmF0ZVxuICAgKi9cbiAgcmVhZG9ubHkgY2xhc3NlcyA9IHRoaXMuc1JlbmRlcmVyLnJlbmRlclNoZWV0KFNUWUxFUywgdHJ1ZSk7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIG1lbnUgaXMgYW5pbWF0aW5nLiAqL1xuICBfaXNBbmltYXRpbmc6IGJvb2xlYW47XG5cbiAgLyoqIFdoZXRoZXIgdGhlIG1lbnUgaXMgZGVzdHJveWluZy4gKi9cbiAgX2lzRGVzdHJveWluZzogYm9vbGVhbjtcblxuICAvKiogRW1pdHMgd2hlbmV2ZXIgYW4gYW5pbWF0aW9uIG9uIHRoZSBtZW51IGNvbXBsZXRlcy4gKi9cbiAgX2FuaW1hdGlvbkRvbmUgPSBuZXcgU3ViamVjdDxBbmltYXRpb25FdmVudD4oKTtcblxuICBwcml2YXRlIF9tZW51UmVmOiBPdmVybGF5RmFjdG9yeTxhbnk+O1xuICAvKipcbiAgICogRGVzdHJveSBtZW51XG4gICAqIEBkb2NzLXByaXZhdGVcbiAgICovXG4gIGRlc3Ryb3k6ICgpID0+IHZvaWQ7XG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lcicpIF9jb250YWluZXI/OiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcbiAgQENvbnRlbnRDaGlsZHJlbihmb3J3YXJkUmVmKCgpID0+IEx5TWVudUl0ZW0pKSByZWFkb25seSBtZW51SXRlbXM/OiBRdWVyeUxpc3Q8THlNZW51SXRlbT47XG4gIHByaXZhdGUgX3JlZjogTHlNZW51VHJpZ2dlckZvcjtcblxuICAvKiogVGhlIHBvaW50IGluIHRoZSBhbmNob3Igd2hlcmUgdGhlIG1lbnUgYHhBeGlzYCB3aWxsIGJlIGF0dGFjaGVkLiAqL1xuICBASW5wdXQoKSB4QW5jaG9yOiBYUG9zaXRpb247XG5cbiAgLyoqIFRoZSBwb2ludCBpbiB0aGUgYW5jaG9yIHdoZXJlIHRoZSBtZW51IGB5QXhpc2Agd2lsbCBiZSBhdHRhY2hlZC4gKi9cbiAgQElucHV0KCkgeUFuY2hvcjogWVBvc2l0aW9uO1xuXG4gIC8qKiBUaGUgeC1heGlzIHBvc2l0aW9uIG9mIHRoZSBtZW51LiAqL1xuICBASW5wdXQoKSB4QXhpczogWFBvc2l0aW9uO1xuXG4gIC8qKiBUaGUgeS1heGlzIHBvc2l0aW9uIG9mIHRoZSBtZW51LiAqL1xuICBASW5wdXQoKSB5QXhpczogWVBvc2l0aW9uO1xuXG4gIC8qKlxuICAgKiBQb3NpdGlvbiB3aGVyZSB0aGUgbWVudSB3aWxsIGJlIHBsYWNlZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGB4QXhpc2AgYW5kYCB5QXhpc2AgdG9nZXRoZXIgaW5zdGVhZC5cbiAgICovXG4gIEBJbnB1dCgpIHBsYWNlbWVudDogUGxhY2VtZW50O1xuXG5cbiAgLyoqXG4gICAqIFRoZSB4LWF4aXMgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgeEF4aXNgIGluc3RlYWQuXG4gICAqL1xuICBASW5wdXQoKSB4UG9zaXRpb246IFhQb3NpdGlvbjtcblxuICAvKipcbiAgICogVGhlIHktYXhpcyBwb3NpdGlvbiBvZiB0aGUgbWVudS5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGB5QXhpc2AgaW5zdGVhZC5cbiAgICovXG4gIEBJbnB1dCgpIHlQb3NpdGlvbjogWVBvc2l0aW9uO1xuICBwcml2YXRlIF9oYXNCYWNrZHJvcDogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgX21vdXNlZW50ZXJMaXN0ZW4/OiAoKSA9PiB2b2lkO1xuICBwcml2YXRlIF9tb3VzZWxlYXZlTGlzdGVuPzogKCkgPT4gdm9pZDtcblxuICBASG9zdEJpbmRpbmcoJ0B0cmFuc2Zvcm1NZW51TGVhdmUnKSB0cmFuc2Zvcm1NZW51TGVhdmU6IHVua25vd247XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMucmVmPy5fbWVudVJlZiAmJiB0aGlzLl9jb250YWluZXIpIHtcbiAgICAgIC8vIFVwZGF0ZSBiYWNrZHJvcFxuICAgICAgdGhpcy5yZWYuX21lbnVSZWYudXBkYXRlQmFja2Ryb3AodGhpcy5yZWYuX2lzSXRlbVN1Yk1lbnVUcmlnZ2VyKCkgPyBmYWxzZSA6IHRoaXMuaGFzQmFja2Ryb3ApO1xuICAgICAgdGhpcy5fdXBkYXRlUGxhY2VtZW50KCk7XG4gICAgICB0aGlzLl9jaGVja0JhY2tkcm9wQW5kT3Blbk9uSG92ZXIoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMucmVmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0x5TWVudTogcmVxdWlyZSBASW5wdXQoKSByZWYnKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMucmVmLl9tZW51UmVmKSB7XG4gICAgICB0aGlzLnJlZi5fbWVudVJlZi5vblJlc2l6ZVNjcm9sbCA9IHRoaXMuX3VwZGF0ZVBsYWNlbWVudC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5yZWYuX21lbnVSZWYudXBkYXRlQmFja2Ryb3AodGhpcy5yZWYuX2lzSXRlbVN1Yk1lbnVUcmlnZ2VyKCkgPyBmYWxzZSA6IHRoaXMuaGFzQmFja2Ryb3ApO1xuICAgICAgdGhpcy5fY2hlY2tCYWNrZHJvcEFuZE9wZW5PbkhvdmVyKCk7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZVBsYWNlbWVudCgpO1xuICAgIHRoaXMucmVmLm1lbnVPcGVuZWQuZW1pdCgpO1xuICAgIFByb21pc2UucmVzb2x2ZShudWxsKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMucmVmLl9zZXRNZW51T3BlblRvVHJ1ZSgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGhvc3RUcmlnZ2VyID0gdGhpcy5fZ2V0SG9zdE1lbnVUcmlnZ2VyKCk7XG4gICAgaG9zdFRyaWdnZXIuX21lbnVEZXRhY2hlZFxuICAgICAgLnBpcGUodGFrZSgxKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5fcmVmLmNsb3NlTWVudSgpKTtcbiAgICB0aGlzLl9hZGRPcGVuT25Ib3ZlcigpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVtb3ZlT3Blbk9uSG92ZXJMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NoZWNrQmFja2Ryb3BBbmRPcGVuT25Ib3ZlcigpIHtcbiAgICBjb25zdCBob3N0VHJpZ2dlciA9IHRoaXMuX2dldEhvc3RNZW51VHJpZ2dlcigpO1xuICAgIGlmICh0aGlzLmhhc0JhY2tkcm9wICYmIGhvc3RUcmlnZ2VyLl9tZW51T3Blbk9uSG92ZXJSZWY/Lm9wZW5PbkhvdmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7THlNZW51LtC4fTogQ2FuJ3QgdXNlIFtoYXNCYWNrZHJvcF0gd2l0aCBbb3Blbk9uSG92ZXJdIGF0IHRoZSBzYW1lIHRpbWUsIHNldCBbaGFzQmFja2Ryb3BdIHRvIGZhbHNlIHRvIHVzZSBbb3Blbk9uSG92ZXJdYCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0SG9zdE1lbnVUcmlnZ2VyKCkge1xuICAgIGxldCBtZW51VHJpZ2dlciA9IHRoaXMucmVmO1xuXG4gICAgd2hpbGUgKG1lbnVUcmlnZ2VyLl9tZW51Py5yZWYpIHtcbiAgICAgIG1lbnVUcmlnZ2VyID0gbWVudVRyaWdnZXIuX21lbnUucmVmO1xuICAgIH1cblxuICAgIHJldHVybiBtZW51VHJpZ2dlcjtcbiAgfVxuXG4gIHByaXZhdGUgX2FkZE9wZW5PbkhvdmVyKCkge1xuICAgIGNvbnN0IGhvc3RUcmlnZ2VyID0gdGhpcy5fZ2V0SG9zdE1lbnVUcmlnZ2VyKCk7XG4gICAgaWYgKGhvc3RUcmlnZ2VyLl9tZW51T3Blbk9uSG92ZXJSZWY/Lm9wZW5PbkhvdmVyICYmICF0aGlzLl9tb3VzZWVudGVyTGlzdGVuICYmICF0aGlzLl9tb3VzZWxlYXZlTGlzdGVuKSB7XG4gICAgICBob3N0VHJpZ2dlci5fbWVudU9wZW5PbkhvdmVyUmVmIS5faGFuZGxlTW91c2VFbnRlck9yTGVhdmUodHJ1ZSk7XG4gICAgICB0aGlzLl9tb3VzZWVudGVyTGlzdGVuID0gdGhpcy5fcmVuZGVyZXJcbiAgICAgICAgLmxpc3RlbihcbiAgICAgICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICdtb3VzZWVudGVyJyxcbiAgICAgICAgICAoKSA9PiBob3N0VHJpZ2dlci5fbWVudU9wZW5PbkhvdmVyUmVmIS5faGFuZGxlTW91c2VFbnRlck9yTGVhdmUodHJ1ZSlcbiAgICAgICAgKTtcblxuICAgICAgdGhpcy5fbW91c2VsZWF2ZUxpc3RlbiA9IHRoaXMuX3JlbmRlcmVyXG4gICAgICAgIC5saXN0ZW4oXG4gICAgICAgICAgdGhpcy5fZWwubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAnbW91c2VsZWF2ZScsXG4gICAgICAgICAgKCkgPT4gaG9zdFRyaWdnZXIuX21lbnVPcGVuT25Ib3ZlclJlZiEuX2hhbmRsZU1vdXNlRW50ZXJPckxlYXZlKGZhbHNlKVxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBSZW1vdmUgbGlzdGVuZXJzICovXG4gIHByaXZhdGUgX3JlbW92ZU9wZW5PbkhvdmVyTGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLl9tb3VzZWVudGVyTGlzdGVuKSB7XG4gICAgICB0aGlzLl9tb3VzZWVudGVyTGlzdGVuKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9tb3VzZWxlYXZlTGlzdGVuKSB7XG4gICAgICB0aGlzLl9tb3VzZWxlYXZlTGlzdGVuKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIFVwZGF0ZSBNZW51IFBvc2l0aW9uICovXG4gIHByaXZhdGUgX3VwZGF0ZVBsYWNlbWVudCgpIHtcbiAgICBjb25zdCBlbCA9IHRoaXMucmVmLl9tZW51UmVmPy5jb250YWluZXJFbGVtZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lcj8ubmF0aXZlRWxlbWVudDtcblxuICAgIC8vIERvIG5vdCB1cGRhdGUgd2hlbiBub3QgYXZhaWxhYmxlXG4gICAgaWYgKCFlbCB8fCAhY29udGFpbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgaGVpZ2h0ICYgd2lkdGhcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShjb250YWluZXIsICdoZWlnaHQnLCAnaW5pdGlhbCcpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGNvbnRhaW5lciwgJ3dpZHRoJywgJ2luaXRpYWwnKTtcblxuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5wbGFjZW1lbnRcbiAgICAgID8gbmV3IFBvc2l0aW9uaW5nKHRoaXMucGxhY2VtZW50LCB0aGlzLnhQb3NpdGlvbiwgdGhpcy55UG9zaXRpb24sIHRoaXMucmVmLl9nZXRIb3N0RWxlbWVudCgpLCBlbCwgdGhpcy5fdGhlbWUudmFyaWFibGVzKVxuICAgICAgOiAhdGhpcy5yZWYuX2lzSXRlbVN1Yk1lbnVUcmlnZ2VyKClcbiAgICAgICAgPyBuZXcgTHlPdmVybGF5UG9zaXRpb24odGhpcy5fdGhlbWUsIHRoaXMuX3ZpZXdwb3J0UnVsZXIsIHRoaXMucmVmLl9nZXRIb3N0RWxlbWVudCgpLCBlbClcbiAgICAgICAgICAuc2V0WEFuY2hvcih0aGlzLnhBbmNob3IpXG4gICAgICAgICAgLnNldFlBbmNob3IodGhpcy55QW5jaG9yKVxuICAgICAgICAgIC5zZXRYQXhpcyh0aGlzLnhBeGlzKVxuICAgICAgICAgIC5zZXRZQXhpcyh0aGlzLnlBeGlzKVxuICAgICAgICAgIC5zZXRGbGlwKHRydWUpXG4gICAgICAgICAgLmJ1aWxkKClcbiAgICAgICAgOiBuZXcgTHlPdmVybGF5UG9zaXRpb24odGhpcy5fdGhlbWUsIHRoaXMuX3ZpZXdwb3J0UnVsZXIsIHRoaXMucmVmLl9nZXRIb3N0RWxlbWVudCgpLCBlbClcbiAgICAgICAgICAuc2V0WEFuY2hvcihYUG9zaXRpb24uYWZ0ZXIpXG4gICAgICAgICAgLnNldFlBbmNob3IoWVBvc2l0aW9uLmFib3ZlKVxuICAgICAgICAgIC5zZXRGbGlwKHRydWUpXG4gICAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICBpZiAocG9zaXRpb24gaW5zdGFuY2VvZiBQb3NpdGlvbmluZykge1xuICAgICAgLy8gc2V0IHBvc2l0aW9uIGRlcHJlY2F0ZWRcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGVsLCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZTNkKCR7cG9zaXRpb24ueH1weCwgJHtwb3NpdGlvbi55fXB4LCAwKWApO1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUodGhpcy5fZWwubmF0aXZlRWxlbWVudCwgJ3RyYW5zZm9ybS1vcmlnaW4nLCBgJHtwb3NpdGlvbi5veH0gJHtwb3NpdGlvbi5veX0gMGApO1xuXG4gICAgICAvLyBzZXQgaGVpZ2h0ICYgd2lkdGggZGVwcmVjYXRlZFxuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoY29udGFpbmVyLCAnaGVpZ2h0JywgcG9zaXRpb24uaGVpZ2h0ID09PSAnaW5pdGlhbCcgPyAnMTAwJScgOiBwb3NpdGlvbi5oZWlnaHQpO1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoY29udGFpbmVyLCAnd2lkdGgnLCBwb3NpdGlvbi53aWR0aCA9PT0gJ2luaXRpYWwnID8gJzEwMCUnIDogcG9zaXRpb24ud2lkdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXQgcG9zaXRpb25cbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGVsLCAnbGVmdCcsIGAke3Bvc2l0aW9uLnh9cHhgKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGVsLCAndG9wJywgYCR7cG9zaXRpb24ueX1weGApO1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoY29udGFpbmVyLCAnd2lkdGgnLCBwb3NpdGlvbi53aWR0aCA/IGAke3Bvc2l0aW9uLndpZHRofXB4YCA6ICcxMDAlJyk7XG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShjb250YWluZXIsICdoZWlnaHQnLCBwb3NpdGlvbi5oZWlnaHQgPyBgJHtwb3NpdGlvbi5oZWlnaHR9cHhgIDogJzEwMCUnKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQsICd0cmFuc2Zvcm0tb3JpZ2luJywgYCR7cG9zaXRpb24ueG99cHggJHtwb3NpdGlvbi55b31weCAwYCk7XG4gICAgfVxuXG4gIH1cbiAgQEhvc3RMaXN0ZW5lcignQHRyYW5zZm9ybU1lbnVMZWF2ZS5zdGFydCcsIFsnJGV2ZW50J10pIF9vbkFuaW1hdGlvblN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCkge1xuICAgIHRoaXMuX2lzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBpZiAoZXZlbnQudHJpZ2dlck5hbWUgPT09ICd0cmFuc2Zvcm1NZW51TGVhdmUnICYmIGV2ZW50LnRvU3RhdGUgPT09ICd2b2lkJykge1xuICAgICAgdGhpcy5faXNEZXN0cm95aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgQEhvc3RMaXN0ZW5lcignQHRyYW5zZm9ybU1lbnVMZWF2ZS5kb25lJywgWyckZXZlbnQnXSkgX29uQW5pbWF0aW9uRG9uZShldmVudDogQW5pbWF0aW9uRXZlbnQpIHtcbiAgICB0aGlzLl9hbmltYXRpb25Eb25lLm5leHQoZXZlbnQpO1xuICAgIHRoaXMuX2lzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgaWYgKGV2ZW50LnRvU3RhdGUgPT09ICd2b2lkJyAmJiBldmVudC50cmlnZ2VyTmFtZSA9PT0gJ3RyYW5zZm9ybU1lbnVMZWF2ZScpIHtcbiAgICAgIHRoaXMucmVmLmRlc3Ryb3kodGhpcy5fbWVudVJlZik7XG4gICAgfVxuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tseS1tZW51LWl0ZW1dJyxcbiAgaG9zdDoge1xuICAgICcoY2xpY2spJzogJ19oYW5kbGVDbGljaygpJyxcbiAgICAnKG1vdXNlZW50ZXIpJzogJ19oYW5kbGVNb3VzZUVudGVyKCknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTHlNZW51SXRlbSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfbWVudTogTHlNZW51LFxuICAgIGVsOiBFbGVtZW50UmVmLFxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjJcbiAgKSB7XG4gICAgcmVuZGVyZXIuYWRkQ2xhc3MoZWwubmF0aXZlRWxlbWVudCwgX21lbnUuY2xhc3Nlcy5pdGVtKTtcbiAgfVxuICBwcml2YXRlIF9pdGVtU3ViTWVudVRyaWdnZXI/OiBMeU1lbnVUcmlnZ2VyRm9yO1xuXG4gIF9oYW5kbGVDbGljaygpIHtcbiAgICBpZiAodGhpcy5fbWVudS5yZWYgJiYgdGhpcy5fbWVudS5yZWYuX21lbnVSZWYpIHtcbiAgICAgIGlmICghdGhpcy5fZ2V0SXRlbVN1Yk1lbnVUcmlnZ2VyKCkpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRUcmlnZ2VyID0gdGhpcy5fbWVudS5yZWY7XG4gICAgICAgIHdoaWxlIChjdXJyZW50VHJpZ2dlcikge1xuICAgICAgICAgIGN1cnJlbnRUcmlnZ2VyLmNsb3NlTWVudSgpO1xuICAgICAgICAgIGN1cnJlbnRUcmlnZ2VyID0gY3VycmVudFRyaWdnZXIuX21lbnU/LnJlZjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIGNvbnN0IGl0ZW1TdWJNZW51VHJpZ2dlciA9IHRoaXMuX2dldEl0ZW1TdWJNZW51VHJpZ2dlcigpO1xuICAgIGlmIChpdGVtU3ViTWVudVRyaWdnZXIgJiYgIXRoaXMuX21lbnUuX2lzRGVzdHJveWluZykge1xuICAgICAgaWYgKHRoaXMuX21lbnUuX2lzQW5pbWF0aW5nKSB7XG4gICAgICAgIHRoaXMuX21lbnUuX2FuaW1hdGlvbkRvbmVcbiAgICAgICAgLnBpcGUodGFrZSgxKSwgZGVsYXkoMCwgYXNhcFNjaGVkdWxlcikpXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgIGl0ZW1TdWJNZW51VHJpZ2dlci5vcGVuTWVudSgpO1xuICAgICAgICAgIHRoaXMuX2Nsb3NlT3RoZXJNZW51cygpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1TdWJNZW51VHJpZ2dlci5vcGVuTWVudSgpO1xuICAgICAgICB0aGlzLl9jbG9zZU90aGVyTWVudXMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY2xvc2VPdGhlck1lbnVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEV4Y2VwdCBmb3IgdGhpcywgY2xvc2UgYWxsIG1lbnVzICovXG4gIHByaXZhdGUgX2Nsb3NlT3RoZXJNZW51cygpIHtcbiAgICB0aGlzLl9tZW51Lm1lbnVJdGVtcyEuZm9yRWFjaChtZW51SXRlbSA9PiB7XG4gICAgICBpZiAobWVudUl0ZW0gIT09IHRoaXMpIHtcbiAgICAgICAgbWVudUl0ZW0uX2dldEl0ZW1TdWJNZW51VHJpZ2dlcigpPy5jbG9zZU1lbnUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9zZXRJdGVtU3ViTWVudVRyaWdnZXIobWVudVRyaWdnZXI6IEx5TWVudVRyaWdnZXJGb3IpIHtcbiAgICB0aGlzLl9pdGVtU3ViTWVudVRyaWdnZXIgPSBtZW51VHJpZ2dlcjtcbiAgfVxuICBfZ2V0SXRlbVN1Yk1lbnVUcmlnZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVtU3ViTWVudVRyaWdnZXI7XG4gIH1cbn1cblxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbHlNZW51VHJpZ2dlckZvcl0nLFxuICBob3N0OiB7XG4gICAgJyhjbGljayknOiAnX2hhbmRsZUNsaWNrKCknXG4gIH0sXG4gIGV4cG9ydEFzOiAnbHlNZW51VHJpZ2dlckZvcicsXG4gIHByb3ZpZGVyczogW1xuICAgIFN0eWxlUmVuZGVyZXJcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMeU1lbnVUcmlnZ2VyRm9yIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcmVhZG9ubHkgY2xhc3NlcyA9IHRoaXMuc1JlbmRlcmVyLnJlbmRlclNoZWV0KFNUWUxFUyk7XG5cbiAgLyoqIEN1cnJlbnQgbWVudVJlZiAqL1xuICBfbWVudVJlZj86IE92ZXJsYXlGYWN0b3J5IHwgbnVsbDtcbiAgcHJpdmF0ZSBfbWVudU9wZW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZGVzdHJveWluZzogYm9vbGVhbjtcbiAgX21lbnVEZXRhY2hlZCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIF9tZW51T3Blbk9uSG92ZXJSZWY/OiBMeU1lbnVPcGVuT25Ib3ZlcjtcblxuICAvKiogV2hldGhlciB0aGUgbWVudSBpcyBvcGVuLiAqL1xuICBnZXQgbWVudU9wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lbnVPcGVuO1xuICB9XG5cbiAgQElucHV0KCkgbHlNZW51VHJpZ2dlckZvcjogVGVtcGxhdGVSZWY8YW55PjtcblxuICAvKiogRGF0YSB0byBiZSBwYXNzZWQgdG8gdGhlIG1lbnUuICovXG4gIEBJbnB1dCgnbHlNZW51VHJpZ2dlckRhdGEnKSBtZW51RGF0YTogYW55O1xuXG4gIEBPdXRwdXQoKSByZWFkb25seSBtZW51T3BlbmVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgbWVudUNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBvdmVybGF5OiBMeU92ZXJsYXksXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfbWVudUl0ZW06IEx5TWVudUl0ZW0sXG4gICAgcmVhZG9ubHkgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyLFxuICAgIEBPcHRpb25hbCgpIHB1YmxpYyBfbWVudTogTHlNZW51XG4gICkge1xuICAgIGlmICh0aGlzLl9pc0l0ZW1TdWJNZW51VHJpZ2dlcigpKSB7XG4gICAgICBfbWVudUl0ZW0uX3NldEl0ZW1TdWJNZW51VHJpZ2dlcih0aGlzKTtcbiAgICAgIHNSZW5kZXJlci5hZGRDbGFzcyh0aGlzLmNsYXNzZXMuaXRlbVN1Yk1lbnVUcmlnZ2VyKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBOb3QgZm9yY2UgZGVzdHJ1Y3Rpb24gaWYgaXQgaXMgYWxyZWFkeSBiZWluZyBkZXN0cm95ZWRcbiAgICBpZiAoIXRoaXMuX2Rlc3Ryb3lpbmcpIHtcbiAgICAgIHRoaXMuY2xvc2VNZW51KCk7XG4gICAgfVxuICAgIHRoaXMuX21lbnVEZXRhY2hlZC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgX2hhbmRsZUNsaWNrKCkge1xuICAgIGlmICghdGhpcy5faXNJdGVtU3ViTWVudVRyaWdnZXIoKSkge1xuICAgICAgdGhpcy50b2dnbGVNZW51KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIE9wZW5zIHRoZSBtZW51ICovXG4gIG9wZW5NZW51KCkge1xuICAgIGlmICghdGhpcy5fbWVudVJlZikge1xuICAgICAgdGhpcy5fbWVudVJlZiA9IHRoaXMub3ZlcmxheS5jcmVhdGUodGhpcy5seU1lbnVUcmlnZ2VyRm9yLCB7XG4gICAgICAgICRpbXBsaWNpdDogdGhpcyxcbiAgICAgICAgZGF0YTogdGhpcy5tZW51RGF0YVxuICAgICAgfSwge1xuICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGZuRGVzdHJveTogdGhpcy5kZXRhY2guYmluZCh0aGlzKSxcbiAgICAgICAgaGFzQmFja2Ryb3A6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKiogQ2xvc2VzIHRoZSBtZW51ICovXG4gIGNsb3NlTWVudSgpIHtcbiAgICB0aGlzLmRldGFjaCgpO1xuICB9XG5cbiAgLyoqIFRvZ2dsZSBtZW51ICovXG4gIHRvZ2dsZU1lbnUoKSB7XG4gICAgaWYgKHRoaXMuX21lbnVSZWYpIHtcbiAgICAgIHRoaXMuY2xvc2VNZW51KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Blbk1lbnUoKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBkZXRhY2goKSB7XG4gICAgaWYgKHRoaXMuX21lbnVSZWYpIHtcbiAgICAgIHRoaXMuX21lbnVSZWYuZGV0YWNoKCk7XG4gICAgICB0aGlzLl9tZW51UmVmID0gbnVsbDtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5fbWVudURldGFjaGVkLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBkZXN0cm95KG1lbnVSZWY6IE92ZXJsYXlGYWN0b3J5PGFueT4pIHtcbiAgICB0aGlzLm1lbnVDbG9zZWQuZW1pdChudWxsISk7XG4gICAgbWVudVJlZi5yZW1vdmUoKTtcbiAgICB0aGlzLl9kZXN0cm95aW5nID0gZmFsc2U7XG4gICAgUHJvbWlzZS5yZXNvbHZlKG51bGwpLnRoZW4oKCkgPT4gdGhpcy5fbWVudU9wZW4gPSBmYWxzZSk7XG4gIH1cblxuICBfZ2V0SG9zdEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgX3NldE1lbnVPcGVuVG9UcnVlKCkge1xuICAgIHRoaXMuX21lbnVPcGVuID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZG9jcy1wcml2YXRlXG4gICAqL1xuICBfaXNJdGVtU3ViTWVudVRyaWdnZXIoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fbWVudUl0ZW07XG4gIH1cblxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbHlNZW51VHJpZ2dlckZvcl1bb3Blbk9uSG92ZXJdJyxcbiAgaG9zdDoge1xuICAgICcobW91c2VlbnRlciknOiAnX2hhbmRsZU1vdXNlRW50ZXJPckxlYXZlKHRydWUpJyxcbiAgICAnKG1vdXNlbGVhdmUpJzogJ19oYW5kbGVNb3VzZUVudGVyT3JMZWF2ZShmYWxzZSknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTHlNZW51T3Blbk9uSG92ZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgX2V2ZW50cyA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgLyoqIFdoZXRoZXIgbWVudSBzaG91bGQgb3BlbiBvbiBob3Zlci4gKi9cbiAgQElucHV0KClcbiAgZ2V0IG9wZW5PbkhvdmVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9vcGVuT25Ib3ZlcjtcbiAgfVxuICBzZXQgb3Blbk9uSG92ZXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcGVuT25Ib3ZlciA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgUHJvbWlzZS5yZXNvbHZlKG51bGwpXG4gICAgLnRoZW4oKCkgPT4gdGhpcy5fb3Blbk9uSG92ZXJcbiAgICAgID8gdGhpcy5fdHJpZ2dlci5fbWVudU9wZW5PbkhvdmVyUmVmID0gdGhpc1xuICAgICAgOiBkZWxldGUgdGhpcy5fdHJpZ2dlci5fbWVudU9wZW5PbkhvdmVyUmVmKTtcbiAgfVxuICBwcml2YXRlIF9vcGVuT25Ib3ZlcjogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdHJpZ2dlcjogTHlNZW51VHJpZ2dlckZvclxuICApIHtcbiAgICBfdHJpZ2dlci5fbWVudU9wZW5PbkhvdmVyUmVmID0gdGhpcztcbiAgICB0aGlzLl9ldmVudHNcbiAgICAgIC5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoMjAwKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZShlbnRlck9yTGVhdmUgPT4ge1xuICAgICAgICBpZiAodGhpcy5vcGVuT25Ib3Zlcikge1xuICAgICAgICAgIGlmIChlbnRlck9yTGVhdmUpIHtcbiAgICAgICAgICAgIF90cmlnZ2VyLm9wZW5NZW51KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90cmlnZ2VyLmNsb3NlTWVudSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9ldmVudHMuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKiBIYW5kbGUgbW91c2VlbnRlciAqL1xuICBfaGFuZGxlTW91c2VFbnRlck9yTGVhdmUoZW50ZXI6IHRydWUpOiB2b2lkO1xuICAvKiogSGFuZGxlIG1vdXNlbGVhdmUgKi9cbiAgX2hhbmRsZU1vdXNlRW50ZXJPckxlYXZlKGxlYXZlOiBmYWxzZSk6IHZvaWQ7XG4gIC8qKiBIYW5kbGUgbW91c2VlbnRlciBvciBtb3VzZWxlYXZlICovXG4gIF9oYW5kbGVNb3VzZUVudGVyT3JMZWF2ZShsZWF2ZU9yRW50ZXI6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vcGVuT25Ib3Zlcikge1xuICAgICAgaWYgKGxlYXZlT3JFbnRlcikge1xuICAgICAgICB0aGlzLl90cmlnZ2VyLm9wZW5NZW51KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9ldmVudHMubmV4dChsZWF2ZU9yRW50ZXIpO1xuICAgIH1cbiAgfVxufVxuIl19