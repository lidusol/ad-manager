import { Directive, Input } from '@angular/core';
import { keyframesUniqueId, StyleRenderer, toBoolean, Dir } from '@alyle/ui';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -0.5;
export const STYLES = (theme) => {
    const id = keyframesUniqueId.next();
    const { primary, secondary, tertiary } = theme.background;
    const dir = theme.direction === Dir.ltr ? -1 : 1;
    const lum = primary.default.luminance();
    let one = (lum < .5
        ? tertiary
        : secondary);
    let two = (lum < .5
        ? secondary
        : tertiary);
    one = one.darken(1 * (lum < .5 ? -.5 : 0));
    two = two.darken(.25 * (lum < .5 ? -1 : 1));
    return {
        $name: LySkeleton.и,
        $priority: STYLE_PRIORITY,
        $global: (className) => `@keyframes ${id}{${className} 0%{background-position:${-dir * 200}% 50%;}${className} 100%{background-position:${dir * 200}% 50%;}}`,
        root: (className) => `${className}{content:'';background:${`linear-gradient(270deg, ${one}, ${two}, ${two}, ${one})`};background-size:400% 400%;animation:${id} 8s ease-in-out infinite;color:transparent;cursor:progress;user-select:none;}`
    };
};
export class LySkeleton {
    constructor(sRenderer) {
        this.sRenderer = sRenderer;
        /** @docs-private */
        this.classes = this.sRenderer.renderSheet(STYLES);
    }
    get skeleton() {
        return this._skeleton;
    }
    set skeleton(val) {
        const newVal = toBoolean(val);
        this._skeleton = newVal;
        this.sRenderer.toggleClass(this.classes.root, newVal);
    }
}
LySkeleton.ɵfac = function LySkeleton_Factory(t) { return new (t || LySkeleton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer)); };
LySkeleton.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LySkeleton, selectors: [["", "lySkeleton", ""]], inputs: { skeleton: ["lySkeleton", "skeleton"] }, exportAs: ["lySkeleton"], features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ])] });
/** @docs-private */
LySkeleton.и = 'LySkeleton';
LySkeleton.ctorParameters = () => [
    { type: StyleRenderer }
];
LySkeleton.propDecorators = {
    skeleton: [{ type: Input, args: ['lySkeleton',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LySkeleton, [{
        type: Directive,
        args: [{
                selector: '[lySkeleton]',
                providers: [
                    StyleRenderer
                ],
                exportAs: 'lySkeleton'
            }]
    }], function () { return [{ type: ɵngcc1.StyleRenderer }]; }, { skeleton: [{
            type: Input,
            args: ['lySkeleton']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tlbGV0b24uanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9za2VsZXRvbi9za2VsZXRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLGFBQWEsRUFDYixTQUFTLEVBQ1QsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7QUFFekIsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDNUIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBcUIsRUFBRSxFQUFFO0FBQ2hELElBQUUsTUFBTSxFQUFFLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdEMsSUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBQzVELElBQUUsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25ELElBQUUsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxQyxJQUFFLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUU7QUFDckIsUUFBSSxDQUFDLENBQUMsUUFBUTtBQUNkLFFBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pCLElBQUUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRTtBQUNyQixRQUFJLENBQUMsQ0FBQyxTQUFTO0FBQ2YsUUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEIsSUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxJQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlDLElBQ0UsT0FBTztBQUNULFFBQUksS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUksU0FBUyxFQUFFLGNBQWM7QUFDN0IsUUFBSSxPQUFPLEVBQUUsQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxTQUFTLDJCQUEyQixDQUFDLEdBQUcsR0FBRyxHQUFHLFVBQVUsU0FBUyw2QkFBNkIsR0FBRyxHQUFHLEdBQUcsVUFBVTtBQUN6SyxRQUFJLElBQUksRUFBRSxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUFDLEdBQUcsU0FBUywwQkFDckMsMkJBQ0UsR0FDRixLQUNFLEdBQ0YsS0FDRSxHQUNGLEtBQ0UsR0FDRixHQUFHLHdDQUF3QyxFQUFFLCtFQUErRTtBQUNwSSxLQUFHLENBQUM7QUFDSixDQUFDLENBQUM7QUFTRixNQUFNLE9BQU8sVUFBVTtBQUN2QixJQWdCRSxZQUNXLFNBQXdCO0FBQ2xDLFFBRFUsY0FBUyxHQUFULFNBQVMsQ0FBZTtBQUNyQyxRQWhCRSxvQkFBb0I7QUFDdEIsUUFBVyxZQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEQsSUFjTSxDQUFDO0FBQ1AsSUFkRSxJQUNJLFFBQVE7QUFDZCxRQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUMxQixJQUFFLENBQUM7QUFDSCxJQUFFLElBQUksUUFBUSxDQUFDLEdBQVk7QUFDM0IsUUFBSSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsUUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUM1QixRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzFELElBQUUsQ0FBQztBQUNIOzs7O2VBQUM7QUFkQyxvQkFBb0I7QUFDSixZQUFDLEdBQUcsWUFBWSxDQUFDLEFBRjlCO0FBQUM7RUFQTCxTQUFTLFNBQUMscEJBUUssWUE1Q2QsYUFBYTtBQUNkO09Bb0NDLFFBQVEsRUFBRSxqQkFwQ1I7Q0FvQ3NCLGtCQUN4QixTQUFTLEVBQUUsc0JBQ1QscERBckNpQix1QkErQ2xCLEtBQUssU0FBQyxZQUFZO0FBQ2pCO09BWGEsa0JBQ2Qsa0JBQ0QsUUFBUSxFQUFFLFlBQVk7VUFDdkI7Ozs7Ozs7Ozs7O29CQVFLO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBUaGVtZVZhcmlhYmxlcyxcbiAga2V5ZnJhbWVzVW5pcXVlSWQsXG4gIFN0eWxlUmVuZGVyZXIsXG4gIHRvQm9vbGVhbixcbiAgRGlyIH0gZnJvbSAnQGFseWxlL3VpJztcblxuY29uc3QgU1RZTEVfUFJJT1JJVFkgPSAtMC41O1xuZXhwb3J0IGNvbnN0IFNUWUxFUyA9ICh0aGVtZTogVGhlbWVWYXJpYWJsZXMpID0+IHtcbiAgY29uc3QgaWQgPSBrZXlmcmFtZXNVbmlxdWVJZC5uZXh0KCk7XG4gIGNvbnN0IHsgcHJpbWFyeSwgc2Vjb25kYXJ5LCB0ZXJ0aWFyeSB9ID0gdGhlbWUuYmFja2dyb3VuZDtcbiAgY29uc3QgZGlyID0gdGhlbWUuZGlyZWN0aW9uID09PSBEaXIubHRyID8gLTEgOiAxO1xuICBjb25zdCBsdW0gPSBwcmltYXJ5LmRlZmF1bHQubHVtaW5hbmNlKCk7XG4gIGxldCBvbmUgPSAobHVtIDwgLjVcbiAgICA/IHRlcnRpYXJ5XG4gICAgOiBzZWNvbmRhcnkpO1xuICBsZXQgdHdvID0gKGx1bSA8IC41XG4gICAgPyBzZWNvbmRhcnlcbiAgICA6IHRlcnRpYXJ5KTtcbiAgb25lID0gb25lLmRhcmtlbigxICogKGx1bSA8IC41ID8gLS41IDogMCkpO1xuICB0d28gPSB0d28uZGFya2VuKC4yNSAqIChsdW0gPCAuNSA/IC0xIDogMSkpO1xuXG4gIHJldHVybiB7XG4gICAgJG5hbWU6IEx5U2tlbGV0b24u0LgsXG4gICAgJHByaW9yaXR5OiBTVFlMRV9QUklPUklUWSxcbiAgICAkZ2xvYmFsOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IGBAa2V5ZnJhbWVzICR7aWR9eyR7Y2xhc3NOYW1lfSAwJXtiYWNrZ3JvdW5kLXBvc2l0aW9uOiR7LWRpciAqIDIwMH0lIDUwJTt9JHtjbGFzc05hbWV9IDEwMCV7YmFja2dyb3VuZC1wb3NpdGlvbjoke2RpciAqIDIwMH0lIDUwJTt9fWAsXG4gICAgcm9vdDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBgJHtjbGFzc05hbWV9e2NvbnRlbnQ6Jyc7YmFja2dyb3VuZDoke1xuICAgICAgICBgbGluZWFyLWdyYWRpZW50KDI3MGRlZywgJHtcbiAgICAgICAgICBvbmVcbiAgICAgICAgfSwgJHtcbiAgICAgICAgICB0d29cbiAgICAgICAgfSwgJHtcbiAgICAgICAgICB0d29cbiAgICAgICAgfSwgJHtcbiAgICAgICAgICBvbmVcbiAgICAgICAgfSlgfTtiYWNrZ3JvdW5kLXNpemU6NDAwJSA0MDAlO2FuaW1hdGlvbjoke2lkfSA4cyBlYXNlLWluLW91dCBpbmZpbml0ZTtjb2xvcjp0cmFuc3BhcmVudDtjdXJzb3I6cHJvZ3Jlc3M7dXNlci1zZWxlY3Q6bm9uZTt9YFxuICB9O1xufTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2x5U2tlbGV0b25dJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgU3R5bGVSZW5kZXJlclxuICBdLFxuICBleHBvcnRBczogJ2x5U2tlbGV0b24nXG59KVxuZXhwb3J0IGNsYXNzIEx5U2tlbGV0b24ge1xuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBzdGF0aWMgcmVhZG9ubHkg0LggPSAnTHlTa2VsZXRvbic7XG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHJlYWRvbmx5IGNsYXNzZXMgPSB0aGlzLnNSZW5kZXJlci5yZW5kZXJTaGVldChTVFlMRVMpO1xuXG4gIEBJbnB1dCgnbHlTa2VsZXRvbicpXG4gIGdldCBza2VsZXRvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc2tlbGV0b247XG4gIH1cbiAgc2V0IHNrZWxldG9uKHZhbDogYm9vbGVhbikge1xuICAgIGNvbnN0IG5ld1ZhbCA9IHRvQm9vbGVhbih2YWwpO1xuICAgIHRoaXMuX3NrZWxldG9uID0gbmV3VmFsO1xuICAgIHRoaXMuc1JlbmRlcmVyLnRvZ2dsZUNsYXNzKHRoaXMuY2xhc3Nlcy5yb290LCBuZXdWYWwpO1xuICB9XG4gIHByaXZhdGUgX3NrZWxldG9uOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlclxuICApIHsgfVxufVxuIl19