import { Directive, Input } from '@angular/core';
import { keyframesUniqueId, StyleRenderer, toBoolean, Dir } from '@alyle/ui';
const STYLE_PRIORITY = -0.5;
export const STYLES = (theme) => {
    const id = keyframesUniqueId.next();
    const { primary, secondary, tertiary } = theme.background;
    const dir = theme.direction === Dir.ltr ? -1 : 1;
    const lum = primary.default.luminance();
    let one = (lum < .5
        ? tertiary
        : secondary);
    let two = (lum < .5
        ? secondary
        : tertiary);
    one = one.darken(1 * (lum < .5 ? -.5 : 0));
    two = two.darken(.25 * (lum < .5 ? -1 : 1));
    return {
        $name: LySkeleton.и,
        $priority: STYLE_PRIORITY,
        $global: (className) => `@keyframes ${id}{${className} 0%{background-position:${-dir * 200}% 50%;}${className} 100%{background-position:${dir * 200}% 50%;}}`,
        root: (className) => `${className}{content:'';background:${`linear-gradient(270deg, ${one}, ${two}, ${two}, ${one})`};background-size:400% 400%;animation:${id} 8s ease-in-out infinite;color:transparent;cursor:progress;user-select:none;}`
    };
};
export class LySkeleton {
    constructor(sRenderer) {
        this.sRenderer = sRenderer;
        /** @docs-private */
        this.classes = this.sRenderer.renderSheet(STYLES);
    }
    get skeleton() {
        return this._skeleton;
    }
    set skeleton(val) {
        const newVal = toBoolean(val);
        this._skeleton = newVal;
        this.sRenderer.toggleClass(this.classes.root, newVal);
    }
}
/** @docs-private */
LySkeleton.и = 'LySkeleton';
LySkeleton.decorators = [
    { type: Directive, args: [{
                selector: '[lySkeleton]',
                providers: [
                    StyleRenderer
                ],
                exportAs: 'lySkeleton'
            },] }
];
LySkeleton.ctorParameters = () => [
    { type: StyleRenderer }
];
LySkeleton.propDecorators = {
    skeleton: [{ type: Input, args: ['lySkeleton',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tlbGV0b24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvc2tlbGV0b24vc2tlbGV0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUVMLGlCQUFpQixFQUNqQixhQUFhLEVBQ2IsU0FBUyxFQUNULEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV6QixNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFxQixFQUFFLEVBQUU7SUFDOUMsTUFBTSxFQUFFLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztJQUMxRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN4QyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFO1FBQ2pCLENBQUMsQ0FBQyxRQUFRO1FBQ1YsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRTtRQUNqQixDQUFDLENBQUMsU0FBUztRQUNYLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNkLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVDLE9BQU87UUFDTCxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbkIsU0FBUyxFQUFFLGNBQWM7UUFDekIsT0FBTyxFQUFFLENBQUMsU0FBaUIsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLElBQUksU0FBUywyQkFBMkIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxVQUFVLFNBQVMsNkJBQTZCLEdBQUcsR0FBRyxHQUFHLFVBQVU7UUFDckssSUFBSSxFQUFFLENBQUMsU0FBaUIsRUFBRSxFQUFFLENBQUMsR0FBRyxTQUFTLDBCQUNyQywyQkFDRSxHQUNGLEtBQ0UsR0FDRixLQUNFLEdBQ0YsS0FDRSxHQUNGLEdBQUcsd0NBQXdDLEVBQUUsK0VBQStFO0tBQ2pJLENBQUM7QUFDSixDQUFDLENBQUM7QUFTRixNQUFNLE9BQU8sVUFBVTtJQWlCckIsWUFDVyxTQUF3QjtRQUF4QixjQUFTLEdBQVQsU0FBUyxDQUFlO1FBZm5DLG9CQUFvQjtRQUNYLFlBQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQWVsRCxDQUFDO0lBYkwsSUFDSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxHQUFZO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4RCxDQUFDOztBQWJELG9CQUFvQjtBQUNKLFlBQUMsR0FBRyxZQUFZLENBQUM7O1lBVGxDLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsU0FBUyxFQUFFO29CQUNULGFBQWE7aUJBQ2Q7Z0JBQ0QsUUFBUSxFQUFFLFlBQVk7YUFDdkI7OztZQTFDQyxhQUFhOzs7dUJBaURaLEtBQUssU0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgVGhlbWVWYXJpYWJsZXMsXG4gIGtleWZyYW1lc1VuaXF1ZUlkLFxuICBTdHlsZVJlbmRlcmVyLFxuICB0b0Jvb2xlYW4sXG4gIERpciB9IGZyb20gJ0BhbHlsZS91aSc7XG5cbmNvbnN0IFNUWUxFX1BSSU9SSVRZID0gLTAuNTtcbmV4cG9ydCBjb25zdCBTVFlMRVMgPSAodGhlbWU6IFRoZW1lVmFyaWFibGVzKSA9PiB7XG4gIGNvbnN0IGlkID0ga2V5ZnJhbWVzVW5pcXVlSWQubmV4dCgpO1xuICBjb25zdCB7IHByaW1hcnksIHNlY29uZGFyeSwgdGVydGlhcnkgfSA9IHRoZW1lLmJhY2tncm91bmQ7XG4gIGNvbnN0IGRpciA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gRGlyLmx0ciA/IC0xIDogMTtcbiAgY29uc3QgbHVtID0gcHJpbWFyeS5kZWZhdWx0Lmx1bWluYW5jZSgpO1xuICBsZXQgb25lID0gKGx1bSA8IC41XG4gICAgPyB0ZXJ0aWFyeVxuICAgIDogc2Vjb25kYXJ5KTtcbiAgbGV0IHR3byA9IChsdW0gPCAuNVxuICAgID8gc2Vjb25kYXJ5XG4gICAgOiB0ZXJ0aWFyeSk7XG4gIG9uZSA9IG9uZS5kYXJrZW4oMSAqIChsdW0gPCAuNSA/IC0uNSA6IDApKTtcbiAgdHdvID0gdHdvLmRhcmtlbiguMjUgKiAobHVtIDwgLjUgPyAtMSA6IDEpKTtcblxuICByZXR1cm4ge1xuICAgICRuYW1lOiBMeVNrZWxldG9uLtC4LFxuICAgICRwcmlvcml0eTogU1RZTEVfUFJJT1JJVFksXG4gICAgJGdsb2JhbDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBgQGtleWZyYW1lcyAke2lkfXske2NsYXNzTmFtZX0gMCV7YmFja2dyb3VuZC1wb3NpdGlvbjokey1kaXIgKiAyMDB9JSA1MCU7fSR7Y2xhc3NOYW1lfSAxMDAle2JhY2tncm91bmQtcG9zaXRpb246JHtkaXIgKiAyMDB9JSA1MCU7fX1gLFxuICAgIHJvb3Q6IChjbGFzc05hbWU6IHN0cmluZykgPT4gYCR7Y2xhc3NOYW1lfXtjb250ZW50OicnO2JhY2tncm91bmQ6JHtcbiAgICAgICAgYGxpbmVhci1ncmFkaWVudCgyNzBkZWcsICR7XG4gICAgICAgICAgb25lXG4gICAgICAgIH0sICR7XG4gICAgICAgICAgdHdvXG4gICAgICAgIH0sICR7XG4gICAgICAgICAgdHdvXG4gICAgICAgIH0sICR7XG4gICAgICAgICAgb25lXG4gICAgICAgIH0pYH07YmFja2dyb3VuZC1zaXplOjQwMCUgNDAwJTthbmltYXRpb246JHtpZH0gOHMgZWFzZS1pbi1vdXQgaW5maW5pdGU7Y29sb3I6dHJhbnNwYXJlbnQ7Y3Vyc29yOnByb2dyZXNzO3VzZXItc2VsZWN0Om5vbmU7fWBcbiAgfTtcbn07XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tseVNrZWxldG9uXScsXG4gIHByb3ZpZGVyczogW1xuICAgIFN0eWxlUmVuZGVyZXJcbiAgXSxcbiAgZXhwb3J0QXM6ICdseVNrZWxldG9uJ1xufSlcbmV4cG9ydCBjbGFzcyBMeVNrZWxldG9uIHtcbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgc3RhdGljIHJlYWRvbmx5INC4ID0gJ0x5U2tlbGV0b24nO1xuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICByZWFkb25seSBjbGFzc2VzID0gdGhpcy5zUmVuZGVyZXIucmVuZGVyU2hlZXQoU1RZTEVTKTtcblxuICBASW5wdXQoJ2x5U2tlbGV0b24nKVxuICBnZXQgc2tlbGV0b24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NrZWxldG9uO1xuICB9XG4gIHNldCBza2VsZXRvbih2YWw6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBuZXdWYWwgPSB0b0Jvb2xlYW4odmFsKTtcbiAgICB0aGlzLl9za2VsZXRvbiA9IG5ld1ZhbDtcbiAgICB0aGlzLnNSZW5kZXJlci50b2dnbGVDbGFzcyh0aGlzLmNsYXNzZXMucm9vdCwgbmV3VmFsKTtcbiAgfVxuICBwcml2YXRlIF9za2VsZXRvbjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBzUmVuZGVyZXI6IFN0eWxlUmVuZGVyZXJcbiAgKSB7IH1cbn1cbiJdfQ==