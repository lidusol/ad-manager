import { untilComponentDestroyed } from '@alyle/ui';
import { Component, Input, Renderer2, ElementRef, ChangeDetectionStrategy, ViewChild } from '@angular/core';
import { LySlider, гvalueToPercent, гbetween } from './slider';
import { LyTick } from './tick';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tick';

const _c0 = ["*"];
export class LyMark {
    constructor(_slider, _renderer, _el) {
        this._slider = _slider;
        this._renderer = _renderer;
        this._el = _el;
        /** @docs-private */
        this.classes = this._slider.classes;
        _renderer.addClass(_el.nativeElement, _slider.classes.mark);
    }
    ngOnInit() {
        this._renderer.insertBefore(this._slider._getHostElement(), this._tick._getHostElement(), this._slider._ticksRef.nativeElement);
        this._slider._changes.pipe(untilComponentDestroyed(this)).subscribe(() => {
            this._updateMark();
        });
    }
    _updateMark() {
        const min = this._slider._minPercent;
        const max = this._slider._maxPercent;
        const className = this._slider.classes.markActive;
        const percent = гvalueToPercent(this.value, this._slider.min, this._slider.max);
        const pos = this._slider._calculatePosition(percent);
        if (гbetween(percent, min, max)) {
            this._markActiveClass = className;
            this._renderer.addClass(this._el.nativeElement, className);
        }
        else if (this._markActiveClass) {
            this._markActiveClass = null;
            this._renderer.removeClass(this._el.nativeElement, className);
        }
        this._renderer.setStyle(this._getHostElement(), 'bottom', null);
        this._renderer.setStyle(this._getHostElement(), 'left', null);
        this._renderer.setStyle(this._getHostElement(), 'right', null);
        this._renderer.setStyle(this._getHostElement(), pos.style, pos.value);
    }
    ngOnDestroy() { }
    _getHostElement() {
        return this._el.nativeElement;
    }
}
LyMark.ɵfac = function LyMark_Factory(t) { return new (t || LyMark)(ɵngcc0.ɵɵdirectiveInject(LySlider), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LyMark.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LyMark, selectors: [["ly-mark"]], viewQuery: function LyMark_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(LyTick, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tick = _t.first);
    } }, inputs: { value: "value" }, ngContentSelectors: _c0, decls: 2, vars: 1, consts: [[3, "value"]], template: function LyMark_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelement(0, "ly-tick", 0);
        ɵngcc0.ɵɵprojection(1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("value", ctx.value);
    } }, directives: [ɵngcc1.LyTick], encapsulation: 2, changeDetection: 0 });
LyMark.ctorParameters = () => [
    { type: LySlider },
    { type: Renderer2 },
    { type: ElementRef }
];
LyMark.propDecorators = {
    _tick: [{ type: ViewChild, args: [LyTick, { static: true },] }],
    value: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyMark, [{
        type: Component,
        args: [{
                selector: 'ly-mark',
                template: "<ly-tick [value]=\"value\"></ly-tick>\n<ng-content></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: LySlider }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { _tick: [{
            type: ViewChild,
            args: [LyTick, { static: true }]
        }], value: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyay5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL3NsaWRlci9tYXJrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDL0gsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7Ozs7O0FBT2hDLE1BQU0sT0FBTyxNQUFNO0FBQUcsSUFZcEIsWUFDVSxPQUFpQixFQUNqQixTQUFvQixFQUNwQixHQUFlO0FBQ3hCLFFBSFMsWUFBTyxHQUFQLE9BQU8sQ0FBVTtBQUFDLFFBQ2xCLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUNyQixRQUFHLEdBQUgsR0FBRyxDQUFZO0FBQzNCLFFBZkUsb0JBQW9CO0FBQ3RCLFFBQVcsWUFBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzFDLFFBY0ksU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEUsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQ1YsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDcEksUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQzdFLFlBQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3pCLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNVLFdBQVc7QUFDckIsUUFBSSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUN6QyxRQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3pDLFFBQ0ksTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3RELFFBQUksTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwRixRQUFJLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekQsUUFDSSxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0FBQ3JDLFlBQU0sSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztBQUN4QyxZQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2pFLFNBQUs7QUFBQyxhQUFLLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO0FBQ3RDLFlBQU0sSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUNuQyxZQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLFNBQUs7QUFDTCxRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEUsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2xFLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRSxRQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxRSxJQUNFLENBQUM7QUFDSCxJQUNFLFdBQVcsS0FBSyxDQUFDO0FBQ25CLElBQ1UsZUFBZTtBQUN6QixRQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7QUFDbEMsSUFBRSxDQUFDO0FBQ0g7a0NBNURDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsU0FBUyxrQkFDbkIsNEVBQXdCO0lBQ3hCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLGNBQ2hEOzs7Ozs7Ozs7Ozs4RUFDSTtBQUFDO0FBQWdDLFlBUjdCLFFBQVE7QUFBSSxZQURNLFNBQVM7QUFBSSxZQUFGLFVBQVU7QUFBRztBQUFHO0FBQTBCLG9CQWU3RSxTQUFTLFNBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQztBQUFPLG9CQUd4QyxLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVudGlsQ29tcG9uZW50RGVzdHJveWVkIH0gZnJvbSAnQGFseWxlL3VpJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIFZpZXdDaGlsZCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx5U2xpZGVyLCDQs3ZhbHVlVG9QZXJjZW50LCDQs2JldHdlZW4gfSBmcm9tICcuL3NsaWRlcic7XG5pbXBvcnQgeyBMeVRpY2sgfSBmcm9tICcuL3RpY2snO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdseS1tYXJrJyxcbiAgdGVtcGxhdGVVcmw6ICdtYXJrLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBMeU1hcmsgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHJlYWRvbmx5IGNsYXNzZXMgPSB0aGlzLl9zbGlkZXIuY2xhc3NlcztcblxuICBwcml2YXRlIF9tYXJrQWN0aXZlQ2xhc3M/OiBzdHJpbmcgfCBudWxsO1xuXG4gIEBWaWV3Q2hpbGQoTHlUaWNrLCB7IHN0YXRpYzogdHJ1ZX0pIF90aWNrOiBMeVRpY2s7XG5cblxuICBASW5wdXQoKSB2YWx1ZTogbnVtYmVyO1xuXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfc2xpZGVyOiBMeVNsaWRlcixcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmXG4gICkge1xuICAgIF9yZW5kZXJlci5hZGRDbGFzcyhfZWwubmF0aXZlRWxlbWVudCwgX3NsaWRlci5jbGFzc2VzLm1hcmspO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuaW5zZXJ0QmVmb3JlKHRoaXMuX3NsaWRlci5fZ2V0SG9zdEVsZW1lbnQoKSwgdGhpcy5fdGljay5fZ2V0SG9zdEVsZW1lbnQoKSwgdGhpcy5fc2xpZGVyLl90aWNrc1JlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB0aGlzLl9zbGlkZXIuX2NoYW5nZXMucGlwZSh1bnRpbENvbXBvbmVudERlc3Ryb3llZCh0aGlzKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuX3VwZGF0ZU1hcmsoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZU1hcmsoKSB7XG4gICAgY29uc3QgbWluID0gdGhpcy5fc2xpZGVyLl9taW5QZXJjZW50O1xuICAgIGNvbnN0IG1heCA9IHRoaXMuX3NsaWRlci5fbWF4UGVyY2VudDtcblxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHRoaXMuX3NsaWRlci5jbGFzc2VzLm1hcmtBY3RpdmU7XG4gICAgY29uc3QgcGVyY2VudCA9INCzdmFsdWVUb1BlcmNlbnQodGhpcy52YWx1ZSwgdGhpcy5fc2xpZGVyLm1pbiwgdGhpcy5fc2xpZGVyLm1heCk7XG4gICAgY29uc3QgcG9zID0gdGhpcy5fc2xpZGVyLl9jYWxjdWxhdGVQb3NpdGlvbihwZXJjZW50KTtcblxuICAgIGlmICjQs2JldHdlZW4ocGVyY2VudCwgbWluLCBtYXgpKSB7XG4gICAgICB0aGlzLl9tYXJrQWN0aXZlQ2xhc3MgPSBjbGFzc05hbWU7XG4gICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fbWFya0FjdGl2ZUNsYXNzKSB7XG4gICAgICB0aGlzLl9tYXJrQWN0aXZlQ2xhc3MgPSBudWxsO1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZWwubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZSh0aGlzLl9nZXRIb3N0RWxlbWVudCgpLCAnYm90dG9tJywgbnVsbCk7XG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUodGhpcy5fZ2V0SG9zdEVsZW1lbnQoKSwgJ2xlZnQnLCBudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZSh0aGlzLl9nZXRIb3N0RWxlbWVudCgpLCAncmlnaHQnLCBudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZSh0aGlzLl9nZXRIb3N0RWxlbWVudCgpLCBwb3Muc3R5bGUsIHBvcy52YWx1ZSk7XG5cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkgeyB9XG5cbiAgcHJpdmF0ZSBfZ2V0SG9zdEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==