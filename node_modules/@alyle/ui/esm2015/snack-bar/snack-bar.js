import { Directive, Input, TemplateRef, Output, EventEmitter } from '@angular/core';
import { LyTheme2, LyOverlay, XPosition, YPosition, st2c } from '@alyle/ui';
import { LySnackBarService } from './snack-bar.service';
import { LySnackBarRef } from './snack-bar-ref';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -2;
const DEFAULT_HORIZONTAL_POSITION = XPosition.after;
const DEFAULT_VERTICAL_POSITION = YPosition.below;
export const STYLES = (theme) => ({
    $priority: STYLE_PRIORITY,
    root: (className) => `${className}{border-radius:4px;display:flex;justify-content:space-between;align-items:center;margin:8px;padding:0 16px;min-height:48px;min-width:320px;max-width:320px;opacity:0;transition:opacity ${theme.animations.curves.standard} 350ms, transform ${theme.animations.curves.deceleration} 350ms;font-size:${theme.pxToRem(theme.typography.fontSize)};box-sizing:border-box;}${st2c(((theme.snackBar
        && theme.snackBar.root) || null), `${className}`)}@media ${theme.breakpoints['XSmall']}{${className}{width:calc(100% - 16px);min-width:calc(100% - 16px);}}`
});
export class LySnackBar {
    constructor(_templateRef, _theme, _overlay, _snackBarService) {
        this._templateRef = _templateRef;
        this._theme = _theme;
        this._overlay = _overlay;
        this._snackBarService = _snackBarService;
        this.classes = this._theme.renderStyleSheet(STYLES);
        this.afterDismissed = new EventEmitter();
    }
    ngOnDestroy() {
        this.dismiss();
    }
    /**
     * Open a LySnackBar template
     * @param snackBarData Data to be passed to the snack-bark.
     */
    open(snackBarData) {
        // close previous snackBar if exist
        const sbrPrev = this._snackBarService._currentSnackBar;
        if (sbrPrev) {
            sbrPrev.dismiss();
        }
        const duration = this.duration;
        const horizontalPosition = this.horizontalPosition || DEFAULT_HORIZONTAL_POSITION;
        const verticalPosition = this.verticalPosition || DEFAULT_VERTICAL_POSITION;
        const snackBar = this._overlay.create(this._templateRef, snackBarData, {
            styles: {
                // this remove previous style
                justifyContent: null
            },
            hasBackdrop: false,
            classes: [
                this.classes.root,
                this._theme.renderStyle(`SnackBar.hp:${horizontalPosition}.vp:${verticalPosition}`, (theme) => {
                    let marginLeft;
                    let left;
                    let marginRight;
                    let right;
                    let transform;
                    let top;
                    let bottom;
                    let hp;
                    if (verticalPosition === YPosition.above) {
                        transform = 'translateY(-180%)';
                        top = 0;
                    }
                    if (verticalPosition === YPosition.below) {
                        transform = 'translateY(180%)';
                        bottom = 0;
                    }
                    if (horizontalPosition === 'center') {
                        marginRight = marginLeft = 'auto';
                        left = right = 0;
                    }
                    else {
                        hp = theme.getDirection(horizontalPosition);
                    }
                    return (className) => `${className}{margin-left:${marginLeft};left:${left};margin-right:${marginRight};right:${right};transform:${transform};top:${top};bottom:${bottom};${hp}:0;}`;
                }, STYLE_PRIORITY)
            ]
        });
        this._theme.requestAnimationFrame(() => {
            const newClass = this._theme.renderStyle('SnackBar:open', () => ((className) => `${className}{opacity:1;transform:translateY(0);}`), STYLE_PRIORITY);
            snackBar.containerElement.classList.add(newClass);
        });
        window.getComputedStyle(snackBar.containerElement).getPropertyValue('opacity');
        const sbr = new LySnackBarRef(this._snackBarService, snackBar, this.afterDismissed, duration, this._theme);
        this._snackBarService._currentSnackBar = sbr;
        return sbr;
    }
    /** Dismiss snackBar */
    dismiss() {
        const sbr = this._snackBarService._currentSnackBar;
        if (sbr) {
            sbr.dismissWithAction();
        }
    }
}
LySnackBar.ɵfac = function LySnackBar_Factory(t) { return new (t || LySnackBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyOverlay), ɵngcc0.ɵɵdirectiveInject(LySnackBarService)); };
LySnackBar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LySnackBar, selectors: [["ng-template", "ly-snack-bar", ""]], inputs: { duration: "duration", horizontalPosition: "horizontalPosition", verticalPosition: "verticalPosition" }, outputs: { afterDismissed: "afterDismissed" }, exportAs: ["lySnackBar"] });
LySnackBar.ctorParameters = () => [
    { type: TemplateRef },
    { type: LyTheme2 },
    { type: LyOverlay },
    { type: LySnackBarService }
];
LySnackBar.propDecorators = {
    duration: [{ type: Input }],
    horizontalPosition: [{ type: Input }],
    verticalPosition: [{ type: Input }],
    afterDismissed: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LySnackBar, [{
        type: Directive,
        args: [{
                selector: 'ng-template[ly-snack-bar]',
                exportAs: 'lySnackBar'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc1.LyTheme2 }, { type: ɵngcc1.LyOverlay }, { type: LySnackBarService }]; }, { afterDismissed: [{
            type: Output
        }], duration: [{
            type: Input
        }], horizontalPosition: [{
            type: Input
        }], verticalPosition: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,