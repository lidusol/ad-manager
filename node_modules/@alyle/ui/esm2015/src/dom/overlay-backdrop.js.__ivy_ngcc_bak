import { Component, HostListener, ElementRef } from '@angular/core';
import { LyTheme2 } from '../theme/theme2.service';
import { LyOverlayConfig } from './overlay-config';
import { LY_COMMON_STYLES } from '../styles/core-styles';
import { StyleRenderer } from '../minimal/renderer-style';
import { st2c } from '../parse';
const STYLE_PRIORITY = -2;
export const STYLES_BACKDROP_ROOT = () => (className) => `${st2c((LY_COMMON_STYLES.fill), `${className}`)}${className}{width:100vw;height:100vh;pointer-events:all;user-select:none;}`;
export class LyOverlayBackdrop {
    constructor(_el, _theme, sRenderer, _config) {
        this._el = _el;
        this.sRenderer = sRenderer;
        this._config = _config;
        _el.nativeElement.classList.add(sRenderer.add(STYLES_BACKDROP_ROOT, STYLE_PRIORITY));
        // this applies custom class for backdrop,
        // if one is not defined, do nothing.
        const backdropClass = _config.backdropClass;
        if (backdropClass) {
            this._el.nativeElement.classList.add(backdropClass);
        }
    }
    onclick() {
        if (!this._config.disableClose) {
            this._config.fnDestroy();
        }
    }
}
LyOverlayBackdrop.decorators = [
    { type: Component, args: [{
                selector: 'ly-overlay-backdrop',
                template: ``,
                providers: [
                    StyleRenderer
                ]
            },] }
];
LyOverlayBackdrop.ctorParameters = () => [
    { type: ElementRef },
    { type: LyTheme2 },
    { type: StyleRenderer },
    { type: LyOverlayConfig }
];
LyOverlayBackdrop.propDecorators = {
    onclick: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1iYWNrZHJvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYi9zcmMvZG9tL292ZXJsYXktYmFja2Ryb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFDTCxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFekIsTUFBTSxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUIsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUMsR0FBRyxTQUFTLGlFQUFpRSxDQUFDO0FBUy9MLE1BQU0sT0FBTyxpQkFBaUI7SUFNNUIsWUFDVSxHQUE0QixFQUNwQyxNQUFnQixFQUNQLFNBQXdCLEVBQ3pCLE9BQXdCO1FBSHhCLFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBRTNCLGNBQVMsR0FBVCxTQUFTLENBQWU7UUFDekIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFFaEMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUVyRiwwQ0FBMEM7UUFDMUMscUNBQXFDO1FBQ3JDLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDNUMsSUFBSSxhQUFhLEVBQUU7WUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNyRDtJQUNILENBQUM7SUFuQnNCLE9BQU87UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBVSxFQUFFLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7WUFaRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osU0FBUyxFQUFFO29CQUNULGFBQWE7aUJBQ2Q7YUFDRjs7O1lBakJpQyxVQUFVO1lBQ25DLFFBQVE7WUFHUixhQUFhO1lBRmIsZUFBZTs7O3NCQWlCckIsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIgfSBmcm9tICcuLi90aGVtZS90aGVtZTIuc2VydmljZSc7XG5pbXBvcnQgeyBMeU92ZXJsYXlDb25maWcgfSBmcm9tICcuL292ZXJsYXktY29uZmlnJztcbmltcG9ydCB7IExZX0NPTU1PTl9TVFlMRVMgfSBmcm9tICcuLi9zdHlsZXMvY29yZS1zdHlsZXMnO1xuaW1wb3J0IHsgU3R5bGVSZW5kZXJlciB9IGZyb20gJy4uL21pbmltYWwvcmVuZGVyZXItc3R5bGUnO1xuaW1wb3J0IHtcbiAgc3QyYyB9IGZyb20gJy4uL3BhcnNlJztcblxuY29uc3QgU1RZTEVfUFJJT1JJVFkgPSAtMjtcbmV4cG9ydCBjb25zdCBTVFlMRVNfQkFDS0RST1BfUk9PVCA9ICgpID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gYCR7c3QyYygoTFlfQ09NTU9OX1NUWUxFUy5maWxsKSwgYCR7Y2xhc3NOYW1lfWApfSR7Y2xhc3NOYW1lfXt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwdmg7cG9pbnRlci1ldmVudHM6YWxsO3VzZXItc2VsZWN0Om5vbmU7fWA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2x5LW92ZXJsYXktYmFja2Ryb3AnLFxuICB0ZW1wbGF0ZTogYGAsXG4gIHByb3ZpZGVyczogW1xuICAgIFN0eWxlUmVuZGVyZXJcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMeU92ZXJsYXlCYWNrZHJvcCB7XG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgb25jbGljaygpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5kaXNhYmxlQ2xvc2UpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5mbkRlc3Ryb3khKCk7XG4gICAgfVxuICB9XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBfdGhlbWU6IEx5VGhlbWUyLFxuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcixcbiAgICBwcml2YXRlIF9jb25maWc6IEx5T3ZlcmxheUNvbmZpZ1xuICApIHtcbiAgICBfZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKHNSZW5kZXJlci5hZGQoU1RZTEVTX0JBQ0tEUk9QX1JPT1QsIFNUWUxFX1BSSU9SSVRZKSk7XG5cbiAgICAvLyB0aGlzIGFwcGxpZXMgY3VzdG9tIGNsYXNzIGZvciBiYWNrZHJvcCxcbiAgICAvLyBpZiBvbmUgaXMgbm90IGRlZmluZWQsIGRvIG5vdGhpbmcuXG4gICAgY29uc3QgYmFja2Ryb3BDbGFzcyA9IF9jb25maWcuYmFja2Ryb3BDbGFzcztcbiAgICBpZiAoYmFja2Ryb3BDbGFzcykge1xuICAgICAgdGhpcy5fZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGJhY2tkcm9wQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuIl19