import { TemplateRef } from '@angular/core';
import { Subscription, merge } from 'rxjs';
import { LyOverlayConfig } from './overlay-config';
import { LyOverlayBackdrop } from './overlay-backdrop';
import { createOverlayInjector } from './overlay-injector';
export class OverlayFactory {
    constructor(_componentFactoryResolver, _appRef, _templateRefOrComponent, _overlayContainer, _context, _injector, _scrollDispatcher, _viewportRuler, _config) {
        this._componentFactoryResolver = _componentFactoryResolver;
        this._appRef = _appRef;
        this._overlayContainer = _overlayContainer;
        this._injector = _injector;
        this._windowSRSub = Subscription.EMPTY;
        const config = Object.assign(Object.assign({}, new LyOverlayConfig()), _config);
        this._el = document.createElement('div');
        const __styles = {
            position: 'absolute',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            pointerEvents: 'all'
        };
        if (config) {
            Object.assign(__styles, config.styles);
        }
        const newInjector = this._newInjector = createOverlayInjector(config.injector || this._injector, Object.assign(Object.assign({ fnDestroy: this.destroy.bind(this) }, config), { styles: __styles }), this);
        this._updateStyles(__styles);
        if (config) {
            if (config.onResizeScroll) {
                this.onResizeScroll = config.onResizeScroll;
            }
            this._windowSRSub = merge(_scrollDispatcher.scrolled(0), _viewportRuler.change()).subscribe(() => {
                if (this.onResizeScroll) {
                    this.onResizeScroll();
                }
            });
            if (config.classes) {
                const classes = config.classes;
                classes.forEach((className) => this._el.classList.add(className));
            }
        }
        this.updateBackdrop(!!config.hasBackdrop);
        this._appendComponentToBody(_templateRefOrComponent, _context, newInjector);
        this._updateBackdropPosition();
    }
    get injector() {
        return this._newInjector;
    }
    get containerElement() {
        return this._el;
    }
    get componentRef() {
        return this._compRef;
    }
    updateBackdrop(hasBackdrop) {
        if (hasBackdrop) {
            if (this._compRefOverlayBackdrop) {
                return;
            }
            this._compRefOverlayBackdrop = this._generateComponent(LyOverlayBackdrop, this._newInjector);
            this._appRef.attachView(this._compRefOverlayBackdrop.hostView);
            this._backdropElement = this._compRefOverlayBackdrop.location.nativeElement;
            this._overlayContainer._add(this._backdropElement);
        }
        else if (this._compRefOverlayBackdrop) {
            this._appRef.detachView(this._compRefOverlayBackdrop.hostView);
            this._backdropElement = this._compRefOverlayBackdrop.location.nativeElement;
            this._overlayContainer._remove(this._backdropElement);
            this._compRefOverlayBackdrop = null;
        }
        this._updateBackdropPosition();
    }
    _updateStyles(__styles) {
        /** Apply styles */
        /** set styles */
        for (const key in __styles) {
            if (__styles.hasOwnProperty(key)) {
                const styleVal = __styles[key];
                if (styleVal != null) {
                    this._el.style[key] = typeof __styles[key] === 'number' ? `${styleVal}px` : styleVal;
                }
            }
        }
    }
    _appendComponentToBody(type, context, injector) {
        if (type instanceof TemplateRef) {
            // Create a component reference from the component
            const viewRef = this._viewRef = type.createEmbeddedView(context || {});
            this._appRef.attachView(viewRef);
            // Get DOM element from component
            viewRef.rootNodes.forEach(_ => this._el.appendChild(_));
            // Append DOM element to the body
            this._overlayContainer._add(this._el);
        }
        else if (typeof type === 'string') {
            this._el.innerText = type;
            this._overlayContainer._add(this._el);
        }
        else {
            this._compRef = this._generateComponent(type, injector);
            this._appRef.attachView(this._compRef.hostView);
            this._el.appendChild(this._compRef.location.nativeElement);
            this._overlayContainer._add(this._el);
        }
    }
    _updateBackdropPosition() {
        var _a, _b;
        const container = this._overlayContainer.containerElement;
        if (((_a = this._backdropElement) === null || _a === void 0 ? void 0 : _a.parentElement) === container
            && ((_b = this._el) === null || _b === void 0 ? void 0 : _b.parentElement) === container) {
            this._overlayContainer.containerElement.insertBefore(this._backdropElement, this._el);
        }
    }
    _generateComponent(type, injector) {
        const factory = this._componentFactoryResolver.resolveComponentFactory(type);
        return factory.create(injector);
    }
    /** Detaches a view from dirty checking again of ApplicationRef. */
    detach() {
        if (this._viewRef) {
            this._appRef.detachView(this._viewRef);
        }
        if (this._compRef) {
            this._appRef.detachView(this._compRef.hostView);
        }
    }
    /** Remove element of DOM */
    remove() {
        if (this._viewRef) {
            this._viewRef.destroy();
            this._overlayContainer._remove(this._el);
            this._el = undefined;
        }
        else if (this._compRef) {
            this._compRef.destroy();
            this._overlayContainer._remove(this._el);
            this._el = undefined;
            this._compRef = null;
        }
        else if (this._el) {
            // remove if template is string
            this._overlayContainer._remove(this._el);
            this._el = undefined;
        }
        this.updateBackdrop(false);
        this._windowSRSub.unsubscribe();
    }
    /** Detach & remove */
    destroy() {
        this.detach();
        this.remove();
    }
}
//# sourceMappingURL=data:application/json;base64,