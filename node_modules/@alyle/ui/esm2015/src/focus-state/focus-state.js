import { NgZone, Injectable } from '@angular/core';
import { supportsPassiveEventListeners } from '../platform/index';
import { Subject } from 'rxjs';
import { getNativeElement } from '../minimal/common';
import { Platform } from '@angular/cdk/platform';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/platform";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/platform';
export var FocusStatus;
(function (FocusStatus) {
    /**mouse and/or touch*/
    FocusStatus["DEFAULT"] = "default";
    /** keyboard and/or program*/
    FocusStatus["KEYBOARD"] = "keyboard";
})(FocusStatus || (FocusStatus = {}));
export class LyFocusState {
    constructor(_ngZone, _platform) {
        this._ngZone = _ngZone;
        this._platform = _platform;
        this._elementMap = new Map();
        this._count = 0;
    }
    listen(element, keyElement) {
        if (!this._platform.isBrowser) {
            // return null if it is not browser platform
            return null;
        }
        const nativeElement = getNativeElement(element);
        const key = keyElement && getNativeElement(keyElement) || nativeElement;
        if (this._elementMap.has(key)) {
            return this._elementMap.get(key).subject.asObservable();
        }
        const focusState = {
            unlisten: null,
            subject: new Subject()
        };
        this._incrementCount();
        const focusListener = (event) => this._on(event, focusState.subject);
        const blurListener = (event) => this._on(event, focusState.subject);
        focusState.unlisten = () => {
            nativeElement.removeEventListener('focus', focusListener, true);
            nativeElement.removeEventListener('blur', blurListener, true);
        };
        this._elementMap.set(key, focusState);
        this._ngZone.runOutsideAngular(() => {
            nativeElement.addEventListener('focus', focusListener, true);
            nativeElement.addEventListener('blur', blurListener, true);
        });
        return focusState.subject.asObservable();
    }
    focusElement(element, origin, options) {
        const nativeElement = getNativeElement(element);
        this._currentEvent = origin;
        if (typeof nativeElement.focus === 'function') {
            nativeElement.focus(options);
        }
    }
    unlisten(element) {
        if (!this._platform.isBrowser) {
            return;
        }
        const el = getNativeElement(element);
        const focusStateInfo = this._elementMap.get(el);
        if (focusStateInfo) {
            focusStateInfo.unlisten();
            this._elementMap.delete(el);
            this._decrementCount();
        }
    }
    _on(event, subject) {
        let by = null;
        if (event.type === 'focus') {
            by = this._currentEvent || 'keyboard';
        }
        this._ngZone.run(() => subject.next(by));
    }
    _addGlobalListeners() {
        if (!this._platform.isBrowser) {
            return;
        }
        const eventListenerOptions = supportsPassiveEventListeners()
            ? {
                passive: true,
                capture: true
            } : false;
        const documentKeydownListener = () => this._ngZone.runOutsideAngular(() => this._currentEvent = 'keyboard');
        const documentMousedownListener = () => this._ngZone.runOutsideAngular(() => this._currentEvent = 'mouse');
        this._ngZone.runOutsideAngular(() => {
            document.addEventListener('keydown', documentKeydownListener, eventListenerOptions);
            document.addEventListener('mousedown', documentMousedownListener, eventListenerOptions);
        });
        this._removeGlobalListeners = () => {
            document.removeEventListener('keydown', documentKeydownListener, eventListenerOptions);
            document.removeEventListener('mousedown', documentMousedownListener, eventListenerOptions);
        };
    }
    _incrementCount() {
        if (++this._count === 1) {
            this._addGlobalListeners();
        }
    }
    _decrementCount() {
        if (!--this._count) {
            this._removeGlobalListeners();
        }
    }
    ngOnDestroy() {
        this._elementMap.forEach((_, element) => this.unlisten(element));
    }
}
LyFocusState.ɵfac = function LyFocusState_Factory(t) { return new (t || LyFocusState)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };
LyFocusState.ɵprov = i0.ɵɵdefineInjectable({ factory: function LyFocusState_Factory() { return new LyFocusState(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform)); }, token: LyFocusState, providedIn: "root" });
LyFocusState.ctorParameters = () => [
    { type: NgZone },
    { type: Platform }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyFocusState, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,