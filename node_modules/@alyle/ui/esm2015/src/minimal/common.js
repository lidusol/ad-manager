import { Directive, Input, ViewContainerRef, NgModule, ElementRef } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/platform';
export class NgTranscludeDirective {
    constructor(vcr, _platform) {
        this.vcr = vcr;
        this._platform = _platform;
    }
    set ngTransclude(templateRef) {
        if (templateRef && !this._ngTransclude) {
            if (this._platform.isBrowser && this._timeoutId != null) {
                window.clearTimeout(this._timeoutId);
                this._timeoutId = null;
                this.vcr.clear();
            }
            this._ngTransclude = templateRef;
            this.vcr.createEmbeddedView(templateRef);
        }
        else if (this._ngTransclude && !templateRef) {
            this._ngTransclude = null;
            this.clear();
        }
    }
    get getNgTransclude() {
        return this._ngTransclude;
    }
    clear() {
        if (this._platform.isBrowser && this.timeout) {
            this._timeoutId = window.setTimeout(() => {
                this.vcr.clear();
                this._timeoutId = null;
            }, this.timeout);
        }
        else {
            this.vcr.clear();
        }
    }
    ngOnDestroy() {
        if (this._platform.isBrowser) {
            window.clearTimeout(this._timeoutId);
        }
        this.vcr.clear();
    }
}
NgTranscludeDirective.ɵfac = function NgTranscludeDirective_Factory(t) { return new (t || NgTranscludeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };
NgTranscludeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgTranscludeDirective, selectors: [["", "ngTransclude", ""]], inputs: { ngTransclude: "ngTransclude", timeout: "timeout" }, exportAs: ["ngTransclude"] });
NgTranscludeDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Platform }
];
NgTranscludeDirective.propDecorators = {
    timeout: [{ type: Input }],
    ngTransclude: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTranscludeDirective, [{
        type: Directive,
        args: [{
                selector: '[ngTransclude]',
                exportAs: 'ngTransclude'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.Platform }]; }, { ngTransclude: [{
            type: Input
        }], timeout: [{
            type: Input
        }] }); })();
export class NgTranscludeModule {
}
NgTranscludeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgTranscludeModule });
NgTranscludeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgTranscludeModule_Factory(t) { return new (t || NgTranscludeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgTranscludeModule, { declarations: [NgTranscludeDirective], exports: [NgTranscludeDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgTranscludeModule, [{
        type: NgModule,
        args: [{
                exports: [NgTranscludeDirective],
                declarations: [NgTranscludeDirective]
            }]
    }], null, null); })();
/**
 * @ignore
 */
export function getNativeElement(element) {
    return element instanceof ElementRef ? element.nativeElement : element;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvc3JjL21pbmltYWwvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQUUsS0FBSyxFQUFlLGdCQUFnQixFQUFhLFFBQVEsRUFBRSxVQUFVLEVBQ2pGLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBVWpELE1BQU0sT0FBTyxxQkFBcUI7QUFBRyxJQStCbkMsWUFDVyxHQUFxQixFQUN0QixTQUFtQjtBQUM1QixRQUZVLFFBQUcsR0FBSCxHQUFHLENBQWtCO0FBQUMsUUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBVTtBQUMvQixJQUFNLENBQUM7QUFDUCxJQXhCRSxJQUNJLFlBQVksQ0FBQyxXQUE2QjtBQUNoRCxRQUFJLElBQUksV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUM1QyxZQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7QUFDL0QsZ0JBQVEsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0MsZ0JBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFLLENBQUM7QUFDaEMsZ0JBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN6QixhQUFPO0FBQ1AsWUFBTSxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQztBQUN2QyxZQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDL0MsU0FBSztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQ25ELFlBQU0sSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDaEMsWUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbkIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxlQUFlO0FBQ3JCLFFBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQzlCLElBQUUsQ0FBQztBQUNILElBTUUsS0FBSztBQUNQLFFBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2xELFlBQU0sSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUMvQyxnQkFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3pCLGdCQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSyxDQUFDO0FBQ2hDLFlBQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN2QixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN2QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQ2IsUUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFO0FBQ2xDLFlBQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDM0MsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNyQixJQUFFLENBQUM7QUFDSDtpREF6REMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxnQkFBZ0Isa0JBQzFCLFFBQVEsRUFBRSxjQUFjLGNBQ3pCO3dOQUNJO0FBQUM7QUFBK0MsWUFacEIsZ0JBQWdCO0FBQUksWUFFNUMsUUFBUTtBQUFHO0FBQUc7QUFFVixzQkFlVixLQUFLO0FBQUssMkJBSVYsS0FBSztBQUNQOzs7Ozs7Ozs7OztvQkFBRTtBQThDSCxNQUFNLE9BQU8sa0JBQWtCO0FBQy9COzhDQUxDLFFBQVEsU0FBQztBQUNSLE9BQU8sRUFBRSxDQUFDLHFCQUFxQixDQUFDLGtCQUNoQyxZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxjQUN0Qzs7Ozs7Ozs7MEJBQ0k7QUFJTDtBQUNBO0FBQ0EsR0FBRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxPQUE4QztBQUFJLElBQ2pGLE9BQU8sT0FBTyxZQUFZLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3pFLENBQUM7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkRlc3Ryb3ksIE5nTW9kdWxlLCBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEtleUF0dHJpYnV0ZSB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25nVHJhbnNjbHVkZV0nLFxuICBleHBvcnRBczogJ25nVHJhbnNjbHVkZSdcbn0pXG5leHBvcnQgY2xhc3MgTmdUcmFuc2NsdWRlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBwcml2YXRlIF9uZ1RyYW5zY2x1ZGU6IFRlbXBsYXRlUmVmPGFueT4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaW1lIGluIG1zIGl0IHRha2VzIGJlZm9yZSBpdCBpcyBkZXN0cm95ZWRcbiAgICovXG4gIEBJbnB1dCgpIHRpbWVvdXQ6IG51bWJlcjtcblxuICBfdGltZW91dElkOiBudW1iZXI7XG5cbiAgQElucHV0KClcbiAgc2V0IG5nVHJhbnNjbHVkZSh0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIGlmICh0ZW1wbGF0ZVJlZiAmJiAhdGhpcy5fbmdUcmFuc2NsdWRlKSB7XG4gICAgICBpZiAodGhpcy5fcGxhdGZvcm0uaXNCcm93c2VyICYmIHRoaXMuX3RpbWVvdXRJZCAhPSBudWxsKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fdGltZW91dElkKTtcbiAgICAgICAgdGhpcy5fdGltZW91dElkID0gbnVsbCE7XG4gICAgICAgIHRoaXMudmNyLmNsZWFyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9uZ1RyYW5zY2x1ZGUgPSB0ZW1wbGF0ZVJlZjtcbiAgICAgIHRoaXMudmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZik7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9uZ1RyYW5zY2x1ZGUgJiYgIXRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLl9uZ1RyYW5zY2x1ZGUgPSBudWxsO1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBnZXROZ1RyYW5zY2x1ZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25nVHJhbnNjbHVkZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIF9wbGF0Zm9ybTogUGxhdGZvcm1cbiAgKSB7IH1cblxuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5fcGxhdGZvcm0uaXNCcm93c2VyICYmIHRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy5fdGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnZjci5jbGVhcigpO1xuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsITtcbiAgICAgIH0sIHRoaXMudGltZW91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmNyLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX3BsYXRmb3JtLmlzQnJvd3Nlcikge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SWQpO1xuICAgIH1cbiAgICB0aGlzLnZjci5jbGVhcigpO1xuICB9XG59XG5ATmdNb2R1bGUoe1xuICBleHBvcnRzOiBbTmdUcmFuc2NsdWRlRGlyZWN0aXZlXSxcbiAgZGVjbGFyYXRpb25zOiBbTmdUcmFuc2NsdWRlRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ1RyYW5zY2x1ZGVNb2R1bGUge1xuXG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmF0aXZlRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCB8IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KTogSFRNTEVsZW1lbnQge1xuICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnRSZWYgPyBlbGVtZW50Lm5hdGl2ZUVsZW1lbnQgOiBlbGVtZW50O1xufVxuIl19