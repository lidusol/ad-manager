import { Injectable, ElementRef, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class LyHostClass {
    constructor(_el, _renderer) {
        this._renderer = _renderer;
        this._set = new Set();
        this._nEl = _el.nativeElement;
        console.log(`LyHostClass: Deprecated use instead StyleRenderer`);
    }
    add(className) {
        if (!this._set.has(className)) {
            this._set.add(className);
            this._renderer.addClass(this._nEl, className);
        }
    }
    remove(className) {
        if (className && this._set.has(className)) {
            this._set.delete(className);
            this._renderer.removeClass(this._nEl, className);
        }
    }
    toggle(className, enabled) {
        if (enabled) {
            this.add(className);
        }
        else {
            this.remove(className);
        }
    }
    update(newClassName, oldClassName) {
        this.remove(oldClassName);
        this.add(newClassName);
        return newClassName;
    }
}
LyHostClass.ɵfac = function LyHostClass_Factory(t) { return new (t || LyHostClass)(ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
LyHostClass.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LyHostClass, factory: LyHostClass.ɵfac });
LyHostClass.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyHostClass, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC1jbGFzcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGliL3NyYy9taW5pbWFsL2hvc3QtY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUlsRSxNQUFNLE9BQU8sV0FBVztBQUN4QixJQUdFLFlBQ0UsR0FBZSxFQUNQLFNBQW9CO0FBQzdCLFFBRFMsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUNoQyxRQU5tQixTQUFJLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztBQUM1QyxRQU1JLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztBQUNsQyxRQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUNyRSxJQUFFLENBQUM7QUFDSCxJQUNFLEdBQUcsQ0FBQyxTQUFpQjtBQUN2QixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUNuQyxZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNwRCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsU0FBeUI7QUFDbEMsUUFBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUMvQyxZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN2RCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsU0FBaUIsRUFBRSxPQUFnQjtBQUM1QyxRQUFJLElBQUksT0FBTyxFQUFFO0FBQ2pCLFlBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxQixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsWUFBb0IsRUFBRSxZQUF1QztBQUN0RSxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUIsUUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNCLFFBQUksT0FBTyxZQUFZLENBQUM7QUFDeEIsSUFBRSxDQUFDO0FBQ0g7dUNBeENDLFVBQVU7aUdBQ1Q7QUFBQztBQUNVLFlBTFEsVUFBVTtBQUFJLFlBQUYsU0FBUztBQUFHOzs7dUdBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMeUhvc3RDbGFzcyB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3NldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBwcml2YXRlIF9uRWw6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIF9lbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyXG4gICkge1xuICAgIHRoaXMuX25FbCA9IF9lbC5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnNvbGUubG9nKGBMeUhvc3RDbGFzczogRGVwcmVjYXRlZCB1c2UgaW5zdGVhZCBTdHlsZVJlbmRlcmVyYCk7XG4gIH1cblxuICBhZGQoY2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMuX3NldC5oYXMoY2xhc3NOYW1lKSkge1xuICAgICAgdGhpcy5fc2V0LmFkZChjbGFzc05hbWUpO1xuICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fbkVsLCBjbGFzc05hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZShjbGFzc05hbWU/OiBzdHJpbmcgfCBudWxsKSB7XG4gICAgaWYgKGNsYXNzTmFtZSAmJiB0aGlzLl9zZXQuaGFzKGNsYXNzTmFtZSkpIHtcbiAgICAgIHRoaXMuX3NldC5kZWxldGUoY2xhc3NOYW1lKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuX25FbCwgY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGUoY2xhc3NOYW1lOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgdGhpcy5hZGQoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUobmV3Q2xhc3NOYW1lOiBzdHJpbmcsIG9sZENsYXNzTmFtZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMucmVtb3ZlKG9sZENsYXNzTmFtZSk7XG4gICAgdGhpcy5hZGQobmV3Q2xhc3NOYW1lKTtcbiAgICByZXR1cm4gbmV3Q2xhc3NOYW1lO1xuICB9XG59XG4iXX0=