import { Injectable, ElementRef, Renderer2, Optional } from '@angular/core';
import { LyTheme2 } from '../theme/theme2.service';
import { TypeStyle } from '../theme/style';
import { parseMediaQueriesFromString, parseMediaQueryFromString } from '../style-utils';
import * as ɵngcc0 from '@angular/core';
export class StyleRenderer {
    constructor(_theme, _el, _renderer) {
        this._theme = _theme;
        this._renderer = _renderer;
        this._set = new Set();
        if (_el) {
            this._nEl = _el.nativeElement;
            this._set = new Set();
        }
    }
    /**
     * Build multiple styles and render them in the DOM.
     * @param styles Styles
     * @param applyRootClass If `applyToRoot` is `true` and the root property is defined,
     * it will automatically be added to the component.
     *
     * e.g.
     *
     * ```ts
     * const STYLES = () => ({
     *   root: lyl `{...}`, // this class will be added to the root component
     *   item: lyl `{...}`
     * })
     * ```
     *
     * Also accepts the name of a class.
     *
     * e.g.
     *
     * ```ts
     * renderSheet(STYLES, 'item')
     * ```
     */
    renderSheet(styles, applyRootClass) {
        const classes = this._theme.renderStyleSheet(styles);
        if (applyRootClass === true && classes.root) {
            this.addClass(classes.root);
            return classes;
        }
        if (applyRootClass) {
            const customClass = classes[applyRootClass];
            if (customClass) {
                this.addClass(customClass);
            }
        }
        return classes;
    }
    /**
     * Render style and apply class name to host Component or Directive,
     * require provide `StyleRenderer` in your Component.
     * e.g.
     * @Component({
     *   ...
     *   providers: [ StyleRenderer ]
     * })
     */
    add(id, style, priority, oldClass) {
        const args = arguments;
        /** Class name or keyframe name */
        let className;
        let len = args.length;
        // clean
        if (len === 4 && args[3] == null) {
            len -= 1;
        }
        if (len === 3 && args[2] == null) {
            len -= 1;
        }
        if (len === 1) {
            className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
        }
        else if (len === 2) {
            if (typeof id === 'string') {
                className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
            }
            else if (typeof style === 'number') {
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
            }
            else {
                className = this._theme._createStyleContent2(id, null, null, TypeStyle.LylStyle);
                oldClass = style;
            }
        }
        else if (len === 3) {
            if (typeof id === 'string') {
                if (typeof priority === 'number') {
                    // (id, style, priority)
                    className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
                }
                else {
                    // (id, style, oldClass)
                    className = this._theme._createStyleContent2(style, id, null, TypeStyle.LylStyle);
                    oldClass = priority;
                }
            }
            else {
                // (style, priority, oldClass)
                className = this._theme._createStyleContent2(id, null, style, TypeStyle.LylStyle);
                oldClass = priority;
            }
        }
        else if (len === 4) {
            className = this._theme._createStyleContent2(style, id, priority, TypeStyle.LylStyle);
        }
        if (this._nEl) {
            return this.updateClass(className, oldClass);
        }
        throw new Error(`StyleRenderer is required on the Component!\n`
            + `Add provider for StyleRenderer in Component or Directive:\n\n`
            + `e.g:\n\n`
            + `@Component({\n`
            + `  providers: [ StyleRenderer ]\n`
            + `})\n`);
    }
    /**
     * Only render style and return class name.
     */
    render(styleOrId, priorityOrStyle, priority) {
        if (typeof styleOrId === 'string') {
            return this._theme._createStyleContent2(priorityOrStyle, styleOrId, priority, TypeStyle.LylStyle);
        }
        return this._theme._createStyleContent2(styleOrId, null, priority, TypeStyle.LylStyle);
    }
    addClass(className) {
        if (!this._set.has(className)) {
            this._set.add(className);
            this._renderer.addClass(this._nEl, className);
        }
    }
    removeClass(className) {
        if (className && this._set.has(className)) {
            this._set.delete(className);
            this._renderer.removeClass(this._nEl, className);
        }
    }
    removeClasses(rawClassVal) {
        if (rawClassVal) {
            rawClassVal.forEach(klass => this.removeClass(klass));
        }
    }
    toggleClass(className, enabled) {
        if (enabled) {
            this.addClass(className);
        }
        else {
            this.removeClass(className);
        }
    }
    updateClass(newClassName, oldClassName) {
        this.removeClass(oldClassName);
        this.addClass(newClassName);
        return newClassName;
    }
}
StyleRenderer.ɵfac = function StyleRenderer_Factory(t) { return new (t || StyleRenderer)(ɵngcc0.ɵɵinject(LyTheme2), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef, 8), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2, 8)); };
StyleRenderer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: StyleRenderer, factory: StyleRenderer.ɵfac });
StyleRenderer.ctorParameters = () => [
    { type: LyTheme2 },
    { type: ElementRef, decorators: [{ type: Optional }] },
    { type: Renderer2, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StyleRenderer, [{
        type: Injectable
    }], function () { return [{ type: LyTheme2 }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.Renderer2, decorators: [{
                type: Optional
            }] }]; }, null); })();
/**
 * Parameter decorator to be used for create Dynamic style together with `@Input`
 * @param style style
 * @param priority priority of style, default: 0
 * @decorator
 */
export function Style(style, priority) {
    return function (target, propertyKey, descriptor) {
        target.constructor[propertyKey] = style;
        // const _propertyKeyClass = `_${propertyKey}Class`;
        const _propertyKey = `_${propertyKey}`;
        if (descriptor) {
            const set = descriptor.set;
            descriptor.set = function (val) {
                createStyle(this, propertyKey, val, style, priority);
                set.call(this, val);
            };
            if (!descriptor.get) {
                descriptor.get = function () {
                    return this[_propertyKey];
                };
            }
        }
        else {
            Object.defineProperty(target, propertyKey, {
                configurable: true,
                enumerable: true,
                set(val) {
                    createStyle(this, propertyKey, val, style, priority);
                },
                get() {
                    return this[_propertyKey];
                }
            });
        }
    };
}
/**
 * Create a responsive style for component with a key
 * @param c The component
 * @param propertyKeyConfig Style key
 * @param value value
 * @param style style template
 * @param priority priority of style
 */
export function createStyle(c, propertyKeyConfig, value, style, priority) {
    const propertyKey = typeof propertyKeyConfig === 'string' ? propertyKeyConfig : propertyKeyConfig.key;
    const _propertyKeyClass = `_${propertyKey}Class`;
    const _propertyKey = `_${propertyKey}`;
    const oldValue = c[_propertyKey];
    c[_propertyKey] = value;
    if (value === null || value === undefined || value === false) {
        // Remove classes
        const classesForRemove = c[_propertyKeyClass];
        if (classesForRemove && classesForRemove.length) {
            classesForRemove.forEach((className) => c.sRenderer.removeClass(className));
        }
    }
    else if (typeof value === 'string') {
        if (oldValue !== value) {
            c.sRenderer.removeClasses(c[_propertyKeyClass]);
            const values = parseMediaQueriesFromString(value);
            for (let index = 0; index < values.length; index++) {
                const valAndMediaKey = values[index];
                parseMediaQueryFromString(valAndMediaKey).forEach((_) => {
                    _renderStyle(c, propertyKeyConfig, _[0], _[1], style, priority);
                });
            }
        }
    }
    else if (typeof value === 'number' || value === true) {
        if (oldValue !== value) {
            c.sRenderer.removeClasses(c[_propertyKeyClass]);
            _renderStyle(c, propertyKeyConfig, value, null, style, priority);
        }
    }
    else if (oldValue !== `${value}`) {
        c.sRenderer.removeClasses(c[_propertyKeyClass]);
        // Is array
        for (let index = 0; index < value.length; index++) {
            const val = value[index];
            if (typeof val === 'number' || val === null || val === undefined) {
                _renderStyle(c, propertyKeyConfig, val, null, style, priority);
            }
            else if (typeof val === 'string') {
                parseMediaQueryFromString(val).forEach((_) => {
                    _renderStyle(c, propertyKeyConfig, _[0], _[1], style, priority);
                });
            }
        }
    }
}
export function _renderStyle(c, propertyKeyConfig, val, media, style, priority) {
    const propertyKey = typeof propertyKeyConfig === 'string' ? propertyKeyConfig : propertyKeyConfig.key;
    const _propertyKeyClass = `_${propertyKey}Class`;
    const styleTemplate = style(val, media, c);
    if (styleTemplate == null) {
        // Remove classes
        const classesForRemove = c[_propertyKeyClass];
        if (classesForRemove && classesForRemove.length) {
            classesForRemove.forEach((className) => c.sRenderer.removeClass(className));
            c[_propertyKeyClass] = [];
        }
    }
    else {
        if (c[_propertyKeyClass] === undefined) {
            c[_propertyKeyClass] = [];
        }
        c[_propertyKeyClass].push(c.sRenderer.add(`${typeof propertyKeyConfig === 'string' ? getComponentName(c) : propertyKeyConfig.и}--${propertyKey}-${media ? val + '_' + media : val}`, styleTemplate, getComponentPriority(c, priority), c[_propertyKeyClass]));
    }
}
function getComponentName(comp) {
    return comp.constructor.и || comp.constructor.name || 'unnamed';
}
function getComponentPriority(comp, priority) {
    var _a, _b;
    return (_b = (_a = priority !== null && priority !== void 0 ? priority : comp.$priority) !== null && _a !== void 0 ? _a : comp.constructor.$priority) !== null && _b !== void 0 ? _b : 0;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,