import { XPosition, YPosition } from './position';
export class LyOverlayPosition {
    constructor(_theme, _viewportRuler, _trigger, _overlay) {
        this._theme = _theme;
        this._viewportRuler = _viewportRuler;
        this._trigger = _trigger;
        this._overlay = _overlay;
        this._xAxis = XPosition.after;
        this._yAxis = YPosition.below;
        this._flip = false;
        this._viewportOffset = 16;
        this._viewportHeight = 0;
        this._viewportWidth = 0;
    }
    get x() {
        return this._x;
    }
    get y() {
        return this._y;
    }
    get xo() {
        return this._xo;
    }
    get yo() {
        return this._yo;
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    build() {
        this._updateRects();
        this._setDefaultAnchor();
        this._updateDir();
        this._callTransformIfExists();
        this._calculateResponsive();
        this._calculateOrigin();
        this._round();
        return this;
    }
    _updateRects() {
        this._triggerRect = getMutableClientRect(this._trigger);
        this._overlayRect = getMutableClientRect(this._overlay);
        const { width, height } = this._viewportRuler.getViewportSize();
        this._viewportWidth = width;
        this._viewportHeight = height;
    }
    _setDefaultAnchor() {
        if (!this._xAnchor) {
            this._xAnchor = this._xAxis === XPosition.after ? XPosition.before : XPosition.after;
        }
        if (!this._yAnchor) {
            this._yAnchor = this._yAxis;
        }
    }
    _callTransformIfExists() {
        if (this._transform) {
            this._transform(this._triggerRect, this._overlayRect);
        }
    }
    _updateDir() {
        // If it is not number
        if (typeof this._xAnchor !== 'number') {
            this._anchorDir = this._theme.variables.getDirection(this._xAnchor);
        }
        this._axisDir = this._theme.variables.getDirection(this._xAxis);
    }
    _calculateResponsive() {
        this._calculate();
        if (this._flip && typeof this._xAnchor === 'string' && typeof this._yAnchor === 'string') {
            if (this._isOverflowX() && (this._overlayRect.width < (this._xa - this._viewportOffset))) {
                this.setXAxis(flipPosition(this._xAxis))
                    .setXAnchor(flipPosition(this._xAnchor));
                this._updateDir();
                this._calculate();
            }
            if (this._isOverflowY() && (this._overlayRect.height < (this._ya - this._viewportOffset))) {
                this.setYAxis(flipPosition(this._yAxis))
                    .setYAnchor(flipPosition(this._yAnchor));
                this._calculate();
            }
        }
        if (this._isOverflowX()) {
            if (this._overlayRect.width > this._viewportWidth - (this._viewportOffset * 2)) {
                this._x = this._viewportOffset;
                this._width = this._viewportWidth - (this._viewportOffset * 2);
            }
            else if (this._isOverflowLeft()) {
                this._x = this._viewportOffset;
            }
            else if (this._isOverflowRight()) {
                this._x = this._viewportWidth - this._overlayRect.width - this._viewportOffset;
            }
        }
        if (this._isOverflowY()) {
            if (this._overlayRect.height > this._viewportHeight - (this._viewportOffset * 2)) {
                this._y = this._viewportOffset;
                this._height = this._viewportHeight - (this._viewportOffset * 2);
            }
            else if (this._isOverflowTop()) {
                this._y = this._viewportOffset;
            }
            else if (this._isOverflowBottom()) {
                this._y = this._viewportHeight - this._overlayRect.height - this._viewportOffset;
            }
        }
    }
    /**
     * Return true if the menu overflows vertically
     */
    _isOverflowX() {
        return this._isOverflowLeft() // Left
            || this._isOverflowRight(); // Right
    }
    _isOverflowLeft() {
        return this.x < this._viewportOffset;
    }
    _isOverflowRight() {
        return (this.x + this._overlayRect.width) > (this._viewportWidth - this._viewportOffset);
    }
    /** Return true the menu overflows horizontally */
    _isOverflowY() {
        return this._isOverflowTop() // Top
            || this._isOverflowBottom(); // Bottom
    }
    _isOverflowTop() {
        return this.y < this._viewportOffset;
    }
    _isOverflowBottom() {
        return (this.y + this._overlayRect.height) > (this._viewportHeight - this._viewportOffset);
    }
    _calculate() {
        this._calculateAnchorPosition();
        this._calculateAxis();
    }
    _calculateAnchorPosition() {
        if (this._anchorDir === 'left' || this._anchorDir === 'right') {
            this._xa = this._triggerRect[this._anchorDir];
        }
        if (this._yAnchor === YPosition.above) {
            this._ya = this._triggerRect.top;
        }
        else {
            this._ya = this._triggerRect.bottom;
        }
    }
    _calculateAxis() {
        if (this._axisDir === 'left') {
            this._x = this._xa - this._overlayRect.width;
        }
        else {
            this._x = this._xa;
        }
        if (this._yAxis === YPosition.above) {
            this._y = this._ya - this._overlayRect.height;
        }
        else {
            this._y = this._ya;
        }
    }
    /** Calculate origin for overlay */
    _calculateOrigin() {
        const xAnchorCenter = this._xa;
        const yAnchorCenter = this._ya;
        const xOverlayCenter = this.x + (this._overlayRect.width / 2);
        const yOverlayCenter = this.y + (this._overlayRect.height / 2);
        const xo = (xAnchorCenter - xOverlayCenter) + this._overlayRect.width / 2;
        const yo = (yAnchorCenter - yOverlayCenter) + this._overlayRect.height / 2;
        this._xo = xo;
        this._yo = yo;
    }
    _round() {
        this._x = Math.round(this.x);
        this._y = Math.round(this.y);
    }
    // setTrigger(val: Element) {
    //   this._trigger = val;
    //   return this;
    // }
    // setOverlay(val: Element) {
    //   this._overlay = val;
    //   return this;
    // }
    setXAnchor(val) {
        this._xAnchor = val;
        return this;
    }
    setYAnchor(val) {
        this._yAnchor = val;
        return this;
    }
    setXAxis(val) {
        this._xAxis = val !== null && val !== void 0 ? val : XPosition.after;
        return this;
    }
    setYAxis(val) {
        this._yAxis = val !== null && val !== void 0 ? val : YPosition.below;
        return this;
    }
    setFlip(flip = true) {
        this._flip = flip;
        return this;
    }
    /**
     * Offset from the edge of the viewport to the center.
     * It is the minimum space that must be between the window and the overlay.
     */
    setViewportOffset(val) {
        this._viewportOffset = val;
        return this;
    }
    setTransform(transform) {
        this._transform = transform;
    }
}
/** Gets a mutable version of an element's bounding `ClientRect`. */
function getMutableClientRect(element) {
    const clientRect = element.getBoundingClientRect();
    // We need to clone the `clientRect` here, because all the values on it are readonly
    // and we need to be able to update them. Also we can't use a spread here, because
    // the values on a `ClientRect` aren't own properties. See:
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes
    return {
        top: clientRect.top,
        right: clientRect.right,
        bottom: clientRect.bottom,
        left: clientRect.left,
        width: clientRect.width,
        height: clientRect.height
    };
}
function flipPosition(position) {
    switch (position) {
        case XPosition.after:
            return XPosition.before;
        case XPosition.before:
            return XPosition.after;
        case XPosition.left:
            return XPosition.right;
        case XPosition.right:
            return XPosition.left;
        case YPosition.above:
            return YPosition.below;
        case YPosition.below:
            return YPosition.above;
    }
}
//# sourceMappingURL=data:application/json;base64,