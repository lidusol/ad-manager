import { DirPosition } from '../style-utils';
export var YPosition;
(function (YPosition) {
    YPosition["above"] = "above";
    YPosition["below"] = "below";
})(YPosition || (YPosition = {}));
export var XPosition;
(function (XPosition) {
    XPosition["before"] = "before";
    XPosition["after"] = "after";
    XPosition["left"] = "left";
    XPosition["right"] = "right";
})(XPosition || (XPosition = {}));
const INITIAL_V = 'initial';
/**
 * @deprecated Use `OverlayPosition` instead.
 */
export class Positioning {
    constructor(placement, xPosition, yPosition, origin, overlayElement, _themeVariables, _offset = 0, _flip = true) {
        this.placement = placement;
        this.xPosition = xPosition;
        this.yPosition = yPosition;
        this.origin = origin;
        this.overlayElement = overlayElement;
        this._themeVariables = _themeVariables;
        this._offset = _offset;
        this._offsetCheck = 16;
        this._originRect = this.origin.getBoundingClientRect();
        this._overlayElementRect = this.overlayElement.getBoundingClientRect();
        this.width = INITIAL_V;
        this.height = INITIAL_V;
        const offsetCheckx2 = this._offsetCheck * 2;
        this.createPosition();
        if (_flip) {
            for (let index = 0; index < 2; index++) {
                if (this.checkAll(false, true)) {
                    this.createPosition();
                }
            }
        }
        // when there is not enough space
        if (this.checkAll(true, false)) {
            let requireUpdateOrigin = false;
            const _max_width = this._overlayElementRect.width + offsetCheckx2 > window.innerWidth;
            const _max_height = this._overlayElementRect.height + offsetCheckx2 > window.innerHeight;
            if (_max_height) {
                this.y = this._offsetCheck;
                this.height = `${window.innerHeight - offsetCheckx2}px`;
                requireUpdateOrigin = true;
            }
            else if (this.checkBottom(false, false)) {
                this.y += this.checkBottom(true, false);
                requireUpdateOrigin = true;
            }
            else if (this.checkTop(false, false)) {
                this.y -= this.checkTop(true, false);
                requireUpdateOrigin = true;
            }
            if (_max_width) {
                this.x = this._offsetCheck;
                this.width = `${window.innerWidth - offsetCheckx2}px`;
                requireUpdateOrigin = true;
            }
            else if (this.checkRight(false, false)) {
                this.x += this.checkRight(true, false);
                requireUpdateOrigin = true;
            }
            else if (this.checkLeft(false, false)) {
                this.x -= this.checkLeft(true, false);
                requireUpdateOrigin = true;
            }
            if (requireUpdateOrigin) {
                this.updateOrigin();
            }
        }
        if (this._offset) {
            this.updateOrigin();
        }
        // round result
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.ax = Math.round(this.ax);
        this.ay = Math.round(this.ay);
    }
    get offsetX() {
        return typeof this._offset === 'number'
            ? this._offset
            : this._offset.x || 0;
    }
    get offsetY() {
        return typeof this._offset === 'number'
            ? this._offset
            : this._offset.y || 0;
    }
    createPosition() {
        if (this.xPosition && this.yPosition) {
            throw new Error(`You can not use \`xPosition\` and \`yPosition\` together, use only one of them.`);
        }
        // if ((this.xPosition || this.yPosition) && !this.placement) {
        //   throw new Error(`\`placement\` is required.`);
        // }
        let x = this._originRect.x, y = this._originRect.y, ox = 'center', oy = 'center';
        // if (this.placement) {
        if (this.placement === YPosition.above) {
            x += (this._originRect.width - this._overlayElementRect.width) / 2;
            y += -this._overlayElementRect.height;
            oy = 'bottom';
            // set offset
            y -= this.offsetY;
        }
        else if (this.placement === YPosition.below) {
            x += (this._originRect.width - this._overlayElementRect.width) / 2;
            y += this._originRect.height;
            oy = 'top';
            // set offset
            y += this.offsetY;
        }
        else {
            const dir = this._themeVariables.getDirection(this.placement);
            if (dir === DirPosition.left) {
                ox = '100%';
                x += -this._overlayElementRect.width;
                y += (this._originRect.height - this._overlayElementRect.height) / 2;
                // set offset
                x -= this.offsetX;
            }
            else if (dir === DirPosition.right) {
                ox = '0%';
                x += this._originRect.width;
                y += (this._originRect.height - this._overlayElementRect.height) / 2;
                // set offset
                x += this.offsetX;
            }
        }
        if (this.xPosition) {
            const dir = this._themeVariables.getDirection(this.xPosition);
            if (dir === DirPosition.right) {
                ox = '0%';
                x = this._originRect.x;
                // set offset
                x += this.offsetX;
            }
            else if (dir === DirPosition.left) {
                ox = '100%';
                x = this._originRect.x + this._originRect.width - this._overlayElementRect.width;
                // set offset
                x -= this.offsetX;
            }
        }
        else if (this.yPosition) {
            if (this.yPosition === YPosition.above) {
                y = this._originRect.y + this._originRect.height - this._overlayElementRect.height;
                oy = '100%';
                // set offset
                y += this.offsetY;
            }
            else if (this.yPosition === YPosition.below) {
                y = this._originRect.y;
                oy = '0%';
                // set offset
                y -= this.offsetY;
            }
        }
        // }
        this.x = x;
        this.y = y;
        this.ax = x;
        this.ay = y;
        this.ox = ox;
        this.oy = oy;
        return {
            x: Math.round(x),
            y: Math.round(y),
            ox,
            oy
        };
    }
    checkLeft(returnVal, invertIfNeed) {
        const rest = this.ax - this._offsetCheck;
        if (returnVal) {
            return rest;
        }
        if (rest < 0) {
            if (invertIfNeed) {
                if (this.placement !== YPosition.above && this.placement !== YPosition.below) {
                    this.placement = invertPlacement(this.placement);
                }
                if (this.xPosition) {
                    this.xPosition = invertPlacement(this.xPosition);
                }
            }
            return true;
        }
        return false;
    }
    checkRight(returnVal, invertIfNeed) {
        const rest = window.innerWidth - (this.ax + this._overlayElementRect.width + this._offsetCheck);
        if (returnVal) {
            return rest;
        }
        if (rest < 0) {
            if (invertIfNeed) {
                if (this.placement !== YPosition.above && this.placement !== YPosition.below) {
                    this.placement = invertPlacement(this.placement);
                }
                if (this.xPosition) {
                    this.xPosition = invertPlacement(this.xPosition);
                }
            }
            return true;
        }
        return false;
    }
    checkTop(returnVal, invertIfNeed) {
        const rest = this.ay - this._offsetCheck;
        if (returnVal) {
            return rest;
        }
        if (rest < 0) {
            if (invertIfNeed) {
                if (this.placement === YPosition.above || this.placement === YPosition.below) {
                    this.placement = invertPlacement(this.placement);
                }
                if (this.yPosition) {
                    this.yPosition = invertPlacement(this.yPosition);
                }
            }
            return true;
        }
        return false;
    }
    checkBottom(returnVal, invertIfNeed) {
        const rest = window.innerHeight - (this.ay + this._overlayElementRect.height + this._offsetCheck);
        if (returnVal) {
            return rest;
        }
        if (rest < 0) {
            if (invertIfNeed) {
                if (this.placement === YPosition.above || this.placement === YPosition.below) {
                    this.placement = invertPlacement(this.placement);
                }
                if (this.yPosition) {
                    this.yPosition = invertPlacement(this.yPosition);
                }
            }
            return true;
        }
        return false;
    }
    checkAll(returnVal, invertIfNeed) {
        return this.checkLeft(returnVal, invertIfNeed) ||
            this.checkRight(returnVal, invertIfNeed) ||
            this.checkTop(returnVal, invertIfNeed) ||
            this.checkBottom(returnVal, invertIfNeed);
    }
    updateOrigin() {
        // do not update if it is defined
        if (this._origin) {
            return;
        }
        this._origin = true;
        const oax = this._originRect.x + this._originRect.width / 2;
        const oay = this._originRect.y + this._originRect.height / 2;
        const vax = this.x + this._overlayElementRect.width / 2;
        const vay = this.y + this._overlayElementRect.height / 2;
        this.ox = `${oax - vax + this._overlayElementRect.width / 2}px`;
        this.oy = `${oay - vay + this._overlayElementRect.height / 2}px`;
    }
}
export function invertPlacement(placement) {
    if (placement === YPosition.above) {
        return YPosition.below;
    }
    else if (placement === YPosition.below) {
        return YPosition.above;
    }
    else if (placement === XPosition.after) {
        return XPosition.before;
    }
    else if (placement === XPosition.before) {
        return XPosition.after;
    }
    else if (placement === XPosition.right) {
        return XPosition.left;
    }
    else if (placement === XPosition.left) {
        return XPosition.right;
    }
    return placement;
}
//# sourceMappingURL=data:application/json;base64,