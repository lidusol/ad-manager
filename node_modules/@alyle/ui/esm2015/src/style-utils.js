import { Color, hexColorToInt } from '@alyle/ui/color';
import { _STYLE_MAP } from './theme/style';
import { StyleCollection } from './parse';
import { memoize } from './minimal/memoize';
export class LyStyleUtils {
    constructor() {
        /** Returns top */
        this.above = 'top';
        /** Returns bottom */
        this.below = 'bottom';
    }
    /** Returns left or right according to the direction */
    get before() {
        return this.getDirection(DirAlias.before);
    }
    /** Returns left or right according to the direction */
    get after() {
        return this.getDirection(DirAlias.after);
    }
    pxToRem(value) {
        const size = this.typography.fontSize / 14;
        return `${value / this.typography.htmlFontSize * size}rem`;
    }
    colorOf(value, optional) {
        if (typeof value === 'number') {
            return new Color(value);
        }
        if (value[0] === '#' && value.length === 7) {
            return new Color(hexColorToInt(value));
        }
        const color = get(this, value, optional);
        if (color) {
            return color;
        }
        /** Create invalid color */
        return new Color();
    }
    getBreakpoint(key) {
        return `@media ${this.breakpoints[key] || key}`;
    }
    selectorsOf(styles) {
        const styleMap = _STYLE_MAP.get(styles);
        if (styleMap) {
            return styleMap.classes || styleMap[this.name];
        }
        else {
            throw Error('Classes not found');
        }
    }
    getDirection(val) {
        if (val === DirAlias.before) {
            return this.direction === 'rtl' ? 'right' : 'left';
        }
        else if (val === DirAlias.after) {
            return this.direction === 'rtl' ? 'left' : 'right';
        }
        else if (val === 'above') {
            return 'top';
        }
        else if (val === 'below') {
            return 'bottom';
        }
        return val;
    }
}
export var Dir;
(function (Dir) {
    Dir["rtl"] = "rtl";
    Dir["ltr"] = "ltr";
})(Dir || (Dir = {}));
export var DirAlias;
(function (DirAlias) {
    DirAlias["before"] = "before";
    DirAlias["after"] = "after";
})(DirAlias || (DirAlias = {}));
export var DirPosition;
(function (DirPosition) {
    DirPosition["left"] = "left";
    DirPosition["right"] = "right";
})(DirPosition || (DirPosition = {}));
/**
 * get color of object
 * @param obj object
 * @param path path
 * @param optional get optional value, if not exist return default if not is string
 */
function get(obj, path, optional) {
    if (path === 'transparent') {
        return new Color(0, 0, 0, 0);
    }
    const _path = path instanceof Array ? path : path.split(':');
    for (let i = 0; i < _path.length; i++) {
        const posibleOb = obj[_path[i]];
        if (posibleOb) {
            obj = posibleOb;
        }
        else {
            /** if not exist */
            return new Color();
        }
    }
    if (obj instanceof Color) {
        return obj;
    }
    else if (optional) {
        return obj[optional] || obj['default'];
    }
    else {
        return obj['default'];
    }
    // return typeof obj === 'string' ? obj as string : obj['default'] as string;
}
/**
 * Extract breakpoints from a string to make it a unique `StyleTemplate`
 * @param str Media Queries in inline style
 * @param transformer A function with parameters to create a `StyleTemplate`
 * @deprecated
 */
export function withMediaInline(str, transformer) {
    const styleCollection = new StyleCollection();
    if (typeof str === 'string') {
        const values = parseMediaQueriesFromString(str);
        for (let index = 0; index < values.length; index++) {
            parseMediaQueryFromString(values[index]).forEach((_) => {
                styleCollection.add(transformer(_[0], _[1]));
            });
        }
    }
    else if (typeof str === 'number' || str === null || str === undefined) {
        styleCollection.add(transformer(str, null));
    }
    else {
        for (let index = 0; index < str.length; index++) {
            const val = str[index];
            if (typeof val === 'number' || val === null || val === undefined) {
                styleCollection.add(transformer(val, null));
            }
            if (typeof val === 'string') {
                parseMediaQueryFromString(val).forEach((_) => {
                    styleCollection.add(transformer(_[0], _[1]));
                });
            }
        }
    }
    return styleCollection.css;
}
const ɵ0 = (key) => {
    const valItem = key.split(/\@/g);
    const strValue = valItem.shift();
    const len = valItem.length;
    const value = isNaN(+strValue) ? strValue : +strValue;
    const re = [];
    if (len) {
        for (let j = 0; j < len; j++) {
            re.push([value, valItem[j]]);
        }
    }
    else {
        re.push([value, null]);
    }
    return re;
};
/**
 * Extract media query from a string
 */
export const parseMediaQueryFromString = memoize(ɵ0);
const ɵ1 = (key) => {
    return key.split(' ');
};
/**
 * Extract media queries from a string
 */
export const parseMediaQueriesFromString = memoize(ɵ1);
/**
 * @depracated use `withMediaInline` instead.
 */
export function eachMedia(str, fn, withStyleCollection) {
    let styleCollection;
    if (withStyleCollection) {
        styleCollection = new StyleCollection();
    }
    if (typeof str === 'string') {
        const values = str.split(/\ /g);
        for (let index = 0; index < values.length; index++) {
            const valItem = values[index].split(/\@/g);
            const strValue = valItem.shift();
            const len = valItem.length;
            const value = isNaN(+strValue) ? strValue : +strValue;
            if (len) {
                for (let j = 0; j < len; j++) {
                    resolveMediaEachItemStyle(fn, value, valItem[j], index, styleCollection);
                }
            }
            else {
                resolveMediaEachItemStyle(fn, value, null, index, styleCollection);
            }
        }
    }
    else if (typeof str === 'number' || typeof str === 'string' || str === null || str === undefined) {
        resolveMediaEachItemStyle(fn, str, null, 0, styleCollection);
    }
    else {
        // is array
        for (let index = 0; index < str.length; index++) {
            const val = str[index];
            if (typeof val === 'number' || typeof val === 'string') {
                resolveMediaEachItemStyle(fn, val, null, index, styleCollection);
            }
            else {
                const medias = val[1].split(/\@/g).filter(media => media);
                const strValue = val[0];
                const len = medias.length;
                if (len) {
                    for (let ii = 0; ii < len; ii++) {
                        resolveMediaEachItemStyle(fn, strValue, medias[ii], index, styleCollection);
                    }
                }
                else {
                    resolveMediaEachItemStyle(fn, strValue, null, index, styleCollection);
                }
            }
        }
    }
    if (styleCollection) {
        return styleCollection.css;
    }
}
function resolveMediaEachItemStyle(fn, val, media, index, styleCollection) {
    const styl = fn(val, media, index);
    if (styleCollection && styl) {
        styleCollection.add(styl);
    }
}
/**
 * Simple object check.
 * @param item
 */
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
}
/**
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
export function mergeDeep(target, ...sources) {
    if (!sources.length) {
        return target;
    }
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (const key in source) {
            if (isObject(source[key])) {
                if (!target[key]) {
                    Object.assign(target, { [key]: {} });
                }
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, { [key]: source[key] });
            }
        }
    }
    return mergeDeep(target, ...sources);
}
/**
 * Simple object check.
 * @param item
 */
function isObjectForTheme(item) {
    return (item && typeof item === 'object' && !Array.isArray(item))
        && !(item instanceof StyleCollection)
        && !(item instanceof Color);
}
export function mergeThemes(target, ...sources) {
    if (!sources.length) {
        return target;
    }
    const source = sources.shift();
    if (isObjectForTheme(target) && isObjectForTheme(source)) {
        for (const key in source) {
            if (isObjectForTheme(source[key])) {
                if (!target[key]) {
                    Object.assign(target, { [key]: {} });
                }
                mergeThemes(target[key], source[key]);
            }
            else {
                const targetKey = target[key];
                const sourceKey = source[key];
                // Merge styles
                if (targetKey instanceof StyleCollection && typeof sourceKey === 'function') {
                    target[key] = target[key].add(sourceKey);
                }
                else if (sourceKey instanceof Color) {
                    target[key] = sourceKey;
                }
                else {
                    Object.assign(target, { [key]: source[key] });
                }
            }
        }
    }
    return mergeThemes(target, ...sources);
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,