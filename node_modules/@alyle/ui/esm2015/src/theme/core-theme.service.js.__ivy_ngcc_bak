import { Injectable, Inject, RendererFactory2, ViewEncapsulation, Optional, isDevMode } from '@angular/core';
import { LY_CLASS_NAME_PREFIX } from './theme-config';
import { DOCUMENT } from '@angular/common';
import { mergeThemes } from '../style-utils';
import { Platform } from '@angular/cdk/platform';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/platform";
import * as i3 from "./theme-config";
export class CoreTheme {
    constructor(rendererFactory, _document, platform, _classNamePrefix) {
        this.rendererFactory = rendererFactory;
        this._classNamePrefix = _classNamePrefix;
        this.themes = new Set();
        this._themeMap = new Map();
        this._styleMap = new Map();
        this._document = _document;
        if (!isDevMode() && _classNamePrefix) {
            this.classNamePrefix = _classNamePrefix;
        }
        if (platform.isBrowser) {
            // Clean
            const nodes = this._document.body.querySelectorAll('ly-s-c');
            if (nodes.length) {
                for (let index = 0; index < nodes.length; index++) {
                    const element = nodes.item(index);
                    this._document.body.removeChild(element);
                }
            }
        }
        this.firstElement = this._document.body.firstChild;
        this.renderer = this.rendererFactory.createRenderer(null, {
            id: 'ly',
            encapsulation: ViewEncapsulation.None,
            styles: [],
            data: {}
        });
    }
    initializeTheme(themeConfig, globalVariables) {
        const allThemes = Array.isArray(themeConfig) ? themeConfig : [themeConfig];
        const themes = new Map();
        allThemes.forEach(item => {
            // Do not install themes that are already initialized.
            if (this.hasTheme(item.name)) {
                // throw new Error(`Theme '${item.name}' is already initialized.`);
                // }
            }
            if (themes.has(item.name)) {
                themes.get(item.name).push(item);
            }
            else {
                themes.set(item.name, [item]);
            }
        });
        themes.forEach((items) => {
            if (globalVariables) {
                items.push(globalVariables);
            }
            if (items.length > 1) {
                mergeThemes(items[0], ...items.slice(1));
            }
            this._add(items[0]);
            this.themes.add(items[0].name);
        });
    }
    /**
     * add new theme
     * @param theme: ThemeVariables
     */
    _add(theme) {
        this._themeMap.set(theme.name, theme);
        this._styleMap.set(theme.name, new Map());
    }
    hasTheme(theme) {
        const name = typeof theme === 'string' ? theme : theme.name;
        return this._themeMap.has(name);
    }
    get(name) {
        return this._themeMap.get(name);
    }
    updateClassName(element, renderer, newClassname, oldClassname) {
        if (oldClassname) {
            renderer.removeClass(element, oldClassname);
        }
        renderer.addClass(element, newClassname);
    }
}
CoreTheme.ɵprov = i0.ɵɵdefineInjectable({ factory: function CoreTheme_Factory() { return new CoreTheme(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(i3.LY_CLASS_NAME_PREFIX, 8)); }, token: CoreTheme, providedIn: "root" });
CoreTheme.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CoreTheme.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Platform },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LY_CLASS_NAME_PREFIX,] }] }
];
//# sourceMappingURL=data:application/json;base64,