import { __decorate } from "tslib";
import { Directive, ElementRef, isDevMode } from '@angular/core';
import { StyleRenderer, Style } from '../minimal/renderer-style';
const STYLE_PRIORITY = -0.5;
const ɵ0 = (value) => (theme) => ((className) => `${className}{color:${theme.colorOf(value)};}`), ɵ1 = (value) => (theme) => ((className) => `${className}{background:${theme.colorOf(value)};}`), ɵ2 = (value, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{padding:${to8Px(value)};}}`), ɵ3 = (val, media) => ({ breakpoints, after }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{padding-${after}:${to8Px(val)};}}`), ɵ4 = (val, media) => ({ breakpoints, before }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{padding-${before}:${to8Px(val)};}}`), ɵ5 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{padding-top:${to8Px(val)};}}`), ɵ6 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{padding-bottom:${to8Px(val)};}}`), ɵ7 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{padding:0 ${to8Px(val)};}}`), ɵ8 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{padding:${to8Px(val)} 0;}}`), ɵ9 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{margin:${to8Px(val)};}}`), ɵ10 = (val, media) => ({ breakpoints, after }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{margin-${after}:${to8Px(val)};}}`), ɵ11 = (val, media) => ({ breakpoints, before }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{margin-${before}:${to8Px(val)};}}`), ɵ12 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{margin-top:${to8Px(val)};}}`), ɵ13 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{margin-bottom:${to8Px(val)};}}`), ɵ14 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{margin:0 ${to8Px(val)};}}`), ɵ15 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{margin:${to8Px(val)} 0;}}`), ɵ16 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{width:${transform(val)};}}`), ɵ17 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{max-width:${transform(val)};}}`), ɵ18 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{min-width:${transform(val)};}}`), ɵ19 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{height:${transform(val)};}}`), ɵ20 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{max-height:${transform(val)};}}`), ɵ21 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{min-height:${transform(val)};}}`), ɵ22 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{display:${val};}}`), ɵ23 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{flex:${val};}}`), ɵ24 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{flex-basis:${val};}}`), ɵ25 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{flex-direction:${val};}}`), ɵ26 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{flex-grow:${val};}}`), ɵ27 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{flex-self:${val};}}`), ɵ28 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{flex-shrink:${val};}}`), ɵ29 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{flex-wrap:${val};}}`), ɵ30 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{justify-content:${val};}}`), ɵ31 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{justify-items:${val};}}`), ɵ32 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{justify-self:${val};}}`), ɵ33 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{align-content:${val};}}`), ɵ34 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{align-items:${val};}}`), ɵ35 = (val, media) => ({ breakpoints }) => ((className) => `@media ${(media && breakpoints[media]) || 'all'}{${className}{order:${val};}}`), ɵ36 = (value, media) => ({ breakpoints }) => ((className) => `@media ${(media && (breakpoints[media] || media)) || 'all'}{${className}{${value};}}`);
/**
 * @dynamic
 */
export class LyStyle {
    constructor(sRenderer) {
        this.sRenderer = sRenderer;
    }
    set size(value) {
        this.width = value;
        this.height = value;
    }
}
/** @docs-private */
LyStyle.и = 'LyStyle';
LyStyle.$priority = STYLE_PRIORITY;
LyStyle.decorators = [
    { type: Directive, args: [{
                selector: `[lyStyle],
              [lyColor],
              [lyP], [lyPf], [lyPe], [lyPt], [lyPb], [lyPx], [lyPy],
              [lyM], [lyMf], [lyMe], [lyMt], [lyMb], [lyMx], [lyMy],
              [lySize],
              [lyWidth], [lyMaxWidth], [lyMinWidth],
              [lyHeight], [lyMaxHeight], [lyMinHeight],
              [lyDisplay],
              [lyFlex],
              [lyFlexBasis],
              [lyFlexDirection],
              [lyFlexGrow],
              [lyFlexSelf],
              [lyFlexShrink],
              [lyFlexWrap],
              [lyJustifyContent],
              [lyJustifyItems],
              [lyJustifySelf],
              [lyAlignContent],
              [lyAlignItems],
              [lyOrder]`,
                providers: [
                    StyleRenderer
                ],
                inputs: [
                    'lyStyle',
                    'color: lyColor',
                    'bg: lyBg',
                    'p: lyP', 'pf: lyPf', 'pe: lyPe', 'pt: lyPt', 'pb: lyPb', 'px: lyPx', 'py: lyPy',
                    'm: lyM', 'mf: lyMf', 'me: lyMe', 'mt: lyMt', 'mb: lyMb', 'mx: lyMx', 'my: lyMy',
                    'size: lySize',
                    'width: lyWidth', 'maxWidth: lyMaxWidth', 'minWidth: lyMinWidth',
                    'height: lyHeight', 'maxHeight: lyMaxHeight', 'minHeight: lyMinHeight',
                    'display: lyDisplay',
                    'flex: lyFlex',
                    'flexBasis: lyFlexBasis',
                    'flexDirection: lyFlexDirection',
                    'flexGrow: lyFlexGrow',
                    'flexSelf: lyFlexSelf',
                    'flexShrink: lyFlexShrink',
                    'flexWrap: lyFlexWrap',
                    'justifyContent: lyJustifyContent',
                    'justifyItems: lyJustifyItems',
                    'justifySelf: lyJustifySelf',
                    'alignContent: lyAlignContent',
                    'alignItems: lyAlignItems',
                    'order: lyOrder'
                ]
            },] }
];
LyStyle.ctorParameters = () => [
    { type: StyleRenderer }
];
__decorate([
    Style(ɵ0)
], LyStyle.prototype, "color", void 0);
__decorate([
    Style(ɵ1)
], LyStyle.prototype, "bg", void 0);
__decorate([
    Style(ɵ2)
], LyStyle.prototype, "p", void 0);
__decorate([
    Style(ɵ3)
], LyStyle.prototype, "pf", void 0);
__decorate([
    Style(ɵ4)
], LyStyle.prototype, "pe", void 0);
__decorate([
    Style(ɵ5)
], LyStyle.prototype, "pt", void 0);
__decorate([
    Style(ɵ6)
], LyStyle.prototype, "pb", void 0);
__decorate([
    Style(ɵ7)
], LyStyle.prototype, "px", void 0);
__decorate([
    Style(ɵ8)
], LyStyle.prototype, "py", void 0);
__decorate([
    Style(ɵ9)
], LyStyle.prototype, "m", void 0);
__decorate([
    Style(ɵ10)
], LyStyle.prototype, "mf", void 0);
__decorate([
    Style(ɵ11)
], LyStyle.prototype, "me", void 0);
__decorate([
    Style(ɵ12)
], LyStyle.prototype, "mt", void 0);
__decorate([
    Style(ɵ13)
], LyStyle.prototype, "mb", void 0);
__decorate([
    Style(ɵ14)
], LyStyle.prototype, "mx", void 0);
__decorate([
    Style(ɵ15)
], LyStyle.prototype, "my", void 0);
__decorate([
    Style(ɵ16)
], LyStyle.prototype, "width", void 0);
__decorate([
    Style(ɵ17)
], LyStyle.prototype, "maxWidth", void 0);
__decorate([
    Style(ɵ18)
], LyStyle.prototype, "minWidth", void 0);
__decorate([
    Style(ɵ19)
], LyStyle.prototype, "height", void 0);
__decorate([
    Style(ɵ20)
], LyStyle.prototype, "maxHeight", void 0);
__decorate([
    Style(ɵ21)
], LyStyle.prototype, "minHeight", void 0);
__decorate([
    Style(ɵ22)
], LyStyle.prototype, "display", void 0);
__decorate([
    Style(ɵ23)
], LyStyle.prototype, "flex", void 0);
__decorate([
    Style(ɵ24)
], LyStyle.prototype, "flexBasis", void 0);
__decorate([
    Style(ɵ25)
], LyStyle.prototype, "flexDirection", void 0);
__decorate([
    Style(ɵ26)
], LyStyle.prototype, "flexGrow", void 0);
__decorate([
    Style(ɵ27)
], LyStyle.prototype, "flexSelf", void 0);
__decorate([
    Style(ɵ28)
], LyStyle.prototype, "flexShrink", void 0);
__decorate([
    Style(ɵ29)
], LyStyle.prototype, "flexWrap", void 0);
__decorate([
    Style(ɵ30)
], LyStyle.prototype, "justifyContent", void 0);
__decorate([
    Style(ɵ31)
], LyStyle.prototype, "justifyItems", void 0);
__decorate([
    Style(ɵ32)
], LyStyle.prototype, "justifySelf", void 0);
__decorate([
    Style(ɵ33)
], LyStyle.prototype, "alignContent", void 0);
__decorate([
    Style(ɵ34)
], LyStyle.prototype, "alignItems", void 0);
__decorate([
    Style(ɵ35)
], LyStyle.prototype, "order", void 0);
__decorate([
    Style(ɵ36)
], LyStyle.prototype, "lyStyle", void 0);
/**
 * @dynamic
 * @deprecated
 * Spacing
 * [p], [pf], [pe], [pt], [pb], [px], [py],
 * [m], [mf], [me], [mt], [mb], [mx], [my],
 * Sizing
 * [size],
 * [width], [maxWidth], [minWidth],
 * [height], [maxHeight], [minHeight],
 * Others
 * [lyStyle]
 */
export class LyStyleDeprecated extends LyStyle {
    constructor(sRenderer, _el) {
        super(sRenderer);
        this._el = _el;
    }
    ngOnChanges(changes) {
        if (isDevMode()) {
            for (const key in changes) {
                if (changes.hasOwnProperty(key)) {
                    const message = `[${key}] is deprecated, use [ly${key.charAt(0).toUpperCase() + key.slice(1)}] instead.`;
                    console.warn({
                        message,
                        element: this._el.nativeElement
                    });
                }
            }
        }
    }
}
LyStyleDeprecated.decorators = [
    { type: Directive, args: [{
                selector: `
              [p], [pf], [pe], [pt], [pb], [px], [py],
              [m], [mf], [me], [mt], [mb], [mx], [my],
              [size]:not([ly-button]),
              [width]:not(svg):not(canvas):not(embed):not(iframe):not(img):not(input):not(object):not(video),
              [maxWidth], [minWidth],
              [height]:not(svg):not(canvas):not(embed):not(iframe):not(img):not(input):not(object):not(video),
              [maxHeight], [minHeight],
              [display],
              [flex],
              [flexBasis],
              [flexDirection],
              [flexGrow],
              [flexSelf],
              [flexShrink],
              [flexWrap],
              [justifyContent],
              [justifyItems],
              [justifySelf],
              [alignContent],
              [alignItems],
              [order]`,
                providers: [
                    StyleRenderer
                ],
                inputs: [
                    'p', 'pf', 'pe', 'pt', 'pb', 'px', 'py',
                    'm', 'mf', 'me', 'mt', 'mb', 'mx', 'my',
                    'size',
                    'width', 'maxWidth', 'minWidth',
                    'height', 'maxHeight', 'minHeight',
                    'display',
                    'flex',
                    'flexBasis',
                    'flexDirection',
                    'flexGrow',
                    'flexSelf',
                    'flexShrink',
                    'flexWrap',
                    'justifyContent',
                    'justifyItems',
                    'justifySelf',
                    'alignContent',
                    'alignItems',
                    'order',
                ]
            },] }
];
LyStyleDeprecated.ctorParameters = () => [
    { type: StyleRenderer },
    { type: ElementRef }
];
/**
 * Convert to px if the value is a number, otherwise leave it as is
 * @docs-private
 */
function to8Px(val) {
    return typeof val === 'number'
        ? `${val * 8}px`
        : val.includes(' ')
            ? val.split(' ').map(_ => strTo8Px(_)).join(' ')
            : strTo8Px(val);
}
function strTo8Px(val) {
    const num = +val;
    return isNaN(num) ? val : `${num * 8}px`;
}
function strToPx(val) {
    const num = +val;
    return isNaN(num) ? val : `${num}px`;
}
function transform(value) {
    return value <= 1
        ? `${value * 100}%`
        : typeof value === 'number'
            ? `${value}px`
            : value.includes(' ')
                ? value.split(' ').map(_ => strToPx(_)).join(' ')
                : strToPx(value);
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15, ɵ16, ɵ17, ɵ18, ɵ19, ɵ20, ɵ21, ɵ22, ɵ23, ɵ24, ɵ25, ɵ26, ɵ27, ɵ28, ɵ29, ɵ30, ɵ31, ɵ32, ɵ33, ɵ34, ɵ35, ɵ36 };
//# sourceMappingURL=data:application/json;base64,