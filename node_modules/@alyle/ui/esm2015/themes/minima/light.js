import { shadowBuilder, StyleCollection, mergeThemes } from '@alyle/ui';
import { Color, color } from '@alyle/ui/color';
import { MinimaBase } from './base';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
const contrast = new Color(0xffffff);
const shadow = new Color(0x333333);
export class MinimaLight extends MinimaBase {
    constructor() {
        super(...arguments);
        this.name = 'minima-light';
        this.primary = {
            default: new Color(0x6200EE),
            contrast
        };
        this.accent = {
            default: new Color(0xFF2997),
            contrast,
        };
        this.warn = {
            default: new Color(0xf5414e),
            contrast
        };
        this.action = {
            default: new Color(0, 0, 0, .6),
            contrast: new Color(0xffffff)
        };
        this.background = {
            default: new Color(0xfafafa),
            primary: {
                default: new Color(0xffffff),
                shadow
            },
            secondary: new Color(0xfafafa),
            tertiary: new Color(0xefefef),
        };
        this.hover = new Color(0, 0, 0, 0.04);
        this.paper = {
            default: new Color(0xffffff),
            shadow
        };
        this.disabled = {
            default: new Color(0, 0, 0, 0.12),
            contrast: new Color(0, 0, 0, 0.26)
        };
        this.text = {
            default: new Color(0, 0, 0, 0.87),
            primary: new Color(0, 0, 0, 0.87),
            secondary: new Color(0, 0, 0, 0.54),
            disabled: new Color(0, 0, 0, 0.26),
            hint: new Color(0, 0, 0, 0.38),
            dark: new Color(0, 0, 0, 0.87),
            light: new Color(0xffffff)
        };
        this.divider = new Color(0, 0, 0, 0.12);
        this.colorShadow = new Color(0x333333);
        this.shadow = new Color(0x333333);
        this.drawer = {
            backdrop: new Color(0, 0, 0, .6)
        };
        this.bar = new Color(0xf5f5f5);
        this.field = mergeThemes(this.field, {
            root: new StyleCollection(({ container, fieldset, labelContainer, placeholder, label }) => (className) => `${className} ${container}:after,${className} ${fieldset},${className} ${labelContainer}{border-color:${new Color(0, 0, 0, 0.23)};}${className} ${label},${className} ${placeholder}{color:${new Color(0, 0, 0, 0.6)};}`),
            appearance: {
                filled: ({ container }) => (className) => `${className} ${container}{background-color:${new Color(0, 0, 0, 0.04)};}`
            }
        });
        this.snackBar = {
            root: new StyleCollection((className) => `${className}{background:${new Color(0x323232)};color:${new Color(0xffffff)};box-shadow:${shadowBuilder(4, new Color(0x323232))};}`)
        };
        this.tooltip = {
            root: new StyleCollection(() => (className) => `${className}{background:${new Color(50, 50, 50, 0.85)};color:${new Color(0xffffff)};}`)
        };
        this.menu = {
            root: new StyleCollection(__ => (className) => `${className} ${__.item} ly-icon,${className} ${__.itemSubMenuTrigger}:after{color:${color(0, 0, 0, 0.54)};}`)
        };
    }
}
MinimaLight.ɵfac = function MinimaLight_Factory(t) { return ɵMinimaLight_BaseFactory(t || MinimaLight); };
MinimaLight.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MinimaLight, factory: MinimaLight.ɵfac });
const ɵMinimaLight_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MinimaLight);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MinimaLight, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,