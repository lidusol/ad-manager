import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
import { LyTheme2, toBoolean, mixinStyleUpdater, mixinColor, StyleCollection, st2c, StyleRenderer } from '@alyle/ui';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alyle/ui';
const STYLE_PRIORITY = -1;
export const STYLES = (theme) => {
    return {
        $name: LyTypography.и,
        $priority: STYLE_PRIORITY,
        root: (className) => `${className}{margin:0;display:block;font-family:${theme.typography.fontFamily};}${st2c(((theme.typography
            && theme.typography.root
            && (theme.typography.root instanceof StyleCollection
                ? theme.typography.root.setTransformer(fn => fn()).css
                : theme.typography.root()))), `${className}`)}`,
        gutterTop: (className) => `${className}{margin-top:0.35em;}`,
        gutterBottom: (className) => `${className}{margin-bottom:0.35em;}`,
        gutter: (className) => `${className}{margin:0.35em 0;}`
    };
};
/** @docs-private */
export class LyTypographyBase {
    constructor(_theme) {
        this._theme = _theme;
    }
}
/** @docs-private */
export const LyTypographyMixinBase = mixinStyleUpdater(mixinColor((LyTypographyBase)));
export class LyTypography extends LyTypographyMixinBase {
    constructor(_theme, _el, renderer, sRenderer) {
        super(_theme);
        this._el = _el;
        this.renderer = renderer;
        this.sRenderer = sRenderer;
        /** @docs-private */
        this.classes = this._theme.renderStyleSheet(STYLES);
        this.renderer.addClass(this._el.nativeElement, this.classes.root);
    }
    set lyTyp(val) {
        if (val !== this.lyTyp) {
            if (val) {
                this._lyTypClass = this._createTypClass(val, this._lyTypClass);
            }
            else if (this._lyTypClass) {
                this.renderer.removeClass(this._el.nativeElement, this._lyTypClass);
                this._lyTypClass = null;
            }
        }
    }
    get lyTyp() {
        return this._lyTyp;
    }
    /** The text will truncate with an ellipsis. */
    set noWrap(val) {
        const newValue = toBoolean(val);
        if (newValue) {
            this._noWrapClass = this._theme.addSimpleStyle('lyTyp.noWrap', {
                overflow: 'hidden',
                whiteSpace: 'nowrap',
                textOverflow: 'ellipsis'
            });
            this.renderer.addClass(this._el.nativeElement, this._noWrapClass);
        }
        else if (this._noWrapClass) {
            this.renderer.removeClass(this._el.nativeElement, this._noWrapClass);
            this._noWrapClass = undefined;
        }
    }
    get noWrap() {
        return this._noWrap;
    }
    set gutter(val) {
        const newVal = toBoolean(val);
        if (newVal !== this.gutter) {
            this._gutter = newVal;
            this.sRenderer.toggleClass(this.classes.gutter, newVal);
        }
    }
    get gutter() {
        return this._gutter;
    }
    set gutterTop(val) {
        const newVal = toBoolean(val);
        if (newVal !== this.gutterTop) {
            this._gutterTop = newVal;
            this.sRenderer.toggleClass(this.classes.gutterTop, newVal);
        }
    }
    get gutterTop() {
        return this._gutterTop;
    }
    set gutterBottom(val) {
        const newVal = toBoolean(val);
        if (newVal !== this.gutterBottom) {
            this._gutterBottom = newVal;
            this.sRenderer.toggleClass(this.classes.gutterBottom, newVal);
        }
    }
    get gutterBottom() {
        return this._gutterBottom;
    }
    ngOnInit() {
        if ((this.gutterTop && this.gutterBottom)) {
            throw new Error(`use '<element lyTyp gutter>' instead of '<element lyTyp gutterTop gutterBottom>'`);
        }
    }
    ngOnChanges() {
        this.updateStyle(this._el.nativeElement);
    }
    _createTypClass(val, instance) {
        const newKey = `k-typ:${val}`;
        return this.sRenderer.add(newKey, (theme) => {
            if (theme.typography && theme.typography.lyTyp) {
                const lyTyp = theme.typography.lyTyp[val];
                if (lyTyp) {
                    return lyTyp instanceof StyleCollection
                        ? lyTyp.setTransformer((_) => _()).css
                        : lyTyp();
                }
            }
            throw new Error(`Value typography.lyTyp['${val}'] not found in ThemeVariables`);
        }, STYLE_PRIORITY, instance);
    }
}
LyTypography.ɵfac = function LyTypography_Factory(t) { return new (t || LyTypography)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LyTheme2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StyleRenderer)); };
LyTypography.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LyTypography, selectors: [["", "lyTyp", ""]], inputs: { color: "color", lyTyp: "lyTyp", noWrap: "noWrap", gutter: "gutter", gutterTop: "gutterTop", gutterBottom: "gutterBottom" }, features: [ɵngcc0.ɵɵProvidersFeature([
            StyleRenderer
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
/** @docs-private */
LyTypography.и = 'LyTypography';
LyTypography.ctorParameters = () => [
    { type: LyTheme2 },
    { type: ElementRef },
    { type: Renderer2 },
    { type: StyleRenderer }
];
LyTypography.propDecorators = {
    lyTyp: [{ type: Input }],
    noWrap: [{ type: Input }],
    gutter: [{ type: Input }],
    gutterTop: [{ type: Input }],
    gutterBottom: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LyTypography, [{
        type: Directive,
        args: [{
                selector: `[lyTyp]`,
                inputs: [
                    'color'
                ],
                providers: [
                    StyleRenderer
                ]
            }]
    }], function () { return [{ type: ɵngcc1.LyTheme2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.StyleRenderer }]; }, { lyTyp: [{
            type: Input
        }], noWrap: [{
            type: Input
        }], gutter: [{
            type: Input
        }], gutterTop: [{
            type: Input
        }], gutterBottom: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,