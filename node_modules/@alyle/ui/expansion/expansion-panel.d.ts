import { ChangeDetectorRef, ElementRef, Renderer2, OnChanges, OnInit, OnDestroy, TemplateRef, EventEmitter, AfterContentInit } from '@angular/core';
import { LyTheme2 } from '@alyle/ui';
import { LyAccordion } from './accordion';
import { LyExpansionPanelContent } from './expansion-panel-content';
import { Subject } from 'rxjs';
import { AnimationEvent } from '@angular/animations';
/** LyExpansionPanel's states. */
import * as ɵngcc0 from '@angular/core';
export declare type LyExpansionPanelState = 'expanded' | 'collapsed';
/** @docs-private */
export declare class LyExpansionPanelBase {
    _theme: LyTheme2;
    constructor(_theme: LyTheme2);
}
/** @docs-private */
export declare const LyButtonMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/build-common-behaviors").CanStyleUpdater> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/bg").CanBg> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/color").CanColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/elevation").CanElevation> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/shadow-color").CanShadowColor> & typeof LyExpansionPanelBase;
export declare class LyExpansionPanel extends LyButtonMixinBase implements OnChanges, OnInit, AfterContentInit, OnDestroy {
    private _el;
    private _renderer;
    private _cd;
    private _accordion;
    /** @docs-private */
    readonly classes: Pick<{
        $priority: string;
        $name: string;
        $global: string;
        root: string;
        panel: string;
        panelHeader: string;
        panelHeaderContent: string;
        panelContent: string;
        panelBody: string;
        panelTitle: string;
        panelDescription: string;
        panelActionRow: string;
        expanded: string;
        disabled: string;
    }, "root" | "panel" | "panelHeader" | "panelHeaderContent" | "panelContent" | "panelBody" | "panelTitle" | "panelDescription" | "panelActionRow" | "expanded" | "disabled">;
    readonly _panelAnimationTiming: string;
    /** Subscription to openAll/closeAll events. */
    private _openCloseAllSubscription;
    private _disabled;
    private _expanded;
    private _hasToggle;
    _lazyContentRef: TemplateRef<any>;
    /** Content that will be rendered lazily. */
    readonly _lazyContent: LyExpansionPanelContent;
    /** Event emitted every time the LyExpansionPanel is closed. */
    closed: EventEmitter<void>;
    /** Event emitted every time the LyExpansionPanel is opened. */
    opened: EventEmitter<void>;
    /** An event emitted after the body's collapse animation happens. */
    afterCollapse: EventEmitter<void>;
    /** An event emitted after the body's expansion animation happens. */
    afterExpand: EventEmitter<void>;
    /** Event emitted when the LyExpansionPanel is destroyed. */
    destroyed: EventEmitter<void>;
    /** Stream of body animation done events. */
    _bodyAnimationDone: Subject<AnimationEvent>;
    set disabled(val: boolean);
    get disabled(): boolean;
    set expanded(val: boolean);
    get expanded(): boolean;
    set hasToggle(val: boolean);
    get hasToggle(): boolean;
    constructor(_el: ElementRef, _renderer: Renderer2, _cd: ChangeDetectorRef, _theme: LyTheme2, _accordion: LyAccordion);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    close(): void;
    open(): void;
    toggle(): void;
    /** Gets the expanded state string. */
    _getExpandedState(): LyExpansionPanelState;
    private _subscribeToOpenCloseAllActions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyExpansionPanel, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyExpansionPanel, "ly-expansion-panel", ["lyExpansionPanel"], { "bg": "bg"; "color": "color"; "elevation": "elevation"; "shadowColor": "shadowColor"; "disabled": "disabled"; "expanded": "expanded"; "hasToggle": "hasToggle"; }, { "closed": "closed"; "opened": "opened"; "afterCollapse": "afterCollapse"; "afterExpand": "afterExpand"; "destroyed": "destroyed"; }, ["_lazyContent"], ["ly-expansion-panel-header", "*", "ly-action-row"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLmQudHMiLCJzb3VyY2VzIjpbImV4cGFuc2lvbi1wYW5lbC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSwgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIgfSBmcm9tICdAYWx5bGUvdWknO1xuaW1wb3J0IHsgTHlBY2NvcmRpb24gfSBmcm9tICcuL2FjY29yZGlvbic7XG5pbXBvcnQgeyBMeUV4cGFuc2lvblBhbmVsQ29udGVudCB9IGZyb20gJy4vZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbi8qKiBMeUV4cGFuc2lvblBhbmVsJ3Mgc3RhdGVzLiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBMeUV4cGFuc2lvblBhbmVsU3RhdGUgPSAnZXhwYW5kZWQnIHwgJ2NvbGxhcHNlZCc7XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlFeHBhbnNpb25QYW5lbEJhc2Uge1xuICAgIF90aGVtZTogTHlUaGVtZTI7XG4gICAgY29uc3RydWN0b3IoX3RoZW1lOiBMeVRoZW1lMik7XG59XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTHlCdXR0b25NaXhpbkJhc2U6IGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2J1aWxkLWNvbW1vbi1iZWhhdmlvcnNcIikuQ2FuU3R5bGVVcGRhdGVyPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2JnXCIpLkNhbkJnPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbG9yXCIpLkNhbkNvbG9yPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2VsZXZhdGlvblwiKS5DYW5FbGV2YXRpb24+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vc2hhZG93LWNvbG9yXCIpLkNhblNoYWRvd0NvbG9yPiAmIHR5cGVvZiBMeUV4cGFuc2lvblBhbmVsQmFzZTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5RXhwYW5zaW9uUGFuZWwgZXh0ZW5kcyBMeUJ1dHRvbk1peGluQmFzZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX2VsO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHByaXZhdGUgX2NkO1xuICAgIHByaXZhdGUgX2FjY29yZGlvbjtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgJG5hbWU6IHN0cmluZztcbiAgICAgICAgJGdsb2JhbDogc3RyaW5nO1xuICAgICAgICByb290OiBzdHJpbmc7XG4gICAgICAgIHBhbmVsOiBzdHJpbmc7XG4gICAgICAgIHBhbmVsSGVhZGVyOiBzdHJpbmc7XG4gICAgICAgIHBhbmVsSGVhZGVyQ29udGVudDogc3RyaW5nO1xuICAgICAgICBwYW5lbENvbnRlbnQ6IHN0cmluZztcbiAgICAgICAgcGFuZWxCb2R5OiBzdHJpbmc7XG4gICAgICAgIHBhbmVsVGl0bGU6IHN0cmluZztcbiAgICAgICAgcGFuZWxEZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgICAgICBwYW5lbEFjdGlvblJvdzogc3RyaW5nO1xuICAgICAgICBleHBhbmRlZDogc3RyaW5nO1xuICAgICAgICBkaXNhYmxlZDogc3RyaW5nO1xuICAgIH0sIFwicm9vdFwiIHwgXCJwYW5lbFwiIHwgXCJwYW5lbEhlYWRlclwiIHwgXCJwYW5lbEhlYWRlckNvbnRlbnRcIiB8IFwicGFuZWxDb250ZW50XCIgfCBcInBhbmVsQm9keVwiIHwgXCJwYW5lbFRpdGxlXCIgfCBcInBhbmVsRGVzY3JpcHRpb25cIiB8IFwicGFuZWxBY3Rpb25Sb3dcIiB8IFwiZXhwYW5kZWRcIiB8IFwiZGlzYWJsZWRcIj47XG4gICAgcmVhZG9ubHkgX3BhbmVsQW5pbWF0aW9uVGltaW5nOiBzdHJpbmc7XG4gICAgLyoqIFN1YnNjcmlwdGlvbiB0byBvcGVuQWxsL2Nsb3NlQWxsIGV2ZW50cy4gKi9cbiAgICBwcml2YXRlIF9vcGVuQ2xvc2VBbGxTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfZXhwYW5kZWQ7XG4gICAgcHJpdmF0ZSBfaGFzVG9nZ2xlO1xuICAgIF9sYXp5Q29udGVudFJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKiogQ29udGVudCB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgbGF6aWx5LiAqL1xuICAgIHJlYWRvbmx5IF9sYXp5Q29udGVudDogTHlFeHBhbnNpb25QYW5lbENvbnRlbnQ7XG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgTHlFeHBhbnNpb25QYW5lbCBpcyBjbG9zZWQuICovXG4gICAgY2xvc2VkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgLyoqIEV2ZW50IGVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgTHlFeHBhbnNpb25QYW5lbCBpcyBvcGVuZWQuICovXG4gICAgb3BlbmVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgLyoqIEFuIGV2ZW50IGVtaXR0ZWQgYWZ0ZXIgdGhlIGJvZHkncyBjb2xsYXBzZSBhbmltYXRpb24gaGFwcGVucy4gKi9cbiAgICBhZnRlckNvbGxhcHNlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgLyoqIEFuIGV2ZW50IGVtaXR0ZWQgYWZ0ZXIgdGhlIGJvZHkncyBleHBhbnNpb24gYW5pbWF0aW9uIGhhcHBlbnMuICovXG4gICAgYWZ0ZXJFeHBhbmQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICAvKiogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBMeUV4cGFuc2lvblBhbmVsIGlzIGRlc3Ryb3llZC4gKi9cbiAgICBkZXN0cm95ZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICAvKiogU3RyZWFtIG9mIGJvZHkgYW5pbWF0aW9uIGRvbmUgZXZlbnRzLiAqL1xuICAgIF9ib2R5QW5pbWF0aW9uRG9uZTogU3ViamVjdDxBbmltYXRpb25FdmVudD47XG4gICAgc2V0IGRpc2FibGVkKHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGV4cGFuZGVkKHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IGV4cGFuZGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGhhc1RvZ2dsZSh2YWw6IGJvb2xlYW4pO1xuICAgIGdldCBoYXNUb2dnbGUoKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihfZWw6IEVsZW1lbnRSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBfY2Q6IENoYW5nZURldGVjdG9yUmVmLCBfdGhlbWU6IEx5VGhlbWUyLCBfYWNjb3JkaW9uOiBMeUFjY29yZGlvbik7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG4gICAgLyoqIEdldHMgdGhlIGV4cGFuZGVkIHN0YXRlIHN0cmluZy4gKi9cbiAgICBfZ2V0RXhwYW5kZWRTdGF0ZSgpOiBMeUV4cGFuc2lvblBhbmVsU3RhdGU7XG4gICAgcHJpdmF0ZSBfc3Vic2NyaWJlVG9PcGVuQ2xvc2VBbGxBY3Rpb25zO1xufVxuIl19