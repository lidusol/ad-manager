import { ElementRef, OnInit, Renderer2 } from '@angular/core';
import { LyTheme2, StyleRenderer } from '@alyle/ui';
import * as ɵngcc0 from '@angular/core';
export declare type AlignItems = 'start' | 'center' | 'end' | 'stretch' | 'baseline';
export declare const STYLES: () => {
    $priority: number;
    $name: string;
    root: (className: string) => string;
    item: (className: string) => string;
};
export declare type Justify = 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly';
export declare type Direction = 'row' | 'rowReverse' | 'column' | 'columnReverse';
/**
 * Grid container
 */
export declare class LyGrid {
    private theme;
    private el;
    static readonly и = "LyGrid";
    /**
     * Styles
     * @docs-private
     */
    readonly classes: Pick<{
        $priority: string;
        $name: string;
        root: string;
        item: string;
    }, "root" | "item">;
    private _spacing;
    _spacingClass?: string;
    private _spacingX;
    _spacingXClass?: string;
    private _spacingY;
    _spacingYClass?: string;
    private _negativeMarginClass?;
    private _justify;
    private _justifyClass?;
    private _direction;
    private _directionClass?;
    private _alignItems;
    private _alignItemsClass?;
    get spacingX(): string | number;
    set spacingX(val: string | number);
    get spacingY(): string | number;
    set spacingY(val: string | number);
    /**
     * Defines the space between the component with the `item` attribute.
     * Support breakpoints
     */
    get spacing(): string | number;
    set spacing(val: string | number);
    /**
     * Only one param must be defined
     */
    private _createSpacingClass;
    /**
     * Defines the justify-content style property.
     * Support breakpoints
     */
    get justify(): Justify;
    set justify(val: Justify);
    /**
     * Defines the justify-content style property.
     * Support breakpoints
     */
    get direction(): Direction;
    set direction(val: Direction);
    /**
     * Defines the `align-items` style property.
     * Support breakpoints
     */
    set alignItems(val: AlignItems);
    get alignItems(): AlignItems;
    constructor(theme: LyTheme2, el: ElementRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyGrid, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyGrid, "ly-grid[container]", never, { "spacingX": "spacingX"; "spacingY": "spacingY"; "spacing": "spacing"; "justify": "justify"; "direction": "direction"; "alignItems": "alignItems"; }, {}, never>;
}
export declare class LyGridItem implements OnInit {
    private gridContainer;
    private el;
    private theme;
    private _sr;
    static readonly и = "LyGridItem";
    private _col;
    private _colClass;
    private _order;
    private _orderClass;
    /**
     * Defines the number of grids
     * Support breakpoints
     */
    get col(): string | number;
    set col(val: string | number);
    set gridItemCol(val: string | number);
    get gridItemCol(): string | number;
    /**
     * Defines the order style property.
     * Support breakpoints
     */
    get order(): string | number;
    set order(val: string | number);
    constructor(gridContainer: LyGrid, el: ElementRef, renderer: Renderer2, theme: LyTheme2, _sr: StyleRenderer);
    ngOnInit(): void;
    private _updateSpacing;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyGridItem, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyGridItem, "ly-grid[item], [ly-grid-item], [lyGridItem]", never, { "col": "col"; "gridItemCol": "lyGridItem"; "order": "order"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5kLnRzIiwic291cmNlcyI6WyJncmlkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeVRoZW1lMiwgU3R5bGVSZW5kZXJlciB9IGZyb20gJ0BhbHlsZS91aSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEFsaWduSXRlbXMgPSAnc3RhcnQnIHwgJ2NlbnRlcicgfCAnZW5kJyB8ICdzdHJldGNoJyB8ICdiYXNlbGluZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBTVFlMRVM6ICgpID0+IHtcbiAgICAkcHJpb3JpdHk6IG51bWJlcjtcbiAgICAkbmFtZTogc3RyaW5nO1xuICAgIHJvb3Q6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGl0ZW06IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xufTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgSnVzdGlmeSA9ICdzdGFydCcgfCAnY2VudGVyJyB8ICdlbmQnIHwgJ2JldHdlZW4nIHwgJ2Fyb3VuZCcgfCAnZXZlbmx5JztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRGlyZWN0aW9uID0gJ3JvdycgfCAncm93UmV2ZXJzZScgfCAnY29sdW1uJyB8ICdjb2x1bW5SZXZlcnNlJztcbi8qKlxuICogR3JpZCBjb250YWluZXJcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlHcmlkIHtcbiAgICBwcml2YXRlIHRoZW1lO1xuICAgIHByaXZhdGUgZWw7XG4gICAgc3RhdGljIHJlYWRvbmx5INC4ID0gXCJMeUdyaWRcIjtcbiAgICAvKipcbiAgICAgKiBTdHlsZXNcbiAgICAgKiBAZG9jcy1wcml2YXRlXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2xhc3NlczogUGljazx7XG4gICAgICAgICRwcmlvcml0eTogc3RyaW5nO1xuICAgICAgICAkbmFtZTogc3RyaW5nO1xuICAgICAgICByb290OiBzdHJpbmc7XG4gICAgICAgIGl0ZW06IHN0cmluZztcbiAgICB9LCBcInJvb3RcIiB8IFwiaXRlbVwiPjtcbiAgICBwcml2YXRlIF9zcGFjaW5nO1xuICAgIF9zcGFjaW5nQ2xhc3M/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfc3BhY2luZ1g7XG4gICAgX3NwYWNpbmdYQ2xhc3M/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfc3BhY2luZ1k7XG4gICAgX3NwYWNpbmdZQ2xhc3M/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfbmVnYXRpdmVNYXJnaW5DbGFzcz87XG4gICAgcHJpdmF0ZSBfanVzdGlmeTtcbiAgICBwcml2YXRlIF9qdXN0aWZ5Q2xhc3M/O1xuICAgIHByaXZhdGUgX2RpcmVjdGlvbjtcbiAgICBwcml2YXRlIF9kaXJlY3Rpb25DbGFzcz87XG4gICAgcHJpdmF0ZSBfYWxpZ25JdGVtcztcbiAgICBwcml2YXRlIF9hbGlnbkl0ZW1zQ2xhc3M/O1xuICAgIGdldCBzcGFjaW5nWCgpOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgc2V0IHNwYWNpbmdYKHZhbDogc3RyaW5nIHwgbnVtYmVyKTtcbiAgICBnZXQgc3BhY2luZ1koKTogc3RyaW5nIHwgbnVtYmVyO1xuICAgIHNldCBzcGFjaW5nWSh2YWw6IHN0cmluZyB8IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgY29tcG9uZW50IHdpdGggdGhlIGBpdGVtYCBhdHRyaWJ1dGUuXG4gICAgICogU3VwcG9ydCBicmVha3BvaW50c1xuICAgICAqL1xuICAgIGdldCBzcGFjaW5nKCk6IHN0cmluZyB8IG51bWJlcjtcbiAgICBzZXQgc3BhY2luZyh2YWw6IHN0cmluZyB8IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogT25seSBvbmUgcGFyYW0gbXVzdCBiZSBkZWZpbmVkXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3JlYXRlU3BhY2luZ0NsYXNzO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGp1c3RpZnktY29udGVudCBzdHlsZSBwcm9wZXJ0eS5cbiAgICAgKiBTdXBwb3J0IGJyZWFrcG9pbnRzXG4gICAgICovXG4gICAgZ2V0IGp1c3RpZnkoKTogSnVzdGlmeTtcbiAgICBzZXQganVzdGlmeSh2YWw6IEp1c3RpZnkpO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGp1c3RpZnktY29udGVudCBzdHlsZSBwcm9wZXJ0eS5cbiAgICAgKiBTdXBwb3J0IGJyZWFrcG9pbnRzXG4gICAgICovXG4gICAgZ2V0IGRpcmVjdGlvbigpOiBEaXJlY3Rpb247XG4gICAgc2V0IGRpcmVjdGlvbih2YWw6IERpcmVjdGlvbik7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgYGFsaWduLWl0ZW1zYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICAgKiBTdXBwb3J0IGJyZWFrcG9pbnRzXG4gICAgICovXG4gICAgc2V0IGFsaWduSXRlbXModmFsOiBBbGlnbkl0ZW1zKTtcbiAgICBnZXQgYWxpZ25JdGVtcygpOiBBbGlnbkl0ZW1zO1xuICAgIGNvbnN0cnVjdG9yKHRoZW1lOiBMeVRoZW1lMiwgZWw6IEVsZW1lbnRSZWYpO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlHcmlkSXRlbSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBncmlkQ29udGFpbmVyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSB0aGVtZTtcbiAgICBwcml2YXRlIF9zcjtcbiAgICBzdGF0aWMgcmVhZG9ubHkg0LggPSBcIkx5R3JpZEl0ZW1cIjtcbiAgICBwcml2YXRlIF9jb2w7XG4gICAgcHJpdmF0ZSBfY29sQ2xhc3M7XG4gICAgcHJpdmF0ZSBfb3JkZXI7XG4gICAgcHJpdmF0ZSBfb3JkZXJDbGFzcztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHNcbiAgICAgKiBTdXBwb3J0IGJyZWFrcG9pbnRzXG4gICAgICovXG4gICAgZ2V0IGNvbCgpOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgc2V0IGNvbCh2YWw6IHN0cmluZyB8IG51bWJlcik7XG4gICAgc2V0IGdyaWRJdGVtQ29sKHZhbDogc3RyaW5nIHwgbnVtYmVyKTtcbiAgICBnZXQgZ3JpZEl0ZW1Db2woKTogc3RyaW5nIHwgbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIG9yZGVyIHN0eWxlIHByb3BlcnR5LlxuICAgICAqIFN1cHBvcnQgYnJlYWtwb2ludHNcbiAgICAgKi9cbiAgICBnZXQgb3JkZXIoKTogc3RyaW5nIHwgbnVtYmVyO1xuICAgIHNldCBvcmRlcih2YWw6IHN0cmluZyB8IG51bWJlcik7XG4gICAgY29uc3RydWN0b3IoZ3JpZENvbnRhaW5lcjogTHlHcmlkLCBlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgdGhlbWU6IEx5VGhlbWUyLCBfc3I6IFN0eWxlUmVuZGVyZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfdXBkYXRlU3BhY2luZztcbn1cbiJdfQ==