import { ElementRef, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { LyIconService } from './icon.service';
import { LyTheme2, ThemeVariables, StyleRenderer } from '@alyle/ui';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export declare const STYLES: (theme: ThemeVariables) => {
    $priority: number;
    $global: (className: string) => string;
    root: () => (className: string) => string;
    loading: (className: string) => string;
    defaultIcon: (className: string) => string;
};
/** @docs-private */
export declare class LyIconBase {
    _theme: LyTheme2;
    constructor(_theme: LyTheme2);
}
/** @docs-private */
export declare const LyIconMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/build-common-behaviors").CanStyleUpdater> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/bg").CanBg> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/color").CanColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/raised").CanRaised> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/outlined").CanOutlined> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/elevation").CanElevation> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/shadow-color").CanShadowColor> & typeof LyIconBase;
export declare class LyIcon extends LyIconMixinBase implements OnChanges, OnInit, OnDestroy {
    private iconService;
    private _el;
    private _renderer;
    readonly sRenderer: StyleRenderer;
    private _platform;
    readonly classes: Pick<{
        $priority: string;
        $global: string;
        root: string;
        loading: string;
        defaultIcon: string;
    }, "root" | "loading" | "defaultIcon">;
    private _icon;
    private _fontSet;
    private _previousFontSet;
    private _currentClass;
    private _fontIcon;
    private _iconElement?;
    get icon(): string;
    set icon(val: string);
    get fontSet(): string;
    set fontSet(key: string);
    get fontIcon(): string;
    set fontIcon(key: string);
    /** @docs-private */
    get hostElement(): any;
    constructor(iconService: LyIconService, _el: ElementRef, _renderer: Renderer2, theme: LyTheme2, sRenderer: StyleRenderer, _platform: Platform);
    ngOnChanges(): void;
    private _isDefault;
    private _prepareSvgIcon;
    private _appendChild;
    private _addDefaultIcon;
    private _updateClass;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * run only browser
     * remove current icon
     */
    private _cleanIcon;
    private _updateFontClass;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyIcon, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyIcon, "ly-icon", ["lyIcon"], { "bg": "bg"; "color": "color"; "raised": "raised"; "outlined": "outlined"; "elevation": "elevation"; "shadowColor": "shadowColor"; "icon": "icon"; "fontSet": "fontSet"; "fontIcon": "fontIcon"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kLnRzIiwic291cmNlcyI6WyJpY29uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx5SWNvblNlcnZpY2UgfSBmcm9tICcuL2ljb24uc2VydmljZSc7XG5pbXBvcnQgeyBMeVRoZW1lMiwgVGhlbWVWYXJpYWJsZXMsIFN0eWxlUmVuZGVyZXIgfSBmcm9tICdAYWx5bGUvdWknO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgU1RZTEVTOiAodGhlbWU6IFRoZW1lVmFyaWFibGVzKSA9PiB7XG4gICAgJHByaW9yaXR5OiBudW1iZXI7XG4gICAgJGdsb2JhbDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgcm9vdDogKCkgPT4gKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgbG9hZGluZzogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgZGVmYXVsdEljb246IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xufTtcbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeUljb25CYXNlIHtcbiAgICBfdGhlbWU6IEx5VGhlbWUyO1xuICAgIGNvbnN0cnVjdG9yKF90aGVtZTogTHlUaGVtZTIpO1xufVxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEx5SWNvbk1peGluQmFzZTogaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vYnVpbGQtY29tbW9uLWJlaGF2aW9yc1wiKS5DYW5TdHlsZVVwZGF0ZXI+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vYmdcIikuQ2FuQmc+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29sb3JcIikuQ2FuQ29sb3I+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vcmFpc2VkXCIpLkNhblJhaXNlZD4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9vdXRsaW5lZFwiKS5DYW5PdXRsaW5lZD4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9lbGV2YXRpb25cIikuQ2FuRWxldmF0aW9uPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL3NoYWRvdy1jb2xvclwiKS5DYW5TaGFkb3dDb2xvcj4gJiB0eXBlb2YgTHlJY29uQmFzZTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5SWNvbiBleHRlbmRzIEx5SWNvbk1peGluQmFzZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgaWNvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgcmVhZG9ubHkgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyO1xuICAgIHByaXZhdGUgX3BsYXRmb3JtO1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgJGdsb2JhbDogc3RyaW5nO1xuICAgICAgICByb290OiBzdHJpbmc7XG4gICAgICAgIGxvYWRpbmc6IHN0cmluZztcbiAgICAgICAgZGVmYXVsdEljb246IHN0cmluZztcbiAgICB9LCBcInJvb3RcIiB8IFwibG9hZGluZ1wiIHwgXCJkZWZhdWx0SWNvblwiPjtcbiAgICBwcml2YXRlIF9pY29uO1xuICAgIHByaXZhdGUgX2ZvbnRTZXQ7XG4gICAgcHJpdmF0ZSBfcHJldmlvdXNGb250U2V0O1xuICAgIHByaXZhdGUgX2N1cnJlbnRDbGFzcztcbiAgICBwcml2YXRlIF9mb250SWNvbjtcbiAgICBwcml2YXRlIF9pY29uRWxlbWVudD87XG4gICAgZ2V0IGljb24oKTogc3RyaW5nO1xuICAgIHNldCBpY29uKHZhbDogc3RyaW5nKTtcbiAgICBnZXQgZm9udFNldCgpOiBzdHJpbmc7XG4gICAgc2V0IGZvbnRTZXQoa2V5OiBzdHJpbmcpO1xuICAgIGdldCBmb250SWNvbigpOiBzdHJpbmc7XG4gICAgc2V0IGZvbnRJY29uKGtleTogc3RyaW5nKTtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIGdldCBob3N0RWxlbWVudCgpOiBhbnk7XG4gICAgY29uc3RydWN0b3IoaWNvblNlcnZpY2U6IEx5SWNvblNlcnZpY2UsIF9lbDogRWxlbWVudFJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHRoZW1lOiBMeVRoZW1lMiwgc1JlbmRlcmVyOiBTdHlsZVJlbmRlcmVyLCBfcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIHByaXZhdGUgX2lzRGVmYXVsdDtcbiAgICBwcml2YXRlIF9wcmVwYXJlU3ZnSWNvbjtcbiAgICBwcml2YXRlIF9hcHBlbmRDaGlsZDtcbiAgICBwcml2YXRlIF9hZGREZWZhdWx0SWNvbjtcbiAgICBwcml2YXRlIF91cGRhdGVDbGFzcztcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogcnVuIG9ubHkgYnJvd3NlclxuICAgICAqIHJlbW92ZSBjdXJyZW50IGljb25cbiAgICAgKi9cbiAgICBwcml2YXRlIF9jbGVhbkljb247XG4gICAgcHJpdmF0ZSBfdXBkYXRlRm9udENsYXNzO1xufVxuIl19