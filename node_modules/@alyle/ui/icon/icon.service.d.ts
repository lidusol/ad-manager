import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { LyTheme2 } from '@alyle/ui';
import { SafeHtml, DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export interface FontClassOptions {
    key: string;
    /** Class name */
    class?: string;
    /** Frefix class */
    prefix?: string;
}
export interface SvgIcon {
    obs?: Observable<SVGElement>;
    svg?: SVGElement;
}
export declare class LyIconService {
    private http;
    private _sanitizer;
    private _document;
    private theme;
    private _defaultClass?;
    private _defaultClassPrefix?;
    private svgMap;
    private _fontClasses;
    /**
     * Styles
     * @docs-private
     */
    readonly classes: Pick<{
        svg: string;
    }, "svg">;
    readonly defaultSvgIcon: string;
    get defaultClass(): string;
    get defaultClassPrefix(): string;
    constructor(http: HttpClient, _sanitizer: DomSanitizer, _document: any, theme: LyTheme2);
    setSvg(key: string, url: SafeResourceUrl): void;
    addSvgIconLiteral(key: string, literal: SafeHtml): void;
    /** String to SVG */
    _textToSvg(str: string): SVGElement;
    private _cacheSvgIcon;
    getSvg(key: string): SvgIcon;
    /**
     * Set default className for `ly-icon`
     * @param className class name
     * @param prefix Class prefix,
     * For example if you use FontAwesome your prefix would be `fa-`,
     * then in the template it is no longer necessary to use the prefix
     * Example: `<ly-icon fontIcon="alarm">`
     */
    setDefaultClass(className?: string, prefix?: string): void;
    /**
     * Register new font class alias
     * demo:
     * For FontAwesome
     * registerFontClass({
     *   key: 'fa',
     *   class: 'fa'
     *   prefix: 'fa-'
     * })
     */
    registerFontClass(opt: FontClassOptions): void;
    getFontClass(key: string): FontClassOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyIconService, [null, null, { optional: true; }, null]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImljb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEx5VGhlbWUyIH0gZnJvbSAnQGFseWxlL3VpJztcbmltcG9ydCB7IFNhZmVIdG1sLCBEb21TYW5pdGl6ZXIsIFNhZmVSZXNvdXJjZVVybCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuZXhwb3J0IGludGVyZmFjZSBGb250Q2xhc3NPcHRpb25zIHtcbiAgICBrZXk6IHN0cmluZztcbiAgICAvKiogQ2xhc3MgbmFtZSAqL1xuICAgIGNsYXNzPzogc3RyaW5nO1xuICAgIC8qKiBGcmVmaXggY2xhc3MgKi9cbiAgICBwcmVmaXg/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFN2Z0ljb24ge1xuICAgIG9icz86IE9ic2VydmFibGU8U1ZHRWxlbWVudD47XG4gICAgc3ZnPzogU1ZHRWxlbWVudDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5SWNvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgaHR0cDtcbiAgICBwcml2YXRlIF9zYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBfZG9jdW1lbnQ7XG4gICAgcHJpdmF0ZSB0aGVtZTtcbiAgICBwcml2YXRlIF9kZWZhdWx0Q2xhc3M/O1xuICAgIHByaXZhdGUgX2RlZmF1bHRDbGFzc1ByZWZpeD87XG4gICAgcHJpdmF0ZSBzdmdNYXA7XG4gICAgcHJpdmF0ZSBfZm9udENsYXNzZXM7XG4gICAgLyoqXG4gICAgICogU3R5bGVzXG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICBzdmc6IHN0cmluZztcbiAgICB9LCBcInN2Z1wiPjtcbiAgICByZWFkb25seSBkZWZhdWx0U3ZnSWNvbjogc3RyaW5nO1xuICAgIGdldCBkZWZhdWx0Q2xhc3MoKTogc3RyaW5nO1xuICAgIGdldCBkZWZhdWx0Q2xhc3NQcmVmaXgoKTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQsIF9zYW5pdGl6ZXI6IERvbVNhbml0aXplciwgX2RvY3VtZW50OiBhbnksIHRoZW1lOiBMeVRoZW1lMik7XG4gICAgc2V0U3ZnKGtleTogc3RyaW5nLCB1cmw6IFNhZmVSZXNvdXJjZVVybCk6IHZvaWQ7XG4gICAgYWRkU3ZnSWNvbkxpdGVyYWwoa2V5OiBzdHJpbmcsIGxpdGVyYWw6IFNhZmVIdG1sKTogdm9pZDtcbiAgICAvKiogU3RyaW5nIHRvIFNWRyAqL1xuICAgIF90ZXh0VG9Tdmcoc3RyOiBzdHJpbmcpOiBTVkdFbGVtZW50O1xuICAgIHByaXZhdGUgX2NhY2hlU3ZnSWNvbjtcbiAgICBnZXRTdmcoa2V5OiBzdHJpbmcpOiBTdmdJY29uO1xuICAgIC8qKlxuICAgICAqIFNldCBkZWZhdWx0IGNsYXNzTmFtZSBmb3IgYGx5LWljb25gXG4gICAgICogQHBhcmFtIGNsYXNzTmFtZSBjbGFzcyBuYW1lXG4gICAgICogQHBhcmFtIHByZWZpeCBDbGFzcyBwcmVmaXgsXG4gICAgICogRm9yIGV4YW1wbGUgaWYgeW91IHVzZSBGb250QXdlc29tZSB5b3VyIHByZWZpeCB3b3VsZCBiZSBgZmEtYCxcbiAgICAgKiB0aGVuIGluIHRoZSB0ZW1wbGF0ZSBpdCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5IHRvIHVzZSB0aGUgcHJlZml4XG4gICAgICogRXhhbXBsZTogYDxseS1pY29uIGZvbnRJY29uPVwiYWxhcm1cIj5gXG4gICAgICovXG4gICAgc2V0RGVmYXVsdENsYXNzKGNsYXNzTmFtZT86IHN0cmluZywgcHJlZml4Pzogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBuZXcgZm9udCBjbGFzcyBhbGlhc1xuICAgICAqIGRlbW86XG4gICAgICogRm9yIEZvbnRBd2Vzb21lXG4gICAgICogcmVnaXN0ZXJGb250Q2xhc3Moe1xuICAgICAqICAga2V5OiAnZmEnLFxuICAgICAqICAgY2xhc3M6ICdmYSdcbiAgICAgKiAgIHByZWZpeDogJ2ZhLSdcbiAgICAgKiB9KVxuICAgICAqL1xuICAgIHJlZ2lzdGVyRm9udENsYXNzKG9wdDogRm9udENsYXNzT3B0aW9ucyk6IHZvaWQ7XG4gICAgZ2V0Rm9udENsYXNzKGtleTogc3RyaW5nKTogRm9udENsYXNzT3B0aW9ucztcbn1cbiJdfQ==