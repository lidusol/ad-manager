import { ElementRef, NgZone, OnDestroy } from '@angular/core';
import { WithStyles, StyleRenderer } from '@alyle/ui';
import { LyImageCropper } from './image-cropper';
/**
 * @dynamic
 */
import * as ɵngcc0 from '@angular/core';
export declare class LyCropperArea implements WithStyles, OnDestroy {
    readonly sRenderer: StyleRenderer;
    readonly _elementRef: ElementRef;
    private _ngZone;
    readonly _cropper: LyImageCropper;
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        imgContainer: string;
        overlay: string;
        area: string;
        resizer: string;
        defaultContent: string;
    }, "root" | "imgContainer" | "overlay" | "area" | "resizer" | "defaultContent">;
    private _isSliding;
    /** Keeps track of the last pointer event that was captured by the crop area. */
    private _lastPointerEvent;
    private _startPointerEvent;
    private _currentWidth;
    private _currentHeight;
    private _startAreaRect;
    private _startImgRect;
    /** Used to subscribe to global move and end events */
    protected _document: Document;
    readonly _resizer?: ElementRef;
    set resizableArea(val: boolean);
    get resizableArea(): boolean;
    private _resizableArea;
    keepAspectRatio: boolean;
    round: boolean;
    constructor(sRenderer: StyleRenderer, _elementRef: ElementRef, _ngZone: NgZone, _cropper: LyImageCropper, _document: any);
    ngOnDestroy(): void;
    private _addResizableArea;
    private _removeResizableArea;
    private _pointerDown;
    private _pointerMove;
    /** Called when the user has lifted their pointer. */
    private _pointerUp;
    /** Called when the window has lost focus. */
    private _windowBlur;
    private _bindGlobalEvents;
    /** Removes any global event listeners that we may have added. */
    private _removeGlobalEvents;
    /** Use defaultView of injected document if available or fallback to global window reference */
    private _getWindow;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyCropperArea, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyCropperArea, "ly-cropper-area", ["lyCropperArea"], { "resizableArea": "resizableArea"; "keepAspectRatio": "keepAspectRatio"; "round": "round"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtY3JvcHBlci1hcmVhLmQudHMiLCJzb3VyY2VzIjpbImltYWdlLWNyb3BwZXItYXJlYS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV2l0aFN0eWxlcywgU3R5bGVSZW5kZXJlciB9IGZyb20gJ0BhbHlsZS91aSc7XG5pbXBvcnQgeyBMeUltYWdlQ3JvcHBlciB9IGZyb20gJy4vaW1hZ2UtY3JvcHBlcic7XG4vKipcbiAqIEBkeW5hbWljXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5Q3JvcHBlckFyZWEgaW1wbGVtZW50cyBXaXRoU3R5bGVzLCBPbkRlc3Ryb3kge1xuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcjtcbiAgICByZWFkb25seSBfZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9uZ1pvbmU7XG4gICAgcmVhZG9ubHkgX2Nyb3BwZXI6IEx5SW1hZ2VDcm9wcGVyO1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkbmFtZTogc3RyaW5nO1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgcm9vdDogc3RyaW5nO1xuICAgICAgICBpbWdDb250YWluZXI6IHN0cmluZztcbiAgICAgICAgb3ZlcmxheTogc3RyaW5nO1xuICAgICAgICBhcmVhOiBzdHJpbmc7XG4gICAgICAgIHJlc2l6ZXI6IHN0cmluZztcbiAgICAgICAgZGVmYXVsdENvbnRlbnQ6IHN0cmluZztcbiAgICB9LCBcInJvb3RcIiB8IFwiaW1nQ29udGFpbmVyXCIgfCBcIm92ZXJsYXlcIiB8IFwiYXJlYVwiIHwgXCJyZXNpemVyXCIgfCBcImRlZmF1bHRDb250ZW50XCI+O1xuICAgIHByaXZhdGUgX2lzU2xpZGluZztcbiAgICAvKiogS2VlcHMgdHJhY2sgb2YgdGhlIGxhc3QgcG9pbnRlciBldmVudCB0aGF0IHdhcyBjYXB0dXJlZCBieSB0aGUgY3JvcCBhcmVhLiAqL1xuICAgIHByaXZhdGUgX2xhc3RQb2ludGVyRXZlbnQ7XG4gICAgcHJpdmF0ZSBfc3RhcnRQb2ludGVyRXZlbnQ7XG4gICAgcHJpdmF0ZSBfY3VycmVudFdpZHRoO1xuICAgIHByaXZhdGUgX2N1cnJlbnRIZWlnaHQ7XG4gICAgcHJpdmF0ZSBfc3RhcnRBcmVhUmVjdDtcbiAgICBwcml2YXRlIF9zdGFydEltZ1JlY3Q7XG4gICAgLyoqIFVzZWQgdG8gc3Vic2NyaWJlIHRvIGdsb2JhbCBtb3ZlIGFuZCBlbmQgZXZlbnRzICovXG4gICAgcHJvdGVjdGVkIF9kb2N1bWVudDogRG9jdW1lbnQ7XG4gICAgcmVhZG9ubHkgX3Jlc2l6ZXI/OiBFbGVtZW50UmVmO1xuICAgIHNldCByZXNpemFibGVBcmVhKHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IHJlc2l6YWJsZUFyZWEoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9yZXNpemFibGVBcmVhO1xuICAgIGtlZXBBc3BlY3RSYXRpbzogYm9vbGVhbjtcbiAgICByb3VuZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihzUmVuZGVyZXI6IFN0eWxlUmVuZGVyZXIsIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBfbmdab25lOiBOZ1pvbmUsIF9jcm9wcGVyOiBMeUltYWdlQ3JvcHBlciwgX2RvY3VtZW50OiBhbnkpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfYWRkUmVzaXphYmxlQXJlYTtcbiAgICBwcml2YXRlIF9yZW1vdmVSZXNpemFibGVBcmVhO1xuICAgIHByaXZhdGUgX3BvaW50ZXJEb3duO1xuICAgIHByaXZhdGUgX3BvaW50ZXJNb3ZlO1xuICAgIC8qKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBoYXMgbGlmdGVkIHRoZWlyIHBvaW50ZXIuICovXG4gICAgcHJpdmF0ZSBfcG9pbnRlclVwO1xuICAgIC8qKiBDYWxsZWQgd2hlbiB0aGUgd2luZG93IGhhcyBsb3N0IGZvY3VzLiAqL1xuICAgIHByaXZhdGUgX3dpbmRvd0JsdXI7XG4gICAgcHJpdmF0ZSBfYmluZEdsb2JhbEV2ZW50cztcbiAgICAvKiogUmVtb3ZlcyBhbnkgZ2xvYmFsIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlIG1heSBoYXZlIGFkZGVkLiAqL1xuICAgIHByaXZhdGUgX3JlbW92ZUdsb2JhbEV2ZW50cztcbiAgICAvKiogVXNlIGRlZmF1bHRWaWV3IG9mIGluamVjdGVkIGRvY3VtZW50IGlmIGF2YWlsYWJsZSBvciBmYWxsYmFjayB0byBnbG9iYWwgd2luZG93IHJlZmVyZW5jZSAqL1xuICAgIHByaXZhdGUgX2dldFdpbmRvdztcbn1cbiJdfQ==