import { ElementRef, NgZone, OnInit, Renderer2, QueryList, AfterContentInit, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { LyFocusState, LyRippleService, LyTheme2, ThemeVariables, StyleCollection, LyClasses, StyleTemplate, ThemeRef } from '@alyle/ui';
import { LyAvatar } from '@alyle/ui/avatar';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export interface LyListTheme {
    /** Styles for List Component */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
}
export interface LyListVariables {
    list?: LyListTheme;
}
export declare const STYLES: (theme: ThemeVariables & LyListVariables, ref: ThemeRef) => {
    $name: string;
    $priority: number;
    root: () => (className: string) => string;
    listItem: () => (className: string) => string;
    onFocusByKeyboard: any;
    listItemContent: (className: string) => string;
    oneLine: (className: string) => string;
    twoLine: () => (className: string) => string;
    actionListItem: (className: string) => string;
    lines: (className: string) => string;
    listItemWithIcon: () => (className: string) => string;
    twoLineWithIcon: () => (className: string) => string;
};
/** List container */
export declare class LyList {
    private theme;
    static readonly и = "LyList";
    /** @docs-private */
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        listItem: string;
        onFocusByKeyboard: string;
        listItemContent: string;
        oneLine: string;
        twoLine: string;
        actionListItem: string;
        lines: string;
        listItemWithIcon: string;
        twoLineWithIcon: string;
    }, "root" | "listItem" | "onFocusByKeyboard" | "listItemContent" | "oneLine" | "twoLine" | "actionListItem" | "lines" | "listItemWithIcon" | "twoLineWithIcon">;
    constructor(theme: LyTheme2);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyList, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyList, "ly-list", ["lyList"], {}, {}, never>;
}
/** @docs-private */
export declare class LyListItemBase {
    _theme: LyTheme2;
    _ngZone: NgZone;
    _platform: Platform;
    constructor(_theme: LyTheme2, _ngZone: NgZone, _platform: Platform);
}
/** @docs-private */
export declare const LyListItemMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/build-common-behaviors").CanStyleUpdater> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/bg").CanBg> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/color").CanColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/raised").CanRaised> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/alyle-ui").CanDisable> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/outlined").CanOutlined> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/elevation").CanElevation> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/shadow-color").CanShadowColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/disable-ripple").CanDisableRipple> & typeof LyListItemBase;
/** List Item */
export declare class LyListItem extends LyListItemMixinBase implements OnInit, AfterContentInit, OnDestroy {
    private _el;
    private _renderer;
    _rippleService: LyRippleService;
    private _focusState;
    private _list;
    private _cd;
    /** @docs-private */
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        listItem: string;
        onFocusByKeyboard: string;
        listItemContent: string;
        oneLine: string;
        twoLine: string;
        actionListItem: string;
        lines: string;
        listItemWithIcon: string;
        twoLineWithIcon: string;
    }, "root" | "listItem" | "onFocusByKeyboard" | "listItemContent" | "oneLine" | "twoLine" | "actionListItem" | "lines" | "listItemWithIcon" | "twoLineWithIcon">;
    readonly _isBrowser: boolean;
    private _isActionListItem;
    private _onFocusByKeyboardState;
    _rippleContainer: ElementRef;
    _lines: QueryList<LyLine>;
    _icon: LyListIcon & {};
    _avatar: LyAvatar;
    get _listItemClasses(): string[];
    /** @docs-private */
    set isActionListItem(val: any);
    get isActionListItem(): any;
    constructor(_el: ElementRef, _renderer: Renderer2, theme: LyTheme2, ngZone: NgZone, _rippleService: LyRippleService, _focusState: LyFocusState, _list: LyList, _cd: ChangeDetectorRef, _platform: Platform);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyListItem, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyListItem, "ly-list-item, a[ly-list-item], button[ly-list-item]", ["lyListItem"], { "bg": "bg"; "color": "color"; "raised": "raised"; "disabled": "disabled"; "outlined": "outlined"; "elevation": "elevation"; "shadowColor": "shadowColor"; "disableRipple": "disableRipple"; "isActionListItem": "ly-list-item"; }, {}, ["_icon", "_avatar", "_lines"], ["*", "[ly-line]"]>;
}
export declare class LyListIcon implements OnInit {
    private _theme;
    private _el;
    private _renderer;
    private _disablePadding;
    private _disablePaddingClass;
    /** Disable extra padding */
    set disablePadding(val: any);
    get disablePadding(): any;
    constructor(_theme: LyTheme2, _el: ElementRef, _renderer: Renderer2);
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyListIcon, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyListIcon, "[ly-list-icon]", never, { "disablePadding": "disablePadding"; }, {}, never>;
}
export declare class LyLine {
    private _theme;
    private _el;
    private _renderer;
    constructor(_theme: LyTheme2, _el: ElementRef, _renderer: Renderer2);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyLine, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyLine, "[ly-line]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,