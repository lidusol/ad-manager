import { Renderer2, ElementRef, OnInit, OnDestroy } from '@angular/core';
import { LySlider } from './slider';
import { LyTick } from './tick';
import * as ɵngcc0 from '@angular/core';
export declare class LyMark implements OnInit, OnDestroy {
    private _slider;
    private _renderer;
    private _el;
    /** @docs-private */
    readonly classes: Pick<{
        $priority: string;
        root: string;
        track: string;
        bg: string;
        thumbContainer: string;
        thumbContent: string;
        thumb: string;
        thumbLabel: string;
        thumbLabelValue: string;
        horizontal: string;
        vertical: string;
        marked: string;
        mark: string;
        markActive: string;
        tick: string;
        tickActive: string;
        thumbVisible: string;
        thumbNotVisible: string;
        thumbContentFocused: string;
        sliding: string;
        disabled: string;
    }, "root" | "track" | "bg" | "thumbContainer" | "thumbContent" | "thumb" | "thumbLabel" | "thumbLabelValue" | "horizontal" | "vertical" | "marked" | "mark" | "markActive" | "tick" | "tickActive" | "thumbVisible" | "thumbNotVisible" | "thumbContentFocused" | "sliding" | "disabled">;
    private _markActiveClass?;
    _tick: LyTick;
    value: number;
    constructor(_slider: LySlider, _renderer: Renderer2, _el: ElementRef);
    ngOnInit(): void;
    private _updateMark;
    ngOnDestroy(): void;
    private _getHostElement;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyMark, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LyMark, "ly-mark", never, { "value": "value"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyay5kLnRzIiwic291cmNlcyI6WyJtYXJrLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeVNsaWRlciB9IGZyb20gJy4vc2xpZGVyJztcbmltcG9ydCB7IEx5VGljayB9IGZyb20gJy4vdGljayc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeU1hcmsgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfc2xpZGVyO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHByaXZhdGUgX2VsO1xuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgcmVhZG9ubHkgY2xhc3NlczogUGljazx7XG4gICAgICAgICRwcmlvcml0eTogc3RyaW5nO1xuICAgICAgICByb290OiBzdHJpbmc7XG4gICAgICAgIHRyYWNrOiBzdHJpbmc7XG4gICAgICAgIGJnOiBzdHJpbmc7XG4gICAgICAgIHRodW1iQ29udGFpbmVyOiBzdHJpbmc7XG4gICAgICAgIHRodW1iQ29udGVudDogc3RyaW5nO1xuICAgICAgICB0aHVtYjogc3RyaW5nO1xuICAgICAgICB0aHVtYkxhYmVsOiBzdHJpbmc7XG4gICAgICAgIHRodW1iTGFiZWxWYWx1ZTogc3RyaW5nO1xuICAgICAgICBob3Jpem9udGFsOiBzdHJpbmc7XG4gICAgICAgIHZlcnRpY2FsOiBzdHJpbmc7XG4gICAgICAgIG1hcmtlZDogc3RyaW5nO1xuICAgICAgICBtYXJrOiBzdHJpbmc7XG4gICAgICAgIG1hcmtBY3RpdmU6IHN0cmluZztcbiAgICAgICAgdGljazogc3RyaW5nO1xuICAgICAgICB0aWNrQWN0aXZlOiBzdHJpbmc7XG4gICAgICAgIHRodW1iVmlzaWJsZTogc3RyaW5nO1xuICAgICAgICB0aHVtYk5vdFZpc2libGU6IHN0cmluZztcbiAgICAgICAgdGh1bWJDb250ZW50Rm9jdXNlZDogc3RyaW5nO1xuICAgICAgICBzbGlkaW5nOiBzdHJpbmc7XG4gICAgICAgIGRpc2FibGVkOiBzdHJpbmc7XG4gICAgfSwgXCJyb290XCIgfCBcInRyYWNrXCIgfCBcImJnXCIgfCBcInRodW1iQ29udGFpbmVyXCIgfCBcInRodW1iQ29udGVudFwiIHwgXCJ0aHVtYlwiIHwgXCJ0aHVtYkxhYmVsXCIgfCBcInRodW1iTGFiZWxWYWx1ZVwiIHwgXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCIgfCBcIm1hcmtlZFwiIHwgXCJtYXJrXCIgfCBcIm1hcmtBY3RpdmVcIiB8IFwidGlja1wiIHwgXCJ0aWNrQWN0aXZlXCIgfCBcInRodW1iVmlzaWJsZVwiIHwgXCJ0aHVtYk5vdFZpc2libGVcIiB8IFwidGh1bWJDb250ZW50Rm9jdXNlZFwiIHwgXCJzbGlkaW5nXCIgfCBcImRpc2FibGVkXCI+O1xuICAgIHByaXZhdGUgX21hcmtBY3RpdmVDbGFzcz87XG4gICAgX3RpY2s6IEx5VGljaztcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKF9zbGlkZXI6IEx5U2xpZGVyLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2VsOiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgX3VwZGF0ZU1hcms7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIF9nZXRIb3N0RWxlbWVudDtcbn1cbiJdfQ==