import { TemplateRef, EventEmitter, OnDestroy } from '@angular/core';
import { LyTheme2, LyOverlay, ThemeVariables, XPosition, YPosition, StyleTemplate, StyleCollection } from '@alyle/ui';
import { LySnackBarService } from './snack-bar.service';
import { LySnackBarRef } from './snack-bar-ref';
import * as ɵngcc0 from '@angular/core';
export interface LySnackBarTheme {
    /** Styles for SnackBar Component */
    root?: StyleTemplate | StyleCollection;
}
export interface LySnackBarVariables {
    snackBar?: LySnackBarTheme;
}
export declare const STYLES: (theme: ThemeVariables & LySnackBarVariables) => {
    $priority: number;
    root: (className: string) => string;
};
/** Event that is emitted when a snack bar is dismissed. */
export interface LySnackBarDismiss {
    /** Whether the snack bar was dismissed using the action fn. */
    dismissedByAction: boolean;
}
export declare class LySnackBar implements OnDestroy {
    private _templateRef;
    private _theme;
    private _overlay;
    private _snackBarService;
    readonly classes: Pick<{
        $priority: string;
        root: string;
    }, "root">;
    duration: number | 'Infinity';
    horizontalPosition: 'center' | XPosition;
    verticalPosition: YPosition;
    afterDismissed: EventEmitter<LySnackBarDismiss>;
    constructor(_templateRef: TemplateRef<any>, _theme: LyTheme2, _overlay: LyOverlay, _snackBarService: LySnackBarService);
    ngOnDestroy(): void;
    /**
     * Open a LySnackBar template
     * @param snackBarData Data to be passed to the snack-bark.
     */
    open(snackBarData?: any): LySnackBarRef;
    /** Dismiss snackBar */
    dismiss(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LySnackBar, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LySnackBar, "ng-template[ly-snack-bar]", ["lySnackBar"], { "duration": "duration"; "horizontalPosition": "horizontalPosition"; "verticalPosition": "verticalPosition"; }, { "afterDismissed": "afterDismissed"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2stYmFyLmQudHMiLCJzb3VyY2VzIjpbInNuYWNrLWJhci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeVRoZW1lMiwgTHlPdmVybGF5LCBUaGVtZVZhcmlhYmxlcywgWFBvc2l0aW9uLCBZUG9zaXRpb24sIFN0eWxlVGVtcGxhdGUsIFN0eWxlQ29sbGVjdGlvbiB9IGZyb20gJ0BhbHlsZS91aSc7XG5pbXBvcnQgeyBMeVNuYWNrQmFyU2VydmljZSB9IGZyb20gJy4vc25hY2stYmFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTHlTbmFja0JhclJlZiB9IGZyb20gJy4vc25hY2stYmFyLXJlZic7XG5leHBvcnQgaW50ZXJmYWNlIEx5U25hY2tCYXJUaGVtZSB7XG4gICAgLyoqIFN0eWxlcyBmb3IgU25hY2tCYXIgQ29tcG9uZW50ICovXG4gICAgcm9vdD86IFN0eWxlVGVtcGxhdGUgfCBTdHlsZUNvbGxlY3Rpb247XG59XG5leHBvcnQgaW50ZXJmYWNlIEx5U25hY2tCYXJWYXJpYWJsZXMge1xuICAgIHNuYWNrQmFyPzogTHlTbmFja0JhclRoZW1lO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgU1RZTEVTOiAodGhlbWU6IFRoZW1lVmFyaWFibGVzICYgTHlTbmFja0JhclZhcmlhYmxlcykgPT4ge1xuICAgICRwcmlvcml0eTogbnVtYmVyO1xuICAgIHJvb3Q6IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xufTtcbi8qKiBFdmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBhIHNuYWNrIGJhciBpcyBkaXNtaXNzZWQuICovXG5leHBvcnQgaW50ZXJmYWNlIEx5U25hY2tCYXJEaXNtaXNzIHtcbiAgICAvKiogV2hldGhlciB0aGUgc25hY2sgYmFyIHdhcyBkaXNtaXNzZWQgdXNpbmcgdGhlIGFjdGlvbiBmbi4gKi9cbiAgICBkaXNtaXNzZWRCeUFjdGlvbjogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5U25hY2tCYXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX3RlbXBsYXRlUmVmO1xuICAgIHByaXZhdGUgX3RoZW1lO1xuICAgIHByaXZhdGUgX292ZXJsYXk7XG4gICAgcHJpdmF0ZSBfc25hY2tCYXJTZXJ2aWNlO1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgcm9vdDogc3RyaW5nO1xuICAgIH0sIFwicm9vdFwiPjtcbiAgICBkdXJhdGlvbjogbnVtYmVyIHwgJ0luZmluaXR5JztcbiAgICBob3Jpem9udGFsUG9zaXRpb246ICdjZW50ZXInIHwgWFBvc2l0aW9uO1xuICAgIHZlcnRpY2FsUG9zaXRpb246IFlQb3NpdGlvbjtcbiAgICBhZnRlckRpc21pc3NlZDogRXZlbnRFbWl0dGVyPEx5U25hY2tCYXJEaXNtaXNzPjtcbiAgICBjb25zdHJ1Y3RvcihfdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sIF90aGVtZTogTHlUaGVtZTIsIF9vdmVybGF5OiBMeU92ZXJsYXksIF9zbmFja0JhclNlcnZpY2U6IEx5U25hY2tCYXJTZXJ2aWNlKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wZW4gYSBMeVNuYWNrQmFyIHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHNuYWNrQmFyRGF0YSBEYXRhIHRvIGJlIHBhc3NlZCB0byB0aGUgc25hY2stYmFyay5cbiAgICAgKi9cbiAgICBvcGVuKHNuYWNrQmFyRGF0YT86IGFueSk6IEx5U25hY2tCYXJSZWY7XG4gICAgLyoqIERpc21pc3Mgc25hY2tCYXIgKi9cbiAgICBkaXNtaXNzKCk6IHZvaWQ7XG59XG4iXX0=