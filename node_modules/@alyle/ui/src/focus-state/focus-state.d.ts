import { ElementRef, NgZone, OnDestroy } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export declare enum FocusStatus {
    /**mouse and/or touch*/
    DEFAULT = "default",
    /** keyboard and/or program*/
    KEYBOARD = "keyboard"
}
export interface FocusStateInfo {
    unlisten: () => void;
    subject: Subject<FocusState>;
}
export declare type FocusState = 'keyboard' | 'mouse' | null;
export declare class LyFocusState implements OnDestroy {
    private _ngZone;
    private _platform;
    private _elementMap;
    private _currentEvent;
    private _removeGlobalListeners;
    private _count;
    constructor(_ngZone: NgZone, _platform: Platform);
    listen(element: HTMLElement | ElementRef<HTMLElement>, keyElement?: HTMLElement | ElementRef<HTMLElement>): Observable<FocusState> | null;
    focusElement(element: HTMLElement | ElementRef<HTMLElement>, origin: FocusState, options: FocusOptions): void;
    unlisten(element: HTMLElement | ElementRef<HTMLElement>): void;
    private _on;
    private _addGlobalListeners;
    private _incrementCount;
    private _decrementCount;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyFocusState, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtc3RhdGUuZC50cyIsInNvdXJjZXMiOlsiZm9jdXMtc3RhdGUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmV4cG9ydCBkZWNsYXJlIGVudW0gRm9jdXNTdGF0dXMge1xuICAgIC8qKm1vdXNlIGFuZC9vciB0b3VjaCovXG4gICAgREVGQVVMVCA9IFwiZGVmYXVsdFwiLFxuICAgIC8qKiBrZXlib2FyZCBhbmQvb3IgcHJvZ3JhbSovXG4gICAgS0VZQk9BUkQgPSBcImtleWJvYXJkXCJcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRm9jdXNTdGF0ZUluZm8ge1xuICAgIHVubGlzdGVuOiAoKSA9PiB2b2lkO1xuICAgIHN1YmplY3Q6IFN1YmplY3Q8Rm9jdXNTdGF0ZT47XG59XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZvY3VzU3RhdGUgPSAna2V5Ym9hcmQnIHwgJ21vdXNlJyB8IG51bGw7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeUZvY3VzU3RhdGUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX25nWm9uZTtcbiAgICBwcml2YXRlIF9wbGF0Zm9ybTtcbiAgICBwcml2YXRlIF9lbGVtZW50TWFwO1xuICAgIHByaXZhdGUgX2N1cnJlbnRFdmVudDtcbiAgICBwcml2YXRlIF9yZW1vdmVHbG9iYWxMaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBfY291bnQ7XG4gICAgY29uc3RydWN0b3IoX25nWm9uZTogTmdab25lLCBfcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBsaXN0ZW4oZWxlbWVudDogSFRNTEVsZW1lbnQgfCBFbGVtZW50UmVmPEhUTUxFbGVtZW50Piwga2V5RWxlbWVudD86IEhUTUxFbGVtZW50IHwgRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pOiBPYnNlcnZhYmxlPEZvY3VzU3RhdGU+IHwgbnVsbDtcbiAgICBmb2N1c0VsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQgfCBFbGVtZW50UmVmPEhUTUxFbGVtZW50Piwgb3JpZ2luOiBGb2N1c1N0YXRlLCBvcHRpb25zOiBGb2N1c09wdGlvbnMpOiB2b2lkO1xuICAgIHVubGlzdGVuKGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pOiB2b2lkO1xuICAgIHByaXZhdGUgX29uO1xuICAgIHByaXZhdGUgX2FkZEdsb2JhbExpc3RlbmVycztcbiAgICBwcml2YXRlIF9pbmNyZW1lbnRDb3VudDtcbiAgICBwcml2YXRlIF9kZWNyZW1lbnRDb3VudDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19