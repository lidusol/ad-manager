import { TemplateRef, ViewContainerRef, OnDestroy, ElementRef } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export interface KeyAttribute {
    [key: string]: any;
}
export declare class NgTranscludeDirective implements OnDestroy {
    readonly vcr: ViewContainerRef;
    private _platform;
    private _ngTransclude;
    /**
     * Time in ms it takes before it is destroyed
     */
    timeout: number;
    _timeoutId: number;
    set ngTransclude(templateRef: TemplateRef<any>);
    get getNgTransclude(): TemplateRef<any>;
    constructor(vcr: ViewContainerRef, _platform: Platform);
    clear(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgTranscludeDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgTranscludeDirective, "[ngTransclude]", ["ngTransclude"], { "ngTransclude": "ngTransclude"; "timeout": "timeout"; }, {}, never>;
}
export declare class NgTranscludeModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NgTranscludeModule, [typeof NgTranscludeDirective], never, [typeof NgTranscludeDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NgTranscludeModule>;
}
/**
 * @ignore
 */
export declare function getNativeElement(element: HTMLElement | ElementRef<HTMLElement>): HTMLElement;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmQudHMiLCJzb3VyY2VzIjpbImNvbW1vbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmV4cG9ydCBpbnRlcmZhY2UgS2V5QXR0cmlidXRlIHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHJlYWRvbmx5IHZjcjogVmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIF9wbGF0Zm9ybTtcbiAgICBwcml2YXRlIF9uZ1RyYW5zY2x1ZGU7XG4gICAgLyoqXG4gICAgICogVGltZSBpbiBtcyBpdCB0YWtlcyBiZWZvcmUgaXQgaXMgZGVzdHJveWVkXG4gICAgICovXG4gICAgdGltZW91dDogbnVtYmVyO1xuICAgIF90aW1lb3V0SWQ6IG51bWJlcjtcbiAgICBzZXQgbmdUcmFuc2NsdWRlKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KTtcbiAgICBnZXQgZ2V0TmdUcmFuc2NsdWRlKCk6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY29uc3RydWN0b3IodmNyOiBWaWV3Q29udGFpbmVyUmVmLCBfcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ1RyYW5zY2x1ZGVNb2R1bGUge1xufVxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGdldE5hdGl2ZUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQgfCBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pik6IEhUTUxFbGVtZW50O1xuIl19