import { OnChanges, ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { LyTheme2 } from './theme2.service';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export declare class LyPaperBase {
    _theme: LyTheme2;
    _ngZone: NgZone;
    _platform: Platform;
    constructor(_theme: LyTheme2, _ngZone: NgZone, _platform: Platform);
}
export declare const LyPaperMixinBase: import("../common/constructor").Constructor<import("../common/build-common-behaviors").CanStyleUpdater> & import("../common/constructor").Constructor<import("../common/bg").CanBg> & import("../common/constructor").Constructor<import("../common/color").CanColor> & import("../common/constructor").Constructor<import("../common/raised").CanRaised> & import("../common/constructor").Constructor<import("../common/outlined").CanOutlined> & import("../common/constructor").Constructor<import("../common/elevation").CanElevation> & import("../common/constructor").Constructor<import("../common/shadow-color").CanShadowColor> & import("../common/constructor").Constructor<import("../common/disable-ripple").CanDisableRipple> & typeof LyPaperBase;
export declare class LyPaper extends LyPaperMixinBase implements OnChanges, OnInit, OnDestroy {
    private _el;
    private _renderer;
    _hasText: boolean;
    set hasText(val: any);
    get hasText(): any;
    constructor(theme: LyTheme2, ngZone: NgZone, _el: ElementRef, _renderer: Renderer2, platform: Platform);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyPaper, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyPaper, "ly-paper, [ly-paper], [ly-text]", never, { "bg": "bg"; "color": "color"; "raised": "raised"; "outlined": "outlined"; "elevation": "elevation"; "shadowColor": "shadowColor"; "disableRipple": "disableRipple"; "hasText": "ly-text"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFwZXIuZC50cyIsInNvdXJjZXMiOlsicGFwZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIgfSBmcm9tICcuL3RoZW1lMi5zZXJ2aWNlJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5UGFwZXJCYXNlIHtcbiAgICBfdGhlbWU6IEx5VGhlbWUyO1xuICAgIF9uZ1pvbmU6IE5nWm9uZTtcbiAgICBfcGxhdGZvcm06IFBsYXRmb3JtO1xuICAgIGNvbnN0cnVjdG9yKF90aGVtZTogTHlUaGVtZTIsIF9uZ1pvbmU6IE5nWm9uZSwgX3BsYXRmb3JtOiBQbGF0Zm9ybSk7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBMeVBhcGVyTWl4aW5CYXNlOiBpbXBvcnQoXCIuLi9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiLi4vY29tbW9uL2J1aWxkLWNvbW1vbi1iZWhhdmlvcnNcIikuQ2FuU3R5bGVVcGRhdGVyPiAmIGltcG9ydChcIi4uL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCIuLi9jb21tb24vYmdcIikuQ2FuQmc+ICYgaW1wb3J0KFwiLi4vY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIi4uL2NvbW1vbi9jb2xvclwiKS5DYW5Db2xvcj4gJiBpbXBvcnQoXCIuLi9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiLi4vY29tbW9uL3JhaXNlZFwiKS5DYW5SYWlzZWQ+ICYgaW1wb3J0KFwiLi4vY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIi4uL2NvbW1vbi9vdXRsaW5lZFwiKS5DYW5PdXRsaW5lZD4gJiBpbXBvcnQoXCIuLi9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiLi4vY29tbW9uL2VsZXZhdGlvblwiKS5DYW5FbGV2YXRpb24+ICYgaW1wb3J0KFwiLi4vY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIi4uL2NvbW1vbi9zaGFkb3ctY29sb3JcIikuQ2FuU2hhZG93Q29sb3I+ICYgaW1wb3J0KFwiLi4vY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIi4uL2NvbW1vbi9kaXNhYmxlLXJpcHBsZVwiKS5DYW5EaXNhYmxlUmlwcGxlPiAmIHR5cGVvZiBMeVBhcGVyQmFzZTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5UGFwZXIgZXh0ZW5kcyBMeVBhcGVyTWl4aW5CYXNlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgX2hhc1RleHQ6IGJvb2xlYW47XG4gICAgc2V0IGhhc1RleHQodmFsOiBhbnkpO1xuICAgIGdldCBoYXNUZXh0KCk6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih0aGVtZTogTHlUaGVtZTIsIG5nWm9uZTogTmdab25lLCBfZWw6IEVsZW1lbnRSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBwbGF0Zm9ybTogUGxhdGZvcm0pO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19