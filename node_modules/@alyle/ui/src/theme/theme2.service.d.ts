import { Renderer2, NgZone } from '@angular/core';
import { ThemeVariables, ThemeConfig } from './theme-config';
import { CoreTheme } from './core-theme.service';
import { DataStyle } from '../theme.service';
import { StyleGroup, TypeStyle, StyleContainer, Styles, StyleDeclarationsBlock, LyClasses, LyStyles } from './style';
import { StyleTemplate, StringIdGenerator } from '../parse';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export declare const keyframesUniqueId: StringIdGenerator;
export declare class StylesInDocument {
    styles: {
        [themeName: string]: Map<string | Styles, HTMLStyleElement>;
    };
    styleContainers: Map<number, HTMLElement>;
    styleElementGlobalMap: Map<string | ((T: any, theme: any) => StyleGroup) | StyleGroup | ((T: any, theme: any) => import("./style").LyStyleGroup), HTMLStyleElement>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StylesInDocument, never>;
}
export declare class LyTheme2 {
    private stylesInDocument;
    core: CoreTheme;
    private _document;
    private _ngZone;
    private _platform;
    /**
     * @deprecated use `themeVariables` instead
     */
    config: ThemeVariables;
    _styleMap: Map<string, DataStyle>;
    initialTheme: string;
    elements: Map<string | Styles, HTMLStyleElement>;
    _elementsMap: Map<any, HTMLStyleElement>;
    /** Event emitted when the direction has changed. */
    private _directionChanged;
    get directionChanged(): import("rxjs").Observable<void>;
    /** Get Theme Variables */
    get variables(): ThemeVariables;
    private themeMap;
    /** ssr or hmr */
    private isDevOrServer;
    constructor(stylesInDocument: StylesInDocument, core: CoreTheme, themeName: any, themeConfig: ThemeConfig[] | ThemeConfig, globalVariables: ThemeConfig, _document: any, _ngZone: NgZone, _platform: Platform);
    setUpTheme(themeName: string): void;
    /**
     * Build multiple styles and render them in the DOM
     */
    renderStyleSheet<T>(styles: T & LyStyles): LyClasses<T>;
    renderStyle<THEME_VARIABLES>(id: string, style: (theme: THEME_VARIABLES, ref: ThemeRef) => StyleTemplate, priority?: number): string;
    renderStyle<THEME_VARIABLES>(style: (theme: THEME_VARIABLES, ref: ThemeRef) => StyleTemplate, priority?: number): string;
    /**
     * Add a new dynamic style, use only within @Input()
     * @param id Unique id
     * @param style Styles
     * @param el Element
     * @param instance The instance of this, this replaces the existing style with a new one when it changes
     * @param parentStyle Parent Style
     */
    addStyle(id: string, style?: StyleDeclarationsBlock, el?: any, instance?: string | null, priority?: number | null, parentStyle?: Styles): string;
    /**
     * Create basic style
     * @param style Styles.
     * Note: Use only with immutable variable.
     * @param priority Priority of style
     * @param parentStyle
     */
    style(style: StyleDeclarationsBlock, priority?: number | null, parentStyle?: Styles): string;
    private updateClassName;
    updateClass(element: any, renderer: Renderer2, newClass: string, oldClass?: string): string;
    /**
     * Change the current theme for another.
     * @param themeName theme name
     */
    setTheme(themeName: string): void;
    /** Toggle right-to-left/left-to-right */
    toggleDirection(): void;
    private _updateAllStyles;
    /**
     * Create a simple style
     * return className
     * @param id id of style
     * @param css style object or string
     * @param priority style priority(default: 0)
     */
    addSimpleStyle(id: string, css: StyleContainer | ((theme: any) => StyleContainer), priority?: number, parentStyle?: Styles): string;
    /**
     * Add new add a new style sheet
     * @param styles styles
     * @param priority priority for style
     */
    addStyleSheet<T>(styles: T & Styles, priority?: number): LyClasses<T>;
    /**
     * Check if a style exist
     * @param stylesOrId Style or Id of a style
     */
    existStyle(stylesOrId: string | Styles | StyleDeclarationsBlock): boolean;
    /**
     * return selectors if exists
     *
     * e.g.
     *
     * ```ts
     * {
     *   root: '.c'
     * }
     * ```
     * @param styles id
     */
    selectorsOf<T>(styles: T): LyClasses<T>;
    selectorOf(styles: string | StyleTemplate): string;
    /**
     * For internal use only
     * @docs-private
     */
    _createStyleContent2(styles: Styles | StyleDeclarationsBlock | ((theme: any, ref: ThemeRef) => StyleTemplate), id: string | null, priority: number | undefined | null, type: TypeStyle, forChangeTheme?: boolean, parentStyle?: Styles): any;
    private _createStyleContainer;
    private findNode;
    private _createElementStyle;
    requestAnimationFrame(fn: (...args: any[]) => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyTheme2, [null, null, null, { optional: true; }, { optional: true; }, null, null, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<LyTheme2>;
}
export declare function converterToCssKeyAndStyle(str: string, themeVariables: ThemeVariables): string;
export declare function capitalizeFirstLetter(str: string): string;
export interface ThemeRef extends Pick<LyTheme2, 'selectorsOf' | 'renderStyleSheet'> {
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidGhlbWUyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbmRlcmVyMiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaGVtZVZhcmlhYmxlcywgVGhlbWVDb25maWcgfSBmcm9tICcuL3RoZW1lLWNvbmZpZyc7XG5pbXBvcnQgeyBDb3JlVGhlbWUgfSBmcm9tICcuL2NvcmUtdGhlbWUuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhU3R5bGUgfSBmcm9tICcuLi90aGVtZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0eWxlR3JvdXAsIFR5cGVTdHlsZSwgU3R5bGVDb250YWluZXIsIFN0eWxlcywgU3R5bGVEZWNsYXJhdGlvbnNCbG9jaywgTHlDbGFzc2VzLCBMeVN0eWxlcyB9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IHsgU3R5bGVUZW1wbGF0ZSwgU3RyaW5nSWRHZW5lcmF0b3IgfSBmcm9tICcuLi9wYXJzZSc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBrZXlmcmFtZXNVbmlxdWVJZDogU3RyaW5nSWRHZW5lcmF0b3I7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdHlsZXNJbkRvY3VtZW50IHtcbiAgICBzdHlsZXM6IHtcbiAgICAgICAgW3RoZW1lTmFtZTogc3RyaW5nXTogTWFwPHN0cmluZyB8IFN0eWxlcywgSFRNTFN0eWxlRWxlbWVudD47XG4gICAgfTtcbiAgICBzdHlsZUNvbnRhaW5lcnM6IE1hcDxudW1iZXIsIEhUTUxFbGVtZW50PjtcbiAgICBzdHlsZUVsZW1lbnRHbG9iYWxNYXA6IE1hcDxzdHJpbmcgfCAoKFQ6IGFueSwgdGhlbWU6IGFueSkgPT4gU3R5bGVHcm91cCkgfCBTdHlsZUdyb3VwIHwgKChUOiBhbnksIHRoZW1lOiBhbnkpID0+IGltcG9ydChcIi4vc3R5bGVcIikuTHlTdHlsZUdyb3VwKSwgSFRNTFN0eWxlRWxlbWVudD47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeVRoZW1lMiB7XG4gICAgcHJpdmF0ZSBzdHlsZXNJbkRvY3VtZW50O1xuICAgIGNvcmU6IENvcmVUaGVtZTtcbiAgICBwcml2YXRlIF9kb2N1bWVudDtcbiAgICBwcml2YXRlIF9uZ1pvbmU7XG4gICAgcHJpdmF0ZSBfcGxhdGZvcm07XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIGB0aGVtZVZhcmlhYmxlc2AgaW5zdGVhZFxuICAgICAqL1xuICAgIGNvbmZpZzogVGhlbWVWYXJpYWJsZXM7XG4gICAgX3N0eWxlTWFwOiBNYXA8c3RyaW5nLCBEYXRhU3R5bGU+O1xuICAgIGluaXRpYWxUaGVtZTogc3RyaW5nO1xuICAgIGVsZW1lbnRzOiBNYXA8c3RyaW5nIHwgU3R5bGVzLCBIVE1MU3R5bGVFbGVtZW50PjtcbiAgICBfZWxlbWVudHNNYXA6IE1hcDxhbnksIEhUTUxTdHlsZUVsZW1lbnQ+O1xuICAgIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIGRpcmVjdGlvbiBoYXMgY2hhbmdlZC4gKi9cbiAgICBwcml2YXRlIF9kaXJlY3Rpb25DaGFuZ2VkO1xuICAgIGdldCBkaXJlY3Rpb25DaGFuZ2VkKCk6IGltcG9ydChcInJ4anNcIikuT2JzZXJ2YWJsZTx2b2lkPjtcbiAgICAvKiogR2V0IFRoZW1lIFZhcmlhYmxlcyAqL1xuICAgIGdldCB2YXJpYWJsZXMoKTogVGhlbWVWYXJpYWJsZXM7XG4gICAgcHJpdmF0ZSB0aGVtZU1hcDtcbiAgICAvKiogc3NyIG9yIGhtciAqL1xuICAgIHByaXZhdGUgaXNEZXZPclNlcnZlcjtcbiAgICBjb25zdHJ1Y3RvcihzdHlsZXNJbkRvY3VtZW50OiBTdHlsZXNJbkRvY3VtZW50LCBjb3JlOiBDb3JlVGhlbWUsIHRoZW1lTmFtZTogYW55LCB0aGVtZUNvbmZpZzogVGhlbWVDb25maWdbXSB8IFRoZW1lQ29uZmlnLCBnbG9iYWxWYXJpYWJsZXM6IFRoZW1lQ29uZmlnLCBfZG9jdW1lbnQ6IGFueSwgX25nWm9uZTogTmdab25lLCBfcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBzZXRVcFRoZW1lKHRoZW1lTmFtZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBCdWlsZCBtdWx0aXBsZSBzdHlsZXMgYW5kIHJlbmRlciB0aGVtIGluIHRoZSBET01cbiAgICAgKi9cbiAgICByZW5kZXJTdHlsZVNoZWV0PFQ+KHN0eWxlczogVCAmIEx5U3R5bGVzKTogTHlDbGFzc2VzPFQ+O1xuICAgIHJlbmRlclN0eWxlPFRIRU1FX1ZBUklBQkxFUz4oaWQ6IHN0cmluZywgc3R5bGU6ICh0aGVtZTogVEhFTUVfVkFSSUFCTEVTLCByZWY6IFRoZW1lUmVmKSA9PiBTdHlsZVRlbXBsYXRlLCBwcmlvcml0eT86IG51bWJlcik6IHN0cmluZztcbiAgICByZW5kZXJTdHlsZTxUSEVNRV9WQVJJQUJMRVM+KHN0eWxlOiAodGhlbWU6IFRIRU1FX1ZBUklBQkxFUywgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSwgcHJpb3JpdHk/OiBudW1iZXIpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IGR5bmFtaWMgc3R5bGUsIHVzZSBvbmx5IHdpdGhpbiBASW5wdXQoKVxuICAgICAqIEBwYXJhbSBpZCBVbmlxdWUgaWRcbiAgICAgKiBAcGFyYW0gc3R5bGUgU3R5bGVzXG4gICAgICogQHBhcmFtIGVsIEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2UgVGhlIGluc3RhbmNlIG9mIHRoaXMsIHRoaXMgcmVwbGFjZXMgdGhlIGV4aXN0aW5nIHN0eWxlIHdpdGggYSBuZXcgb25lIHdoZW4gaXQgY2hhbmdlc1xuICAgICAqIEBwYXJhbSBwYXJlbnRTdHlsZSBQYXJlbnQgU3R5bGVcbiAgICAgKi9cbiAgICBhZGRTdHlsZShpZDogc3RyaW5nLCBzdHlsZT86IFN0eWxlRGVjbGFyYXRpb25zQmxvY2ssIGVsPzogYW55LCBpbnN0YW5jZT86IHN0cmluZyB8IG51bGwsIHByaW9yaXR5PzogbnVtYmVyIHwgbnVsbCwgcGFyZW50U3R5bGU/OiBTdHlsZXMpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGJhc2ljIHN0eWxlXG4gICAgICogQHBhcmFtIHN0eWxlIFN0eWxlcy5cbiAgICAgKiBOb3RlOiBVc2Ugb25seSB3aXRoIGltbXV0YWJsZSB2YXJpYWJsZS5cbiAgICAgKiBAcGFyYW0gcHJpb3JpdHkgUHJpb3JpdHkgb2Ygc3R5bGVcbiAgICAgKiBAcGFyYW0gcGFyZW50U3R5bGVcbiAgICAgKi9cbiAgICBzdHlsZShzdHlsZTogU3R5bGVEZWNsYXJhdGlvbnNCbG9jaywgcHJpb3JpdHk/OiBudW1iZXIgfCBudWxsLCBwYXJlbnRTdHlsZT86IFN0eWxlcyk6IHN0cmluZztcbiAgICBwcml2YXRlIHVwZGF0ZUNsYXNzTmFtZTtcbiAgICB1cGRhdGVDbGFzcyhlbGVtZW50OiBhbnksIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG5ld0NsYXNzOiBzdHJpbmcsIG9sZENsYXNzPzogc3RyaW5nKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgY3VycmVudCB0aGVtZSBmb3IgYW5vdGhlci5cbiAgICAgKiBAcGFyYW0gdGhlbWVOYW1lIHRoZW1lIG5hbWVcbiAgICAgKi9cbiAgICBzZXRUaGVtZSh0aGVtZU5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqIFRvZ2dsZSByaWdodC10by1sZWZ0L2xlZnQtdG8tcmlnaHQgKi9cbiAgICB0b2dnbGVEaXJlY3Rpb24oKTogdm9pZDtcbiAgICBwcml2YXRlIF91cGRhdGVBbGxTdHlsZXM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2ltcGxlIHN0eWxlXG4gICAgICogcmV0dXJuIGNsYXNzTmFtZVxuICAgICAqIEBwYXJhbSBpZCBpZCBvZiBzdHlsZVxuICAgICAqIEBwYXJhbSBjc3Mgc3R5bGUgb2JqZWN0IG9yIHN0cmluZ1xuICAgICAqIEBwYXJhbSBwcmlvcml0eSBzdHlsZSBwcmlvcml0eShkZWZhdWx0OiAwKVxuICAgICAqL1xuICAgIGFkZFNpbXBsZVN0eWxlKGlkOiBzdHJpbmcsIGNzczogU3R5bGVDb250YWluZXIgfCAoKHRoZW1lOiBhbnkpID0+IFN0eWxlQ29udGFpbmVyKSwgcHJpb3JpdHk/OiBudW1iZXIsIHBhcmVudFN0eWxlPzogU3R5bGVzKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFkZCBuZXcgYWRkIGEgbmV3IHN0eWxlIHNoZWV0XG4gICAgICogQHBhcmFtIHN0eWxlcyBzdHlsZXNcbiAgICAgKiBAcGFyYW0gcHJpb3JpdHkgcHJpb3JpdHkgZm9yIHN0eWxlXG4gICAgICovXG4gICAgYWRkU3R5bGVTaGVldDxUPihzdHlsZXM6IFQgJiBTdHlsZXMsIHByaW9yaXR5PzogbnVtYmVyKTogTHlDbGFzc2VzPFQ+O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgc3R5bGUgZXhpc3RcbiAgICAgKiBAcGFyYW0gc3R5bGVzT3JJZCBTdHlsZSBvciBJZCBvZiBhIHN0eWxlXG4gICAgICovXG4gICAgZXhpc3RTdHlsZShzdHlsZXNPcklkOiBzdHJpbmcgfCBTdHlsZXMgfCBTdHlsZURlY2xhcmF0aW9uc0Jsb2NrKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiByZXR1cm4gc2VsZWN0b3JzIGlmIGV4aXN0c1xuICAgICAqXG4gICAgICogZS5nLlxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiB7XG4gICAgICogICByb290OiAnLmMnXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBzdHlsZXMgaWRcbiAgICAgKi9cbiAgICBzZWxlY3RvcnNPZjxUPihzdHlsZXM6IFQpOiBMeUNsYXNzZXM8VD47XG4gICAgc2VsZWN0b3JPZihzdHlsZXM6IHN0cmluZyB8IFN0eWxlVGVtcGxhdGUpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRm9yIGludGVybmFsIHVzZSBvbmx5XG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVTdHlsZUNvbnRlbnQyKHN0eWxlczogU3R5bGVzIHwgU3R5bGVEZWNsYXJhdGlvbnNCbG9jayB8ICgodGhlbWU6IGFueSwgcmVmOiBUaGVtZVJlZikgPT4gU3R5bGVUZW1wbGF0ZSksIGlkOiBzdHJpbmcgfCBudWxsLCBwcmlvcml0eTogbnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbCwgdHlwZTogVHlwZVN0eWxlLCBmb3JDaGFuZ2VUaGVtZT86IGJvb2xlYW4sIHBhcmVudFN0eWxlPzogU3R5bGVzKTogYW55O1xuICAgIHByaXZhdGUgX2NyZWF0ZVN0eWxlQ29udGFpbmVyO1xuICAgIHByaXZhdGUgZmluZE5vZGU7XG4gICAgcHJpdmF0ZSBfY3JlYXRlRWxlbWVudFN0eWxlO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmbjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGNvbnZlcnRlclRvQ3NzS2V5QW5kU3R5bGUoc3RyOiBzdHJpbmcsIHRoZW1lVmFyaWFibGVzOiBUaGVtZVZhcmlhYmxlcyk6IHN0cmluZztcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHI6IHN0cmluZyk6IHN0cmluZztcbmV4cG9ydCBpbnRlcmZhY2UgVGhlbWVSZWYgZXh0ZW5kcyBQaWNrPEx5VGhlbWUyLCAnc2VsZWN0b3JzT2YnIHwgJ3JlbmRlclN0eWxlU2hlZXQnPiB7XG59XG4iXX0=