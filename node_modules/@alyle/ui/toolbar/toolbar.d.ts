import { Renderer2, ElementRef, OnInit, OnChanges } from '@angular/core';
import { LyTheme2, ThemeVariables, StyleCollection, LyClasses, StyleTemplate, ThemeRef, StyleRenderer } from '@alyle/ui';
import * as ɵngcc0 from '@angular/core';
export interface LyToolbarTheme {
    /** Styles for Toolbar Component */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
    appearance?: {
        [key: string]: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
    };
}
export interface LyToolbarVariables {
    toolbar?: LyToolbarTheme;
}
export declare const STYLES: (theme: ThemeVariables & LyToolbarVariables, ref: ThemeRef) => {
    $priority: number;
    root: () => (className: string) => string;
};
declare type position = 'static' | 'absolute' | 'fixed' | 'sticky' | 'relative';
/** @docs-private */
export declare class LyToolbarBase {
    _theme: LyTheme2;
    constructor(_theme: LyTheme2);
}
/** @docs-private */
export declare const LyToolbarMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/build-common-behaviors").CanStyleUpdater> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/bg").CanBg> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/color").CanColor> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/raised").CanRaised> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/alyle-ui").CanDisable> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/outlined").CanOutlined> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/elevation").CanElevation> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/shadow-color").CanShadowColor> & typeof LyToolbarBase;
export declare class LyToolbar extends LyToolbarMixinBase implements OnChanges, OnInit {
    private _el;
    private theme;
    readonly sRenderer: StyleRenderer;
    /**
     * Styles
     * @docs-private
     */
    readonly classes: Pick<{
        $priority: string;
        root: string;
    }, "root">;
    private _position;
    private _positionClass;
    private _appearance;
    private _appearanceClass;
    set position(val: position);
    get position(): position;
    set appearance(val: string);
    get appearance(): string;
    constructor(_renderer: Renderer2, _el: ElementRef, theme: LyTheme2, sRenderer: StyleRenderer);
    ngOnChanges(): void;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyToolbar, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyToolbar, "ly-toolbar", never, { "bg": "bg"; "color": "color"; "raised": "raised"; "outlined": "outlined"; "elevation": "elevation"; "shadowColor": "shadowColor"; "position": "position"; "appearance": "appearance"; }, {}, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5kLnRzIiwic291cmNlcyI6WyJ0b29sYmFyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE9uSW5pdCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeVRoZW1lMiwgVGhlbWVWYXJpYWJsZXMsIFN0eWxlQ29sbGVjdGlvbiwgTHlDbGFzc2VzLCBTdHlsZVRlbXBsYXRlLCBUaGVtZVJlZiwgU3R5bGVSZW5kZXJlciB9IGZyb20gJ0BhbHlsZS91aSc7XG5leHBvcnQgaW50ZXJmYWNlIEx5VG9vbGJhclRoZW1lIHtcbiAgICAvKiogU3R5bGVzIGZvciBUb29sYmFyIENvbXBvbmVudCAqL1xuICAgIHJvb3Q/OiBTdHlsZUNvbGxlY3Rpb248KChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGUpPiB8ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKTtcbiAgICBhcHBlYXJhbmNlPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBTdHlsZUNvbGxlY3Rpb248KChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGUpPiB8ICgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKTtcbiAgICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBMeVRvb2xiYXJWYXJpYWJsZXMge1xuICAgIHRvb2xiYXI/OiBMeVRvb2xiYXJUaGVtZTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNUWUxFUzogKHRoZW1lOiBUaGVtZVZhcmlhYmxlcyAmIEx5VG9vbGJhclZhcmlhYmxlcywgcmVmOiBUaGVtZVJlZikgPT4ge1xuICAgICRwcmlvcml0eTogbnVtYmVyO1xuICAgIHJvb3Q6ICgpID0+IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xufTtcbmRlY2xhcmUgdHlwZSBwb3NpdGlvbiA9ICdzdGF0aWMnIHwgJ2Fic29sdXRlJyB8ICdmaXhlZCcgfCAnc3RpY2t5JyB8ICdyZWxhdGl2ZSc7XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHlUb29sYmFyQmFzZSB7XG4gICAgX3RoZW1lOiBMeVRoZW1lMjtcbiAgICBjb25zdHJ1Y3RvcihfdGhlbWU6IEx5VGhlbWUyKTtcbn1cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBMeVRvb2xiYXJNaXhpbkJhc2U6IGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2J1aWxkLWNvbW1vbi1iZWhhdmlvcnNcIikuQ2FuU3R5bGVVcGRhdGVyPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2JnXCIpLkNhbkJnPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbG9yXCIpLkNhbkNvbG9yPiAmIGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL2NvbnN0cnVjdG9yXCIpLkNvbnN0cnVjdG9yPGltcG9ydChcIkBhbHlsZS91aS9zcmMvY29tbW9uL3JhaXNlZFwiKS5DYW5SYWlzZWQ+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL2FseWxlLXVpXCIpLkNhbkRpc2FibGU+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vb3V0bGluZWRcIikuQ2FuT3V0bGluZWQ+ICYgaW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vY29uc3RydWN0b3JcIikuQ29uc3RydWN0b3I8aW1wb3J0KFwiQGFseWxlL3VpL3NyYy9jb21tb24vZWxldmF0aW9uXCIpLkNhbkVsZXZhdGlvbj4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9zaGFkb3ctY29sb3JcIikuQ2FuU2hhZG93Q29sb3I+ICYgdHlwZW9mIEx5VG9vbGJhckJhc2U7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMeVRvb2xiYXIgZXh0ZW5kcyBMeVRvb2xiYXJNaXhpbkJhc2UgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBfZWw7XG4gICAgcHJpdmF0ZSB0aGVtZTtcbiAgICByZWFkb25seSBzUmVuZGVyZXI6IFN0eWxlUmVuZGVyZXI7XG4gICAgLyoqXG4gICAgICogU3R5bGVzXG4gICAgICogQGRvY3MtcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNsYXNzZXM6IFBpY2s8e1xuICAgICAgICAkcHJpb3JpdHk6IHN0cmluZztcbiAgICAgICAgcm9vdDogc3RyaW5nO1xuICAgIH0sIFwicm9vdFwiPjtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjtcbiAgICBwcml2YXRlIF9wb3NpdGlvbkNsYXNzO1xuICAgIHByaXZhdGUgX2FwcGVhcmFuY2U7XG4gICAgcHJpdmF0ZSBfYXBwZWFyYW5jZUNsYXNzO1xuICAgIHNldCBwb3NpdGlvbih2YWw6IHBvc2l0aW9uKTtcbiAgICBnZXQgcG9zaXRpb24oKTogcG9zaXRpb247XG4gICAgc2V0IGFwcGVhcmFuY2UodmFsOiBzdHJpbmcpO1xuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2VsOiBFbGVtZW50UmVmLCB0aGVtZTogTHlUaGVtZTIsIHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcik7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xufVxuZXhwb3J0IHt9O1xuIl19