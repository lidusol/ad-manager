import { ChangeDetectorRef, ElementRef, NgZone, OnDestroy, TemplateRef, OnInit, Renderer2 } from '@angular/core';
import { LyFocusState, LyOverlay, LyTheme2, Placement, ThemeVariables, XPosition, YPosition, StyleCollection, LyClasses, StyleTemplate, ThemeRef } from '@alyle/ui';
import { ScrollDispatcher } from '@angular/cdk/scrolling';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export interface LyTooltipTheme {
    /** Styles for Tooltip Component */
    root?: StyleCollection<((classes: LyClasses<typeof STYLES>) => StyleTemplate)> | ((classes: LyClasses<typeof STYLES>) => StyleTemplate);
    appearance?: {
        icon?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        fab?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        miniFab?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        [name: string]: ((classes: LyClasses<typeof STYLES>) => StyleTemplate) | undefined;
    };
    size?: {
        small?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        medium?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        large?: (classes: LyClasses<typeof STYLES>) => StyleTemplate;
        [name: string]: ((classes: LyClasses<typeof STYLES>) => StyleTemplate) | undefined;
    };
}
export interface LyTooltipVariables {
    tooltip?: LyTooltipTheme;
}
export declare const STYLES: (theme: ThemeVariables & LyTooltipVariables, ref: ThemeRef) => {
    $priority: number;
    root: () => StyleTemplate;
};
export declare class LyTooltip implements OnInit, OnDestroy {
    private _theme;
    private _overlay;
    private _el;
    private _renderer;
    private _cd;
    private _focusState;
    /** @docs-private */
    readonly classes: Pick<{
        $priority: string;
        root: string;
    }, "root">;
    private _tooltip;
    private _tooltipOverlay;
    private _listeners;
    private _scrollSub;
    private _scrollVal;
    private _showTimeoutId;
    private _hideTimeoutId;
    set tooltip(val: string | TemplateRef<any> | null);
    get tooltip(): string | TemplateRef<any> | null;
    lyTooltipShowDelay: number;
    lyTooltipHideDelay: number;
    placement: Placement;
    xPosition: XPosition;
    yPosition: YPosition;
    constructor(_theme: LyTheme2, _overlay: LyOverlay, _el: ElementRef, _renderer: Renderer2, _cd: ChangeDetectorRef, _focusState: LyFocusState, ngZone: NgZone, scroll: ScrollDispatcher, platform: Platform);
    ngOnInit(): void;
    ngOnDestroy(): void;
    show(delay?: number): void;
    hide(delay?: number): void;
    toggle(): void;
    private _markForCheck;
    private _updatePosition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyTooltip, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyTooltip, "[lyTooltip]", ["lyTooltip"], { "lyTooltipShowDelay": "lyTooltipShowDelay"; "lyTooltipHideDelay": "lyTooltipHideDelay"; "tooltip": "lyTooltip"; "placement": "lyTooltipPlacement"; "xPosition": "lyTooltipXPosition"; "yPosition": "lyTooltipYPosition"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kLnRzIiwic291cmNlcyI6WyJ0b29sdGlwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSwgVGVtcGxhdGVSZWYsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMeUZvY3VzU3RhdGUsIEx5T3ZlcmxheSwgTHlUaGVtZTIsIFBsYWNlbWVudCwgVGhlbWVWYXJpYWJsZXMsIFhQb3NpdGlvbiwgWVBvc2l0aW9uLCBTdHlsZUNvbGxlY3Rpb24sIEx5Q2xhc3NlcywgU3R5bGVUZW1wbGF0ZSwgVGhlbWVSZWYgfSBmcm9tICdAYWx5bGUvdWknO1xuaW1wb3J0IHsgU2Nyb2xsRGlzcGF0Y2hlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuZXhwb3J0IGludGVyZmFjZSBMeVRvb2x0aXBUaGVtZSB7XG4gICAgLyoqIFN0eWxlcyBmb3IgVG9vbHRpcCBDb21wb25lbnQgKi9cbiAgICByb290PzogU3R5bGVDb2xsZWN0aW9uPCgoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlKT4gfCAoKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZSk7XG4gICAgYXBwZWFyYW5jZT86IHtcbiAgICAgICAgaWNvbj86IChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGU7XG4gICAgICAgIGZhYj86IChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGU7XG4gICAgICAgIG1pbmlGYWI/OiAoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlO1xuICAgICAgICBbbmFtZTogc3RyaW5nXTogKChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGUpIHwgdW5kZWZpbmVkO1xuICAgIH07XG4gICAgc2l6ZT86IHtcbiAgICAgICAgc21hbGw/OiAoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlO1xuICAgICAgICBtZWRpdW0/OiAoY2xhc3NlczogTHlDbGFzc2VzPHR5cGVvZiBTVFlMRVM+KSA9PiBTdHlsZVRlbXBsYXRlO1xuICAgICAgICBsYXJnZT86IChjbGFzc2VzOiBMeUNsYXNzZXM8dHlwZW9mIFNUWUxFUz4pID0+IFN0eWxlVGVtcGxhdGU7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiAoKGNsYXNzZXM6IEx5Q2xhc3Nlczx0eXBlb2YgU1RZTEVTPikgPT4gU3R5bGVUZW1wbGF0ZSkgfCB1bmRlZmluZWQ7XG4gICAgfTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTHlUb29sdGlwVmFyaWFibGVzIHtcbiAgICB0b29sdGlwPzogTHlUb29sdGlwVGhlbWU7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBTVFlMRVM6ICh0aGVtZTogVGhlbWVWYXJpYWJsZXMgJiBMeVRvb2x0aXBWYXJpYWJsZXMsIHJlZjogVGhlbWVSZWYpID0+IHtcbiAgICAkcHJpb3JpdHk6IG51bWJlcjtcbiAgICByb290OiAoKSA9PiBTdHlsZVRlbXBsYXRlO1xufTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5VG9vbHRpcCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF90aGVtZTtcbiAgICBwcml2YXRlIF9vdmVybGF5O1xuICAgIHByaXZhdGUgX2VsO1xuICAgIHByaXZhdGUgX3JlbmRlcmVyO1xuICAgIHByaXZhdGUgX2NkO1xuICAgIHByaXZhdGUgX2ZvY3VzU3RhdGU7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICByZWFkb25seSBjbGFzc2VzOiBQaWNrPHtcbiAgICAgICAgJHByaW9yaXR5OiBzdHJpbmc7XG4gICAgICAgIHJvb3Q6IHN0cmluZztcbiAgICB9LCBcInJvb3RcIj47XG4gICAgcHJpdmF0ZSBfdG9vbHRpcDtcbiAgICBwcml2YXRlIF90b29sdGlwT3ZlcmxheTtcbiAgICBwcml2YXRlIF9saXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBfc2Nyb2xsU3ViO1xuICAgIHByaXZhdGUgX3Njcm9sbFZhbDtcbiAgICBwcml2YXRlIF9zaG93VGltZW91dElkO1xuICAgIHByaXZhdGUgX2hpZGVUaW1lb3V0SWQ7XG4gICAgc2V0IHRvb2x0aXAodmFsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHwgbnVsbCk7XG4gICAgZ2V0IHRvb2x0aXAoKTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB8IG51bGw7XG4gICAgbHlUb29sdGlwU2hvd0RlbGF5OiBudW1iZXI7XG4gICAgbHlUb29sdGlwSGlkZURlbGF5OiBudW1iZXI7XG4gICAgcGxhY2VtZW50OiBQbGFjZW1lbnQ7XG4gICAgeFBvc2l0aW9uOiBYUG9zaXRpb247XG4gICAgeVBvc2l0aW9uOiBZUG9zaXRpb247XG4gICAgY29uc3RydWN0b3IoX3RoZW1lOiBMeVRoZW1lMiwgX292ZXJsYXk6IEx5T3ZlcmxheSwgX2VsOiBFbGVtZW50UmVmLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgX2NkOiBDaGFuZ2VEZXRlY3RvclJlZiwgX2ZvY3VzU3RhdGU6IEx5Rm9jdXNTdGF0ZSwgbmdab25lOiBOZ1pvbmUsIHNjcm9sbDogU2Nyb2xsRGlzcGF0Y2hlciwgcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgc2hvdyhkZWxheT86IG51bWJlcik6IHZvaWQ7XG4gICAgaGlkZShkZWxheT86IG51bWJlcik6IHZvaWQ7XG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfbWFya0ZvckNoZWNrO1xuICAgIHByaXZhdGUgX3VwZGF0ZVBvc2l0aW9uO1xufVxuIl19