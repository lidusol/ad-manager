import { ElementRef, Renderer2, OnInit, OnChanges } from '@angular/core';
import { LyTheme2, ThemeVariables, StyleCollection, StyleTemplate, StyleRenderer } from '@alyle/ui';
import * as ɵngcc0 from '@angular/core';
export interface LyTypographyTheme {
    /** Styles for Typography Component */
    root?: StyleCollection<(() => StyleTemplate)> | (() => StyleTemplate);
    lyTyp?: {
        [name: string]: StyleCollection<(() => StyleTemplate)> | (() => StyleTemplate) | undefined;
    };
}
export interface LyTypographyVariables {
    typography?: LyTypographyTheme;
}
export declare const STYLES: (theme: ThemeVariables & LyTypographyVariables) => {
    $name: string;
    $priority: number;
    root: (className: string) => string;
    gutterTop: (className: string) => string;
    gutterBottom: (className: string) => string;
    gutter: (className: string) => string;
};
/** @docs-private */
export declare class LyTypographyBase {
    _theme: LyTheme2;
    constructor(_theme: LyTheme2);
}
/** @docs-private */
export declare const LyTypographyMixinBase: import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/build-common-behaviors").CanStyleUpdater> & import("@alyle/ui/src/common/constructor").Constructor<import("@alyle/ui/src/common/color").CanColor> & typeof LyTypographyBase;
export declare class LyTypography extends LyTypographyMixinBase implements OnInit, OnChanges {
    private _el;
    private renderer;
    readonly sRenderer: StyleRenderer;
    /** @docs-private */
    static readonly и = "LyTypography";
    /** @docs-private */
    readonly classes: Pick<{
        $name: string;
        $priority: string;
        root: string;
        gutterTop: string;
        gutterBottom: string;
        gutter: string;
    }, "root" | "gutterTop" | "gutterBottom" | "gutter">;
    private _lyTyp;
    private _lyTypClass;
    private _gutter;
    private _gutterTop;
    private _gutterBottom;
    private _noWrap;
    private _noWrapClass?;
    set lyTyp(val: string);
    get lyTyp(): string;
    /** The text will truncate with an ellipsis. */
    set noWrap(val: boolean);
    get noWrap(): boolean;
    set gutter(val: boolean);
    get gutter(): boolean;
    set gutterTop(val: boolean);
    get gutterTop(): boolean;
    set gutterBottom(val: boolean);
    get gutterBottom(): boolean;
    constructor(_theme: LyTheme2, _el: ElementRef, renderer: Renderer2, sRenderer: StyleRenderer);
    ngOnInit(): void;
    ngOnChanges(): void;
    private _createTypClass;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LyTypography, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LyTypography, "[lyTyp]", never, { "color": "color"; "lyTyp": "lyTyp"; "noWrap": "noWrap"; "gutter": "gutter"; "gutterTop": "gutterTop"; "gutterBottom": "gutterBottom"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwb2dyYXBoeS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidHlwb2dyYXBoeS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHlUaGVtZTIsIFRoZW1lVmFyaWFibGVzLCBTdHlsZUNvbGxlY3Rpb24sIFN0eWxlVGVtcGxhdGUsIFN0eWxlUmVuZGVyZXIgfSBmcm9tICdAYWx5bGUvdWknO1xuZXhwb3J0IGludGVyZmFjZSBMeVR5cG9ncmFwaHlUaGVtZSB7XG4gICAgLyoqIFN0eWxlcyBmb3IgVHlwb2dyYXBoeSBDb21wb25lbnQgKi9cbiAgICByb290PzogU3R5bGVDb2xsZWN0aW9uPCgoKSA9PiBTdHlsZVRlbXBsYXRlKT4gfCAoKCkgPT4gU3R5bGVUZW1wbGF0ZSk7XG4gICAgbHlUeXA/OiB7XG4gICAgICAgIFtuYW1lOiBzdHJpbmddOiBTdHlsZUNvbGxlY3Rpb248KCgpID0+IFN0eWxlVGVtcGxhdGUpPiB8ICgoKSA9PiBTdHlsZVRlbXBsYXRlKSB8IHVuZGVmaW5lZDtcbiAgICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBMeVR5cG9ncmFwaHlWYXJpYWJsZXMge1xuICAgIHR5cG9ncmFwaHk/OiBMeVR5cG9ncmFwaHlUaGVtZTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNUWUxFUzogKHRoZW1lOiBUaGVtZVZhcmlhYmxlcyAmIEx5VHlwb2dyYXBoeVZhcmlhYmxlcykgPT4ge1xuICAgICRuYW1lOiBzdHJpbmc7XG4gICAgJHByaW9yaXR5OiBudW1iZXI7XG4gICAgcm9vdDogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG4gICAgZ3V0dGVyVG9wOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IHN0cmluZztcbiAgICBndXR0ZXJCb3R0b206IChjbGFzc05hbWU6IHN0cmluZykgPT4gc3RyaW5nO1xuICAgIGd1dHRlcjogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBzdHJpbmc7XG59O1xuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5VHlwb2dyYXBoeUJhc2Uge1xuICAgIF90aGVtZTogTHlUaGVtZTI7XG4gICAgY29uc3RydWN0b3IoX3RoZW1lOiBMeVRoZW1lMik7XG59XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTHlUeXBvZ3JhcGh5TWl4aW5CYXNlOiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9idWlsZC1jb21tb24tYmVoYXZpb3JzXCIpLkNhblN0eWxlVXBkYXRlcj4gJiBpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb25zdHJ1Y3RvclwiKS5Db25zdHJ1Y3RvcjxpbXBvcnQoXCJAYWx5bGUvdWkvc3JjL2NvbW1vbi9jb2xvclwiKS5DYW5Db2xvcj4gJiB0eXBlb2YgTHlUeXBvZ3JhcGh5QmFzZTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEx5VHlwb2dyYXBoeSBleHRlbmRzIEx5VHlwb2dyYXBoeU1peGluQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIF9lbDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHJlYWRvbmx5IHNSZW5kZXJlcjogU3R5bGVSZW5kZXJlcjtcbiAgICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAgIHN0YXRpYyByZWFkb25seSDQuCA9IFwiTHlUeXBvZ3JhcGh5XCI7XG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICByZWFkb25seSBjbGFzc2VzOiBQaWNrPHtcbiAgICAgICAgJG5hbWU6IHN0cmluZztcbiAgICAgICAgJHByaW9yaXR5OiBzdHJpbmc7XG4gICAgICAgIHJvb3Q6IHN0cmluZztcbiAgICAgICAgZ3V0dGVyVG9wOiBzdHJpbmc7XG4gICAgICAgIGd1dHRlckJvdHRvbTogc3RyaW5nO1xuICAgICAgICBndXR0ZXI6IHN0cmluZztcbiAgICB9LCBcInJvb3RcIiB8IFwiZ3V0dGVyVG9wXCIgfCBcImd1dHRlckJvdHRvbVwiIHwgXCJndXR0ZXJcIj47XG4gICAgcHJpdmF0ZSBfbHlUeXA7XG4gICAgcHJpdmF0ZSBfbHlUeXBDbGFzcztcbiAgICBwcml2YXRlIF9ndXR0ZXI7XG4gICAgcHJpdmF0ZSBfZ3V0dGVyVG9wO1xuICAgIHByaXZhdGUgX2d1dHRlckJvdHRvbTtcbiAgICBwcml2YXRlIF9ub1dyYXA7XG4gICAgcHJpdmF0ZSBfbm9XcmFwQ2xhc3M/O1xuICAgIHNldCBseVR5cCh2YWw6IHN0cmluZyk7XG4gICAgZ2V0IGx5VHlwKCk6IHN0cmluZztcbiAgICAvKiogVGhlIHRleHQgd2lsbCB0cnVuY2F0ZSB3aXRoIGFuIGVsbGlwc2lzLiAqL1xuICAgIHNldCBub1dyYXAodmFsOiBib29sZWFuKTtcbiAgICBnZXQgbm9XcmFwKCk6IGJvb2xlYW47XG4gICAgc2V0IGd1dHRlcih2YWw6IGJvb2xlYW4pO1xuICAgIGdldCBndXR0ZXIoKTogYm9vbGVhbjtcbiAgICBzZXQgZ3V0dGVyVG9wKHZhbDogYm9vbGVhbik7XG4gICAgZ2V0IGd1dHRlclRvcCgpOiBib29sZWFuO1xuICAgIHNldCBndXR0ZXJCb3R0b20odmFsOiBib29sZWFuKTtcbiAgICBnZXQgZ3V0dGVyQm90dG9tKCk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoX3RoZW1lOiBMeVRoZW1lMiwgX2VsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBzUmVuZGVyZXI6IFN0eWxlUmVuZGVyZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBwcml2YXRlIF9jcmVhdGVUeXBDbGFzcztcbn1cbiJdfQ==