import { __decorate, __metadata } from "tslib";
import { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, QueryList, Renderer2, ViewChild } from '@angular/core';
import { MatPageLoaderComponent } from './mat-page-loader/mat-page-loader.component';
import { MatSidenav } from '@angular/material/sidenav';
import { MatTabGroup } from '@angular/material/tabs';
let MatPagesComponent = class MatPagesComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.done = new EventEmitter();
        this.pageChanged = new EventEmitter();
        // the mode of the sidenav
        this.navMode = 'side';
        this.index = 0;
    }
    _initSidenavMode() {
        if (window.innerWidth < 768) {
            this.navMode = 'over';
        }
    }
    ngOnInit() {
        this._initSidenavMode();
    }
    ngAfterContentInit() {
        this.totalPages = this.pages.length;
        this.renderer.setStyle(this.tabHeader.nativeElement.children[0], 'display', 'none');
    }
    onResize(event) {
        if (event.target.innerWidth < 768) {
            this.navMode = 'over';
            this.sidenav.close();
        }
        if (event.target.innerWidth > 768) {
            this.navMode = 'side';
            this.sidenav.open();
        }
    }
    /**
     * Go to the previous page if it exists
     */
    previous() {
        this.index = this.index === 0 ? 0 : --this.index;
        this.pageChanged.emit(this.index);
    }
    /**
     * Go to the next page if it exists
     */
    next() {
        this.index = this.index === this.totalPages - 1 ? this.totalPages - 1 : ++this.index;
        this.pageChanged.emit(this.index);
        if (this.index === this.totalPages - 1) {
            this.done.emit();
        }
    }
    /**
     * Update the value of the index when a step has been selected.
     * Emit this value for pagechanged's subscribers.
     *
     */
    onStepSelectionChange(event) {
        this.index = event.selectedIndex;
        this.pageChanged.emit(this.index);
    }
};
MatPagesComponent.ctorParameters = () => [
    { type: Renderer2 }
];
__decorate([
    ViewChild('sidenav'),
    __metadata("design:type", MatSidenav)
], MatPagesComponent.prototype, "sidenav", void 0);
__decorate([
    ViewChild(MatTabGroup, { read: ElementRef, static: true }),
    __metadata("design:type", ElementRef)
], MatPagesComponent.prototype, "tabHeader", void 0);
__decorate([
    ContentChildren(MatPageLoaderComponent),
    __metadata("design:type", QueryList)
], MatPagesComponent.prototype, "pages", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MatPagesComponent.prototype, "title", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MatPagesComponent.prototype, "done", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], MatPagesComponent.prototype, "pageChanged", void 0);
__decorate([
    HostListener('window:resize', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], MatPagesComponent.prototype, "onResize", null);
MatPagesComponent = __decorate([
    Component({
        selector: 'mat-pages',
        template: "<mat-sidenav-container>\n  <mat-sidenav #sidenav [mode]=\"navMode\" opened=\"true\"\n               [fixedInViewport]=\"'false'\" [fixedTopGap]=\"'false'\" [fixedBottomGap]=\"'false'\">\n\n    <mat-toolbar color=\"primary\">\n    </mat-toolbar>\n\n    <mat-vertical-stepper [selectedIndex]=\"index\" (selectionChange)=\"onStepSelectionChange($event)\">\n      <mat-step *ngFor=\"let page of pages;let i = index;\" [label]=\"page.pageOutlook.title\">\n        <ng-container [ngTemplateOutlet]=\"page.pageOutlook.content\"></ng-container>\n      </mat-step>\n    </mat-vertical-stepper>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button mat-icon-button (click)=\"sidenav.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      {{title}}\n    </mat-toolbar>\n    <div class=\"demo-sidenav-content main-container\">\n\n      <mat-tab-group [selectedIndex]=\"index\" style=\"min-height: 15vh;\" >\n        <button mat-fab color=\"warn\" (click)=\"previous()\">\n          <mat-icon>location</mat-icon>\n        </button>\n        <mat-tab *ngFor=\"let page of pages;let i = index;\">\n          <ng-template matTabContent>\n            <ng-container [ngTemplateOutlet]=\"page.pageContent.content\"></ng-container>\n          </ng-template>\n        </mat-tab>\n      </mat-tab-group>\n\n\n      <div class=\"navigation-buttons\">\n        <button mat-fab color=\"primary\" (click)=\"previous()\" [disabled]=\"index == 0\">\n          <mat-icon>chevron_left</mat-icon>\n        </button>\n        <div *ngIf=\"index == totalPages - 1;then finished else nextAvailable\">\n        </div>\n        <ng-template #nextAvailable>\n          <button mat-fab color=\"primary\" (click)=\"next()\">\n            <mat-icon>chevron_right</mat-icon>\n          </button>\n        </ng-template>\n        <ng-template #finished>\n          <button mat-fab color=\"accent\" (click)=\"done.next()\">\n            <mat-icon>done</mat-icon>\n          </button>\n        </ng-template>\n      </div>\n\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n",
        styles: [".navigation-buttons{margin:1rem;place-content:stretch space-between;-webkit-box-align:stretch;align-items:stretch;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;box-sizing:border-box;display:-webkit-box;display:flex}"]
    }),
    __metadata("design:paramtypes", [Renderer2])
], MatPagesComponent);
export { MatPagesComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXBhZ2VzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLW1hdGVyaWFsLWV4dGVuc2lvbnMvcGFnZXMvIiwic291cmNlcyI6WyJsaWIvbWF0LXBhZ2VzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixZQUFZLEVBQ1osWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDZDQUE2QyxDQUFDO0FBRW5GLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFPckQsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUE2QjVCLFlBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFkdkMsU0FBSSxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO1FBR3BELGdCQUFXLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFFL0QsMEJBQTBCO1FBQzFCLFlBQU8sR0FBRyxNQUFNLENBQUM7UUFTZixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLElBQUksTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFHRCxRQUFRLENBQUMsS0FBVTtRQUNqQixJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztZQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3RCO1FBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSTtRQUNGLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNyRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbEMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBR0Q7Ozs7T0FJRztJQUNILHFCQUFxQixDQUFDLEtBQTRCO1FBQ2hELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUVGLENBQUE7O1lBOUQrQixTQUFTOztBQTFCdkM7SUFEQyxTQUFTLENBQUMsU0FBUyxDQUFDOzhCQUNaLFVBQVU7a0RBQUM7QUFHcEI7SUFEQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7OEJBQzlDLFVBQVU7b0RBQUM7QUFHdEI7SUFEQyxlQUFlLENBQUMsc0JBQXNCLENBQUM7OEJBQ2pDLFNBQVM7Z0RBQXlCO0FBR3pDO0lBREMsS0FBSyxFQUFFOztnREFDTTtBQUdkO0lBREMsTUFBTSxFQUFFOzhCQUNILFlBQVk7K0NBQWtDO0FBR3BEO0lBREMsTUFBTSxFQUFFOzhCQUNJLFlBQVk7c0RBQXNDO0FBK0IvRDtJQURDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7OztpREFVekM7QUExRFUsaUJBQWlCO0lBTDdCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxXQUFXO1FBQ3JCLHFrRUFBeUM7O0tBRTFDLENBQUM7cUNBOEI4QixTQUFTO0dBN0I1QixpQkFBaUIsQ0EyRjdCO1NBM0ZZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNYXRQYWdlTG9hZGVyQ29tcG9uZW50fSBmcm9tICcuL21hdC1wYWdlLWxvYWRlci9tYXQtcGFnZS1sb2FkZXIuY29tcG9uZW50JztcbmltcG9ydCB7U3RlcHBlclNlbGVjdGlvbkV2ZW50fSBmcm9tICdAYW5ndWxhci9jZGsvc3RlcHBlcic7XG5pbXBvcnQgeyBNYXRTaWRlbmF2IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2lkZW5hdic7XG5pbXBvcnQgeyBNYXRUYWJHcm91cCB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXQtcGFnZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWF0LXBhZ2VzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWF0LXBhZ2VzLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTWF0UGFnZXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuXG4gIEBWaWV3Q2hpbGQoJ3NpZGVuYXYnKVxuICBzaWRlbmF2OiBNYXRTaWRlbmF2O1xuXG4gIEBWaWV3Q2hpbGQoTWF0VGFiR3JvdXAsIHtyZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWV9KVxuICB0YWJIZWFkZXI6IEVsZW1lbnRSZWY7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihNYXRQYWdlTG9hZGVyQ29tcG9uZW50KVxuICBwYWdlczogUXVlcnlMaXN0PE1hdFBhZ2VMb2FkZXJDb21wb25lbnQ+O1xuXG4gIEBJbnB1dCgpXG4gIHRpdGxlOiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpXG4gIGRvbmU6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBAT3V0cHV0KClcbiAgcGFnZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgLy8gdGhlIG1vZGUgb2YgdGhlIHNpZGVuYXZcbiAgbmF2TW9kZSA9ICdzaWRlJztcblxuICAvLyBjdXJyZW50IHBhZ2VcbiAgaW5kZXg6IG51bWJlcjtcblxuICAvLyB0aGUgdG90YWwgbnVtYmVyIG9mIHBhZ2VzIHRvIHJlbmRlclxuICB0b3RhbFBhZ2VzOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gIH1cblxuICBwcml2YXRlIF9pbml0U2lkZW5hdk1vZGUoKTogdm9pZCB7XG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4KSB7XG4gICAgICB0aGlzLm5hdk1vZGUgPSAnb3Zlcic7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5faW5pdFNpZGVuYXZNb2RlKCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy50b3RhbFBhZ2VzID0gdGhpcy5wYWdlcy5sZW5ndGg7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnRhYkhlYWRlci5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLCAnZGlzcGxheScsICdub25lJyk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQnXSlcbiAgb25SZXNpemUoZXZlbnQ6IGFueSkge1xuICAgIGlmIChldmVudC50YXJnZXQuaW5uZXJXaWR0aCA8IDc2OCkge1xuICAgICAgdGhpcy5uYXZNb2RlID0gJ292ZXInO1xuICAgICAgdGhpcy5zaWRlbmF2LmNsb3NlKCk7XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQuaW5uZXJXaWR0aCA+IDc2OCkge1xuICAgICAgdGhpcy5uYXZNb2RlID0gJ3NpZGUnO1xuICAgICAgdGhpcy5zaWRlbmF2Lm9wZW4oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR28gdG8gdGhlIHByZXZpb3VzIHBhZ2UgaWYgaXQgZXhpc3RzXG4gICAqL1xuICBwcmV2aW91cygpIHtcbiAgICB0aGlzLmluZGV4ID0gdGhpcy5pbmRleCA9PT0gMCA/IDAgOiAtLXRoaXMuaW5kZXg7XG4gICAgdGhpcy5wYWdlQ2hhbmdlZC5lbWl0KHRoaXMuaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdvIHRvIHRoZSBuZXh0IHBhZ2UgaWYgaXQgZXhpc3RzXG4gICAqL1xuICBuZXh0KCkge1xuICAgIHRoaXMuaW5kZXggPSB0aGlzLmluZGV4ID09PSB0aGlzLnRvdGFsUGFnZXMgLSAxID8gdGhpcy50b3RhbFBhZ2VzIC0gMSA6ICsrdGhpcy5pbmRleDtcbiAgICB0aGlzLnBhZ2VDaGFuZ2VkLmVtaXQodGhpcy5pbmRleCk7XG5cbiAgICBpZiAodGhpcy5pbmRleCA9PT0gdGhpcy50b3RhbFBhZ2VzIC0gMSkge1xuICAgICAgdGhpcy5kb25lLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHZhbHVlIG9mIHRoZSBpbmRleCB3aGVuIGEgc3RlcCBoYXMgYmVlbiBzZWxlY3RlZC5cbiAgICogRW1pdCB0aGlzIHZhbHVlIGZvciBwYWdlY2hhbmdlZCdzIHN1YnNjcmliZXJzLlxuICAgKlxuICAgKi9cbiAgb25TdGVwU2VsZWN0aW9uQ2hhbmdlKGV2ZW50OiBTdGVwcGVyU2VsZWN0aW9uRXZlbnQpIHtcbiAgICB0aGlzLmluZGV4ID0gZXZlbnQuc2VsZWN0ZWRJbmRleDtcbiAgICB0aGlzLnBhZ2VDaGFuZ2VkLmVtaXQodGhpcy5pbmRleCk7XG4gIH1cblxufVxuIl19