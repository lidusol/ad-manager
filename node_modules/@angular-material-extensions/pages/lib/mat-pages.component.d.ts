import { AfterContentInit, ElementRef, EventEmitter, OnInit, QueryList, Renderer2 } from '@angular/core';
import { MatPageLoaderComponent } from './mat-page-loader/mat-page-loader.component';
import { StepperSelectionEvent } from '@angular/cdk/stepper';
import { MatSidenav } from '@angular/material/sidenav';
import * as ɵngcc0 from '@angular/core';
export declare class MatPagesComponent implements OnInit, AfterContentInit {
    private renderer;
    sidenav: MatSidenav;
    tabHeader: ElementRef;
    pages: QueryList<MatPageLoaderComponent>;
    title: string;
    done: EventEmitter<void>;
    pageChanged: EventEmitter<number>;
    navMode: string;
    index: number;
    totalPages: number;
    constructor(renderer: Renderer2);
    private _initSidenavMode;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    onResize(event: any): void;
    /**
     * Go to the previous page if it exists
     */
    previous(): void;
    /**
     * Go to the next page if it exists
     */
    next(): void;
    /**
     * Update the value of the index when a step has been selected.
     * Emit this value for pagechanged's subscribers.
     *
     */
    onStepSelectionChange(event: StepperSelectionEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatPagesComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatPagesComponent, "mat-pages", never, { "title": "title"; }, { "done": "done"; "pageChanged": "pageChanged"; }, ["pages"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXBhZ2VzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtYXQtcGFnZXMuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBRdWVyeUxpc3QsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0UGFnZUxvYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbWF0LXBhZ2UtbG9hZGVyL21hdC1wYWdlLWxvYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RlcHBlclNlbGVjdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3N0ZXBwZXInO1xuaW1wb3J0IHsgTWF0U2lkZW5hdiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NpZGVuYXYnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0UGFnZXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgc2lkZW5hdjogTWF0U2lkZW5hdjtcbiAgICB0YWJIZWFkZXI6IEVsZW1lbnRSZWY7XG4gICAgcGFnZXM6IFF1ZXJ5TGlzdDxNYXRQYWdlTG9hZGVyQ29tcG9uZW50PjtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRvbmU6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBwYWdlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgbmF2TW9kZTogc3RyaW5nO1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgdG90YWxQYWdlczogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIHByaXZhdGUgX2luaXRTaWRlbmF2TW9kZTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG9uUmVzaXplKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEdvIHRvIHRoZSBwcmV2aW91cyBwYWdlIGlmIGl0IGV4aXN0c1xuICAgICAqL1xuICAgIHByZXZpb3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR28gdG8gdGhlIG5leHQgcGFnZSBpZiBpdCBleGlzdHNcbiAgICAgKi9cbiAgICBuZXh0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB2YWx1ZSBvZiB0aGUgaW5kZXggd2hlbiBhIHN0ZXAgaGFzIGJlZW4gc2VsZWN0ZWQuXG4gICAgICogRW1pdCB0aGlzIHZhbHVlIGZvciBwYWdlY2hhbmdlZCdzIHN1YnNjcmliZXJzLlxuICAgICAqXG4gICAgICovXG4gICAgb25TdGVwU2VsZWN0aW9uQ2hhbmdlKGV2ZW50OiBTdGVwcGVyU2VsZWN0aW9uRXZlbnQpOiB2b2lkO1xufVxuIl19