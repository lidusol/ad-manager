import { __decorate, __read, __spread } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { Criteria } from '../../enum/criteria.enum';
import { Colors } from '../../enum/colors.enum';
import { MatPasswordStrengthValidator } from '../../validator/mat-password-strength-validator';
import { RegExpValidator } from '../../validator/regexp.class';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/progress-bar';
var MatPasswordStrengthComponent = /** @class */ (function () {
    function MatPasswordStrengthComponent() {
        this.enableLengthRule = true;
        this.enableLowerCaseLetterRule = true;
        this.enableUpperCaseLetterRule = true;
        this.enableDigitRule = true;
        this.enableSpecialCharRule = true;
        this.min = 8;
        this.max = 30;
        this.warnThreshold = 21;
        this.accentThreshold = 81;
        this.onStrengthChanged = new EventEmitter();
        this.criteriaMap = new Map();
        // TO ACCESS VIA CONTENT CHILD
        this.passwordFormControl = new FormControl();
        this.passwordConfirmationFormControl = new FormControl();
        this.validatorsArray = [];
        this._strength = 0;
        this.matPasswordStrengthValidator = new MatPasswordStrengthValidator();
    }
    MatPasswordStrengthComponent.prototype.ngOnInit = function () {
        this.setRulesAndValidators();
        if (this.password) {
            this.calculatePasswordStrength();
        }
    };
    MatPasswordStrengthComponent.prototype.ngOnChanges = function (changes) {
        if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {
            return;
        }
        else if (changes.externalError && changes.externalError.currentValue) {
            this._color = Colors.warn;
            return;
        }
        else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {
            this.calculatePasswordStrength();
        }
        else {
            this.password && this.password.length > 0 ?
                this.calculatePasswordStrength() : this.reset();
        }
    };
    Object.defineProperty(MatPasswordStrengthComponent.prototype, "strength", {
        get: function () {
            return this._strength ? this._strength : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatPasswordStrengthComponent.prototype, "color", {
        get: function () {
            if (this._strength < this.warnThreshold) {
                return Colors.warn;
            }
            else if (this._strength < this.accentThreshold) {
                return Colors.accent;
            }
            else {
                return Colors.primary;
            }
        },
        enumerable: true,
        configurable: true
    });
    MatPasswordStrengthComponent.prototype._containAtLeastMinChars = function () {
        this.containAtLeastMinChars = this.password.length >= this.min;
        return this.containAtLeastMinChars;
    };
    MatPasswordStrengthComponent.prototype._containAtLeastOneLowerCaseLetter = function () {
        this.containAtLeastOneLowerCaseLetter =
            this.criteriaMap
                .get(Criteria.at_least_one_lower_case_char)
                .test(this.password);
        return this.containAtLeastOneLowerCaseLetter;
    };
    MatPasswordStrengthComponent.prototype._containAtLeastOneUpperCaseLetter = function () {
        this.containAtLeastOneUpperCaseLetter =
            this.criteriaMap
                .get(Criteria.at_least_one_upper_case_char)
                .test(this.password);
        return this.containAtLeastOneUpperCaseLetter;
    };
    MatPasswordStrengthComponent.prototype._containAtLeastOneDigit = function () {
        this.containAtLeastOneDigit =
            this.criteriaMap
                .get(Criteria.at_least_one_digit_char)
                .test(this.password);
        return this.containAtLeastOneDigit;
    };
    MatPasswordStrengthComponent.prototype._containAtLeastOneSpecialChar = function () {
        this.containAtLeastOneSpecialChar =
            this.criteriaMap
                .get(Criteria.at_least_one_special_char)
                .test(this.password);
        return this.containAtLeastOneSpecialChar;
    };
    MatPasswordStrengthComponent.prototype._containCustomChars = function () {
        this.containAtCustomChars =
            this.criteriaMap
                .get(Criteria.at_custom_chars)
                .test(this.password);
        return this.containAtCustomChars;
    };
    MatPasswordStrengthComponent.prototype.parseCustomValidatorsRegex = function (value) {
        if (value === void 0) { value = this.customValidator; }
        if (this.customValidator instanceof RegExp) {
            return this.customValidator;
        }
        else if (typeof this.customValidator === 'string') {
            return RegExp(this.customValidator);
        }
    };
    MatPasswordStrengthComponent.prototype.setRulesAndValidators = function () {
        var _this = this;
        this.validatorsArray = [];
        this.criteriaMap = new Map();
        this.passwordConfirmationFormControl
            .setValidators(Validators.compose([
            Validators.required, this.matPasswordStrengthValidator.confirm(this.password)
        ]));
        this.validatorsArray.push(Validators.required);
        if (this.enableLengthRule) {
            this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp("^.{" + this.min + "," + this.max + "}$"));
            this.validatorsArray.push(Validators.minLength(this.min));
            this.validatorsArray.push(Validators.maxLength(this.max));
        }
        if (this.enableLowerCaseLetterRule) {
            this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);
            this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));
        }
        if (this.enableUpperCaseLetterRule) {
            this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);
            this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));
        }
        if (this.enableDigitRule) {
            this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);
            this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));
        }
        if (this.enableSpecialCharRule) {
            this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);
            this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));
        }
        if (this.customValidator) {
            this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());
            this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));
        }
        this.criteriaMap.forEach(function (value, key) {
            _this.validatorsArray.push(_this.matPasswordStrengthValidator.validate(key, value));
        });
        this.passwordFormControl.setValidators(Validators.compose(__spread(this.validatorsArray)));
        this.Validators = Validators.compose(__spread(this.validatorsArray));
    };
    MatPasswordStrengthComponent.prototype.calculatePasswordStrength = function () {
        var requirements = [];
        var unit = 100 / this.criteriaMap.size;
        // console.log('this.criteriaMap.size = ', this.criteriaMap.size);
        // console.log('unit = ', unit);
        requirements.push(this.enableLengthRule ? this._containAtLeastMinChars() : false, this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false, this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false, this.enableDigitRule ? this._containAtLeastOneDigit() : false, this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false, this.customValidator ? this._containCustomChars() : false);
        this._strength = requirements.filter(function (v) { return v; }).length * unit;
        // console.log('length = ', this._strength / unit);
        this.onStrengthChanged.emit(this.strength);
        this.setRulesAndValidators();
    };
    MatPasswordStrengthComponent.prototype.reset = function () {
        this._strength = 0;
        this.containAtLeastMinChars =
            this.containAtLeastOneLowerCaseLetter =
                this.containAtLeastOneUpperCaseLetter =
                    this.containAtLeastOneDigit =
                        this.containAtCustomChars =
                            this.containAtLeastOneSpecialChar = false;
    };
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "password", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "externalError", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "enableLengthRule", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "enableLowerCaseLetterRule", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "enableUpperCaseLetterRule", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "enableDigitRule", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "enableSpecialCharRule", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "min", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "max", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "customValidator", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "warnThreshold", void 0);
    __decorate([
        Input()
    ], MatPasswordStrengthComponent.prototype, "accentThreshold", void 0);
    __decorate([
        Output()
    ], MatPasswordStrengthComponent.prototype, "onStrengthChanged", void 0);
MatPasswordStrengthComponent.ɵfac = function MatPasswordStrengthComponent_Factory(t) { return new (t || MatPasswordStrengthComponent)(); };
MatPasswordStrengthComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatPasswordStrengthComponent, selectors: [["mat-password-strength"]], inputs: { enableLengthRule: "enableLengthRule", enableLowerCaseLetterRule: "enableLowerCaseLetterRule", enableUpperCaseLetterRule: "enableUpperCaseLetterRule", enableDigitRule: "enableDigitRule", enableSpecialCharRule: "enableSpecialCharRule", min: "min", max: "max", warnThreshold: "warnThreshold", accentThreshold: "accentThreshold", password: "password", externalError: "externalError", customValidator: "customValidator" }, outputs: { onStrengthChanged: "onStrengthChanged" }, exportAs: ["matPasswordStrength"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 2, consts: [["mode", "determinate", 3, "color", "value"]], template: function MatPasswordStrengthComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "mat-progress-bar", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("color", ctx.color)("value", ctx.strength);
    } }, directives: [ɵngcc1.MatProgressBar], styles: [".green   [_nghost-%COMP%]  .mat-progress-bar.mat-primary .mat-progress-bar-fill::after{background-color:#43a047}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPasswordStrengthComponent, [{
        type: Component,
        args: [{
                selector: 'mat-password-strength',
                exportAs: 'matPasswordStrength',
                template: "<mat-progress-bar mode=\"determinate\"\n                  [color]=\"color\"\n                  [value]=\"strength\">\n</mat-progress-bar>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill::after{background-color:#43a047}"]
            }]
    }], function () { return []; }, { enableLengthRule: [{
            type: Input
        }], enableLowerCaseLetterRule: [{
            type: Input
        }], enableUpperCaseLetterRule: [{
            type: Input
        }], enableDigitRule: [{
            type: Input
        }], enableSpecialCharRule: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], warnThreshold: [{
            type: Input
        }], accentThreshold: [{
            type: Input
        }], onStrengthChanged: [{
            type: Output
        }], password: [{
            type: Input
        }], externalError: [{
            type: Input
        }], customValidator: [{
            type: Input
        }] }); })();
    return MatPasswordStrengthComponent;
}());
export { MatPasswordStrengthComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,