import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { FormControl, ValidatorFn } from '@angular/forms';
import { Criteria } from '../../enum/criteria.enum';
import { MatPasswordStrengthValidator } from '../../validator/mat-password-strength-validator';
import { ThemePalette } from '@angular/material/core';
import * as ɵngcc0 from '@angular/core';
export declare class MatPasswordStrengthComponent implements OnInit, OnChanges {
    password: string;
    externalError: boolean;
    enableLengthRule: boolean;
    enableLowerCaseLetterRule: boolean;
    enableUpperCaseLetterRule: boolean;
    enableDigitRule: boolean;
    enableSpecialCharRule: boolean;
    min: number;
    max: number;
    customValidator: RegExp;
    warnThreshold: number;
    accentThreshold: number;
    onStrengthChanged: EventEmitter<number>;
    criteriaMap: Map<Criteria, RegExp>;
    containAtLeastMinChars: boolean;
    containAtLeastOneLowerCaseLetter: boolean;
    containAtLeastOneUpperCaseLetter: boolean;
    containAtLeastOneDigit: boolean;
    containAtLeastOneSpecialChar: boolean;
    containAtCustomChars: boolean;
    passwordFormControl: FormControl;
    passwordConfirmationFormControl: FormControl;
    validatorsArray: ValidatorFn[];
    private _strength;
    private _color;
    Validators: ValidatorFn;
    matPasswordStrengthValidator: MatPasswordStrengthValidator;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    get strength(): number;
    get color(): ThemePalette;
    private _containAtLeastMinChars;
    private _containAtLeastOneLowerCaseLetter;
    private _containAtLeastOneUpperCaseLetter;
    private _containAtLeastOneDigit;
    private _containAtLeastOneSpecialChar;
    private _containCustomChars;
    parseCustomValidatorsRegex(value?: string | RegExp): RegExp;
    setRulesAndValidators(): void;
    calculatePasswordStrength(): void;
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatPasswordStrengthComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatPasswordStrengthComponent, "mat-password-strength", ["matPasswordStrength"], { "enableLengthRule": "enableLengthRule"; "enableLowerCaseLetterRule": "enableLowerCaseLetterRule"; "enableUpperCaseLetterRule": "enableUpperCaseLetterRule"; "enableDigitRule": "enableDigitRule"; "enableSpecialCharRule": "enableSpecialCharRule"; "min": "min"; "max": "max"; "warnThreshold": "warnThreshold"; "accentThreshold": "accentThreshold"; "password": "password"; "externalError": "externalError"; "customValidator": "customValidator"; }, { "onStrengthChanged": "onStrengthChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXBhc3N3b3JkLXN0cmVuZ3RoLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtYXQtcGFzc3dvcmQtc3RyZW5ndGguY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ3JpdGVyaWEgfSBmcm9tICcuLi8uLi9lbnVtL2NyaXRlcmlhLmVudW0nO1xuaW1wb3J0IHsgTWF0UGFzc3dvcmRTdHJlbmd0aFZhbGlkYXRvciB9IGZyb20gJy4uLy4uL3ZhbGlkYXRvci9tYXQtcGFzc3dvcmQtc3RyZW5ndGgtdmFsaWRhdG9yJztcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0UGFzc3dvcmRTdHJlbmd0aENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIGV4dGVybmFsRXJyb3I6IGJvb2xlYW47XG4gICAgZW5hYmxlTGVuZ3RoUnVsZTogYm9vbGVhbjtcbiAgICBlbmFibGVMb3dlckNhc2VMZXR0ZXJSdWxlOiBib29sZWFuO1xuICAgIGVuYWJsZVVwcGVyQ2FzZUxldHRlclJ1bGU6IGJvb2xlYW47XG4gICAgZW5hYmxlRGlnaXRSdWxlOiBib29sZWFuO1xuICAgIGVuYWJsZVNwZWNpYWxDaGFyUnVsZTogYm9vbGVhbjtcbiAgICBtaW46IG51bWJlcjtcbiAgICBtYXg6IG51bWJlcjtcbiAgICBjdXN0b21WYWxpZGF0b3I6IFJlZ0V4cDtcbiAgICB3YXJuVGhyZXNob2xkOiBudW1iZXI7XG4gICAgYWNjZW50VGhyZXNob2xkOiBudW1iZXI7XG4gICAgb25TdHJlbmd0aENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIGNyaXRlcmlhTWFwOiBNYXA8Q3JpdGVyaWEsIFJlZ0V4cD47XG4gICAgY29udGFpbkF0TGVhc3RNaW5DaGFyczogYm9vbGVhbjtcbiAgICBjb250YWluQXRMZWFzdE9uZUxvd2VyQ2FzZUxldHRlcjogYm9vbGVhbjtcbiAgICBjb250YWluQXRMZWFzdE9uZVVwcGVyQ2FzZUxldHRlcjogYm9vbGVhbjtcbiAgICBjb250YWluQXRMZWFzdE9uZURpZ2l0OiBib29sZWFuO1xuICAgIGNvbnRhaW5BdExlYXN0T25lU3BlY2lhbENoYXI6IGJvb2xlYW47XG4gICAgY29udGFpbkF0Q3VzdG9tQ2hhcnM6IGJvb2xlYW47XG4gICAgcGFzc3dvcmRGb3JtQ29udHJvbDogRm9ybUNvbnRyb2w7XG4gICAgcGFzc3dvcmRDb25maXJtYXRpb25Gb3JtQ29udHJvbDogRm9ybUNvbnRyb2w7XG4gICAgdmFsaWRhdG9yc0FycmF5OiBWYWxpZGF0b3JGbltdO1xuICAgIHByaXZhdGUgX3N0cmVuZ3RoO1xuICAgIHByaXZhdGUgX2NvbG9yO1xuICAgIFZhbGlkYXRvcnM6IFZhbGlkYXRvckZuO1xuICAgIG1hdFBhc3N3b3JkU3RyZW5ndGhWYWxpZGF0b3I6IE1hdFBhc3N3b3JkU3RyZW5ndGhWYWxpZGF0b3I7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBnZXQgc3RyZW5ndGgoKTogbnVtYmVyO1xuICAgIGdldCBjb2xvcigpOiBUaGVtZVBhbGV0dGU7XG4gICAgcHJpdmF0ZSBfY29udGFpbkF0TGVhc3RNaW5DaGFycztcbiAgICBwcml2YXRlIF9jb250YWluQXRMZWFzdE9uZUxvd2VyQ2FzZUxldHRlcjtcbiAgICBwcml2YXRlIF9jb250YWluQXRMZWFzdE9uZVVwcGVyQ2FzZUxldHRlcjtcbiAgICBwcml2YXRlIF9jb250YWluQXRMZWFzdE9uZURpZ2l0O1xuICAgIHByaXZhdGUgX2NvbnRhaW5BdExlYXN0T25lU3BlY2lhbENoYXI7XG4gICAgcHJpdmF0ZSBfY29udGFpbkN1c3RvbUNoYXJzO1xuICAgIHBhcnNlQ3VzdG9tVmFsaWRhdG9yc1JlZ2V4KHZhbHVlPzogc3RyaW5nIHwgUmVnRXhwKTogUmVnRXhwO1xuICAgIHNldFJ1bGVzQW5kVmFsaWRhdG9ycygpOiB2b2lkO1xuICAgIGNhbGN1bGF0ZVBhc3N3b3JkU3RyZW5ndGgoKTogdm9pZDtcbiAgICByZXNldCgpOiB2b2lkO1xufVxuIl19