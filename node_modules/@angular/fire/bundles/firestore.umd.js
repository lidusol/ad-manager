(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire'), require('@angular/common'), require('firebase/app'), require('firebase/firestore')) :
    typeof define === 'function' && define.amd ? define(['@angular/core','exports', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire', '@angular/common', 'firebase/app', 'firebase/firestore'], factory) :
    (factory(global.ng.core,(global.angularfire2 = global.angularfire2 || {}, global.angularfire2.firestore = {}),global.rxjs,global.rxjs.operators,global.ng.core,global.angularfire2,global.ng.common,global.firebase));
}(this, (function (Éµngcc0,exports,rxjs,operators,core,fire,common,firebase) { 'use strict';

    firebase = firebase && firebase.hasOwnProperty('default') ? firebase['default'] : firebase;

    function _fromRef(ref, scheduler) {
        if (scheduler === void 0) { scheduler = rxjs.asyncScheduler; }
        return new rxjs.Observable(function (subscriber) {
            var unsubscribe;
            if (scheduler != null) {
                scheduler.schedule(function () {
                    unsubscribe = ref.onSnapshot(subscriber);
                });
            }
            else {
                unsubscribe = ref.onSnapshot(subscriber);
            }
            return function () {
                if (unsubscribe != null) {
                    unsubscribe();
                }
            };
        });
    }
    function fromRef(ref, scheduler) {
        return _fromRef(ref, scheduler);
    }
    function fromDocRef(ref, scheduler) {
        return fromRef(ref, scheduler)
            .pipe(operators.map(function (payload) { return ({ payload: payload, type: 'value' }); }));
    }
    function fromCollectionRef(ref, scheduler) {
        return fromRef(ref, scheduler).pipe(operators.map(function (payload) { return ({ payload: payload, type: 'query' }); }));
    }

    function docChanges(query, scheduler) {
        return fromCollectionRef(query, scheduler)
            .pipe(operators.map(function (action) {
            return action.payload.docChanges()
                .map(function (change) { return ({ type: change.type, payload: change }); });
        }));
    }
    function sortedChanges(query, events, scheduler) {
        return fromCollectionRef(query, scheduler)
            .pipe(operators.map(function (changes) { return changes.payload.docChanges(); }), operators.scan(function (current, changes) { return combineChanges(current, changes, events); }, []), operators.map(function (changes) { return changes.map(function (c) { return ({ type: c.type, payload: c }); }); }));
    }
    function combineChanges(current, changes, events) {
        changes.forEach(function (change) {
            if (events.indexOf(change.type) > -1) {
                current = combineChange(current, change);
            }
        });
        return current;
    }
    function combineChange(combined, change) {
        switch (change.type) {
            case 'added':
                if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) ;
                else {
                    combined.splice(change.newIndex, 0, change);
                }
                break;
            case 'modified':
                if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {
                    if (change.oldIndex !== change.newIndex) {
                        combined.splice(change.oldIndex, 1);
                        combined.splice(change.newIndex, 0, change);
                    }
                    else {
                        combined.splice(change.newIndex, 1, change);
                    }
                }
                break;
            case 'removed':
                if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {
                    combined.splice(change.oldIndex, 1);
                }
                break;
        }
        return combined;
    }

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function validateEventsArray(events) {
        if (!events || events.length === 0) {
            events = ['added', 'removed', 'modified'];
        }
        return events;
    }
    var AngularFirestoreCollection = (function () {
        function AngularFirestoreCollection(ref, query, afs) {
            this.ref = ref;
            this.query = query;
            this.afs = afs;
        }
        AngularFirestoreCollection.prototype.stateChanges = function (events) {
            if (!events || events.length === 0) {
                return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);
            }
            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.filter(function (change) { return events.indexOf(change.type) > -1; }); }), operators.filter(function (changes) { return changes.length > 0; }));
        };
        AngularFirestoreCollection.prototype.auditTrail = function (events) {
            return this.stateChanges(events).pipe(operators.scan(function (current, action) { return current.concat(action); }, []));
        };
        AngularFirestoreCollection.prototype.snapshotChanges = function (events) {
            var validatedEvents = validateEventsArray(events);
            var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);
            return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);
        };
        AngularFirestoreCollection.prototype.valueChanges = function (options) {
            if (options === void 0) { options = {}; }
            return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular)
                .pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.payload.docs.map(function (a) {
                var _a;
                if (options.idField) {
                    return __assign({}, a.data(), (_a = {}, _a[options.idField] = a.id, _a));
                }
                else {
                    return a.data();
                }
            }); }));
        };
        AngularFirestoreCollection.prototype.get = function (options) {
            return rxjs.from(this.query.get(options)).pipe(operators.observeOn(this.afs.schedulers.insideAngular));
        };
        AngularFirestoreCollection.prototype.add = function (data) {
            return this.ref.add(data);
        };
        AngularFirestoreCollection.prototype.doc = function (path) {
            return new AngularFirestoreDocument(this.ref.doc(path), this.afs);
        };
        return AngularFirestoreCollection;
    }());

    var AngularFirestoreDocument = (function () {
        function AngularFirestoreDocument(ref, afs) {
            this.ref = ref;
            this.afs = afs;
        }
        AngularFirestoreDocument.prototype.set = function (data, options) {
            return this.ref.set(data, options);
        };
        AngularFirestoreDocument.prototype.update = function (data) {
            return this.ref.update(data);
        };
        AngularFirestoreDocument.prototype.delete = function () {
            return this.ref.delete();
        };
        AngularFirestoreDocument.prototype.collection = function (path, queryFn) {
            var collectionRef = this.ref.collection(path);
            var _a = associateQuery(collectionRef, queryFn), ref = _a.ref, query = _a.query;
            return new AngularFirestoreCollection(ref, query, this.afs);
        };
        AngularFirestoreDocument.prototype.snapshotChanges = function () {
            var scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);
            return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);
        };
        AngularFirestoreDocument.prototype.valueChanges = function () {
            return this.snapshotChanges().pipe(operators.map(function (action) {
                return action.payload.data();
            }));
        };
        AngularFirestoreDocument.prototype.get = function (options) {
            return rxjs.from(this.ref.get(options)).pipe(operators.observeOn(this.afs.schedulers.insideAngular));
        };
        return AngularFirestoreDocument;
    }());

    var AngularFirestoreCollectionGroup = (function () {
        function AngularFirestoreCollectionGroup(query, afs) {
            this.query = query;
            this.afs = afs;
        }
        AngularFirestoreCollectionGroup.prototype.stateChanges = function (events) {
            if (!events || events.length === 0) {
                return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);
            }
            return docChanges(this.query, this.afs.schedulers.outsideAngular)
                .pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.filter(function (change) { return events.indexOf(change.type) > -1; }); }), operators.filter(function (changes) { return changes.length > 0; }));
        };
        AngularFirestoreCollectionGroup.prototype.auditTrail = function (events) {
            return this.stateChanges(events).pipe(operators.scan(function (current, action) { return current.concat(action); }, []));
        };
        AngularFirestoreCollectionGroup.prototype.snapshotChanges = function (events) {
            var validatedEvents = validateEventsArray(events);
            var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);
            return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);
        };
        AngularFirestoreCollectionGroup.prototype.valueChanges = function () {
            var fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);
            return fromCollectionRefScheduled$
                .pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.payload.docs.map(function (a) { return a.data(); }); }));
        };
        AngularFirestoreCollectionGroup.prototype.get = function (options) {
            return rxjs.from(this.query.get(options)).pipe(operators.observeOn(this.afs.schedulers.insideAngular));
        };
        return AngularFirestoreCollectionGroup;
    }());

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var EnablePersistenceToken = new core.InjectionToken('angularfire2.enableFirestorePersistence');
    var PersistenceSettingsToken = new core.InjectionToken('angularfire2.firestore.persistenceSettings');
    var FirestoreSettingsToken = new core.InjectionToken('angularfire2.firestore.settings');
    var ENABLE_PERSISTENCE = EnablePersistenceToken;
    var PERSISTENCE_SETTINGS = PersistenceSettingsToken;
    var SETTINGS = FirestoreSettingsToken;
    var major = parseInt(firebase.SDK_VERSION.split('.')[0]);
    var minor = parseInt(firebase.SDK_VERSION.split('.')[1]);
    var DefaultFirestoreSettings = ((major < 5 || (major == 5 && minor < 8)) ? { timestampsInSnapshots: true } : {});
    function associateQuery(collectionRef, queryFn) {
        if (queryFn === void 0) { queryFn = function (ref) { return ref; }; }
        var query = queryFn(collectionRef);
        var ref = collectionRef;
        return { query: query, ref: ref };
    }
    var AngularFirestore = (function () {
        function AngularFirestore(options, nameOrConfig, shouldEnablePersistence, settings, platformId, zone, persistenceSettings) {
            var _this = this;
            this.schedulers = new fire.ÉµAngularFireSchedulers(zone);
            this.keepUnstableUntilFirst = fire.ÉµkeepUnstableUntilFirstFactory(this.schedulers, platformId);
            this.firestore = zone.runOutsideAngular(function () {
                var app = fire._firebaseAppFactory(options, zone, nameOrConfig);
                var firestore$$1 = app.firestore();
                firestore$$1.settings(settings || DefaultFirestoreSettings);
                return firestore$$1;
            });
            if (shouldEnablePersistence && !common.isPlatformServer(platformId)) {
                var enablePersistence = function () {
                    try {
                        return rxjs.from(_this.firestore.enablePersistence(persistenceSettings || undefined).then(function () { return true; }, function () { return false; }));
                    }
                    catch (e) {
                        return rxjs.of(false);
                    }
                };
                this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);
            }
            else {
                this.persistenceEnabled$ = rxjs.of(false);
            }
        }
        AngularFirestore.prototype.collection = function (pathOrRef, queryFn) {
            var collectionRef;
            if (typeof pathOrRef === 'string') {
                collectionRef = this.firestore.collection(pathOrRef);
            }
            else {
                collectionRef = pathOrRef;
            }
            var _a = associateQuery(collectionRef, queryFn), ref = _a.ref, query = _a.query;
            return new AngularFirestoreCollection(ref, query, this);
        };
        AngularFirestore.prototype.collectionGroup = function (collectionId, queryGroupFn) {
            if (major < 6) {
                throw "collection group queries require Firebase JS SDK >= 6.0";
            }
            var queryFn = queryGroupFn || (function (ref) { return ref; });
            var firestore$$1 = this.firestore;
            var collectionGroup = firestore$$1.collectionGroup(collectionId);
            return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);
        };
        AngularFirestore.prototype.doc = function (pathOrRef) {
            var ref;
            if (typeof pathOrRef === 'string') {
                ref = this.firestore.doc(pathOrRef);
            }
            else {
                ref = pathOrRef;
            }
            return new AngularFirestoreDocument(ref, this);
        };
        AngularFirestore.prototype.createId = function () {
            return this.firestore.collection('_').doc().id;
        };
        AngularFirestore = __decorate([ __param(0, core.Inject(fire.FIREBASE_OPTIONS)),
            __param(1, core.Optional()), __param(1, core.Inject(fire.FIREBASE_APP_NAME)),
            __param(2, core.Optional()), __param(2, core.Inject(ENABLE_PERSISTENCE)),
            __param(3, core.Optional()), __param(3, core.Inject(SETTINGS)),
            __param(4, core.Inject(core.PLATFORM_ID)),
            __param(6, core.Optional()), __param(6, core.Inject(PERSISTENCE_SETTINGS)),
            __metadata("design:paramtypes", [Object, Object, Object, Object, Object,
                core.NgZone, Object])
        ], AngularFirestore);
AngularFirestore.Éµfac = function AngularFirestore_Factory(t) { return new (t || AngularFirestore)(Éµngcc0.ÉµÉµinject(fire.FIREBASE_OPTIONS), Éµngcc0.ÉµÉµinject(fire.FIREBASE_APP_NAME, 8), Éµngcc0.ÉµÉµinject(ENABLE_PERSISTENCE, 8), Éµngcc0.ÉµÉµinject(SETTINGS, 8), Éµngcc0.ÉµÉµinject(core.PLATFORM_ID), Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PERSISTENCE_SETTINGS, 8)); };
AngularFirestore.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: AngularFirestore, factory: function (t) { return AngularFirestore.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(AngularFirestore, [{
        type: core.Injectable
    }], function () { return [{ type: Object, decorators: [{
                type: core.Inject,
                args: [fire.FIREBASE_OPTIONS]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [fire.FIREBASE_APP_NAME]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [ENABLE_PERSISTENCE]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [SETTINGS]
            }] }, { type: Object, decorators: [{
                type: core.Inject,
                args: [core.PLATFORM_ID]
            }] }, { type: Éµngcc0.NgZone }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [PERSISTENCE_SETTINGS]
            }] }]; }, null); })();
        return AngularFirestore;
    }());

    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AngularFirestoreModule = (function () {
        function AngularFirestoreModule() {
        }
        AngularFirestoreModule_1 = AngularFirestoreModule;
        AngularFirestoreModule.enablePersistence = function (persistenceSettings) {
            return {
                ngModule: AngularFirestoreModule_1,
                providers: [
                    { provide: EnablePersistenceToken, useValue: true },
                    { provide: PersistenceSettingsToken, useValue: persistenceSettings },
                ]
            };
        };
        var AngularFirestoreModule_1;
AngularFirestoreModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: AngularFirestoreModule });
AngularFirestoreModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function AngularFirestoreModule_Factory(t) { return new (t || AngularFirestoreModule)(); }, providers: [AngularFirestore] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(AngularFirestoreModule, [{
        type: core.NgModule,
        args: [{
                providers: [AngularFirestore]
            }]
    }], function () { return []; }, null); })();
        return AngularFirestoreModule;
    }());

    exports.EnablePersistenceToken = EnablePersistenceToken;
    exports.PersistenceSettingsToken = PersistenceSettingsToken;
    exports.FirestoreSettingsToken = FirestoreSettingsToken;
    exports.ENABLE_PERSISTENCE = ENABLE_PERSISTENCE;
    exports.PERSISTENCE_SETTINGS = PERSISTENCE_SETTINGS;
    exports.SETTINGS = SETTINGS;
    exports.DefaultFirestoreSettings = DefaultFirestoreSettings;
    exports.associateQuery = associateQuery;
    exports.AngularFirestore = AngularFirestore;
    exports.AngularFirestoreModule = AngularFirestoreModule;
    exports.validateEventsArray = validateEventsArray;
    exports.AngularFirestoreCollection = AngularFirestoreCollection;
    exports.AngularFirestoreCollectionGroup = AngularFirestoreCollectionGroup;
    exports.AngularFirestoreDocument = AngularFirestoreDocument;
    exports.docChanges = docChanges;
    exports.sortedChanges = sortedChanges;
    exports.combineChanges = combineChanges;
    exports.combineChange = combineChange;
    exports.fromRef = fromRef;
    exports.fromDocRef = fromDocRef;
    exports.fromCollectionRef = fromCollectionRef;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,