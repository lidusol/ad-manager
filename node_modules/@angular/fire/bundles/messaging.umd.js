(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/fire')) :
    typeof define === 'function' && define.amd ? define(['@angular/core','exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/fire'], factory) :
    (factory(global.ng.core,(global.angularfire2 = global.angularfire2 || {}, global.angularfire2.messaging = {}),global.ng.core,global.ng.common,global.rxjs,global.rxjs.operators,global.angularfire2));
}(this, (function (ɵngcc0,exports,core,common,rxjs,operators,fire) { 'use strict';

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var AngularFireMessaging = (function () {
        function AngularFireMessaging(options, nameOrConfig, platformId, zone) {
            var _this = this;
            var schedulers = new fire.ɵAngularFireSchedulers(zone);
            var requireMessaging = rxjs.empty();
            this.messaging = requireMessaging.pipe(operators.observeOn(schedulers.outsideAngular), operators.map(function () { return fire._firebaseAppFactory(options, zone, nameOrConfig); }), operators.map(function (app) { return app.messaging(); }));
            if (!common.isPlatformServer(platformId)) {
                this.requestPermission = this.messaging.pipe(operators.observeOn(schedulers.outsideAngular), operators.switchMap(function (messaging) { return messaging.requestPermission(); }));
            }
            else {
                this.requestPermission = rxjs.throwError('Not available on server platform.');
            }
            this.getToken = this.messaging.pipe(operators.observeOn(schedulers.outsideAngular), operators.switchMap(function (messaging) { return messaging.getToken(); }), operators.defaultIfEmpty(null));
            var tokenChanges = this.messaging.pipe(operators.observeOn(schedulers.outsideAngular), operators.switchMap(function (messaging) { return new rxjs.Observable(messaging.onTokenRefresh.bind(messaging)).pipe(operators.switchMap(function () { return messaging.getToken(); })); }));
            this.tokenChanges = this.getToken.pipe(operators.concat(tokenChanges));
            this.messages = this.messaging.pipe(operators.observeOn(schedulers.outsideAngular), operators.switchMap(function (messaging) { return new rxjs.Observable(messaging.onMessage.bind(messaging)); }));
            this.requestToken = this.requestPermission.pipe(operators.catchError(function () { return rxjs.of(null); }), operators.mergeMap(function () { return _this.tokenChanges; }));
            this.deleteToken = function (token) { return _this.messaging.pipe(operators.observeOn(schedulers.outsideAngular), operators.switchMap(function (messaging) { return messaging.deleteToken(token); }), operators.defaultIfEmpty(false)); };
        }
        AngularFireMessaging = __decorate([ __param(0, core.Inject(fire.FIREBASE_OPTIONS)),
            __param(1, core.Optional()), __param(1, core.Inject(fire.FIREBASE_APP_NAME)),
            __param(2, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [Object, Object, Object,
                core.NgZone])
        ], AngularFireMessaging);
AngularFireMessaging.ɵfac = function AngularFireMessaging_Factory(t) { return new (t || AngularFireMessaging)(ɵngcc0.ɵɵinject(fire.FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(fire.FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(core.PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
AngularFireMessaging.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AngularFireMessaging, factory: function (t) { return AngularFireMessaging.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireMessaging, [{
        type: core.Injectable
    }], function () { return [{ type: Object, decorators: [{
                type: core.Inject,
                args: [fire.FIREBASE_OPTIONS]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [fire.FIREBASE_APP_NAME]
            }] }, { type: Object, decorators: [{
                type: core.Inject,
                args: [core.PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }]; }, null); })();
        return AngularFireMessaging;
    }());

    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AngularFireMessagingModule = (function () {
        function AngularFireMessagingModule() {
        }
AngularFireMessagingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFireMessagingModule });
AngularFireMessagingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFireMessagingModule_Factory(t) { return new (t || AngularFireMessagingModule)(); }, providers: [AngularFireMessaging] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireMessagingModule, [{
        type: core.NgModule,
        args: [{
                providers: [AngularFireMessaging]
            }]
    }], function () { return []; }, null); })();
        return AngularFireMessagingModule;
    }());

    exports.AngularFireMessaging = AngularFireMessaging;
    exports.AngularFireMessagingModule = AngularFireMessagingModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,