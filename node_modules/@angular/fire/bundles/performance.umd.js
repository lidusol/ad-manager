(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/fire'),exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/fire')) :
    typeof define === 'function' && define.amd ? define(['@angular/core','@angular/fire','exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/fire'], factory) :
    (factory(global.ng.core,global.ng.fire,(global.angularfire2 = global.angularfire2 || {}, global.angularfire2.performance = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.angularfire2));
}(this, (function (ɵngcc0,ɵngcc1,exports,core,rxjs,operators,fire) { 'use strict';

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var AUTOMATICALLY_TRACE_CORE_NG_METRICS = new core.InjectionToken('angularfire2.performance.auto_trace');
    var INSTRUMENTATION_ENABLED = new core.InjectionToken('angularfire2.performance.instrumentationEnabled');
    var DATA_COLLECTION_ENABLED = new core.InjectionToken('angularfire2.performance.dataCollectionEnabled');
    var AngularFirePerformance = (function () {
        function AngularFirePerformance(app, automaticallyTraceCoreNgMetrics, instrumentationEnabled, dataCollectionEnabled, appRef, zone) {
            var _this = this;
            this.zone = zone;
            this.trace$ = function (name, options) {
                return _this.performance.pipe(operators.switchMap(function (performance) {
                    return new rxjs.Observable(function (emitter) {
                        return _this.zone.runOutsideAngular(function () {
                            var trace = performance.trace(name);
                            options && options.metrics && Object.keys(options.metrics).forEach(function (metric) {
                                trace.putMetric(metric, options.metrics[metric]);
                            });
                            options && options.attributes && Object.keys(options.attributes).forEach(function (attribute) {
                                trace.putAttribute(attribute, options.attributes[attribute]);
                            });
                            var attributeSubscriptions = options && options.attribute$ ? Object.keys(options.attribute$).map(function (attribute) {
                                return options.attribute$[attribute].subscribe(function (next) { return trace.putAttribute(attribute, next); });
                            }) : [];
                            var metricSubscriptions = options && options.metric$ ? Object.keys(options.metric$).map(function (metric) {
                                return options.metric$[metric].subscribe(function (next) { return trace.putMetric(metric, next); });
                            }) : [];
                            var incrementOnSubscriptions = options && options.incrementMetric$ ? Object.keys(options.incrementMetric$).map(function (metric) {
                                return options.incrementMetric$[metric].subscribe(function (next) { return trace.incrementMetric(metric, next || undefined); });
                            }) : [];
                            emitter.next(trace.start());
                            return { unsubscribe: function () {
                                    trace.stop();
                                    metricSubscriptions.forEach(function (m) { return m.unsubscribe(); });
                                    incrementOnSubscriptions.forEach(function (m) { return m.unsubscribe(); });
                                    attributeSubscriptions.forEach(function (m) { return m.unsubscribe(); });
                                } };
                        });
                    });
                }));
            };
            this.traceUntil = function (name, test, options) { return function (source$) { return new rxjs.Observable(function (subscriber) {
                var traceSubscription = _this.trace$(name, options).subscribe();
                return source$.pipe(operators.tap(function (a) { return test(a) && traceSubscription.unsubscribe(); }, function () { }, function () { return options && options.orComplete && traceSubscription.unsubscribe(); })).subscribe(subscriber);
            }); }; };
            this.traceWhile = function (name, test, options) { return function (source$) { return new rxjs.Observable(function (subscriber) {
                var traceSubscription;
                return source$.pipe(operators.tap(function (a) {
                    if (test(a)) {
                        traceSubscription = traceSubscription || _this.trace$(name, options).subscribe();
                    }
                    else {
                        traceSubscription && traceSubscription.unsubscribe();
                        traceSubscription = undefined;
                    }
                }, function () { }, function () { return options && options.orComplete && traceSubscription && traceSubscription.unsubscribe(); })).subscribe(subscriber);
            }); }; };
            this.traceUntilComplete = function (name, options) { return function (source$) { return new rxjs.Observable(function (subscriber) {
                var traceSubscription = _this.trace$(name, options).subscribe();
                return source$.pipe(operators.tap(function () { }, function () { }, function () { return traceSubscription.unsubscribe(); })).subscribe(subscriber);
            }); }; };
            this.traceUntilFirst = function (name, options) { return function (source$) { return new rxjs.Observable(function (subscriber) {
                var traceSubscription = _this.trace$(name, options).subscribe();
                return source$.pipe(operators.tap(function () { return traceSubscription.unsubscribe(); }, function () { }, function () { })).subscribe(subscriber);
            }); }; };
            this.trace = function (name, options) { return function (source$) { return new rxjs.Observable(function (subscriber) {
                var traceSubscription = _this.trace$(name, options).subscribe();
                return source$.pipe(operators.tap(function () { return traceSubscription.unsubscribe(); }, function () { }, function () { return traceSubscription.unsubscribe(); })).subscribe(subscriber);
            }); }; };
            var requirePerformance = rxjs.from(zone.runOutsideAngular(function () { return rxjs.empty(); }));
            this.performance = requirePerformance.pipe(operators.map(function () { return zone.runOutsideAngular(function () { return app.performance(); }); }), operators.tap(function (performance) {
                if (instrumentationEnabled == false) {
                    performance.instrumentationEnabled = false;
                }
                if (dataCollectionEnabled == false) {
                    performance.dataCollectionEnabled = false;
                }
            }), operators.shareReplay(1));
            if (automaticallyTraceCoreNgMetrics != false) {
                appRef.isStable.pipe(operators.first(function (it) { return it; }), this.traceUntilComplete('isStable')).subscribe();
            }
        }
        AngularFirePerformance = __decorate([ __param(1, core.Optional()), __param(1, core.Inject(AUTOMATICALLY_TRACE_CORE_NG_METRICS)),
            __param(2, core.Optional()), __param(2, core.Inject(INSTRUMENTATION_ENABLED)),
            __param(3, core.Optional()), __param(3, core.Inject(DATA_COLLECTION_ENABLED)),
            __metadata("design:paramtypes", [fire.FirebaseApp, Object, Object, Object, core.ApplicationRef,
                core.NgZone])
        ], AngularFirePerformance);
AngularFirePerformance.ɵfac = function AngularFirePerformance_Factory(t) { return new (t || AngularFirePerformance)(ɵngcc0.ɵɵinject(ɵngcc1.FirebaseApp), ɵngcc0.ɵɵinject(AUTOMATICALLY_TRACE_CORE_NG_METRICS, 8), ɵngcc0.ɵɵinject(INSTRUMENTATION_ENABLED, 8), ɵngcc0.ɵɵinject(DATA_COLLECTION_ENABLED, 8), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
AngularFirePerformance.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AngularFirePerformance, factory: function (t) { return AngularFirePerformance.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformance, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc1.FirebaseApp }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [AUTOMATICALLY_TRACE_CORE_NG_METRICS]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [INSTRUMENTATION_ENABLED]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [DATA_COLLECTION_ENABLED]
            }] }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.NgZone }]; }, null); })();
        return AngularFirePerformance;
    }());

    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var AngularFirePerformanceModule = (function () {
        function AngularFirePerformanceModule(_) {
        }
        AngularFirePerformanceModule = __decorate$1([ __metadata$1("design:paramtypes", [AngularFirePerformance])
        ], AngularFirePerformanceModule);
AngularFirePerformanceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFirePerformanceModule });
AngularFirePerformanceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFirePerformanceModule_Factory(t) { return new (t || AngularFirePerformanceModule)(ɵngcc0.ɵɵinject(AngularFirePerformance)); }, providers: [AngularFirePerformance] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirePerformanceModule, [{
        type: core.NgModule,
        args: [{
                providers: [AngularFirePerformance]
            }]
    }], function () { return [{ type: AngularFirePerformance }]; }, null); })();
        return AngularFirePerformanceModule;
    }());

    exports.AUTOMATICALLY_TRACE_CORE_NG_METRICS = AUTOMATICALLY_TRACE_CORE_NG_METRICS;
    exports.INSTRUMENTATION_ENABLED = INSTRUMENTATION_ENABLED;
    exports.DATA_COLLECTION_ENABLED = DATA_COLLECTION_ENABLED;
    exports.AngularFirePerformance = AngularFirePerformance;
    exports.AngularFirePerformanceModule = AngularFirePerformanceModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,