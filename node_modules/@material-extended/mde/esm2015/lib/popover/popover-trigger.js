import { __decorate, __param } from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Optional, Output, ViewContainerRef, HostListener, HostBinding, ChangeDetectorRef, } from '@angular/core';
import { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { Overlay, OverlayRef, OverlayConfig, HorizontalConnectionPos, VerticalConnectionPos, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { throwMdePopoverMissingError } from './popover-errors';
/**
 * This directive is intended to be used in conjunction with an mde-popover tag. It is
 * responsible for toggling the display of the provided popover instance.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
import * as ɵngcc2 from '@angular/cdk/bidi';
let MdePopoverTrigger = class MdePopoverTrigger {
    constructor(_overlay, _elementRef, _viewContainerRef, _dir, _changeDetectorRef) {
        this._overlay = _overlay;
        this._elementRef = _elementRef;
        this._viewContainerRef = _viewContainerRef;
        this._dir = _dir;
        this._changeDetectorRef = _changeDetectorRef;
        this.ariaHaspopup = true;
        this._overlayRef = null;
        this._popoverOpen = false;
        this._halt = false;
        // tracking input type is necessary so it's possible to only auto-focus
        // the first item of the list when the popover is opened via the keyboard
        this._openedByMouse = false;
        /** Popover backdrop close on click */
        this.backdropCloseOnClick = true;
        /** Event emitted when the associated popover is opened. */
        this.opened = new EventEmitter();
        /** Event emitted when the associated popover is closed. */
        this.closed = new EventEmitter();
    }
    ngAfterViewInit() {
        this._checkPopover();
        this._setCurrentConfig();
        this.popover.close.subscribe(() => this.closePopover());
    }
    ngOnDestroy() { this.destroyPopover(); }
    _setCurrentConfig() {
        if (this.positionX === 'before' || this.positionX === 'after') {
            this.popover.positionX = this.positionX;
        }
        if (this.positionY === 'above' || this.positionY === 'below') {
            this.popover.positionY = this.positionY;
        }
        if (this.triggerEvent) {
            this.popover.triggerEvent = this.triggerEvent;
        }
        if (this.enterDelay) {
            this.popover.enterDelay = this.enterDelay;
        }
        if (this.leaveDelay) {
            this.popover.leaveDelay = this.leaveDelay;
        }
        if (this.overlapTrigger === true || this.overlapTrigger === false) {
            this.popover.overlapTrigger = this.overlapTrigger;
        }
        if (this.targetOffsetX) {
            this.popover.targetOffsetX = this.targetOffsetX;
        }
        if (this.targetOffsetY) {
            this.popover.targetOffsetY = this.targetOffsetY;
        }
        if (this.arrowOffsetX) {
            this.popover.arrowOffsetX = this.arrowOffsetX;
        }
        if (this.arrowWidth) {
            this.popover.arrowWidth = this.arrowWidth;
        }
        if (this.arrowColor) {
            this.popover.arrowColor = this.arrowColor;
        }
        if (this.closeOnClick === true || this.closeOnClick === false) {
            this.popover.closeOnClick = this.closeOnClick;
        }
        this.popover.setCurrentStyles();
    }
    /** Whether the popover is open. */
    get popoverOpen() { return this._popoverOpen; }
    onClick(event) {
        if (this.popover.triggerEvent === 'click') {
            // this.popover.setCurrentStyles();
            // this._setCurrentConfig();
            this.togglePopover();
        }
    }
    onMouseEnter(event) {
        this._halt = false;
        if (this.popover.triggerEvent === 'hover') {
            this._mouseoverTimer = setTimeout(() => {
                this.openPopover();
            }, this.popover.enterDelay);
        }
    }
    onMouseLeave(event) {
        if (this.popover.triggerEvent === 'hover') {
            if (this._mouseoverTimer) {
                clearTimeout(this._mouseoverTimer);
                this._mouseoverTimer = null;
            }
            if (this._popoverOpen) {
                setTimeout(() => {
                    if (!this.popover.closeDisabled) {
                        this.closePopover();
                    }
                }, this.popover.leaveDelay);
            }
            else {
                this._halt = true;
            }
        }
    }
    /** Toggles the popover between the open and closed states. */
    togglePopover() {
        return this._popoverOpen ? this.closePopover() : this.openPopover();
    }
    /** Opens the popover. */
    openPopover() {
        if (!this._popoverOpen && !this._halt) {
            this._createOverlay().attach(this._portal);
            /** Only subscribe to backdrop if trigger event is click */
            if (this.triggerEvent === 'click' && this.backdropCloseOnClick === true) {
                this._subscribeToBackdrop();
            }
            this._initPopover();
        }
    }
    /** Closes the popover. */
    closePopover() {
        if (this._overlayRef) {
            this._overlayRef.detach();
            /** Only unsubscribe to backdrop if trigger event is click */
            if (this.triggerEvent === 'click' && this.backdropCloseOnClick === true) {
                this._backdropSubscription.unsubscribe();
            }
            this._resetPopover();
        }
    }
    /** Removes the popover from the DOM. */
    destroyPopover() {
        if (this._mouseoverTimer) {
            clearTimeout(this._mouseoverTimer);
            this._mouseoverTimer = null;
        }
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
            this._cleanUpSubscriptions();
        }
    }
    /** Focuses the popover trigger. */
    focus() {
        this._elementRef.nativeElement.focus();
    }
    /** The text direction of the containing app. */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /**
    * This method ensures that the popover closes when the overlay backdrop is clicked.
    * We do not use first() here because doing so would not catch clicks from within
    * the popover, and it would fail to unsubscribe properly. Instead, we unsubscribe
    * explicitly when the popover is closed or destroyed.
    */
    _subscribeToBackdrop() {
        if (this._overlayRef) {
            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {
                this.popover._emitCloseEvent();
            });
        }
    }
    /**
    * This method sets the popover state to open and focuses the first item if
    * the popover was opened via the keyboard.
    */
    _initPopover() {
        this._setIsPopoverOpen(true);
    }
    /**
    * This method resets the popover when it's closed, most importantly restoring
    * focus to the popover trigger if the popover was opened via the keyboard.
    */
    _resetPopover() {
        this._setIsPopoverOpen(false);
        // Focus only needs to be reset to the host element if the popover was opened
        // by the keyboard and manually shifted to the first popover item.
        if (!this._openedByMouse) {
            this.focus();
        }
        this._openedByMouse = false;
    }
    /** set state rather than toggle to support triggers sharing a popover */
    _setIsPopoverOpen(isOpen) {
        this._popoverOpen = isOpen;
        this._popoverOpen ? this.opened.emit() : this.closed.emit();
    }
    /**
    *  This method checks that a valid instance of MdPopover has been passed into
    *  mdPopoverTriggerFor. If not, an exception is thrown.
    */
    _checkPopover() {
        if (!this.popover) {
            throwMdePopoverMissingError();
        }
    }
    /**
    *  This method creates the overlay from the provided popover's template and saves its
    *  OverlayRef so that it can be attached to the DOM when openPopover is called.
    */
    _createOverlay() {
        if (!this._overlayRef) {
            this._portal = new TemplatePortal(this.popover.templateRef, this._viewContainerRef);
            const config = this._getOverlayConfig();
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this._overlay.create(config);
        }
        return this._overlayRef;
    }
    /**
    * This method builds the configuration object needed to create the overlay, the OverlayConfig.
    * @returns OverlayConfig
    */
    _getOverlayConfig() {
        const overlayState = new OverlayConfig();
        overlayState.positionStrategy = this._getPosition();
        /** Display overlay backdrop if trigger event is click */
        if (this.triggerEvent === 'click') {
            overlayState.hasBackdrop = true;
            overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';
        }
        overlayState.direction = this.dir;
        overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();
        return overlayState;
    }
    /**
    * Listens to changes in the position of the overlay and sets the correct classes
    * on the popover based on the new position. This ensures the animation origin is always
    * correct, even if a fallback position is used for the overlay.
    */
    _subscribeToPositions(position) {
        this._positionSubscription = position.positionChanges.subscribe(change => {
            const posisionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
            let posisionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
            if (!this.popover.overlapTrigger) {
                posisionY = posisionY === 'below' ? 'above' : 'below';
            }
            // required for ChangeDetectionStrategy.OnPush
            this._changeDetectorRef.markForCheck();
            this.popover.zone.run(() => {
                this.popover.positionX = posisionX;
                this.popover.positionY = posisionY;
                this.popover.setCurrentStyles();
                this.popover.setPositionClasses(posisionX, posisionY);
            });
        });
    }
    /**
    * This method builds the position strategy for the overlay, so the popover is properly connected
    * to the trigger.
    * @returns ConnectedPositionStrategy
    */
    _getPosition() {
        const [originX, originFallbackX] = this.popover.positionX === 'before' ? ['end', 'start'] : ['start', 'end'];
        const [overlayY, overlayFallbackY] = this.popover.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];
        // let originY = overlayY;
        // let fallbackOriginY = overlayFallbackY;
        let originY = overlayY;
        let originFallbackY = overlayFallbackY;
        const overlayX = originX;
        const overlayFallbackX = originFallbackX;
        // let [originY, originFallbackY] = [overlayY, overlayFallbackY];
        // let [overlayX, overlayFallbackX] = [originX, originFallbackX];
        /** Reverse overlayY and fallbackOverlayY when overlapTrigger is false */
        if (!this.popover.overlapTrigger) {
            originY = overlayY === 'top' ? 'bottom' : 'top';
            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        }
        let offsetX = 0;
        let offsetY = 0;
        if (this.popover.targetOffsetX && !isNaN(Number(this.popover.targetOffsetX))) {
            offsetX = Number(this.popover.targetOffsetX);
            // offsetX = -16;
        }
        if (this.popover.targetOffsetY && !isNaN(Number(this.popover.targetOffsetY))) {
            offsetY = Number(this.popover.targetOffsetY);
            // offsetY = -10;
        }
        /**
         * For overriding position element, when mdePopoverTargetAt has a valid element reference.
         * Useful for sticking popover to parent element and offsetting arrow to trigger element.
         * If undefined defaults to the trigger element reference.
         */
        let element = this._elementRef;
        if (typeof this.targetElement !== 'undefined') {
            this.popover.containerPositioning = true;
            element = this.targetElement._elementRef;
        }
        return this._overlay.position()
            .flexibleConnectedTo(element)
            .withPositions([
            {
                originX,
                originY,
                overlayX,
                overlayY,
                offsetY
            },
            {
                originX: originFallbackX,
                originY,
                overlayX: overlayFallbackX,
                overlayY,
                offsetY
            },
            {
                originX,
                originY: originFallbackY,
                overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            }
        ])
            .withDefaultOffsetX(offsetX)
            .withDefaultOffsetY(offsetY);
        /*
        return this._overlay.position()
          .connectedTo(element,
              {originX: posX, originY: originY},
              {overlayX: posX, overlayY: overlayY})
          .withFallbackPosition(
              {originX: fallbackX, originY: originY},
              {overlayX: fallbackX, overlayY: overlayY})
          .withFallbackPosition(
              {originX: posX, originY: fallbackOriginY},
              {overlayX: posX, overlayY: fallbackOverlayY})
          .withFallbackPosition(
              {originX: fallbackX, originY: fallbackOriginY},
              {overlayX: fallbackX, overlayY: fallbackOverlayY})
          .withOffsetX(offsetX)
          .withOffsetY(offsetY);
          */
    }
    _cleanUpSubscriptions() {
        if (this._backdropSubscription) {
            this._backdropSubscription.unsubscribe();
        }
        if (this._positionSubscription) {
            this._positionSubscription.unsubscribe();
        }
    }
    _handleMousedown(event) {
        if (event && !isFakeMousedownFromScreenReader(event)) {
            this._openedByMouse = true;
        }
    }
};
MdePopoverTrigger.ɵfac = function MdePopoverTrigger_Factory(t) { return new (t || MdePopoverTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MdePopoverTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MdePopoverTrigger, selectors: [["", "mdePopoverTriggerFor", ""]], hostVars: 1, hostBindings: function MdePopoverTrigger_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MdePopoverTrigger_click_HostBindingHandler($event) { return ctx.onClick($event); })("mouseenter", function MdePopoverTrigger_mouseenter_HostBindingHandler($event) { return ctx.onMouseEnter($event); })("mouseleave", function MdePopoverTrigger_mouseleave_HostBindingHandler($event) { return ctx.onMouseLeave($event); })("mousedown", function MdePopoverTrigger_mousedown_HostBindingHandler($event) { return ctx._handleMousedown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-haspopup", ctx.ariaHaspopup);
    } }, inputs: { backdropCloseOnClick: ["mdePopoverBackdropCloseOnClick", "backdropCloseOnClick"], popover: ["mdePopoverTriggerFor", "popover"], targetElement: ["mdePopoverTargetAt", "targetElement"], positionX: ["mdePopoverPositionX", "positionX"], positionY: ["mdePopoverPositionY", "positionY"], triggerEvent: ["mdePopoverTriggerOn", "triggerEvent"], enterDelay: ["mdePopoverEnterDelay", "enterDelay"], leaveDelay: ["mdePopoverLeaveDelay", "leaveDelay"], overlapTrigger: ["mdePopoverOverlapTrigger", "overlapTrigger"], targetOffsetX: ["mdePopoverOffsetX", "targetOffsetX"], targetOffsetY: ["mdePopoverOffsetY", "targetOffsetY"], arrowOffsetX: ["mdePopoverArrowOffsetX", "arrowOffsetX"], arrowWidth: ["mdePopoverArrowWidth", "arrowWidth"], arrowColor: ["mdePopoverArrowColor", "arrowColor"], closeOnClick: ["mdePopoverCloseOnClick", "closeOnClick"] }, outputs: { opened: "opened", closed: "closed" }, exportAs: ["mdePopoverTrigger"] });
MdePopoverTrigger.ctorParameters = () => [
    { type: Overlay },
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: Directionality, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
__decorate([
    HostBinding('attr.aria-haspopup')
], MdePopoverTrigger.prototype, "ariaHaspopup", void 0);
__decorate([
    Input('mdePopoverTriggerFor')
], MdePopoverTrigger.prototype, "popover", void 0);
__decorate([
    Input('mdePopoverTargetAt')
], MdePopoverTrigger.prototype, "targetElement", void 0);
__decorate([
    Input('mdePopoverPositionX')
], MdePopoverTrigger.prototype, "positionX", void 0);
__decorate([
    Input('mdePopoverPositionY')
], MdePopoverTrigger.prototype, "positionY", void 0);
__decorate([
    Input('mdePopoverTriggerOn')
], MdePopoverTrigger.prototype, "triggerEvent", void 0);
__decorate([
    Input('mdePopoverEnterDelay')
], MdePopoverTrigger.prototype, "enterDelay", void 0);
__decorate([
    Input('mdePopoverLeaveDelay')
], MdePopoverTrigger.prototype, "leaveDelay", void 0);
__decorate([
    Input('mdePopoverOverlapTrigger')
], MdePopoverTrigger.prototype, "overlapTrigger", void 0);
__decorate([
    Input('mdePopoverOffsetX')
], MdePopoverTrigger.prototype, "targetOffsetX", void 0);
__decorate([
    Input('mdePopoverOffsetY')
], MdePopoverTrigger.prototype, "targetOffsetY", void 0);
__decorate([
    Input('mdePopoverArrowOffsetX')
], MdePopoverTrigger.prototype, "arrowOffsetX", void 0);
__decorate([
    Input('mdePopoverArrowWidth')
], MdePopoverTrigger.prototype, "arrowWidth", void 0);
__decorate([
    Input('mdePopoverArrowColor')
], MdePopoverTrigger.prototype, "arrowColor", void 0);
__decorate([
    Input('mdePopoverCloseOnClick')
], MdePopoverTrigger.prototype, "closeOnClick", void 0);
__decorate([
    Input('mdePopoverBackdropCloseOnClick')
], MdePopoverTrigger.prototype, "backdropCloseOnClick", void 0);
__decorate([
    Output()
], MdePopoverTrigger.prototype, "opened", void 0);
__decorate([
    Output()
], MdePopoverTrigger.prototype, "closed", void 0);
__decorate([
    HostListener('click', ['$event'])
], MdePopoverTrigger.prototype, "onClick", null);
__decorate([
    HostListener('mouseenter', ['$event'])
], MdePopoverTrigger.prototype, "onMouseEnter", null);
__decorate([
    HostListener('mouseleave', ['$event'])
], MdePopoverTrigger.prototype, "onMouseLeave", null);
__decorate([
    HostListener('mousedown', ['$event'])
], MdePopoverTrigger.prototype, "_handleMousedown", null);
MdePopoverTrigger = __decorate([ __param(3, Optional())
], MdePopoverTrigger);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MdePopoverTrigger, [{
        type: Directive,
        args: [{
                selector: '[mdePopoverTriggerFor]',
                exportAs: 'mdePopoverTrigger'
            }]
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc2.Directionality, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { ariaHaspopup: [{
            type: HostBinding,
            args: ['attr.aria-haspopup']
        }], backdropCloseOnClick: [{
            type: Input,
            args: ['mdePopoverBackdropCloseOnClick']
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter', ['$event']]
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave', ['$event']]
        }], _handleMousedown: [{
            type: HostListener,
            args: ['mousedown', ['$event']]
        }], popover: [{
            type: Input,
            args: ['mdePopoverTriggerFor']
        }], targetElement: [{
            type: Input,
            args: ['mdePopoverTargetAt']
        }], positionX: [{
            type: Input,
            args: ['mdePopoverPositionX']
        }], positionY: [{
            type: Input,
            args: ['mdePopoverPositionY']
        }], triggerEvent: [{
            type: Input,
            args: ['mdePopoverTriggerOn']
        }], enterDelay: [{
            type: Input,
            args: ['mdePopoverEnterDelay']
        }], leaveDelay: [{
            type: Input,
            args: ['mdePopoverLeaveDelay']
        }], overlapTrigger: [{
            type: Input,
            args: ['mdePopoverOverlapTrigger']
        }], targetOffsetX: [{
            type: Input,
            args: ['mdePopoverOffsetX']
        }], targetOffsetY: [{
            type: Input,
            args: ['mdePopoverOffsetY']
        }], arrowOffsetX: [{
            type: Input,
            args: ['mdePopoverArrowOffsetX']
        }], arrowWidth: [{
            type: Input,
            args: ['mdePopoverArrowWidth']
        }], arrowColor: [{
            type: Input,
            args: ['mdePopoverArrowColor']
        }], closeOnClick: [{
            type: Input,
            args: ['mdePopoverCloseOnClick']
        }] }); })();
export { MdePopoverTrigger };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,