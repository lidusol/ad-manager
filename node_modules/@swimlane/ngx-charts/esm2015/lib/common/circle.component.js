import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, HostListener } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["ngx-charts-circle", ""];
let CircleComponent = class CircleComponent {
    constructor() {
        this.select = new EventEmitter();
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
    }
    onClick() {
        this.select.emit(this.data);
    }
    onMouseEnter() {
        this.activate.emit(this.data);
    }
    onMouseLeave() {
        this.deactivate.emit(this.data);
    }
    ngOnChanges(changes) {
        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';
        this.classNames += 'circle';
    }
};
CircleComponent.ɵfac = function CircleComponent_Factory(t) { return new (t || CircleComponent)(); };
CircleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CircleComponent, selectors: [["g", "ngx-charts-circle", ""]], hostBindings: function CircleComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CircleComponent_click_HostBindingHandler() { return ctx.onClick(); })("mouseenter", function CircleComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function CircleComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
    } }, inputs: { classNames: "classNames", cx: "cx", cy: "cy", r: "r", fill: "fill", stroke: "stroke", data: "data", circleOpacity: "circleOpacity", pointerEvents: "pointerEvents" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 1, vars: 8, template: function CircleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelement(0, "circle");
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("cx", ctx.cx)("cy", ctx.cy)("r", ctx.r)("fill", ctx.fill)("stroke", ctx.stroke)("opacity", ctx.circleOpacity)("class", ctx.classNames)("pointer-events", ctx.pointerEvents);
    } }, encapsulation: 2, changeDetection: 0 });
__decorate([
    Input()
], CircleComponent.prototype, "cx", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "cy", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "r", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "fill", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "stroke", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "data", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "classNames", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "circleOpacity", void 0);
__decorate([
    Input()
], CircleComponent.prototype, "pointerEvents", void 0);
__decorate([
    Output()
], CircleComponent.prototype, "select", void 0);
__decorate([
    Output()
], CircleComponent.prototype, "activate", void 0);
__decorate([
    Output()
], CircleComponent.prototype, "deactivate", void 0);
__decorate([
    HostListener('click')
], CircleComponent.prototype, "onClick", null);
__decorate([
    HostListener('mouseenter')
], CircleComponent.prototype, "onMouseEnter", null);
__decorate([
    HostListener('mouseleave')
], CircleComponent.prototype, "onMouseLeave", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CircleComponent, [{
        type: Component,
        args: [{
                selector: 'g[ngx-charts-circle]',
                template: `
    <svg:circle
      [attr.cx]="cx"
      [attr.cy]="cy"
      [attr.r]="r"
      [attr.fill]="fill"
      [attr.stroke]="stroke"
      [attr.opacity]="circleOpacity"
      [attr.class]="classNames"
      [attr.pointer-events]="pointerEvents"
    />
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { select: [{
            type: Output
        }], activate: [{
            type: Output
        }], deactivate: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], classNames: [{
            type: Input
        }], cx: [{
            type: Input
        }], cy: [{
            type: Input
        }], r: [{
            type: Input
        }], fill: [{
            type: Input
        }], stroke: [{
            type: Input
        }], data: [{
            type: Input
        }], circleOpacity: [{
            type: Input
        }], pointerEvents: [{
            type: Input
        }] }); })();
export { CircleComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmc6L0Bzd2ltbGFuZS9uZ3gtY2hhcnRzL2xpYi9jb21tb24vY2lyY2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBRUwsTUFBTSxFQUNOLFlBQVksRUFFWix1QkFBdUIsRUFDdkIsWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDOzs7O0FBa0J2QixJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0FBQUcsSUFBL0I7QUFBZ0IsUUFXSixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUN4QyxRQUFZLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzFDLFFBQVksZUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDNUMsSUFvQkEsQ0FBQztBQUNELElBbkJFLE9BQU87QUFDVCxRQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQyxJQUFFLENBQUM7QUFDSCxJQUVFLFlBQVk7QUFBSyxRQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxJQUFFLENBQUM7QUFDSCxJQUVFLFlBQVk7QUFBSyxRQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVcsQ0FBQyxPQUFzQjtBQUFJLFFBQ3BDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDdEYsUUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQztBQUNoQyxJQUFFLENBQUM7QUFDSCxDQUFDOzs7Ozs7Ozs7aURBQUE7QUFqQ1U7QUFDRixJQUROLEtBQUssRUFBRTtBQUFDLDJDQUFHO0FBQ0g7QUFDRixJQUROLEtBQUssRUFBRTtBQUFDLDJDQUFHO0FBQ0g7QUFDRCxJQURQLEtBQUssRUFBRTtBQUFDLDBDQUFFO0FBQ0Y7QUFDSixJQURKLEtBQUssRUFBRTtBQUFDLDZDQUFLO0FBQ0w7QUFDTixJQURGLEtBQUssRUFBRTtBQUFDLCtDQUFPO0FBQ1A7QUFDSixJQURKLEtBQUssRUFBRTtBQUFDLDZDQUFLO0FBQ0w7QUFDVixJQURFLEtBQUssRUFBRTtBQUFDLG1EQUFXO0FBQ1g7QUFBYSxJQUFyQixLQUFLLEVBQUU7QUFBQyxzREFBYztBQUNkO0FBQWEsSUFBckIsS0FBSyxFQUFFO0FBQUMsc0RBQWM7QUFFYjtBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFDLCtDQUE0QjtBQUM1QjtBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFDLGlEQUE4QjtBQUM5QjtBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFDLG1EQUFnQztBQUcxQztBQUNELElBRkUsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUN4Qiw4Q0FFRztBQUdEO0FBQWEsSUFEWixZQUFZLENBQUMsWUFBWSxDQUFDO0FBQzdCLG1EQUVHO0FBR0Q7QUFBYSxJQURaLFlBQVksQ0FBQyxZQUFZLENBQUM7QUFDN0IsbURBRUc7QUE1QlUsZUFBZSxvQkFoQjNCLFNBQVMsQ0FBQyxVQUNULFFBQVEsRUFBRTthQUFzQixVQUNoQztNQUFRLEVBQUU7Ozs7Ozs7Ozs7Q0FXVCxVQUNELGVBQWUsRUFBRTttQkFBdUIsQ0FBQyxNQUFNLE1BQ2hELENBQUMsSUFDVzs7Q0FBZSxDQWtDM0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBbkNZLGVBQWU7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkNoYW5nZXMsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBIb3N0TGlzdGVuZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2dbbmd4LWNoYXJ0cy1jaXJjbGVdJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8c3ZnOmNpcmNsZVxuICAgICAgW2F0dHIuY3hdPVwiY3hcIlxuICAgICAgW2F0dHIuY3ldPVwiY3lcIlxuICAgICAgW2F0dHIucl09XCJyXCJcbiAgICAgIFthdHRyLmZpbGxdPVwiZmlsbFwiXG4gICAgICBbYXR0ci5zdHJva2VdPVwic3Ryb2tlXCJcbiAgICAgIFthdHRyLm9wYWNpdHldPVwiY2lyY2xlT3BhY2l0eVwiXG4gICAgICBbYXR0ci5jbGFzc109XCJjbGFzc05hbWVzXCJcbiAgICAgIFthdHRyLnBvaW50ZXItZXZlbnRzXT1cInBvaW50ZXJFdmVudHNcIlxuICAgIC8+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENpcmNsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGN4O1xuICBASW5wdXQoKSBjeTtcbiAgQElucHV0KCkgcjtcbiAgQElucHV0KCkgZmlsbDtcbiAgQElucHV0KCkgc3Ryb2tlO1xuICBASW5wdXQoKSBkYXRhO1xuICBASW5wdXQoKSBjbGFzc05hbWVzO1xuICBASW5wdXQoKSBjaXJjbGVPcGFjaXR5O1xuICBASW5wdXQoKSBwb2ludGVyRXZlbnRzO1xuXG4gIEBPdXRwdXQoKSBzZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBhY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGRlYWN0aXZhdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvbkNsaWNrKCkge1xuICAgIHRoaXMuc2VsZWN0LmVtaXQodGhpcy5kYXRhKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlZW50ZXInKVxuICBvbk1vdXNlRW50ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmF0ZS5lbWl0KHRoaXMuZGF0YSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJylcbiAgb25Nb3VzZUxlYXZlKCk6IHZvaWQge1xuICAgIHRoaXMuZGVhY3RpdmF0ZS5lbWl0KHRoaXMuZGF0YSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgdGhpcy5jbGFzc05hbWVzID0gQXJyYXkuaXNBcnJheSh0aGlzLmNsYXNzTmFtZXMpID8gdGhpcy5jbGFzc05hbWVzLmpvaW4oJyAnKSA6ICcnO1xuICAgIHRoaXMuY2xhc3NOYW1lcyArPSAnY2lyY2xlJztcbiAgfVxufVxuIl19