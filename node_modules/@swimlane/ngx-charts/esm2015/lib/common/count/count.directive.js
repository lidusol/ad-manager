import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';
import { count, decimalChecker } from './count.helper';
/**
 * Count up component
 *
 * Loosely inspired by:
 *  - https://github.com/izupet/angular2-counto
 *  - https://inorganik.github.io/countUp.js/
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["ngx-charts-count-up", ""];
let CountUpDirective = class CountUpDirective {
    constructor(cd, element) {
        this.cd = cd;
        this.countDuration = 1;
        this.countPrefix = '';
        this.countSuffix = '';
        this.countChange = new EventEmitter();
        this.countFinish = new EventEmitter();
        this.value = '';
        this._countDecimals = 0;
        this._countTo = 0;
        this._countFrom = 0;
        this.nativeElement = element.nativeElement;
    }
    set countDecimals(val) {
        this._countDecimals = val;
    }
    get countDecimals() {
        if (this._countDecimals)
            return this._countDecimals;
        return decimalChecker(this.countTo);
    }
    set countTo(val) {
        this._countTo = parseFloat(val);
        this.start();
    }
    get countTo() {
        return this._countTo;
    }
    set countFrom(val) {
        this._countFrom = parseFloat(val);
        this.start();
    }
    get countFrom() {
        return this._countFrom;
    }
    ngOnDestroy() {
        cancelAnimationFrame(this.animationReq);
    }
    start() {
        cancelAnimationFrame(this.animationReq);
        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);
        const callback = ({ value, progress, finished }) => {
            this.value = valueFormatting(value);
            this.cd.markForCheck();
            if (!finished)
                this.countChange.emit({ value: this.value, progress });
            if (finished)
                this.countFinish.emit({ value: this.value, progress });
        };
        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);
    }
};
CountUpDirective.ɵfac = function CountUpDirective_Factory(t) { return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CountUpDirective.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountUpDirective, selectors: [["", "ngx-charts-count-up", ""]], inputs: { countDuration: "countDuration", countPrefix: "countPrefix", countSuffix: "countSuffix", countDecimals: "countDecimals", countTo: "countTo", countFrom: "countFrom", valueFormatting: "valueFormatting" }, outputs: { countChange: "countChange", countFinish: "countFinish" }, attrs: _c0, decls: 1, vars: 1, template: function CountUpDirective_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtext(0);
    } if (rf & 2) {
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.value, " ");
    } }, encapsulation: 2 });
CountUpDirective.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
__decorate([
    Input()
], CountUpDirective.prototype, "countDuration", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "countPrefix", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "countSuffix", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "valueFormatting", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "countDecimals", null);
__decorate([
    Input()
], CountUpDirective.prototype, "countTo", null);
__decorate([
    Input()
], CountUpDirective.prototype, "countFrom", null);
__decorate([
    Output()
], CountUpDirective.prototype, "countChange", void 0);
__decorate([
    Output()
], CountUpDirective.prototype, "countFinish", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{
        type: Component,
        args: [{
                selector: '[ngx-charts-count-up]',
                template: ` {{ value }} `
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { countDuration: [{
            type: Input
        }], countPrefix: [{
            type: Input
        }], countSuffix: [{
            type: Input
        }], countChange: [{
            type: Output
        }], countFinish: [{
            type: Output
        }], countDecimals: [{
            type: Input
        }], countTo: [{
            type: Input
        }], countFrom: [{
            type: Input
        }], valueFormatting: [{
            type: Input
        }] }); })();
export { CountUpDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQHN3aW1sYW5lL25neC1jaGFydHMvbGliL2NvbW1vbi9jb3VudC9jb3VudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqSCxPQUFPLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7O0FBS0gsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7QUFBRyxJQWtEOUIsWUFBb0IsRUFBcUIsRUFBRSxPQUFtQjtBQUNoRSxRQURzQixPQUFFLEdBQUYsRUFBRSxDQUFtQjtBQUFDLFFBakRqQyxrQkFBYSxHQUFXLENBQUMsQ0FBQztBQUNyQyxRQUFXLGdCQUFXLEdBQVcsRUFBRSxDQUFDO0FBQ3BDLFFBQVcsZ0JBQVcsR0FBVyxFQUFFLENBQUM7QUFDcEMsUUFnQ1ksZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzdDLFFBQVksZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzdDLFFBR0UsVUFBSyxHQUFRLEVBQUUsQ0FBQztBQUNsQixRQUlVLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO0FBQ3JDLFFBQVUsYUFBUSxHQUFXLENBQUMsQ0FBQztBQUMvQixRQUFVLGVBQVUsR0FBVyxDQUFDLENBQUM7QUFDakMsUUFFSSxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDL0MsSUFBRSxDQUFDO0FBQ0gsSUE5Q0UsSUFBSSxhQUFhLENBQUMsR0FBVztBQUMvQixRQUFJLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDO0FB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QUFNUztBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFDLHFEQUFpQztBQUNqQztBQUFhLElBQXRCLE1BQU0sRUFBRTtBQUFDLHFEQUFpQztBQXJDaEMsZ0JBQWdCLG9CQUo1QixTQUFTLENBQUMsVUFDVCxRQUFRLEVBQUU7Y0FBdUIsVUFDakM7T0FBUSxFQUFFO09BQWUsTUFDMUIsQ0FBQyxJQUNXLGdCQUFnQixDQXlFNUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBMUVZLGdCQUFnQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvdW50LCBkZWNpbWFsQ2hlY2tlciB9IGZyb20gJy4vY291bnQuaGVscGVyJztcblxuLyoqXG4gKiBDb3VudCB1cCBjb21wb25lbnRcbiAqXG4gKiBMb29zZWx5IGluc3BpcmVkIGJ5OlxuICogIC0gaHR0cHM6Ly9naXRodWIuY29tL2l6dXBldC9hbmd1bGFyMi1jb3VudG9cbiAqICAtIGh0dHBzOi8vaW5vcmdhbmlrLmdpdGh1Yi5pby9jb3VudFVwLmpzL1xuICpcbiAqIEBleHBvcnRcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW25neC1jaGFydHMtY291bnQtdXBdJyxcbiAgdGVtcGxhdGU6IGAge3sgdmFsdWUgfX0gYFxufSlcbmV4cG9ydCBjbGFzcyBDb3VudFVwRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgQElucHV0KCkgY291bnREdXJhdGlvbjogbnVtYmVyID0gMTtcbiAgQElucHV0KCkgY291bnRQcmVmaXg6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBjb3VudFN1ZmZpeDogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIHZhbHVlRm9ybWF0dGluZzogYW55O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBjb3VudERlY2ltYWxzKHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5fY291bnREZWNpbWFscyA9IHZhbDtcbiAgfVxuXG4gIGdldCBjb3VudERlY2ltYWxzKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX2NvdW50RGVjaW1hbHMpIHJldHVybiB0aGlzLl9jb3VudERlY2ltYWxzO1xuICAgIHJldHVybiBkZWNpbWFsQ2hlY2tlcih0aGlzLmNvdW50VG8pO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGNvdW50VG8odmFsKSB7XG4gICAgdGhpcy5fY291bnRUbyA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICB0aGlzLnN0YXJ0KCk7XG4gIH1cblxuICBnZXQgY291bnRUbygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9jb3VudFRvO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGNvdW50RnJvbSh2YWwpIHtcbiAgICB0aGlzLl9jb3VudEZyb20gPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9XG5cbiAgZ2V0IGNvdW50RnJvbSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9jb3VudEZyb207XG4gIH1cblxuICBAT3V0cHV0KCkgY291bnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBjb3VudEZpbmlzaCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBuYXRpdmVFbGVtZW50OiBhbnk7XG5cbiAgdmFsdWU6IGFueSA9ICcnO1xuICBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgYW5pbWF0aW9uUmVxOiBhbnk7XG5cbiAgcHJpdmF0ZSBfY291bnREZWNpbWFsczogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY291bnRUbzogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY291bnRGcm9tOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy5uYXRpdmVFbGVtZW50ID0gZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25SZXEpO1xuICB9XG5cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25SZXEpO1xuXG4gICAgY29uc3QgdmFsdWVGb3JtYXR0aW5nID1cbiAgICAgIHRoaXMudmFsdWVGb3JtYXR0aW5nIHx8ICh2YWx1ZSA9PiBgJHt0aGlzLmNvdW50UHJlZml4fSR7dmFsdWUudG9Mb2NhbGVTdHJpbmcoKX0ke3RoaXMuY291bnRTdWZmaXh9YCk7XG5cbiAgICBjb25zdCBjYWxsYmFjayA9ICh7IHZhbHVlLCBwcm9ncmVzcywgZmluaXNoZWQgfSkgPT4ge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlRm9ybWF0dGluZyh2YWx1ZSk7XG4gICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICAgICAgaWYgKCFmaW5pc2hlZCkgdGhpcy5jb3VudENoYW5nZS5lbWl0KHsgdmFsdWU6IHRoaXMudmFsdWUsIHByb2dyZXNzIH0pO1xuICAgICAgaWYgKGZpbmlzaGVkKSB0aGlzLmNvdW50RmluaXNoLmVtaXQoeyB2YWx1ZTogdGhpcy52YWx1ZSwgcHJvZ3Jlc3MgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuYW5pbWF0aW9uUmVxID0gY291bnQodGhpcy5jb3VudEZyb20sIHRoaXMuY291bnRUbywgdGhpcy5jb3VudERlY2ltYWxzLCB0aGlzLmNvdW50RHVyYXRpb24sIGNhbGxiYWNrKTtcbiAgfVxufVxuIl19