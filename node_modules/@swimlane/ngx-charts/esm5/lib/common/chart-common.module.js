import { __decorate, __read, __spread } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ChartComponent } from './charts/chart.component';
import { BaseChartComponent } from './base-chart.component';
import { AxesModule } from './axes/axes.module';
import { TooltipModule } from './tooltip/tooltip.module';
import { CircleSeriesComponent } from './circle-series.component';
import { CircleComponent } from './circle.component';
import { GridPanelComponent } from './grid-panel.component';
import { GridPanelSeriesComponent } from './grid-panel-series.component';
import { SvgLinearGradientComponent } from './svg-linear-gradient.component';
import { SvgRadialGradientComponent } from './svg-radial-gradient.component';
import { AreaComponent } from './area.component';
import { CountUpDirective } from './count/count.directive';
import { TooltipArea } from './tooltip-area.component';
import { Timeline } from './timeline/timeline.component';
import { VisibilityObserver } from '../utils/visibility-observer';
import { LegendComponent } from './legend/legend.component';
import { LegendEntryComponent } from './legend/legend-entry.component';
import { ScaleLegendComponent } from './legend/scale-legend.component';
import { AdvancedLegendComponent } from './legend/advanced-legend.component';
import * as ɵngcc0 from '@angular/core';
var COMPONENTS = [
    AreaComponent,
    BaseChartComponent,
    CountUpDirective,
    TooltipArea,
    ChartComponent,
    LegendComponent,
    LegendEntryComponent,
    ScaleLegendComponent,
    CircleComponent,
    CircleSeriesComponent,
    GridPanelComponent,
    GridPanelSeriesComponent,
    SvgLinearGradientComponent,
    SvgRadialGradientComponent,
    Timeline,
    AdvancedLegendComponent
];
var ChartCommonModule = /** @class */ (function () {
    function ChartCommonModule() {
    }
ChartCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ChartCommonModule });
ChartCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ChartCommonModule_Factory(t) { return new (t || ChartCommonModule)(); }, imports: [[CommonModule, AxesModule, TooltipModule],
        CommonModule, AxesModule, TooltipModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartCommonModule, { declarations: function () { return [AreaComponent,
        BaseChartComponent,
        CountUpDirective,
        TooltipArea,
        ChartComponent,
        LegendComponent,
        LegendEntryComponent,
        ScaleLegendComponent,
        CircleComponent,
        CircleSeriesComponent,
        GridPanelComponent,
        GridPanelSeriesComponent,
        SvgLinearGradientComponent,
        SvgRadialGradientComponent,
        Timeline,
        AdvancedLegendComponent,
        VisibilityObserver]; }, imports: function () { return [CommonModule, AxesModule, TooltipModule]; }, exports: function () { return [CommonModule, AxesModule, TooltipModule,
        AreaComponent,
        BaseChartComponent,
        CountUpDirective,
        TooltipArea,
        ChartComponent,
        LegendComponent,
        LegendEntryComponent,
        ScaleLegendComponent,
        CircleComponent,
        CircleSeriesComponent,
        GridPanelComponent,
        GridPanelSeriesComponent,
        SvgLinearGradientComponent,
        SvgRadialGradientComponent,
        Timeline,
        AdvancedLegendComponent,
        VisibilityObserver]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartCommonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, AxesModule, TooltipModule],
                declarations: __spread(COMPONENTS, [VisibilityObserver]),
                exports: __spread([CommonModule, AxesModule, TooltipModule], COMPONENTS, [VisibilityObserver])
            }]
    }], function () { return []; }, null); })();
    return ChartCommonModule;
}());
export { ChartCommonModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L0Bzd2ltbGFuZS9uZ3gtY2hhcnRzL2xpYi9jb21tb24vY2hhcnQtY29tbW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7QUFFN0UsSUFBTSxVQUFVLEdBQUc7QUFDbkIsSUFBRSxhQUFhO0FBQ2YsSUFBRSxrQkFBa0I7QUFDcEIsSUFBRSxnQkFBZ0I7QUFDbEIsSUFBRSxXQUFXO0FBQ2IsSUFBRSxjQUFjO0FBQ2hCLElBQUUsZUFBZTtBQUNqQixJQUFFLG9CQUFvQjtBQUN0QixJQUFFLG9CQUFvQjtBQUN0QixJQUFFLGVBQWU7QUFDakIsSUFBRSxxQkFBcUI7QUFDdkIsSUFBRSxrQkFBa0I7QUFDcEIsSUFBRSx3QkFBd0I7QUFDMUIsSUFBRSwwQkFBMEI7QUFDNUIsSUFBRSwwQkFBMEI7QUFDNUIsSUFBRSxRQUFRO0FBQ1YsSUFBRSx1QkFBdUI7QUFDekIsQ0FBQyxDQUFDO0FBT0Y7QUFDbUIsSUFEbkI7QUFBK0IsSUFBQyxDQUFDO0lBQXBCLGlCQUFpQix3QkFMN0IsUUFBUSxDQUFDLGNBQ1IsT0FBTyxFQUFFLENBQUM7V0FBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLENBQUMsY0FDbEQsWUFBWSxXQUFNLFVBQVUsR0FBRSxrQkFBa0IsRUFBQyxjQUNqRCxPQUFPLFlBQUcsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLEdBQUssVUFBVTtFQUFFLGtCQUFrQixFQUFDLFVBQ3RGLENBQUMsUUFDVztLQUFpQixDQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnREFDakM7QUFBQyxJQUQrQix3QkFBQztBQUNoQyxDQURnQyxBQUFqQyxJQUFpQztBQUNqQyxTQURhLGlCQUFpQjtBQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBDaGFydENvbXBvbmVudCB9IGZyb20gJy4vY2hhcnRzL2NoYXJ0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuL2Jhc2UtY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IEF4ZXNNb2R1bGUgfSBmcm9tICcuL2F4ZXMvYXhlcy5tb2R1bGUnO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJy4vdG9vbHRpcC90b29sdGlwLm1vZHVsZSc7XG5pbXBvcnQgeyBDaXJjbGVTZXJpZXNDb21wb25lbnQgfSBmcm9tICcuL2NpcmNsZS1zZXJpZXMuY29tcG9uZW50JztcbmltcG9ydCB7IENpcmNsZUNvbXBvbmVudCB9IGZyb20gJy4vY2lyY2xlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHcmlkUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL2dyaWQtcGFuZWwuY29tcG9uZW50JztcbmltcG9ydCB7IEdyaWRQYW5lbFNlcmllc0NvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC1wYW5lbC1zZXJpZXMuY29tcG9uZW50JztcbmltcG9ydCB7IFN2Z0xpbmVhckdyYWRpZW50Q29tcG9uZW50IH0gZnJvbSAnLi9zdmctbGluZWFyLWdyYWRpZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdmdSYWRpYWxHcmFkaWVudENvbXBvbmVudCB9IGZyb20gJy4vc3ZnLXJhZGlhbC1ncmFkaWVudC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXJlYUNvbXBvbmVudCB9IGZyb20gJy4vYXJlYS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ291bnRVcERpcmVjdGl2ZSB9IGZyb20gJy4vY291bnQvY291bnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRvb2x0aXBBcmVhIH0gZnJvbSAnLi90b29sdGlwLWFyZWEuY29tcG9uZW50JztcbmltcG9ydCB7IFRpbWVsaW5lIH0gZnJvbSAnLi90aW1lbGluZS90aW1lbGluZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgVmlzaWJpbGl0eU9ic2VydmVyIH0gZnJvbSAnLi4vdXRpbHMvdmlzaWJpbGl0eS1vYnNlcnZlcic7XG5pbXBvcnQgeyBMZWdlbmRDb21wb25lbnQgfSBmcm9tICcuL2xlZ2VuZC9sZWdlbmQuY29tcG9uZW50JztcbmltcG9ydCB7IExlZ2VuZEVudHJ5Q29tcG9uZW50IH0gZnJvbSAnLi9sZWdlbmQvbGVnZW5kLWVudHJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTY2FsZUxlZ2VuZENvbXBvbmVudCB9IGZyb20gJy4vbGVnZW5kL3NjYWxlLWxlZ2VuZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWR2YW5jZWRMZWdlbmRDb21wb25lbnQgfSBmcm9tICcuL2xlZ2VuZC9hZHZhbmNlZC1sZWdlbmQuY29tcG9uZW50JztcblxuY29uc3QgQ09NUE9ORU5UUyA9IFtcbiAgQXJlYUNvbXBvbmVudCxcbiAgQmFzZUNoYXJ0Q29tcG9uZW50LFxuICBDb3VudFVwRGlyZWN0aXZlLFxuICBUb29sdGlwQXJlYSxcbiAgQ2hhcnRDb21wb25lbnQsXG4gIExlZ2VuZENvbXBvbmVudCxcbiAgTGVnZW5kRW50cnlDb21wb25lbnQsXG4gIFNjYWxlTGVnZW5kQ29tcG9uZW50LFxuICBDaXJjbGVDb21wb25lbnQsXG4gIENpcmNsZVNlcmllc0NvbXBvbmVudCxcbiAgR3JpZFBhbmVsQ29tcG9uZW50LFxuICBHcmlkUGFuZWxTZXJpZXNDb21wb25lbnQsXG4gIFN2Z0xpbmVhckdyYWRpZW50Q29tcG9uZW50LFxuICBTdmdSYWRpYWxHcmFkaWVudENvbXBvbmVudCxcbiAgVGltZWxpbmUsXG4gIEFkdmFuY2VkTGVnZW5kQ29tcG9uZW50XG5dO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBBeGVzTW9kdWxlLCBUb29sdGlwTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbLi4uQ09NUE9ORU5UUywgVmlzaWJpbGl0eU9ic2VydmVyXSxcbiAgZXhwb3J0czogW0NvbW1vbk1vZHVsZSwgQXhlc01vZHVsZSwgVG9vbHRpcE1vZHVsZSwgLi4uQ09NUE9ORU5UUywgVmlzaWJpbGl0eU9ic2VydmVyXVxufSlcbmV4cG9ydCBjbGFzcyBDaGFydENvbW1vbk1vZHVsZSB7fVxuIl19