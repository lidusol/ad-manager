import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';
import { count, decimalChecker } from './count.helper';
/**
 * Count up component
 *
 * Loosely inspired by:
 *  - https://github.com/izupet/angular2-counto
 *  - https://inorganik.github.io/countUp.js/
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';

var _c0 = ["ngx-charts-count-up", ""];
var CountUpDirective = /** @class */ (function () {
    function CountUpDirective(cd, element) {
        this.cd = cd;
        this.countDuration = 1;
        this.countPrefix = '';
        this.countSuffix = '';
        this.countChange = new EventEmitter();
        this.countFinish = new EventEmitter();
        this.value = '';
        this._countDecimals = 0;
        this._countTo = 0;
        this._countFrom = 0;
        this.nativeElement = element.nativeElement;
    }
    Object.defineProperty(CountUpDirective.prototype, "countDecimals", {
        get: function () {
            if (this._countDecimals)
                return this._countDecimals;
            return decimalChecker(this.countTo);
        },
        set: function (val) {
            this._countDecimals = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CountUpDirective.prototype, "countTo", {
        get: function () {
            return this._countTo;
        },
        set: function (val) {
            this._countTo = parseFloat(val);
            this.start();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CountUpDirective.prototype, "countFrom", {
        get: function () {
            return this._countFrom;
        },
        set: function (val) {
            this._countFrom = parseFloat(val);
            this.start();
        },
        enumerable: true,
        configurable: true
    });
    CountUpDirective.prototype.ngOnDestroy = function () {
        cancelAnimationFrame(this.animationReq);
    };
    CountUpDirective.prototype.start = function () {
        var _this = this;
        cancelAnimationFrame(this.animationReq);
        var valueFormatting = this.valueFormatting || (function (value) { return "" + _this.countPrefix + value.toLocaleString() + _this.countSuffix; });
        var callback = function (_a) {
            var value = _a.value, progress = _a.progress, finished = _a.finished;
            _this.value = valueFormatting(value);
            _this.cd.markForCheck();
            if (!finished)
                _this.countChange.emit({ value: _this.value, progress: progress });
            if (finished)
                _this.countFinish.emit({ value: _this.value, progress: progress });
        };
        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);
    };
    CountUpDirective.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], CountUpDirective.prototype, "countDuration", void 0);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "countPrefix", void 0);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "countSuffix", void 0);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "valueFormatting", void 0);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "countDecimals", null);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "countTo", null);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "countFrom", null);
    __decorate([
        Output()
    ], CountUpDirective.prototype, "countChange", void 0);
    __decorate([
        Output()
    ], CountUpDirective.prototype, "countFinish", void 0);
CountUpDirective.ɵfac = function CountUpDirective_Factory(t) { return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CountUpDirective.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountUpDirective, selectors: [["", "ngx-charts-count-up", ""]], inputs: { countDuration: "countDuration", countPrefix: "countPrefix", countSuffix: "countSuffix", countDecimals: "countDecimals", countTo: "countTo", countFrom: "countFrom", valueFormatting: "valueFormatting" }, outputs: { countChange: "countChange", countFinish: "countFinish" }, attrs: _c0, decls: 1, vars: 1, template: function CountUpDirective_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtext(0);
    } if (rf & 2) {
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.value, " ");
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{
        type: Component,
        args: [{
                selector: '[ngx-charts-count-up]',
                template: " {{ value }} "
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { countDuration: [{
            type: Input
        }], countPrefix: [{
            type: Input
        }], countSuffix: [{
            type: Input
        }], countChange: [{
            type: Output
        }], countFinish: [{
            type: Output
        }], countDecimals: [{
            type: Input
        }], countTo: [{
            type: Input
        }], countFrom: [{
            type: Input
        }], valueFormatting: [{
            type: Input
        }] }); })();
    return CountUpDirective;
}());
export { CountUpDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovQHN3aW1sYW5lL25neC1jaGFydHMvbGliL2NvbW1vbi9jb3VudC9jb3VudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqSCxPQUFPLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7O0FBS0g7QUFBb0QsSUFrRGxELDBCQUFvQixFQUFxQixFQUFFLE9BQW1CO0FBQ2hFLFFBRHNCLE9BQUUsR0FBRixFQUFFLENBQW1CO0FBQUMsUUFqRGpDLGtCQUFhLEdBQVcsQ0FBQyxDQUFDO0FBQ3JDLFFBQVcsZ0JBQVcsR0FBVyxFQUFFLENBQUM7QUFDcEMsUUFBVyxnQkFBVyxHQUFXLEVBQUUsQ0FBQztBQUNwQyxRQWdDWSxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDN0MsUUFBWSxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDN0MsUUFHRSxVQUFLLEdBQVEsRUFBRSxDQUFDO0FBQ2xCLFFBSVUsbUJBQWMsR0FBVyxDQUFDLENBQUM7QUFDckMsUUFBVSxhQUFRLEdBQVcsQ0FBQyxDQUFDO0FBQy9CLFFBQVUsZUFBVSxHQUFXLENBQUMsQ0FBQztBQUNqQyxRQUVJLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUMvQyxJQUFFLENBQUM7QUFDSCxJQTlDRSxzQkFBSSwyQ0FBYTtBQUFJLGFBSXJCO0FBQWMsWUFDWixJQUFJLElBQUksQ0FBQyxjQUFjO0FBQUUsZ0JBQUEsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0FB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LEtBQUssRUFBRTtBQUNWLHlEQUVHO0FBRUgsSUFNRTtBQUFhLFFBRFosS0FBSyxFQUFFO0FBQ1YsbURBR0c7QUFFSCxJQUtFO0FBQWEsUUFEWixLQUFLLEVBQUU7QUFDVixxREFHRztBQUVILElBSVk7QUFBYSxRQUF0QixNQUFNLEVBQUU7QUFBQyx5REFBaUM7QUFDNUMsSUFBVztBQUFhLFFBQXRCLE1BQU0sRUFBRTtBQUFDLHlEQUFpQztJQXJDaEMsZ0JBQWdCLHdCQUo1QixTQUFTLENBQUMsY0FDVCxRQUFRLEVBQUUsdUJBQXVCLGNBQ2pDLFFBQVEsRUFBRSxlQUFlLFVBQzFCLENBQUMsUUFDVyxnQkFBZ0IsQ0F5RTVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELHVCQUFDO0FBQ0EsQ0FEQSxBQXpFRCxJQXlFQztBQUNELFNBMUVhLGdCQUFnQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvdW50LCBkZWNpbWFsQ2hlY2tlciB9IGZyb20gJy4vY291bnQuaGVscGVyJztcblxuLyoqXG4gKiBDb3VudCB1cCBjb21wb25lbnRcbiAqXG4gKiBMb29zZWx5IGluc3BpcmVkIGJ5OlxuICogIC0gaHR0cHM6Ly9naXRodWIuY29tL2l6dXBldC9hbmd1bGFyMi1jb3VudG9cbiAqICAtIGh0dHBzOi8vaW5vcmdhbmlrLmdpdGh1Yi5pby9jb3VudFVwLmpzL1xuICpcbiAqIEBleHBvcnRcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW25neC1jaGFydHMtY291bnQtdXBdJyxcbiAgdGVtcGxhdGU6IGAge3sgdmFsdWUgfX0gYFxufSlcbmV4cG9ydCBjbGFzcyBDb3VudFVwRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgQElucHV0KCkgY291bnREdXJhdGlvbjogbnVtYmVyID0gMTtcbiAgQElucHV0KCkgY291bnRQcmVmaXg6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBjb3VudFN1ZmZpeDogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIHZhbHVlRm9ybWF0dGluZzogYW55O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBjb3VudERlY2ltYWxzKHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5fY291bnREZWNpbWFscyA9IHZhbDtcbiAgfVxuXG4gIGdldCBjb3VudERlY2ltYWxzKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX2NvdW50RGVjaW1hbHMpIHJldHVybiB0aGlzLl9jb3VudERlY2ltYWxzO1xuICAgIHJldHVybiBkZWNpbWFsQ2hlY2tlcih0aGlzLmNvdW50VG8pO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGNvdW50VG8odmFsKSB7XG4gICAgdGhpcy5fY291bnRUbyA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICB0aGlzLnN0YXJ0KCk7XG4gIH1cblxuICBnZXQgY291bnRUbygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9jb3VudFRvO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGNvdW50RnJvbSh2YWwpIHtcbiAgICB0aGlzLl9jb3VudEZyb20gPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9XG5cbiAgZ2V0IGNvdW50RnJvbSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9jb3VudEZyb207XG4gIH1cblxuICBAT3V0cHV0KCkgY291bnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBjb3VudEZpbmlzaCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBuYXRpdmVFbGVtZW50OiBhbnk7XG5cbiAgdmFsdWU6IGFueSA9ICcnO1xuICBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgYW5pbWF0aW9uUmVxOiBhbnk7XG5cbiAgcHJpdmF0ZSBfY291bnREZWNpbWFsczogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY291bnRUbzogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfY291bnRGcm9tOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy5uYXRpdmVFbGVtZW50ID0gZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25SZXEpO1xuICB9XG5cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25SZXEpO1xuXG4gICAgY29uc3QgdmFsdWVGb3JtYXR0aW5nID1cbiAgICAgIHRoaXMudmFsdWVGb3JtYXR0aW5nIHx8ICh2YWx1ZSA9PiBgJHt0aGlzLmNvdW50UHJlZml4fSR7dmFsdWUudG9Mb2NhbGVTdHJpbmcoKX0ke3RoaXMuY291bnRTdWZmaXh9YCk7XG5cbiAgICBjb25zdCBjYWxsYmFjayA9ICh7IHZhbHVlLCBwcm9ncmVzcywgZmluaXNoZWQgfSkgPT4ge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlRm9ybWF0dGluZyh2YWx1ZSk7XG4gICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICAgICAgaWYgKCFmaW5pc2hlZCkgdGhpcy5jb3VudENoYW5nZS5lbWl0KHsgdmFsdWU6IHRoaXMudmFsdWUsIHByb2dyZXNzIH0pO1xuICAgICAgaWYgKGZpbmlzaGVkKSB0aGlzLmNvdW50RmluaXNoLmVtaXQoeyB2YWx1ZTogdGhpcy52YWx1ZSwgcHJvZ3Jlc3MgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuYW5pbWF0aW9uUmVxID0gY291bnQodGhpcy5jb3VudEZyb20sIHRoaXMuY291bnRUbywgdGhpcy5jb3VudERlY2ltYWxzLCB0aGlzLmNvdW50RHVyYXRpb24sIGNhbGxiYWNrKTtcbiAgfVxufVxuIl19