{"version":3,"file":"ej2-angular-buttons.es5.js","sources":["~/@syncfusion/ej2-angular-buttons/src/button/button.component.ts","~/@syncfusion/ej2-angular-buttons/src/button/button.module.ts","~/@syncfusion/ej2-angular-buttons/src/button/button-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/check-box/checkbox.component.ts","~/@syncfusion/ej2-angular-buttons/src/check-box/checkbox.module.ts","~/@syncfusion/ej2-angular-buttons/src/check-box/checkbox-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/radio-button/radiobutton.component.ts","~/@syncfusion/ej2-angular-buttons/src/radio-button/radiobutton.module.ts","~/@syncfusion/ej2-angular-buttons/src/radio-button/radiobutton-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/switch/switch.component.ts","~/@syncfusion/ej2-angular-buttons/src/switch/switch.module.ts","~/@syncfusion/ej2-angular-buttons/src/switch/switch-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chips.directive.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chiplist.component.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chiplist.module.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chiplist-all.module.ts","~/@syncfusion/ej2-angular-buttons/ej2-angular-buttons.ts"],"names":["inputs","outputs","twoWays","__decorate","__metadata"],"mappings":"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","sourcesContent":["import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Button } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['content','cssClass','disabled','enableHtmlSanitizer','enablePersistence','enableRtl','iconCss','iconPosition','isPrimary','isToggle','locale'];\nexport const /** @type {?} */ outputs: string[] = ['created'];\nexport const /** @type {?} */ twoWays: string[] = [];\n/**\n * Represents the Angular Button Component.\n * ```html\n * <button ejs-button>Button</button>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ButtonComponent extends Button implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: '[ejs-button]',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content ></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction ButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonComponent.ctorParameters;\n/** @type {?} */\nButtonComponent.prototype.containerContext;\n/** @type {?} */\nButtonComponent.prototype.tagObjects;\n/** @type {?} */\nButtonComponent.prototype.registerEvents;\n/** @type {?} */\nButtonComponent.prototype.addTwoWay;\n/** @type {?} */\nButtonComponent.prototype.ngEle;\n/** @type {?} */\nButtonComponent.prototype.srenderer;\n/** @type {?} */\nButtonComponent.prototype.viewContainerRef;\n/** @type {?} */\nButtonComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './button.component';\n/**\n * NgModule definition for the Button component.\n */\nexport class ButtonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ButtonComponent\n    ],\n    exports: [\n        ButtonComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './button.component';\nimport { ButtonModule } from './button.module';\n/**\n * NgModule definition for the Button component with providers.\n */\nexport class ButtonAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ButtonModule],\n    exports: [\n        ButtonModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ValueProvider, Renderer2, Injector, ChangeDetectionStrategy, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['checked','cssClass','disabled','enableHtmlSanitizer','enablePersistence','enableRtl','htmlAttributes','indeterminate','label','labelPosition','locale','name','value'];\nexport const /** @type {?} */ outputs: string[] = ['focus', 'blur', 'change','created','checkedChange','indeterminateChange'];\nexport const /** @type {?} */ twoWays: string[] = ['checked', 'indeterminate'];\n/**\n * Represents the Angular CheckBox Component.\n * ```html\n * <ejs-checkbox label='Default'></ejs-checkbox>\n * ```\n */\n@ComponentMixins([ComponentBase, FormBase])\nexport class CheckBoxComponent extends CheckBox implements IComponentBase {\npublic formCompContext : any;\npublic formContext : any;\npublic tagObjects: any;\npublic checkedChange: any;\npublic indeterminateChange: any;\npublic focus: any;\npublic blur: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.formContext  = new FormBase();\n        this.formCompContext  = new ComponentBase();\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnChange(registerFunction: (_: any) => void): void {\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnTouched(registerFunction: () => void): void {\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value: any): void {\n    }\n/**\n * @param {?} disabled\n * @return {?}\n */\npublic setDisabledState(disabled: boolean): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.formCompContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.formContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.formCompContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.formCompContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-checkbox',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CheckBoxComponent),\n            multi: true\n        }\n    ],\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction CheckBoxComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBoxComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckBoxComponent.ctorParameters;\n/** @type {?} */\nCheckBoxComponent.prototype.formCompContext;\n/** @type {?} */\nCheckBoxComponent.prototype.formContext;\n/** @type {?} */\nCheckBoxComponent.prototype.tagObjects;\n/** @type {?} */\nCheckBoxComponent.prototype.checkedChange;\n/** @type {?} */\nCheckBoxComponent.prototype.indeterminateChange;\n/** @type {?} */\nCheckBoxComponent.prototype.focus;\n/** @type {?} */\nCheckBoxComponent.prototype.blur;\n/** @type {?} */\nCheckBoxComponent.prototype.registerEvents;\n/** @type {?} */\nCheckBoxComponent.prototype.addTwoWay;\n/** @type {?} */\nCheckBoxComponent.prototype.ngEle;\n/** @type {?} */\nCheckBoxComponent.prototype.srenderer;\n/** @type {?} */\nCheckBoxComponent.prototype.viewContainerRef;\n/** @type {?} */\nCheckBoxComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckBoxComponent } from './checkbox.component';\n/**\n * NgModule definition for the CheckBox component.\n */\nexport class CheckBoxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        CheckBoxComponent\n    ],\n    exports: [\n        CheckBoxComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckBoxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBoxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckBoxModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckBoxComponent } from './checkbox.component';\nimport { CheckBoxModule } from './checkbox.module';\n/**\n * NgModule definition for the CheckBox component with providers.\n */\nexport class CheckBoxAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, CheckBoxModule],\n    exports: [\n        CheckBoxModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckBoxAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBoxAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckBoxAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ValueProvider, Renderer2, Injector, ChangeDetectionStrategy, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { RadioButton } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['checked','cssClass','disabled','enableHtmlSanitizer','enablePersistence','enableRtl','label','labelPosition','locale','name','value'];\nexport const /** @type {?} */ outputs: string[] = ['focus', 'blur', 'change','created','checkedChange'];\nexport const /** @type {?} */ twoWays: string[] = ['checked'];\n/**\n * Represents the Angular RadioButton Component.\n * ```html\n * <ejs-radiobutton label='Default'></ejs-radiobutton>\n * ```\n */\n@ComponentMixins([ComponentBase, FormBase])\nexport class RadioButtonComponent extends RadioButton implements IComponentBase {\npublic formCompContext : any;\npublic formContext : any;\npublic tagObjects: any;\npublic checkedChange: any;\npublic focus: any;\npublic blur: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.formContext  = new FormBase();\n        this.formCompContext  = new ComponentBase();\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnChange(registerFunction: (_: any) => void): void {\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnTouched(registerFunction: () => void): void {\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value: any): void {\n    }\n/**\n * @param {?} disabled\n * @return {?}\n */\npublic setDisabledState(disabled: boolean): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.formCompContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.formContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.formCompContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.formCompContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-radiobutton',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RadioButtonComponent),\n            multi: true\n        }\n    ],\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction RadioButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioButtonComponent.ctorParameters;\n/** @type {?} */\nRadioButtonComponent.prototype.formCompContext;\n/** @type {?} */\nRadioButtonComponent.prototype.formContext;\n/** @type {?} */\nRadioButtonComponent.prototype.tagObjects;\n/** @type {?} */\nRadioButtonComponent.prototype.checkedChange;\n/** @type {?} */\nRadioButtonComponent.prototype.focus;\n/** @type {?} */\nRadioButtonComponent.prototype.blur;\n/** @type {?} */\nRadioButtonComponent.prototype.registerEvents;\n/** @type {?} */\nRadioButtonComponent.prototype.addTwoWay;\n/** @type {?} */\nRadioButtonComponent.prototype.ngEle;\n/** @type {?} */\nRadioButtonComponent.prototype.srenderer;\n/** @type {?} */\nRadioButtonComponent.prototype.viewContainerRef;\n/** @type {?} */\nRadioButtonComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioButtonComponent } from './radiobutton.component';\n/**\n * NgModule definition for the RadioButton component.\n */\nexport class RadioButtonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        RadioButtonComponent\n    ],\n    exports: [\n        RadioButtonComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioButtonModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioButtonComponent } from './radiobutton.component';\nimport { RadioButtonModule } from './radiobutton.module';\n/**\n * NgModule definition for the RadioButton component with providers.\n */\nexport class RadioButtonAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, RadioButtonModule],\n    exports: [\n        RadioButtonModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioButtonAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioButtonAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioButtonAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ValueProvider, Renderer2, Injector, ChangeDetectionStrategy, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Switch } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['checked','cssClass','disabled','enablePersistence','enableRtl','locale','name','offLabel','onLabel','value'];\nexport const /** @type {?} */ outputs: string[] = ['focus', 'blur', 'change','created','checkedChange'];\nexport const /** @type {?} */ twoWays: string[] = ['checked'];\n/**\n * Represents the Angular Switch Component.\n * ```html\n * <ejs-switch></ejs-switch>\n * ```\n */\n@ComponentMixins([ComponentBase, FormBase])\nexport class SwitchComponent extends Switch implements IComponentBase {\npublic formCompContext : any;\npublic formContext : any;\npublic tagObjects: any;\npublic checkedChange: any;\npublic focus: any;\npublic blur: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.formContext  = new FormBase();\n        this.formCompContext  = new ComponentBase();\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnChange(registerFunction: (_: any) => void): void {\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnTouched(registerFunction: () => void): void {\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value: any): void {\n    }\n/**\n * @param {?} disabled\n * @return {?}\n */\npublic setDisabledState(disabled: boolean): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.formCompContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.formContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.formCompContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.formCompContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-switch',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SwitchComponent),\n            multi: true\n        }\n    ],\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SwitchComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwitchComponent.ctorParameters;\n/** @type {?} */\nSwitchComponent.prototype.formCompContext;\n/** @type {?} */\nSwitchComponent.prototype.formContext;\n/** @type {?} */\nSwitchComponent.prototype.tagObjects;\n/** @type {?} */\nSwitchComponent.prototype.checkedChange;\n/** @type {?} */\nSwitchComponent.prototype.focus;\n/** @type {?} */\nSwitchComponent.prototype.blur;\n/** @type {?} */\nSwitchComponent.prototype.registerEvents;\n/** @type {?} */\nSwitchComponent.prototype.addTwoWay;\n/** @type {?} */\nSwitchComponent.prototype.ngEle;\n/** @type {?} */\nSwitchComponent.prototype.srenderer;\n/** @type {?} */\nSwitchComponent.prototype.viewContainerRef;\n/** @type {?} */\nSwitchComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SwitchComponent } from './switch.component';\n/**\n * NgModule definition for the Switch component.\n */\nexport class SwitchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SwitchComponent\n    ],\n    exports: [\n        SwitchComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SwitchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwitchModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SwitchComponent } from './switch.component';\nimport { SwitchModule } from './switch.module';\n/**\n * NgModule definition for the Switch component with providers.\n */\nexport class SwitchAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SwitchModule],\n    exports: [\n        SwitchModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SwitchAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwitchAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['avatarIconCss', 'avatarText', 'cssClass', 'enabled', 'leadingIconCss', 'text', 'trailingIconCss', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-chip` directive represent a chip of the Angular ChipList.\n * ```html\n * <ejs-chiplist > \n *   <e-chips>\n *    <e-chip text='chip1'></e-chip>\n *    <e-chip text='chip2'></e-chip>\n *   </e-chips>\n * </ejs-chiplist>\n * ```\n */\nexport class ChipDirective extends ComplexBase<ChipDirective> {\npublic directivePropList: any;\n/**\n * This avatarIconCss property helps to customize avatar element.\n * \\@default ''\n */\npublic avatarIconCss: any;\n/**\n * This avatarText property helps to customize avatar content.\n * \\@default ''\n */\npublic avatarText: any;\n/**\n * This cssClass property helps to customize ChipList component.\n * \\@default ''\n */\npublic cssClass: any;\n/**\n * This enabled property helps to enable/disable ChipList component.\n * \\@default true\n * \\@blazordefaultvalue null\n * \\@blazortype bool?\n */\npublic enabled: any;\n/**\n * This leadingIconCss property helps to customize leading icon element.\n * \\@default ''\n */\npublic leadingIconCss: any;\n/**\n * This text property helps to render ChipList component.\n * \\@default ''\n */\npublic text: any;\n/**\n * This trailingIconCss property helps to customize trailing icon element.\n * \\@default ''\n */\npublic trailingIconCss: any;\n/**\n * This value property helps to store the ChipList component values.\n * \\@default ''\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-chips>e-chip',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ChipDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nChipDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipDirective.ctorParameters;\n/** @type {?} */\nChipDirective.prototype.directivePropList;\n/**\n * This avatarIconCss property helps to customize avatar element.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.avatarIconCss;\n/**\n * This avatarText property helps to customize avatar content.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.avatarText;\n/**\n * This cssClass property helps to customize ChipList component.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.cssClass;\n/**\n * This enabled property helps to enable/disable ChipList component.\n * \\@default true\n * \\@blazordefaultvalue null\n * \\@blazortype bool?\n * @type {?}\n */\nChipDirective.prototype.enabled;\n/**\n * This leadingIconCss property helps to customize leading icon element.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.leadingIconCss;\n/**\n * This text property helps to render ChipList component.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.text;\n/**\n * This trailingIconCss property helps to customize trailing icon element.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.trailingIconCss;\n/**\n * This value property helps to store the ChipList component values.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.value;\n/** @type {?} */\nChipDirective.prototype.viewContainerRef;\n}\n\n/**\n * Chip Array Directive\n */\nexport class ChipsDirective extends ArrayBase<ChipsDirective> {\nconstructor() {\n        super('chips');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chiplist>e-chips',\n    queries: {\n        children: new ContentChildren(ChipDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { ChipList } from '@syncfusion/ej2-buttons';\n\nimport { ChipsDirective } from './chips.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['avatarIconCss','avatarText','chips','cssClass','enableDelete','enablePersistence','enableRtl','enabled','leadingIconCss','locale','selectedChips','selection','text','trailingIconCss'];\nexport const /** @type {?} */ outputs: string[] = ['beforeClick','click','created','delete'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Essential JS 2 Angular ChipList Component.\n * ```html\n * <ejs-chiplist></ejs-chiplist>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ChipListComponent extends ChipList implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childChips: QueryList<ChipsDirective>;\npublic tags: string[] = ['chips'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childChips;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-chiplist',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childChips: new ContentChild(ChipsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction ChipListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nChipListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipListComponent.ctorParameters;\n/** @type {?} */\nChipListComponent.prototype.context;\n/** @type {?} */\nChipListComponent.prototype.tagObjects;\n/** @type {?} */\nChipListComponent.prototype.childChips;\n/** @type {?} */\nChipListComponent.prototype.tags;\n/** @type {?} */\nChipListComponent.prototype.registerEvents;\n/** @type {?} */\nChipListComponent.prototype.addTwoWay;\n/** @type {?} */\nChipListComponent.prototype.ngEle;\n/** @type {?} */\nChipListComponent.prototype.srenderer;\n/** @type {?} */\nChipListComponent.prototype.viewContainerRef;\n/** @type {?} */\nChipListComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChipDirective, ChipsDirective } from './chips.directive';\nimport { ChipListComponent } from './chiplist.component';\n/**\n * NgModule definition for the ChipList component.\n */\nexport class ChipListModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ChipListComponent,\n        ChipDirective,\n        ChipsDirective\n    ],\n    exports: [\n        ChipListComponent,\n        ChipDirective,\n        ChipsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChipListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipListModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChipDirective, ChipsDirective } from './chips.directive';\nimport { ChipListComponent } from './chiplist.component';\nimport { ChipListModule } from './chiplist.module';\n/**\n * NgModule definition for the ChipList component with providers.\n */\nexport class ChipListAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ChipListModule],\n    exports: [\n        ChipListModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipListAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChipListAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipListAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ButtonComponent,ButtonModule,ButtonAllModule,CheckBoxComponent,CheckBoxModule,CheckBoxAllModule,RadioButtonComponent,RadioButtonModule,RadioButtonAllModule,SwitchComponent,SwitchModule,SwitchAllModule,ChipDirective,ChipsDirective,ChipListComponent,ChipListModule,ChipListAllModule,wrapperInitialize,getTextNode,destroy,preRender,createCheckBox,rippleMouseHandler,setHiddenInput,CheckBoxUtilModel,ChangeEventArgs,CreateElementArgs,IconPosition,buttonObserver,Button,ButtonModel,LabelPosition,CheckBox,CheckBoxModel,RadioLabelPosition,RadioButton,ChangeArgs,RadioButtonModel,Switch,SwitchModel,classNames,Selection,ClassNames,SelectedItems,SelectedItem,ClickEventArgs,DeleteEventArgs,ChipDataArgs,ChipList,Chip,ChipModel,ChipListModel} from './public_api';\n\nexport {inputs as ɵa,outputs as ɵb} from './src/button/button.component';\nexport {inputs as ɵc,outputs as ɵd} from './src/check-box/checkbox.component';\nexport {inputs as ɵi,outputs as ɵj} from './src/chips/chiplist.component';\nexport {inputs as ɵe,outputs as ɵf} from './src/radio-button/radiobutton.component';\nexport {inputs as ɵg,outputs as ɵh} from './src/switch/switch.component';"]}