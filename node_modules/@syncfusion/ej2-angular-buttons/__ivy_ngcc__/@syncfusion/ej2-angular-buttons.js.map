{"version":3,"file":"ej2-angular-buttons.js","sources":["~/@syncfusion/ej2-angular-buttons/src/button/button.component.ts","~/@syncfusion/ej2-angular-buttons/src/button/button.module.ts","~/@syncfusion/ej2-angular-buttons/src/button/button-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/check-box/checkbox.component.ts","~/@syncfusion/ej2-angular-buttons/src/check-box/checkbox.module.ts","~/@syncfusion/ej2-angular-buttons/src/check-box/checkbox-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/radio-button/radiobutton.component.ts","~/@syncfusion/ej2-angular-buttons/src/radio-button/radiobutton.module.ts","~/@syncfusion/ej2-angular-buttons/src/radio-button/radiobutton-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/switch/switch.component.ts","~/@syncfusion/ej2-angular-buttons/src/switch/switch.module.ts","~/@syncfusion/ej2-angular-buttons/src/switch/switch-all.module.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chips.directive.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chiplist.component.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chiplist.module.ts","~/@syncfusion/ej2-angular-buttons/src/chips/chiplist-all.module.ts","~/@syncfusion/ej2-angular-buttons/ej2-angular-buttons.ts"],"names":["inputs","outputs","twoWays","__decorate","__metadata"],"mappings":"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","sourcesContent":["import { Component, ElementRef, ViewContainerRef, Renderer2, Injector, ChangeDetectionStrategy, QueryList, ValueProvider } from '@angular/core';\nimport { ComponentBase, ComponentMixins, IComponentBase, applyMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Button } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['content','cssClass','disabled','enableHtmlSanitizer','enablePersistence','enableRtl','iconCss','iconPosition','isPrimary','isToggle','locale'];\nexport const /** @type {?} */ outputs: string[] = ['created'];\nexport const /** @type {?} */ twoWays: string[] = [];\n/**\n * Represents the Angular Button Component.\n * ```html\n * <button ejs-button>Button</button>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ButtonComponent extends Button implements IComponentBase {\npublic containerContext : any;\npublic tagObjects: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.containerContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.containerContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.containerContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: '[ejs-button]',\n    inputs: inputs,\n    outputs: outputs,\n    template: `<ng-content ></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction ButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonComponent.ctorParameters;\n/** @type {?} */\nButtonComponent.prototype.containerContext;\n/** @type {?} */\nButtonComponent.prototype.tagObjects;\n/** @type {?} */\nButtonComponent.prototype.registerEvents;\n/** @type {?} */\nButtonComponent.prototype.addTwoWay;\n/** @type {?} */\nButtonComponent.prototype.ngEle;\n/** @type {?} */\nButtonComponent.prototype.srenderer;\n/** @type {?} */\nButtonComponent.prototype.viewContainerRef;\n/** @type {?} */\nButtonComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './button.component';\n/**\n * NgModule definition for the Button component.\n */\nexport class ButtonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ButtonComponent\n    ],\n    exports: [\n        ButtonComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './button.component';\nimport { ButtonModule } from './button.module';\n/**\n * NgModule definition for the Button component with providers.\n */\nexport class ButtonAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ButtonModule],\n    exports: [\n        ButtonModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ValueProvider, Renderer2, Injector, ChangeDetectionStrategy, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['checked','cssClass','disabled','enableHtmlSanitizer','enablePersistence','enableRtl','htmlAttributes','indeterminate','label','labelPosition','locale','name','value'];\nexport const /** @type {?} */ outputs: string[] = ['focus', 'blur', 'change','created','checkedChange','indeterminateChange'];\nexport const /** @type {?} */ twoWays: string[] = ['checked', 'indeterminate'];\n/**\n * Represents the Angular CheckBox Component.\n * ```html\n * <ejs-checkbox label='Default'></ejs-checkbox>\n * ```\n */\n@ComponentMixins([ComponentBase, FormBase])\nexport class CheckBoxComponent extends CheckBox implements IComponentBase {\npublic formCompContext : any;\npublic formContext : any;\npublic tagObjects: any;\npublic checkedChange: any;\npublic indeterminateChange: any;\npublic focus: any;\npublic blur: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.formContext  = new FormBase();\n        this.formCompContext  = new ComponentBase();\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnChange(registerFunction: (_: any) => void): void {\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnTouched(registerFunction: () => void): void {\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value: any): void {\n    }\n/**\n * @param {?} disabled\n * @return {?}\n */\npublic setDisabledState(disabled: boolean): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.formCompContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.formContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.formCompContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.formCompContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-checkbox',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CheckBoxComponent),\n            multi: true\n        }\n    ],\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction CheckBoxComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBoxComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckBoxComponent.ctorParameters;\n/** @type {?} */\nCheckBoxComponent.prototype.formCompContext;\n/** @type {?} */\nCheckBoxComponent.prototype.formContext;\n/** @type {?} */\nCheckBoxComponent.prototype.tagObjects;\n/** @type {?} */\nCheckBoxComponent.prototype.checkedChange;\n/** @type {?} */\nCheckBoxComponent.prototype.indeterminateChange;\n/** @type {?} */\nCheckBoxComponent.prototype.focus;\n/** @type {?} */\nCheckBoxComponent.prototype.blur;\n/** @type {?} */\nCheckBoxComponent.prototype.registerEvents;\n/** @type {?} */\nCheckBoxComponent.prototype.addTwoWay;\n/** @type {?} */\nCheckBoxComponent.prototype.ngEle;\n/** @type {?} */\nCheckBoxComponent.prototype.srenderer;\n/** @type {?} */\nCheckBoxComponent.prototype.viewContainerRef;\n/** @type {?} */\nCheckBoxComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckBoxComponent } from './checkbox.component';\n/**\n * NgModule definition for the CheckBox component.\n */\nexport class CheckBoxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        CheckBoxComponent\n    ],\n    exports: [\n        CheckBoxComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckBoxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBoxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckBoxModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckBoxComponent } from './checkbox.component';\nimport { CheckBoxModule } from './checkbox.module';\n/**\n * NgModule definition for the CheckBox component with providers.\n */\nexport class CheckBoxAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, CheckBoxModule],\n    exports: [\n        CheckBoxModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckBoxAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBoxAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckBoxAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ValueProvider, Renderer2, Injector, ChangeDetectionStrategy, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { RadioButton } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['checked','cssClass','disabled','enableHtmlSanitizer','enablePersistence','enableRtl','label','labelPosition','locale','name','value'];\nexport const /** @type {?} */ outputs: string[] = ['focus', 'blur', 'change','created','checkedChange'];\nexport const /** @type {?} */ twoWays: string[] = ['checked'];\n/**\n * Represents the Angular RadioButton Component.\n * ```html\n * <ejs-radiobutton label='Default'></ejs-radiobutton>\n * ```\n */\n@ComponentMixins([ComponentBase, FormBase])\nexport class RadioButtonComponent extends RadioButton implements IComponentBase {\npublic formCompContext : any;\npublic formContext : any;\npublic tagObjects: any;\npublic checkedChange: any;\npublic focus: any;\npublic blur: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.formContext  = new FormBase();\n        this.formCompContext  = new ComponentBase();\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnChange(registerFunction: (_: any) => void): void {\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnTouched(registerFunction: () => void): void {\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value: any): void {\n    }\n/**\n * @param {?} disabled\n * @return {?}\n */\npublic setDisabledState(disabled: boolean): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.formCompContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.formContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.formCompContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.formCompContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-radiobutton',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RadioButtonComponent),\n            multi: true\n        }\n    ],\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction RadioButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioButtonComponent.ctorParameters;\n/** @type {?} */\nRadioButtonComponent.prototype.formCompContext;\n/** @type {?} */\nRadioButtonComponent.prototype.formContext;\n/** @type {?} */\nRadioButtonComponent.prototype.tagObjects;\n/** @type {?} */\nRadioButtonComponent.prototype.checkedChange;\n/** @type {?} */\nRadioButtonComponent.prototype.focus;\n/** @type {?} */\nRadioButtonComponent.prototype.blur;\n/** @type {?} */\nRadioButtonComponent.prototype.registerEvents;\n/** @type {?} */\nRadioButtonComponent.prototype.addTwoWay;\n/** @type {?} */\nRadioButtonComponent.prototype.ngEle;\n/** @type {?} */\nRadioButtonComponent.prototype.srenderer;\n/** @type {?} */\nRadioButtonComponent.prototype.viewContainerRef;\n/** @type {?} */\nRadioButtonComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioButtonComponent } from './radiobutton.component';\n/**\n * NgModule definition for the RadioButton component.\n */\nexport class RadioButtonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        RadioButtonComponent\n    ],\n    exports: [\n        RadioButtonComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioButtonModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadioButtonComponent } from './radiobutton.component';\nimport { RadioButtonModule } from './radiobutton.module';\n/**\n * NgModule definition for the RadioButton component with providers.\n */\nexport class RadioButtonAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, RadioButtonModule],\n    exports: [\n        RadioButtonModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioButtonAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioButtonAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioButtonAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ValueProvider, Renderer2, Injector, ChangeDetectionStrategy, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, FormBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Switch } from '@syncfusion/ej2-buttons';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['checked','cssClass','disabled','enablePersistence','enableRtl','locale','name','offLabel','onLabel','value'];\nexport const /** @type {?} */ outputs: string[] = ['focus', 'blur', 'change','created','checkedChange'];\nexport const /** @type {?} */ twoWays: string[] = ['checked'];\n/**\n * Represents the Angular Switch Component.\n * ```html\n * <ejs-switch></ejs-switch>\n * ```\n */\n@ComponentMixins([ComponentBase, FormBase])\nexport class SwitchComponent extends Switch implements IComponentBase {\npublic formCompContext : any;\npublic formContext : any;\npublic tagObjects: any;\npublic checkedChange: any;\npublic focus: any;\npublic blur: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.formContext  = new FormBase();\n        this.formCompContext  = new ComponentBase();\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnChange(registerFunction: (_: any) => void): void {\n    }\n/**\n * @param {?} registerFunction\n * @return {?}\n */\npublic registerOnTouched(registerFunction: () => void): void {\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value: any): void {\n    }\n/**\n * @param {?} disabled\n * @return {?}\n */\npublic setDisabledState(disabled: boolean): void {\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.formCompContext.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.formContext.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.formCompContext.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.formCompContext.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-switch',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SwitchComponent),\n            multi: true\n        }\n    ],\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction SwitchComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwitchComponent.ctorParameters;\n/** @type {?} */\nSwitchComponent.prototype.formCompContext;\n/** @type {?} */\nSwitchComponent.prototype.formContext;\n/** @type {?} */\nSwitchComponent.prototype.tagObjects;\n/** @type {?} */\nSwitchComponent.prototype.checkedChange;\n/** @type {?} */\nSwitchComponent.prototype.focus;\n/** @type {?} */\nSwitchComponent.prototype.blur;\n/** @type {?} */\nSwitchComponent.prototype.registerEvents;\n/** @type {?} */\nSwitchComponent.prototype.addTwoWay;\n/** @type {?} */\nSwitchComponent.prototype.ngEle;\n/** @type {?} */\nSwitchComponent.prototype.srenderer;\n/** @type {?} */\nSwitchComponent.prototype.viewContainerRef;\n/** @type {?} */\nSwitchComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SwitchComponent } from './switch.component';\n/**\n * NgModule definition for the Switch component.\n */\nexport class SwitchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        SwitchComponent\n    ],\n    exports: [\n        SwitchComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SwitchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwitchModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SwitchComponent } from './switch.component';\nimport { SwitchModule } from './switch.module';\n/**\n * NgModule definition for the Switch component with providers.\n */\nexport class SwitchAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, SwitchModule],\n    exports: [\n        SwitchModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SwitchAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSwitchAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['avatarIconCss', 'avatarText', 'cssClass', 'enabled', 'leadingIconCss', 'text', 'trailingIconCss', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-chip` directive represent a chip of the Angular ChipList.\n * ```html\n * <ejs-chiplist > \n *   <e-chips>\n *    <e-chip text='chip1'></e-chip>\n *    <e-chip text='chip2'></e-chip>\n *   </e-chips>\n * </ejs-chiplist>\n * ```\n */\nexport class ChipDirective extends ComplexBase<ChipDirective> {\npublic directivePropList: any;\n/**\n * This avatarIconCss property helps to customize avatar element.\n * \\@default ''\n */\npublic avatarIconCss: any;\n/**\n * This avatarText property helps to customize avatar content.\n * \\@default ''\n */\npublic avatarText: any;\n/**\n * This cssClass property helps to customize ChipList component.\n * \\@default ''\n */\npublic cssClass: any;\n/**\n * This enabled property helps to enable/disable ChipList component.\n * \\@default true\n * \\@blazordefaultvalue null\n * \\@blazortype bool?\n */\npublic enabled: any;\n/**\n * This leadingIconCss property helps to customize leading icon element.\n * \\@default ''\n */\npublic leadingIconCss: any;\n/**\n * This text property helps to render ChipList component.\n * \\@default ''\n */\npublic text: any;\n/**\n * This trailingIconCss property helps to customize trailing icon element.\n * \\@default ''\n */\npublic trailingIconCss: any;\n/**\n * This value property helps to store the ChipList component values.\n * \\@default ''\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-chips>e-chip',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ChipDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nChipDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipDirective.ctorParameters;\n/** @type {?} */\nChipDirective.prototype.directivePropList;\n/**\n * This avatarIconCss property helps to customize avatar element.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.avatarIconCss;\n/**\n * This avatarText property helps to customize avatar content.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.avatarText;\n/**\n * This cssClass property helps to customize ChipList component.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.cssClass;\n/**\n * This enabled property helps to enable/disable ChipList component.\n * \\@default true\n * \\@blazordefaultvalue null\n * \\@blazortype bool?\n * @type {?}\n */\nChipDirective.prototype.enabled;\n/**\n * This leadingIconCss property helps to customize leading icon element.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.leadingIconCss;\n/**\n * This text property helps to render ChipList component.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.text;\n/**\n * This trailingIconCss property helps to customize trailing icon element.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.trailingIconCss;\n/**\n * This value property helps to store the ChipList component values.\n * \\@default ''\n * @type {?}\n */\nChipDirective.prototype.value;\n/** @type {?} */\nChipDirective.prototype.viewContainerRef;\n}\n\n/**\n * Chip Array Directive\n */\nexport class ChipsDirective extends ArrayBase<ChipsDirective> {\nconstructor() {\n        super('chips');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-chiplist>e-chips',\n    queries: {\n        children: new ContentChildren(ChipDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nChipsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { ChipList } from '@syncfusion/ej2-buttons';\n\nimport { ChipsDirective } from './chips.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['avatarIconCss','avatarText','chips','cssClass','enableDelete','enablePersistence','enableRtl','enabled','leadingIconCss','locale','selectedChips','selection','text','trailingIconCss'];\nexport const /** @type {?} */ outputs: string[] = ['beforeClick','click','created','delete'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Represents the Essential JS 2 Angular ChipList Component.\n * ```html\n * <ejs-chiplist></ejs-chiplist>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class ChipListComponent extends ChipList implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic childChips: QueryList<ChipsDirective>;\npublic tags: string[] = ['chips'];\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childChips;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-chiplist',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childChips: new ContentChild(ChipsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction ChipListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nChipListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipListComponent.ctorParameters;\n/** @type {?} */\nChipListComponent.prototype.context;\n/** @type {?} */\nChipListComponent.prototype.tagObjects;\n/** @type {?} */\nChipListComponent.prototype.childChips;\n/** @type {?} */\nChipListComponent.prototype.tags;\n/** @type {?} */\nChipListComponent.prototype.registerEvents;\n/** @type {?} */\nChipListComponent.prototype.addTwoWay;\n/** @type {?} */\nChipListComponent.prototype.ngEle;\n/** @type {?} */\nChipListComponent.prototype.srenderer;\n/** @type {?} */\nChipListComponent.prototype.viewContainerRef;\n/** @type {?} */\nChipListComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChipDirective, ChipsDirective } from './chips.directive';\nimport { ChipListComponent } from './chiplist.component';\n/**\n * NgModule definition for the ChipList component.\n */\nexport class ChipListModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        ChipListComponent,\n        ChipDirective,\n        ChipsDirective\n    ],\n    exports: [\n        ChipListComponent,\n        ChipDirective,\n        ChipsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChipListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipListModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChipDirective, ChipsDirective } from './chips.directive';\nimport { ChipListComponent } from './chiplist.component';\nimport { ChipListModule } from './chiplist.module';\n/**\n * NgModule definition for the ChipList component with providers.\n */\nexport class ChipListAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, ChipListModule],\n    exports: [\n        ChipListModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ChipListAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nChipListAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChipListAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ButtonComponent,ButtonModule,ButtonAllModule,CheckBoxComponent,CheckBoxModule,CheckBoxAllModule,RadioButtonComponent,RadioButtonModule,RadioButtonAllModule,SwitchComponent,SwitchModule,SwitchAllModule,ChipDirective,ChipsDirective,ChipListComponent,ChipListModule,ChipListAllModule,wrapperInitialize,getTextNode,destroy,preRender,createCheckBox,rippleMouseHandler,setHiddenInput,CheckBoxUtilModel,ChangeEventArgs,CreateElementArgs,IconPosition,buttonObserver,Button,ButtonModel,LabelPosition,CheckBox,CheckBoxModel,RadioLabelPosition,RadioButton,ChangeArgs,RadioButtonModel,Switch,SwitchModel,classNames,Selection,ClassNames,SelectedItems,SelectedItem,ClickEventArgs,DeleteEventArgs,ChipDataArgs,ChipList,Chip,ChipModel,ChipListModel} from './public_api';\n\nexport {inputs as ɵa,outputs as ɵb} from './src/button/button.component';\nexport {inputs as ɵc,outputs as ɵd} from './src/check-box/checkbox.component';\nexport {inputs as ɵi,outputs as ɵj} from './src/chips/chiplist.component';\nexport {inputs as ɵe,outputs as ɵf} from './src/radio-button/radiobutton.component';\nexport {inputs as ɵg,outputs as ɵh} from './src/switch/switch.component';"]}