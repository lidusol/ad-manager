import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { AccumulationChart } from '@syncfusion/ej2-charts';
import { AccumulationSeriesCollectionDirective } from './series.directive';
import { AccumulationAnnotationsDirective } from './annotations.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * AccumulationChart Component
 * ```html
 * <ejs-accumulationchart></ejs-accumulationchart>
 * ```
 */
export declare class AccumulationChartComponent extends AccumulationChart implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    childSeries: QueryList<AccumulationSeriesCollectionDirective>;
    childAnnotations: QueryList<AccumulationAnnotationsDirective>;
    tags: string[];
    dataSourceChange: any;
    tooltip_template: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AccumulationChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AccumulationChartComponent, "ejs-accumulationchart", never, { "annotations": "annotations"; "background": "background"; "backgroundImage": "backgroundImage"; "border": "border"; "center": "center"; "currencyCode": "currencyCode"; "dataSource": "dataSource"; "enableAnimation": "enableAnimation"; "enableBorderOnMouseMove": "enableBorderOnMouseMove"; "enableExport": "enableExport"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enableSmartLabels": "enableSmartLabels"; "height": "height"; "isMultiSelect": "isMultiSelect"; "legendSettings": "legendSettings"; "locale": "locale"; "margin": "margin"; "selectedDataIndexes": "selectedDataIndexes"; "selectionMode": "selectionMode"; "series": "series"; "subTitle": "subTitle"; "subTitleStyle": "subTitleStyle"; "theme": "theme"; "title": "title"; "titleStyle": "titleStyle"; "tooltip": "tooltip"; "useGroupingSeparator": "useGroupingSeparator"; "width": "width"; }, { "animationComplete": "animationComplete"; "annotationRender": "annotationRender"; "beforePrint": "beforePrint"; "chartMouseClick": "chartMouseClick"; "chartMouseDown": "chartMouseDown"; "chartMouseLeave": "chartMouseLeave"; "chartMouseMove": "chartMouseMove"; "chartMouseUp": "chartMouseUp"; "legendRender": "legendRender"; "load": "load"; "loaded": "loaded"; "pointClick": "pointClick"; "pointMove": "pointMove"; "pointRender": "pointRender"; "resized": "resized"; "seriesRender": "seriesRender"; "textRender": "textRender"; "tooltipRender": "tooltipRender"; "dataSourceChange": "dataSourceChange"; }, ["tooltip_template", "childSeries", "childAnnotations"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjdW11bGF0aW9uY2hhcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFjY3VtdWxhdGlvbmNoYXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgUXVlcnlMaXN0LCBSZW5kZXJlcjIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgQWNjdW11bGF0aW9uQ2hhcnQgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItY2hhcnRzJztcbmltcG9ydCB7IEFjY3VtdWxhdGlvblNlcmllc0NvbGxlY3Rpb25EaXJlY3RpdmUgfSBmcm9tICcuL3Nlcmllcy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQWNjdW11bGF0aW9uQW5ub3RhdGlvbnNEaXJlY3RpdmUgfSBmcm9tICcuL2Fubm90YXRpb25zLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogQWNjdW11bGF0aW9uQ2hhcnQgQ29tcG9uZW50XG4gKiBgYGBodG1sXG4gKiA8ZWpzLWFjY3VtdWxhdGlvbmNoYXJ0PjwvZWpzLWFjY3VtdWxhdGlvbmNoYXJ0PlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFjY3VtdWxhdGlvbkNoYXJ0Q29tcG9uZW50IGV4dGVuZHMgQWNjdW11bGF0aW9uQ2hhcnQgaW1wbGVtZW50cyBJQ29tcG9uZW50QmFzZSB7XG4gICAgcHJpdmF0ZSBuZ0VsZTtcbiAgICBwcml2YXRlIHNyZW5kZXJlcjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBjb250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIGNoaWxkU2VyaWVzOiBRdWVyeUxpc3Q8QWNjdW11bGF0aW9uU2VyaWVzQ29sbGVjdGlvbkRpcmVjdGl2ZT47XG4gICAgY2hpbGRBbm5vdGF0aW9uczogUXVlcnlMaXN0PEFjY3VtdWxhdGlvbkFubm90YXRpb25zRGlyZWN0aXZlPjtcbiAgICB0YWdzOiBzdHJpbmdbXTtcbiAgICBkYXRhU291cmNlQ2hhbmdlOiBhbnk7XG4gICAgdG9vbHRpcF90ZW1wbGF0ZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKG5nRWxlOiBFbGVtZW50UmVmLCBzcmVuZGVyZXI6IFJlbmRlcmVyMiwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==