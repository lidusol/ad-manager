import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Annotation Directive
 * ```html
 * <e-annotations><e-annotation></e-annotation><e-annotations>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class AnnotationDirective extends ComplexBase<AnnotationDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits: any;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description: any;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as left side.
     * * Far - Align the annotation element as right side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment: any;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region: any;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment: any;
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x: any;
    /**
     * The name of horizontal axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    xAxisName: any;
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y: any;
    /**
     * The name of vertical axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    yAxisName: any;
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AnnotationDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AnnotationDirective, "e-annotations>e-annotation", never, { "content": "content"; "coordinateUnits": "coordinateUnits"; "description": "description"; "horizontalAlignment": "horizontalAlignment"; "region": "region"; "verticalAlignment": "verticalAlignment"; "x": "x"; "xAxisName": "xAxisName"; "y": "y"; "yAxisName": "yAxisName"; }, {}, ["content"]>;
}
/**
 * Annotation Array Directive
 * @private
 */
export declare class AnnotationsDirective extends ArrayBase<AnnotationsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AnnotationsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AnnotationsDirective, "ejs-chart>e-annotations", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbnMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImFubm90YXRpb25zLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuLyoqXG4gKiBBbm5vdGF0aW9uIERpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtYW5ub3RhdGlvbnM+PGUtYW5ub3RhdGlvbj48L2UtYW5ub3RhdGlvbj48ZS1hbm5vdGF0aW9ucz5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbm5vdGF0aW9uRGlyZWN0aXZlIGV4dGVuZHMgQ29tcGxleEJhc2U8QW5ub3RhdGlvbkRpcmVjdGl2ZT4ge1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBkaXJlY3RpdmVQcm9wTGlzdDogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgY29vcmRpbmF0ZSB1bml0cyBvZiB0aGUgYW5ub3RhdGlvbi4gVGhleSBhcmVcbiAgICAgKiAqIFBpeGVsIC0gQW5ub3RhdGlvbiByZW5kZXJzIGJhc2VkIG9uIHggYW5kIHkgcGl4ZWwgdmFsdWUuXG4gICAgICogKiBQb2ludCAtIEFubm90YXRpb24gcmVuZGVycyBiYXNlZCBvbiB4IGFuZCB5IGF4aXMgdmFsdWUuXG4gICAgICogQGRlZmF1bHQgJ1BpeGVsJ1xuICAgICAqL1xuICAgIGNvb3JkaW5hdGVVbml0czogYW55O1xuICAgIC8qKlxuICAgICAqIEluZm9ybWF0aW9uIGFib3V0IGFubm90YXRpb24gZm9yIGFzc2lzdGl2ZSB0ZWNobm9sb2d5LlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgYWxpZ25tZW50IG9mIHRoZSBhbm5vdGF0aW9uLiBUaGV5IGFyZVxuICAgICAqICogTmVhciAtIEFsaWduIHRoZSBhbm5vdGF0aW9uIGVsZW1lbnQgYXMgbGVmdCBzaWRlLlxuICAgICAqICogRmFyIC0gQWxpZ24gdGhlIGFubm90YXRpb24gZWxlbWVudCBhcyByaWdodCBzaWRlLlxuICAgICAqICogQ2VudGVyIC0gQWxpZ24gdGhlIGFubm90YXRpb24gZWxlbWVudCBhcyBtaWQgcG9pbnQuXG4gICAgICogQGRlZmF1bHQgJ0NlbnRlcidcbiAgICAgKi9cbiAgICBob3Jpem9udGFsQWxpZ25tZW50OiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSByZWdpb25zIG9mIHRoZSBhbm5vdGF0aW9uLiBUaGV5IGFyZVxuICAgICAqICogQ2hhcnQgLSBBbm5vdGF0aW9uIHJlbmRlcnMgYmFzZWQgb24gY2hhcnQgY29vcmRpbmF0ZXMuXG4gICAgICogKiBTZXJpZXMgLSBBbm5vdGF0aW9uIHJlbmRlcnMgYmFzZWQgb24gc2VyaWVzIGNvb3JkaW5hdGVzLlxuICAgICAqIEBkZWZhdWx0ICdDaGFydCdcbiAgICAgKi9cbiAgICByZWdpb246IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBhbm5vdGF0aW9uLiBUaGV5IGFyZVxuICAgICAqICogVG9wIC0gQWxpZ24gdGhlIGFubm90YXRpb24gZWxlbWVudCBhcyB0b3Agc2lkZS5cbiAgICAgKiAqIEJvdHRvbSAtIEFsaWduIHRoZSBhbm5vdGF0aW9uIGVsZW1lbnQgYXMgYm90dG9tIHNpZGUuXG4gICAgICogKiBNaWRkbGUgLSBBbGlnbiB0aGUgYW5ub3RhdGlvbiBlbGVtZW50IGFzIG1pZCBwb2ludC5cbiAgICAgKiBAZGVmYXVsdCAnTWlkZGxlJ1xuICAgICAqL1xuICAgIHZlcnRpY2FsQWxpZ25tZW50OiBhbnk7XG4gICAgLyoqXG4gICAgICogaWYgc2V0IGNvb3JkaW5hdGVVbml0IGFzIGBQaXhlbGAgWCBzcGVjaWZpZXMgdGhlIGF4aXMgdmFsdWVcbiAgICAgKiBlbHNlIGlzIHNwZWNpZmllcyBwaXhlbCBvciBwZXJjZW50YWdlIG9mIGNvb3JkaW5hdGVcbiAgICAgKiBAZGVmYXVsdCAnMCdcbiAgICAgKi9cbiAgICB4OiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgaG9yaXpvbnRhbCBheGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYW5ub3RhdGlvbi5cbiAgICAgKiBJdCByZXF1aXJlcyBgYXhlc2Agb2YgY2hhcnQuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHhBeGlzTmFtZTogYW55O1xuICAgIC8qKlxuICAgICAqIGlmIHNldCBjb29yZGluYXRlVW5pdCBhcyBgUGl4ZWxgIFkgc3BlY2lmaWVzIHRoZSBheGlzIHZhbHVlXG4gICAgICogZWxzZSBpcyBzcGVjaWZpZXMgcGl4ZWwgb3IgcGVyY2VudGFnZSBvZiBjb29yZGluYXRlXG4gICAgICogQGRlZmF1bHQgJzAnXG4gICAgICovXG4gICAgeTogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHZlcnRpY2FsIGF4aXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhbm5vdGF0aW9uLlxuICAgICAqIEl0IHJlcXVpcmVzIGBheGVzYCBvZiBjaGFydC5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgeUF4aXNOYW1lOiBhbnk7XG4gICAgLyoqXG4gICAgICogQ29udGVudCBvZiB0aGUgYW5ub3RhdGlvbiwgd2hpY2ggYWNjZXB0cyB0aGUgaWQgb2YgdGhlIGN1c3RvbSBlbGVtZW50LlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBjb250ZW50OiBhbnk7XG4gICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZik7XG59XG4vKipcbiAqIEFubm90YXRpb24gQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbm5vdGF0aW9uc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxBbm5vdGF0aW9uc0RpcmVjdGl2ZT4ge1xuICAgIGNvbnN0cnVjdG9yKCk7XG59XG4iXX0=