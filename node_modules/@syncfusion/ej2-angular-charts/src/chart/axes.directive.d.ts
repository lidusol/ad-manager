import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Axis Directive
 * ```html
 * <e-axes><e-axis></e-axis></e-axes>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class AxisDirective extends ComplexBase<AxisDirective> {
    private viewContainerRef;
    directivePropList: any;
    childStripLines: any;
    childMultiLevelLabels: any;
    tags: string[];
    /**
     * Border of the multi level labels.
     */
    border: any;
    /**
     * The polar radar radius position.
     * @default 100
     */
    coefficient: any;
    /**
     * Specifies the index of the column where the axis is associated,
     * when the chart area is divided into multiple plot areas by using `columns`.
     *
     * @default 0
     */
    columnIndex: any;
    /**
     * Specifies the value at which the axis line has to be intersect with the vertical axis or vice versa.
     * @default null
     */
    crossesAt: any;
    /**
     * Specifies axis name with which the axis line has to be crossed
     * @default null
     */
    crossesInAxis: any;
    /**
     * Options to customize the crosshair ToolTip.
     */
    crosshairTooltip: any;
    /**
     * Description for axis and its element.
     * @default null
     */
    description: any;
    /**
     * With this property, you can request axis to calculate intervals approximately equal to your specified interval.
     * @default null
     * @aspdefaultvalueignore
     */
    desiredIntervals: any;
    /**
     * Specifies the position of labels at the edge of the axis.They are,
     * * None: No action will be performed.
     * * Hide: Edge label will be hidden.
     * * Shift: Shifts the edge labels.
     * @default 'None'
     */
    edgeLabelPlacement: any;
    /**
     * If set to true, axis interval will be calculated automatically with respect to the zoomed range.
     * @default true
     */
    enableAutoIntervalOnZooming: any;
    /**
     * Specifies the Trim property for an axis.
     * @default false
     */
    enableTrim: any;
    /**
     * Specifies the interval for an axis.
     * @default null
     * @aspdefaultvalueignore
     */
    interval: any;
    /**
     * Specifies the types like `Years`, `Months`, `Days`, `Hours`, `Minutes`, `Seconds` in date time axis.They are,
     * * Auto: Defines the interval of the axis based on data.
     * * Years: Defines the interval of the axis in years.
     * * Months: Defines the interval of the axis in months.
     * * Days: Defines the interval of the axis in days.
     * * Hours: Defines the interval of the axis in hours.
     * * Minutes: Defines the interval of the axis in minutes.
     * @default 'Auto'
     */
    intervalType: any;
    /**
     * Specifies indexed category  axis.
     * @default false
     */
    isIndexed: any;
    /**
     * It specifies whether the axis to be rendered in inversed manner or not.
     * @default false
     */
    isInversed: any;
    /**
     * Used to format the axis label that accepts any global string format like 'C', 'n1', 'P' etc.
     * It also accepts placeholder like '{value}°C' in which value represent the axis label, e.g, 20°C.
     * @default ''
     */
    labelFormat: any;
    /**
     * Specifies the actions like `None`, `Hide`, `Trim`, `Wrap`, `MultipleRows`, `Rotate45`, and `Rotate90`
     * when the axis labels intersect with each other.They are,
     * * None: Shows all the labels.
     * * Hide: Hides the label when it intersects.
     * * Trim: Trim the label when it intersects.
     * * Wrap: Wrap the label when it intersects.
     * * MultipleRows: Shows the label in MultipleRows when it intersects.
     * * Rotate45: Rotates the label to 45 degree when it intersects.
     * * Rotate90: Rotates the label to 90 degree when it intersects.
     * @default Trim
     */
    labelIntersectAction: any;
    /**
     * Specifies the placement of a label for category axis. They are,
     * * betweenTicks: Renders the label between the ticks.
     * * onTicks: Renders the label on the ticks.
     * @default 'BetweenTicks'
     */
    labelPlacement: any;
    /**
     * Specifies the placement of a labels to the axis line. They are,
     * * inside: Renders the labels inside to the axis line.
     * * outside: Renders the labels outside to the axis line.
     * @default 'Outside'
     */
    labelPosition: any;
    /**
     * The angle to which the axis label gets rotated.
     * @default 0
     */
    labelRotation: any;
    /**
     * Options to customize the axis label.
     */
    labelStyle: any;
    /**
     * Options for customizing axis lines.
     */
    lineStyle: any;
    /**
     * The base value for logarithmic axis. It requires `valueType` to be `Logarithmic`.
     * @default 10
     */
    logBase: any;
    /**
     * Options for customizing major grid lines.
     */
    majorGridLines: any;
    /**
     * Options for customizing major tick lines.
     */
    majorTickLines: any;
    /**
     * Specifies the maximum range of an axis.
     * @default null
     */
    maximum: any;
    /**
     * Specifies the maximum width of an axis label.
     * @default 34.
     */
    maximumLabelWidth: any;
    /**
     * The maximum number of label count per 100 pixels with respect to the axis length.
     * @default 3
     */
    maximumLabels: any;
    /**
     * Specifies the minimum range of an axis.
     * @default null
     */
    minimum: any;
    /**
     * Options for customizing minor grid lines.
     */
    minorGridLines: any;
    /**
     * Options for customizing minor tick lines.
     */
    minorTickLines: any;
    /**
     * Specifies the number of minor ticks per interval.
     * @default 0
     */
    minorTicksPerInterval: any;
    /**
     * Specifies the multi level labels collection for the axis
     */
    multiLevelLabels: any;
    /**
     * Unique identifier of an axis.
     * To associate an axis with the series, set this name to the xAxisName/yAxisName properties of the series.
     * @default ''
     */
    name: any;
    /**
     * If set to true, the axis will render at the opposite side of its default position.
     * @default false
     */
    opposedPosition: any;
    /**
     * Specifies whether axis elements like axis labels, axis title, etc has to be crossed with axis line
     * @default true
     */
    placeNextToAxisLine: any;
    /**
     * Left and right padding for the plot area in pixels.
     * @default 0
     */
    plotOffset: any;
    /**
     * Bottom padding for the plot area in pixels.
     * @default null
     */
    plotOffsetBottom: any;
    /**
     * Left padding for the plot area in pixels.
     * @default null
     */
    plotOffsetLeft: any;
    /**
     * Right padding for the plot area in pixels.
     * @default null
     */
    plotOffsetRight: any;
    /**
     * Top padding for the plot area in pixels.
     * @default null
     */
    plotOffsetTop: any;
    /**
     * Specifies the padding for the axis range in terms of interval.They are,
     * * none: Padding cannot be applied to the axis.
     * * normal: Padding is applied to the axis based on the range calculation.
     * * additional: Interval of the axis is added as padding to the minimum and maximum values of the range.
     * * round: Axis range is rounded to the nearest possible value divided by the interval.
     * @default 'Auto'
     */
    rangePadding: any;
    /**
     * Specifies the index of the row where the axis is associated, when the chart area is divided into multiple plot areas by using `rows`.
     *
     * @default 0
     */
    rowIndex: any;
    /**
     * Option to customize scrollbar with lazy loading
     */
    scrollbarSettings: any;
    /**
     * Specifies the skeleton format in which the dateTime format will process.
     * @default ''
     */
    skeleton: any;
    /**
     * It specifies the type of format to be used in dateTime format process.
     * @default 'DateTime'
     */
    skeletonType: any;
    /**
     * Specifies the number of `columns` or `rows` an axis has to span horizontally or vertically.
     * @default 1
     */
    span: any;
    /**
     * The start angle for the series.
     * @default 0
     */
    startAngle: any;
    /**
     * Specifies the stripLine collection for the axis
     */
    stripLines: any;
    /**
     * TabIndex value for the axis.
     * @default 2
     */
    tabIndex: any;
    /**
     * Specifies the placement of a ticks to the axis line. They are,
     * * inside: Renders the ticks inside to the axis line.
     * * outside: Renders the ticks outside to the axis line.
     * @default 'Outside'
     */
    tickPosition: any;
    /**
     * Specifies the title of an axis.
     * @default ''
     */
    title: any;
    /**
     * Options for customizing the axis title.
     */
    titleStyle: any;
    /**
     * Specifies the type of data the axis is handling.
     * * Double:  Renders a numeric axis.
     * * DateTime: Renders a dateTime axis.
     * * Category: Renders a category axis.
     * * Logarithmic: Renders a log axis.
     * @default 'Double'
     * @blazortype Syncfusion.EJ2.Blazor.Charts.ValueType
     * @isenumeration true
     */
    valueType: any;
    /**
     * If set to true, axis label will be visible.
     * @default true
     */
    visible: any;
    /**
     * The axis is scaled by this factor. When zoomFactor is 0.5, the chart is scaled by 200% along this axis. Value ranges from 0 to 1.
     * @default 1
     */
    zoomFactor: any;
    /**
     * Position of the zoomed axis. Value ranges from 0 to 1.
     * @default 0
     */
    zoomPosition: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AxisDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AxisDirective, "e-axes>e-axis", never, { "border": "border"; "coefficient": "coefficient"; "columnIndex": "columnIndex"; "crossesAt": "crossesAt"; "crossesInAxis": "crossesInAxis"; "crosshairTooltip": "crosshairTooltip"; "description": "description"; "desiredIntervals": "desiredIntervals"; "edgeLabelPlacement": "edgeLabelPlacement"; "enableAutoIntervalOnZooming": "enableAutoIntervalOnZooming"; "enableTrim": "enableTrim"; "interval": "interval"; "intervalType": "intervalType"; "isIndexed": "isIndexed"; "isInversed": "isInversed"; "labelFormat": "labelFormat"; "labelIntersectAction": "labelIntersectAction"; "labelPlacement": "labelPlacement"; "labelPosition": "labelPosition"; "labelRotation": "labelRotation"; "labelStyle": "labelStyle"; "lineStyle": "lineStyle"; "logBase": "logBase"; "majorGridLines": "majorGridLines"; "majorTickLines": "majorTickLines"; "maximum": "maximum"; "maximumLabelWidth": "maximumLabelWidth"; "maximumLabels": "maximumLabels"; "minimum": "minimum"; "minorGridLines": "minorGridLines"; "minorTickLines": "minorTickLines"; "minorTicksPerInterval": "minorTicksPerInterval"; "multiLevelLabels": "multiLevelLabels"; "name": "name"; "opposedPosition": "opposedPosition"; "placeNextToAxisLine": "placeNextToAxisLine"; "plotOffset": "plotOffset"; "plotOffsetBottom": "plotOffsetBottom"; "plotOffsetLeft": "plotOffsetLeft"; "plotOffsetRight": "plotOffsetRight"; "plotOffsetTop": "plotOffsetTop"; "rangePadding": "rangePadding"; "rowIndex": "rowIndex"; "scrollbarSettings": "scrollbarSettings"; "skeleton": "skeleton"; "skeletonType": "skeletonType"; "span": "span"; "startAngle": "startAngle"; "stripLines": "stripLines"; "tabIndex": "tabIndex"; "tickPosition": "tickPosition"; "title": "title"; "titleStyle": "titleStyle"; "valueType": "valueType"; "visible": "visible"; "zoomFactor": "zoomFactor"; "zoomPosition": "zoomPosition"; }, {}, ["childStripLines", "childMultiLevelLabels"]>;
}
/**
 * Axis Array Directive
 * @private
 */
export declare class AxesDirective extends ArrayBase<AxesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AxesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AxesDirective, "ejs-chart>e-axes", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,