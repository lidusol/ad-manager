import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * MultiLevelLabels Directive
 * ```html
 * <e-multilevellabels>
 * <e-multilevellabel>
 * <e-Categories>
 * <e-Category>
 * </e-Category>
 * </e-Categories>
 * </e-multilevellabel>
 * </e-multilevellabels>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class CategoryDirective extends ComplexBase<CategoryDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Border type for labels
     * * Rectangle
     * * Without Top Border
     * * Without Top and BottomBorder
     * * Without Border
     * * Brace
     * * CurlyBrace
     * @default 'Rectangle'
     * @aspdefaultvalueignore
     * @blazordefaultvalueignore
     */
    type: any;
    /**
     * multi level labels custom data.
     * @default null
     */
    customAttributes: any;
    /**
     * End value of the multi level labels
     * @default null
     * @aspdefaultvalueignore
     */
    end: any;
    /**
     * Maximum width of the text for multi level labels.
     * @default null
     * @aspdefaultvalueignore
     */
    maximumTextWidth: any;
    /**
     * Start value of the multi level labels
     * @default null
     * @aspdefaultvalueignore
     */
    start: any;
    /**
     * multi level labels text.
     * @default ''
     */
    text: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CategoryDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CategoryDirective, "e-multilevellabel>e-categories>e-category", never, { "customAttributes": "customAttributes"; "end": "end"; "maximumTextWidth": "maximumTextWidth"; "start": "start"; "text": "text"; "type": "type"; }, {}, never>;
}
/**
 * Category Array Directive
 * @private
 */
export declare class CategoriesDirective extends ArrayBase<CategoriesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CategoriesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CategoriesDirective, "e-multilevellabel>e-categories", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0ZWdvcmllcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiY2F0ZWdvcmllcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG4vKipcbiAqIE11bHRpTGV2ZWxMYWJlbHMgRGlyZWN0aXZlXG4gKiBgYGBodG1sXG4gKiA8ZS1tdWx0aWxldmVsbGFiZWxzPlxuICogPGUtbXVsdGlsZXZlbGxhYmVsPlxuICogPGUtQ2F0ZWdvcmllcz5cbiAqIDxlLUNhdGVnb3J5PlxuICogPC9lLUNhdGVnb3J5PlxuICogPC9lLUNhdGVnb3JpZXM+XG4gKiA8L2UtbXVsdGlsZXZlbGxhYmVsPlxuICogPC9lLW11bHRpbGV2ZWxsYWJlbHM+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2F0ZWdvcnlEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxDYXRlZ29yeURpcmVjdGl2ZT4ge1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBkaXJlY3RpdmVQcm9wTGlzdDogYW55O1xuICAgIC8qKlxuICAgICAqIEJvcmRlciB0eXBlIGZvciBsYWJlbHNcbiAgICAgKiAqIFJlY3RhbmdsZVxuICAgICAqICogV2l0aG91dCBUb3AgQm9yZGVyXG4gICAgICogKiBXaXRob3V0IFRvcCBhbmQgQm90dG9tQm9yZGVyXG4gICAgICogKiBXaXRob3V0IEJvcmRlclxuICAgICAqICogQnJhY2VcbiAgICAgKiAqIEN1cmx5QnJhY2VcbiAgICAgKiBAZGVmYXVsdCAnUmVjdGFuZ2xlJ1xuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKiBAYmxhem9yZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgdHlwZTogYW55O1xuICAgIC8qKlxuICAgICAqIG11bHRpIGxldmVsIGxhYmVscyBjdXN0b20gZGF0YS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgY3VzdG9tQXR0cmlidXRlczogYW55O1xuICAgIC8qKlxuICAgICAqIEVuZCB2YWx1ZSBvZiB0aGUgbXVsdGkgbGV2ZWwgbGFiZWxzXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKi9cbiAgICBlbmQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIHdpZHRoIG9mIHRoZSB0ZXh0IGZvciBtdWx0aSBsZXZlbCBsYWJlbHMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKi9cbiAgICBtYXhpbXVtVGV4dFdpZHRoOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3RhcnQgdmFsdWUgb2YgdGhlIG11bHRpIGxldmVsIGxhYmVsc1xuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgc3RhcnQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBtdWx0aSBsZXZlbCBsYWJlbHMgdGV4dC5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHRleHQ6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbn1cbi8qKlxuICogQ2F0ZWdvcnkgQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYXRlZ29yaWVzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPENhdGVnb3JpZXNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19