import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Series Directive
 * ```html
 * <e-series-collection>
 * <e-series></e-series>
 * </e-series-collection>
 * ```
 */
import * as Éµngcc0 from '@angular/core';
export declare class SeriesDirective extends ComplexBase<SeriesDirective> {
    private viewContainerRef;
    directivePropList: any;
    childTrendlines: any;
    childSegments: any;
    tags: string[];
    /**
     * The type of the series are
     * * Line
     * * Column
     * * Area
     * * Bar
     * * Histogram
     * * StackingColumn
     * * StackingArea
     * * StackingBar
     * * StepLine
     * * StepArea
     * * Scatter
     * * Spline
     * * StackingColumn100
     * * StackingBar100
     * * StackingArea100
     * * RangeColumn
     * * Hilo
     * * HiloOpenClose
     * * Waterfall
     * * RangeArea
     * * Bubble
     * * Candle
     * * Polar
     * * Radar
     * * BoxAndWhisker
     * * Pareto
     * @default 'Line'
     */
    type: any;
    /**
     * Options to customizing animation for the series.
     */
    animation: any;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is less than the closing price.
     * @default '#2ecd71'
     */
    bearFillColor: any;
    /**
     * The bin interval of each histogram points.
     * @default null
     * @aspdefaultvalueignore
     */
    binInterval: any;
    /**
     * Options to customizing the border of the series. This is applicable only for `Column` and `Bar` type series.
     */
    border: any;
    /**
     * The mode of the box and whisker char series. They are,
     * Exclusive
     * Inclusive
     * Normal
     * @default 'Normal'
     */
    boxPlotMode: any;
    /**
     * This property is used in financial charts to visualize the price movements in stock.
     * It defines the color of the candle/point, when the opening price is higher than the closing price.
     * @default '#e74c3d'
     */
    bullFillColor: any;
    /**
     * It defines tension of cardinal spline types
     * @default 0.5
     */
    cardinalSplineTension: any;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close: any;
    /**
     * To render the column series points with particular column spacing. It takes value from 0 - 1.
     * @default 0
     */
    columnSpacing: any;
    /**
     * To render the column series points with particular column width. If the series type is histogram the
     * default value is 1 otherwise 0.7.
     * @default null
     * @aspdefaultvalueignore
     */
    columnWidth: any;
    /**
     * Defines the appearance of line connecting adjacent points in waterfall charts.
     */
    connector: any;
    /**
     * To render the column series points with particular rounded corner.
     */
    cornerRadius: any;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray: any;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
     *
     * @default ''
     */
    dataSource: any;
    /**
     * Options to customize the drag settings for series
     */
    dragSettings: any;
    /**
     * Type of series to be drawn in radar or polar series. They are
     *  'Line'
     *  'Column'
     *  'Area'
     *  'Scatter'
     *  'Spline'
     *  'StackingColumn'
     *  'StackingArea'
     *  'RangeColumn'
     *  'SplineArea'
     * @default 'Line'
     */
    drawType: any;
    /**
     * options to customize the empty points in series
     */
    emptyPointSettings: any;
    /**
     * This property used to improve chart performance via data mapping for series dataSource.
     * @default false
     */
    enableComplexProperty: any;
    /**
     * This property is applicable for candle series.
     * It enables/disables to visually compare the current values with the previous values in stock.
     * @default false
     */
    enableSolidCandles: any;
    /**
     * If set true, the Tooltip for series will be visible.
     * @default true
     */
    enableTooltip: any;
    /**
     * Options for displaying and customizing error bar for individual point in a series.
     */
    errorBar: any;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill: any;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high: any;
    /**
     * Defines the collection of indexes of the intermediate summary columns in waterfall charts.
     * @default []
     * @asptype int[]
     */
    intermediateSumIndexes: any;
    /**
     * Specifies whether to join start and end point of a line/area series used in polar/radar chart to form a closed path.
     * @default true
     */
    isClosed: any;
    /**
     * The shape of the legend. Each series has its own legend shape. They are,
     * * Circle
     * * Rectangle
     * * Triangle
     * * Diamond
     * * Cross
     * * HorizontalLine
     * * VerticalLine
     * * Pentagon
     * * InvertedTriangle
     * * SeriesType
     * @default 'SeriesType'
     */
    legendShape: any;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low: any;
    /**
     * Options for displaying and customizing markers for individual points in a series.
     */
    marker: any;
    /**
     * Maximum radius
     * @default 3
     */
    maxRadius: any;
    /**
     * Minimum radius
     * @default 1
     */
    minRadius: any;
    /**
     * The name of the series visible in legend.
     * @default ''
     */
    name: any;
    /**
     * Defines the visual representation of the negative changes in waterfall charts.
     * @default '#C64E4A'
     */
    negativeFillColor: any;
    /**
     * The opacity of the series.
     * @default 1
     */
    opacity: any;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open: any;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping: any;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
     * @default ''
     */
    query: any;
    /**
     * Defines the axis, based on which the line series will be split.
     */
    segmentAxis: any;
    /**
     * Defines the collection of regions that helps to differentiate a line series.
     */
    segments: any;
    /**
     * Custom style for the selected series or points.
     * @default null
     */
    selectionStyle: any;
    /**
     * If set true, the mean value for box and whisker will be visible.
     * @default true
     */
    showMean: any;
    /**
     * The normal distribution of histogram series.
     * @default false
     */
    showNormalDistribution: any;
    /**
     * The DataSource field that contains the size value of y
     * @default ''
     */
    size: any;
    /**
     * Defines type of spline to be rendered.
     * @default 'Natural'
     */
    splineType: any;
    /**
     * This property allows grouping series in `stacked column / bar` charts.
     * Any string value can be provided to the stackingGroup property.
     * If any two or above series have the same value, those series will be grouped together.
     * @default ''
     */
    stackingGroup: any;
    /**
     * Defines the collection of indexes of the overall summary columns in waterfall charts.
     * @default []
     * @asptype int[]
     */
    sumIndexes: any;
    /**
     * Defines the visual representation of the summaries in waterfall charts.
     * @default '#4E81BC'
     */
    summaryFillColor: any;
    /**
     * user can format now each series tooltip format separately.
     * @default ''
     */
    tooltipFormat: any;
    /**
     * The provided value will be considered as a Tooltip name
     * @default ''
     */
    tooltipMappingName: any;
    /**
     * Defines the collection of trendlines that are used to predict the trend
     */
    trendlines: any;
    /**
     * Specifies the visibility of series.
     * @default true
     */
    visible: any;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume: any;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width: any;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     *
     * @default null
     */
    xAxisName: any;
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName: any;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     *
     * @default null
     */
    yAxisName: any;
    /**
     * The DataSource field that contains the y value.
     * @default ''
     */
    yName: any;
    /**
     * The z order of the series.
     * @default 0
     */
    zOrder: any;
    dataLabel_template: any;
    constructor(viewContainerRef: ViewContainerRef);
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<SeriesDirective, never>;
    static Éµdir: Éµngcc0.ÉµÉµDirectiveDefWithMeta<SeriesDirective, "e-series-collection>e-series", never, { "animation": "animation"; "bearFillColor": "bearFillColor"; "binInterval": "binInterval"; "border": "border"; "boxPlotMode": "boxPlotMode"; "bullFillColor": "bullFillColor"; "cardinalSplineTension": "cardinalSplineTension"; "close": "close"; "columnSpacing": "columnSpacing"; "columnWidth": "columnWidth"; "connector": "connector"; "cornerRadius": "cornerRadius"; "dashArray": "dashArray"; "dataSource": "dataSource"; "dragSettings": "dragSettings"; "drawType": "drawType"; "emptyPointSettings": "emptyPointSettings"; "enableComplexProperty": "enableComplexProperty"; "enableSolidCandles": "enableSolidCandles"; "enableTooltip": "enableTooltip"; "errorBar": "errorBar"; "fill": "fill"; "high": "high"; "intermediateSumIndexes": "intermediateSumIndexes"; "isClosed": "isClosed"; "legendShape": "legendShape"; "low": "low"; "marker": "marker"; "maxRadius": "maxRadius"; "minRadius": "minRadius"; "name": "name"; "negativeFillColor": "negativeFillColor"; "opacity": "opacity"; "open": "open"; "pointColorMapping": "pointColorMapping"; "query": "query"; "segmentAxis": "segmentAxis"; "segments": "segments"; "selectionStyle": "selectionStyle"; "showMean": "showMean"; "showNormalDistribution": "showNormalDistribution"; "size": "size"; "splineType": "splineType"; "stackingGroup": "stackingGroup"; "sumIndexes": "sumIndexes"; "summaryFillColor": "summaryFillColor"; "tooltipFormat": "tooltipFormat"; "tooltipMappingName": "tooltipMappingName"; "trendlines": "trendlines"; "type": "type"; "visible": "visible"; "volume": "volume"; "width": "width"; "xAxisName": "xAxisName"; "xName": "xName"; "yAxisName": "yAxisName"; "yName": "yName"; "zOrder": "zOrder"; }, {}, ["dataLabel_template", "childTrendlines", "childSegments"]>;
}
/**
 * Series Array Directive
 * @private
 */
export declare class SeriesCollectionDirective extends ArrayBase<SeriesCollectionDirective> {
    constructor();
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<SeriesCollectionDirective, never>;
    static Éµdir: Éµngcc0.ÉµÉµDirectiveDefWithMeta<SeriesCollectionDirective, "ej-chart>e-series-collection", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,