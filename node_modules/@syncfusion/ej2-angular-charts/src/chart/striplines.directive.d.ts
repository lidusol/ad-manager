import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * StripLine Directive
 * ```html
 * <e-axis>
 * <e-striplines>
 * <e-stripline></e-stripline>
 * </e-striplines>
 * </e-axis>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class StripLineDirective extends ComplexBase<StripLineDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Border of the strip line.
     */
    border: any;
    /**
     * Color of the strip line.
     * @default '#808080'
     */
    color: any;
    /**
     * Dash Array of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    dashArray: any;
    /**
     * End value of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    end: any;
    /**
     * Defines the position of the strip line text horizontally. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    horizontalAlignment: any;
    /**
     * isRepeat value of the strip line.
     * @default false
     * @aspdefaultvalueignore
     */
    isRepeat: any;
    /**
     * isSegmented value of the strip line
     * @default false
     * @aspdefaultvalueignore
     */
    isSegmented: any;
    /**
     * Strip line Opacity
     * @default 1
     */
    opacity: any;
    /**
     * repeatEvery value of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    repeatEvery: any;
    /**
     * repeatUntil value of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    repeatUntil: any;
    /**
     * The angle to which the strip line text gets rotated.
     * @default null
     * @aspdefaultvalueignore
     */
    rotation: any;
    /**
     * segmentAxisName of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    segmentAxisName: any;
    /**
     * segmentEnd value of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    segmentEnd: any;
    /**
     * segmentStart value of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    segmentStart: any;
    /**
     * Size of the strip line, when it starts from the origin.
     * @default null
     * @aspdefaultvalueignore
     */
    size: any;
    /**
     * Size type of the strip line
     * @default Auto
     */
    sizeType: any;
    /**
     * Start value of the strip line.
     * @default null
     * @aspdefaultvalueignore
     */
    start: any;
    /**
     *  If set true, strip line get render from axis origin.
     *  @default false
     */
    startFromAxis: any;
    /**
     * Strip line text.
     * @default ''
     */
    text: any;
    /**
     * Options to customize the strip line text.
     */
    textStyle: any;
    /**
     * Defines the position of the strip line text vertically. They are,
     * * Start: Places the strip line text at the start.
     * * Middle: Places the strip line text in the middle.
     * * End: Places the strip line text at the end.
     * @default 'Middle'
     */
    verticalAlignment: any;
    /**
     * If set true, strip line for axis renders.
     * @default true
     */
    visible: any;
    /**
     * Specifies the order of the strip line. They are,
     * * Behind: Places the strip line behind the series elements.
     * * Over: Places the strip line over the series elements.
     * @default 'Behind'
     */
    zIndex: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StripLineDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StripLineDirective, "e-axis>e-striplines>e-stripline", never, { "border": "border"; "color": "color"; "dashArray": "dashArray"; "end": "end"; "horizontalAlignment": "horizontalAlignment"; "isRepeat": "isRepeat"; "isSegmented": "isSegmented"; "opacity": "opacity"; "repeatEvery": "repeatEvery"; "repeatUntil": "repeatUntil"; "rotation": "rotation"; "segmentAxisName": "segmentAxisName"; "segmentEnd": "segmentEnd"; "segmentStart": "segmentStart"; "size": "size"; "sizeType": "sizeType"; "start": "start"; "startFromAxis": "startFromAxis"; "text": "text"; "textStyle": "textStyle"; "verticalAlignment": "verticalAlignment"; "visible": "visible"; "zIndex": "zIndex"; }, {}, never>;
}
/**
 * StripLine Array Directive
 * @private
 */
export declare class StripLinesDirective extends ArrayBase<StripLinesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StripLinesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StripLinesDirective, "e-axis>e-striplines", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBsaW5lcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsic3RyaXBsaW5lcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuLyoqXG4gKiBTdHJpcExpbmUgRGlyZWN0aXZlXG4gKiBgYGBodG1sXG4gKiA8ZS1heGlzPlxuICogPGUtc3RyaXBsaW5lcz5cbiAqIDxlLXN0cmlwbGluZT48L2Utc3RyaXBsaW5lPlxuICogPC9lLXN0cmlwbGluZXM+XG4gKiA8L2UtYXhpcz5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdHJpcExpbmVEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxTdHJpcExpbmVEaXJlY3RpdmU+IHtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBCb3JkZXIgb2YgdGhlIHN0cmlwIGxpbmUuXG4gICAgICovXG4gICAgYm9yZGVyOiBhbnk7XG4gICAgLyoqXG4gICAgICogQ29sb3Igb2YgdGhlIHN0cmlwIGxpbmUuXG4gICAgICogQGRlZmF1bHQgJyM4MDgwODAnXG4gICAgICovXG4gICAgY29sb3I6IGFueTtcbiAgICAvKipcbiAgICAgKiBEYXNoIEFycmF5IG9mIHRoZSBzdHJpcCBsaW5lLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgZGFzaEFycmF5OiBhbnk7XG4gICAgLyoqXG4gICAgICogRW5kIHZhbHVlIG9mIHRoZSBzdHJpcCBsaW5lLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgZW5kOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcG9zaXRpb24gb2YgdGhlIHN0cmlwIGxpbmUgdGV4dCBob3Jpem9udGFsbHkuIFRoZXkgYXJlLFxuICAgICAqICogU3RhcnQ6IFBsYWNlcyB0aGUgc3RyaXAgbGluZSB0ZXh0IGF0IHRoZSBzdGFydC5cbiAgICAgKiAqIE1pZGRsZTogUGxhY2VzIHRoZSBzdHJpcCBsaW5lIHRleHQgaW4gdGhlIG1pZGRsZS5cbiAgICAgKiAqIEVuZDogUGxhY2VzIHRoZSBzdHJpcCBsaW5lIHRleHQgYXQgdGhlIGVuZC5cbiAgICAgKiBAZGVmYXVsdCAnTWlkZGxlJ1xuICAgICAqL1xuICAgIGhvcml6b250YWxBbGlnbm1lbnQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBpc1JlcGVhdCB2YWx1ZSBvZiB0aGUgc3RyaXAgbGluZS5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKi9cbiAgICBpc1JlcGVhdDogYW55O1xuICAgIC8qKlxuICAgICAqIGlzU2VnbWVudGVkIHZhbHVlIG9mIHRoZSBzdHJpcCBsaW5lXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgaXNTZWdtZW50ZWQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBTdHJpcCBsaW5lIE9wYWNpdHlcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgb3BhY2l0eTogYW55O1xuICAgIC8qKlxuICAgICAqIHJlcGVhdEV2ZXJ5IHZhbHVlIG9mIHRoZSBzdHJpcCBsaW5lLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgcmVwZWF0RXZlcnk6IGFueTtcbiAgICAvKipcbiAgICAgKiByZXBlYXRVbnRpbCB2YWx1ZSBvZiB0aGUgc3RyaXAgbGluZS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZVxuICAgICAqL1xuICAgIHJlcGVhdFVudGlsOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIGFuZ2xlIHRvIHdoaWNoIHRoZSBzdHJpcCBsaW5lIHRleHQgZ2V0cyByb3RhdGVkLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgcm90YXRpb246IGFueTtcbiAgICAvKipcbiAgICAgKiBzZWdtZW50QXhpc05hbWUgb2YgdGhlIHN0cmlwIGxpbmUuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKi9cbiAgICBzZWdtZW50QXhpc05hbWU6IGFueTtcbiAgICAvKipcbiAgICAgKiBzZWdtZW50RW5kIHZhbHVlIG9mIHRoZSBzdHJpcCBsaW5lLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgc2VnbWVudEVuZDogYW55O1xuICAgIC8qKlxuICAgICAqIHNlZ21lbnRTdGFydCB2YWx1ZSBvZiB0aGUgc3RyaXAgbGluZS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZVxuICAgICAqL1xuICAgIHNlZ21lbnRTdGFydDogYW55O1xuICAgIC8qKlxuICAgICAqIFNpemUgb2YgdGhlIHN0cmlwIGxpbmUsIHdoZW4gaXQgc3RhcnRzIGZyb20gdGhlIG9yaWdpbi5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZVxuICAgICAqL1xuICAgIHNpemU6IGFueTtcbiAgICAvKipcbiAgICAgKiBTaXplIHR5cGUgb2YgdGhlIHN0cmlwIGxpbmVcbiAgICAgKiBAZGVmYXVsdCBBdXRvXG4gICAgICovXG4gICAgc2l6ZVR5cGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBTdGFydCB2YWx1ZSBvZiB0aGUgc3RyaXAgbGluZS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZWlnbm9yZVxuICAgICAqL1xuICAgIHN0YXJ0OiBhbnk7XG4gICAgLyoqXG4gICAgICogIElmIHNldCB0cnVlLCBzdHJpcCBsaW5lIGdldCByZW5kZXIgZnJvbSBheGlzIG9yaWdpbi5cbiAgICAgKiAgQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBzdGFydEZyb21BeGlzOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3RyaXAgbGluZSB0ZXh0LlxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgdGV4dDogYW55O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgdG8gY3VzdG9taXplIHRoZSBzdHJpcCBsaW5lIHRleHQuXG4gICAgICovXG4gICAgdGV4dFN0eWxlOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcG9zaXRpb24gb2YgdGhlIHN0cmlwIGxpbmUgdGV4dCB2ZXJ0aWNhbGx5LiBUaGV5IGFyZSxcbiAgICAgKiAqIFN0YXJ0OiBQbGFjZXMgdGhlIHN0cmlwIGxpbmUgdGV4dCBhdCB0aGUgc3RhcnQuXG4gICAgICogKiBNaWRkbGU6IFBsYWNlcyB0aGUgc3RyaXAgbGluZSB0ZXh0IGluIHRoZSBtaWRkbGUuXG4gICAgICogKiBFbmQ6IFBsYWNlcyB0aGUgc3RyaXAgbGluZSB0ZXh0IGF0IHRoZSBlbmQuXG4gICAgICogQGRlZmF1bHQgJ01pZGRsZSdcbiAgICAgKi9cbiAgICB2ZXJ0aWNhbEFsaWdubWVudDogYW55O1xuICAgIC8qKlxuICAgICAqIElmIHNldCB0cnVlLCBzdHJpcCBsaW5lIGZvciBheGlzIHJlbmRlcnMuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHZpc2libGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG9yZGVyIG9mIHRoZSBzdHJpcCBsaW5lLiBUaGV5IGFyZSxcbiAgICAgKiAqIEJlaGluZDogUGxhY2VzIHRoZSBzdHJpcCBsaW5lIGJlaGluZCB0aGUgc2VyaWVzIGVsZW1lbnRzLlxuICAgICAqICogT3ZlcjogUGxhY2VzIHRoZSBzdHJpcCBsaW5lIG92ZXIgdGhlIHNlcmllcyBlbGVtZW50cy5cbiAgICAgKiBAZGVmYXVsdCAnQmVoaW5kJ1xuICAgICAqL1xuICAgIHpJbmRleDogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpO1xufVxuLyoqXG4gKiBTdHJpcExpbmUgQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdHJpcExpbmVzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPFN0cmlwTGluZXNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19