import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Series Directive
 * ```html
 * <e-series-collection>
 * <e-series>
 * <e-trendlines>
 * <e-trendline>
 * </e-trendline>
 * </e-trendlines>
 * </e-series-collection>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class TrendlineDirective extends ComplexBase<TrendlineDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Defines the type of the trendline
     * @default 'Linear'
     */
    type: any;
    /**
     * Options to customize the animation for trendlines
     */
    animation: any;
    /**
     * Defines the period, by which the trend has to backward forecast
     * @default 0
     */
    backwardForecast: any;
    /**
     * Defines the pattern of dashes and gaps to stroke.
     * @default '0'
     */
    dashArray: any;
    /**
     * Enables/disables tooltip for trendlines
     * @default true
     */
    enableTooltip: any;
    /**
     * Defines the fill color of trendline
     * @default ''
     */
    fill: any;
    /**
     * Defines the period, by which the trend has to forward forecast
     * @default 0
     */
    forwardForecast: any;
    /**
     * Defines the intercept of the trendline
     * @default null
     * @aspdefaultvalueignore
     */
    intercept: any;
    /**
     * Sets the legend shape of the trendline
     * @default 'SeriesType'
     */
    legendShape: any;
    /**
     * Options to customize the marker for trendlines
     * @deprecated
     */
    marker: any;
    /**
     * Defines the name of trendline
     * @default ''
     */
    name: any;
    /**
     * Defines the period, the price changes over which will be considered to predict moving average trend line
     * @default 2
     */
    period: any;
    /**
     * Defines the polynomial order of the polynomial trendline
     * @default 2
     */
    polynomialOrder: any;
    /**
     * Specifies the visibility of trendline.
     * @default true
     */
    visible: any;
    /**
     * Defines the width of the trendline
     * @default 1
     */
    width: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TrendlineDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TrendlineDirective, "e-series>e-trendlines>e-trendline", never, { "animation": "animation"; "backwardForecast": "backwardForecast"; "dashArray": "dashArray"; "enableTooltip": "enableTooltip"; "fill": "fill"; "forwardForecast": "forwardForecast"; "intercept": "intercept"; "legendShape": "legendShape"; "marker": "marker"; "name": "name"; "period": "period"; "polynomialOrder": "polynomialOrder"; "type": "type"; "visible": "visible"; "width": "width"; }, {}, never>;
}
/**
 * Trendline Array Directive
 * @private
 */
export declare class TrendlinesDirective extends ArrayBase<TrendlinesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TrendlinesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TrendlinesDirective, "e-series>e-trendlines", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlbmRsaW5lcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidHJlbmRsaW5lcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG4vKipcbiAqIFNlcmllcyBEaXJlY3RpdmVcbiAqIGBgYGh0bWxcbiAqIDxlLXNlcmllcy1jb2xsZWN0aW9uPlxuICogPGUtc2VyaWVzPlxuICogPGUtdHJlbmRsaW5lcz5cbiAqIDxlLXRyZW5kbGluZT5cbiAqIDwvZS10cmVuZGxpbmU+XG4gKiA8L2UtdHJlbmRsaW5lcz5cbiAqIDwvZS1zZXJpZXMtY29sbGVjdGlvbj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUcmVuZGxpbmVEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxUcmVuZGxpbmVEaXJlY3RpdmU+IHtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSB0eXBlIG9mIHRoZSB0cmVuZGxpbmVcbiAgICAgKiBAZGVmYXVsdCAnTGluZWFyJ1xuICAgICAqL1xuICAgIHR5cGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBPcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgYW5pbWF0aW9uIGZvciB0cmVuZGxpbmVzXG4gICAgICovXG4gICAgYW5pbWF0aW9uOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcGVyaW9kLCBieSB3aGljaCB0aGUgdHJlbmQgaGFzIHRvIGJhY2t3YXJkIGZvcmVjYXN0XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGJhY2t3YXJkRm9yZWNhc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBwYXR0ZXJuIG9mIGRhc2hlcyBhbmQgZ2FwcyB0byBzdHJva2UuXG4gICAgICogQGRlZmF1bHQgJzAnXG4gICAgICovXG4gICAgZGFzaEFycmF5OiBhbnk7XG4gICAgLyoqXG4gICAgICogRW5hYmxlcy9kaXNhYmxlcyB0b29sdGlwIGZvciB0cmVuZGxpbmVzXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIGVuYWJsZVRvb2x0aXA6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBmaWxsIGNvbG9yIG9mIHRyZW5kbGluZVxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgZmlsbDogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHBlcmlvZCwgYnkgd2hpY2ggdGhlIHRyZW5kIGhhcyB0byBmb3J3YXJkIGZvcmVjYXN0XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGZvcndhcmRGb3JlY2FzdDogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGludGVyY2VwdCBvZiB0aGUgdHJlbmRsaW5lXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBhc3BkZWZhdWx0dmFsdWVpZ25vcmVcbiAgICAgKi9cbiAgICBpbnRlcmNlcHQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsZWdlbmQgc2hhcGUgb2YgdGhlIHRyZW5kbGluZVxuICAgICAqIEBkZWZhdWx0ICdTZXJpZXNUeXBlJ1xuICAgICAqL1xuICAgIGxlZ2VuZFNoYXBlOiBhbnk7XG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIG1hcmtlciBmb3IgdHJlbmRsaW5lc1xuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgbWFya2VyOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgbmFtZSBvZiB0cmVuZGxpbmVcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIG5hbWU6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBwZXJpb2QsIHRoZSBwcmljZSBjaGFuZ2VzIG92ZXIgd2hpY2ggd2lsbCBiZSBjb25zaWRlcmVkIHRvIHByZWRpY3QgbW92aW5nIGF2ZXJhZ2UgdHJlbmQgbGluZVxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cbiAgICBwZXJpb2Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBwb2x5bm9taWFsIG9yZGVyIG9mIHRoZSBwb2x5bm9taWFsIHRyZW5kbGluZVxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cbiAgICBwb2x5bm9taWFsT3JkZXI6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHZpc2liaWxpdHkgb2YgdHJlbmRsaW5lLlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICB2aXNpYmxlOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgd2lkdGggb2YgdGhlIHRyZW5kbGluZVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICB3aWR0aDogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpO1xufVxuLyoqXG4gKiBUcmVuZGxpbmUgQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUcmVuZGxpbmVzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPFRyZW5kbGluZXNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19