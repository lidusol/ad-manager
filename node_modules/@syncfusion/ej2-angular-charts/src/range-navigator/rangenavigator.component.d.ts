import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { RangeNavigator } from '@syncfusion/ej2-charts';
import { RangenavigatorSeriesCollectionDirective } from './series.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * RangeNavigator Component
 * ```html
 * <ejs-rangenavigator></ejs-rangenavigator>
 * ```
 */
export declare class RangeNavigatorComponent extends RangeNavigator implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    childSeries: QueryList<RangenavigatorSeriesCollectionDirective>;
    tags: string[];
    dataSourceChange: any;
    tooltip_template: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RangeNavigatorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RangeNavigatorComponent, "ejs-rangenavigator", never, { "allowSnapping": "allowSnapping"; "animationDuration": "animationDuration"; "dataSource": "dataSource"; "disableRangeSelector": "disableRangeSelector"; "enableDeferredUpdate": "enableDeferredUpdate"; "enableGrouping": "enableGrouping"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "groupBy": "groupBy"; "height": "height"; "interval": "interval"; "intervalType": "intervalType"; "labelFormat": "labelFormat"; "labelIntersectAction": "labelIntersectAction"; "labelPosition": "labelPosition"; "labelStyle": "labelStyle"; "locale": "locale"; "logBase": "logBase"; "majorGridLines": "majorGridLines"; "majorTickLines": "majorTickLines"; "margin": "margin"; "maximum": "maximum"; "minimum": "minimum"; "navigatorBorder": "navigatorBorder"; "navigatorStyleSettings": "navigatorStyleSettings"; "periodSelectorSettings": "periodSelectorSettings"; "query": "query"; "secondaryLabelAlignment": "secondaryLabelAlignment"; "series": "series"; "skeleton": "skeleton"; "skeletonType": "skeletonType"; "theme": "theme"; "tickPosition": "tickPosition"; "tooltip": "tooltip"; "useGroupingSeparator": "useGroupingSeparator"; "value": "value"; "valueType": "valueType"; "width": "width"; "xName": "xName"; "yName": "yName"; }, { "beforePrint": "beforePrint"; "changed": "changed"; "labelRender": "labelRender"; "load": "load"; "loaded": "loaded"; "resized": "resized"; "selectorRender": "selectorRender"; "tooltipRender": "tooltipRender"; "dataSourceChange": "dataSourceChange"; }, ["tooltip_template", "childSeries"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2VuYXZpZ2F0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhbmdlbmF2aWdhdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBRdWVyeUxpc3QsIFJlbmRlcmVyMiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDb21wb25lbnRCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBSYW5nZU5hdmlnYXRvciB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1jaGFydHMnO1xuaW1wb3J0IHsgUmFuZ2VuYXZpZ2F0b3JTZXJpZXNDb2xsZWN0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9zZXJpZXMuZGlyZWN0aXZlJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGlucHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCBvdXRwdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHR3b1dheXM6IHN0cmluZ1tdO1xuLyoqXG4gKiBSYW5nZU5hdmlnYXRvciBDb21wb25lbnRcbiAqIGBgYGh0bWxcbiAqIDxlanMtcmFuZ2VuYXZpZ2F0b3I+PC9lanMtcmFuZ2VuYXZpZ2F0b3I+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUmFuZ2VOYXZpZ2F0b3JDb21wb25lbnQgZXh0ZW5kcyBSYW5nZU5hdmlnYXRvciBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRTZXJpZXM6IFF1ZXJ5TGlzdDxSYW5nZW5hdmlnYXRvclNlcmllc0NvbGxlY3Rpb25EaXJlY3RpdmU+O1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICAgIGRhdGFTb3VyY2VDaGFuZ2U6IGFueTtcbiAgICB0b29sdGlwX3RlbXBsYXRlOiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19