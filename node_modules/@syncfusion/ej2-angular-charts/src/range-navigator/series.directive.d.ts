import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * RangenavigatorSeries Directive
 * ```html
 * <e-rangenavigator-series-collection>
 * <e-rangenavigator-series></e-rangenavigator-series>
 * </e-rangenavigator-series-collection>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class RangenavigatorSeriesDirective extends ComplexBase<RangenavigatorSeriesDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * It defines the series type of the range navigator
     * @default 'Line'
     */
    type: any;
    /**
     * Options to customizing animation for the series.
     */
    animation: any;
    /**
     * Options for customizing the color and width of the series border.
     */
    border: any;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray: any;
    /**
     * It defines the data source for a series.
     * @default null
     */
    dataSource: any;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill: any;
    /**
     * The opacity for the background.
     * @default 1
     */
    opacity: any;
    /**
     * It defines the query for the data source
     * @default null
     */
    query: any;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width: any;
    /**
     * It defines the xName for the series
     * @default null
     */
    xName: any;
    /**
     * It defines the yName for the series
     * @default null
     */
    yName: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RangenavigatorSeriesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<RangenavigatorSeriesDirective, "e-rangenavigator-series-collection>e-rangenavigator-series", never, { "animation": "animation"; "border": "border"; "dashArray": "dashArray"; "dataSource": "dataSource"; "fill": "fill"; "opacity": "opacity"; "query": "query"; "type": "type"; "width": "width"; "xName": "xName"; "yName": "yName"; }, {}, never>;
}
/**
 * RangenavigatorSeries Array Directive
 * @private
 */
export declare class RangenavigatorSeriesCollectionDirective extends ArrayBase<RangenavigatorSeriesCollectionDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RangenavigatorSeriesCollectionDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<RangenavigatorSeriesCollectionDirective, "ej-rangenavigator>e-rangenavigator-series-collection", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWVzLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZXJpZXMuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG4vKipcbiAqIFJhbmdlbmF2aWdhdG9yU2VyaWVzIERpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtcmFuZ2VuYXZpZ2F0b3Itc2VyaWVzLWNvbGxlY3Rpb24+XG4gKiA8ZS1yYW5nZW5hdmlnYXRvci1zZXJpZXM+PC9lLXJhbmdlbmF2aWdhdG9yLXNlcmllcz5cbiAqIDwvZS1yYW5nZW5hdmlnYXRvci1zZXJpZXMtY29sbGVjdGlvbj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSYW5nZW5hdmlnYXRvclNlcmllc0RpcmVjdGl2ZSBleHRlbmRzIENvbXBsZXhCYXNlPFJhbmdlbmF2aWdhdG9yU2VyaWVzRGlyZWN0aXZlPiB7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogSXQgZGVmaW5lcyB0aGUgc2VyaWVzIHR5cGUgb2YgdGhlIHJhbmdlIG5hdmlnYXRvclxuICAgICAqIEBkZWZhdWx0ICdMaW5lJ1xuICAgICAqL1xuICAgIHR5cGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBPcHRpb25zIHRvIGN1c3RvbWl6aW5nIGFuaW1hdGlvbiBmb3IgdGhlIHNlcmllcy5cbiAgICAgKi9cbiAgICBhbmltYXRpb246IGFueTtcbiAgICAvKipcbiAgICAgKiBPcHRpb25zIGZvciBjdXN0b21pemluZyB0aGUgY29sb3IgYW5kIHdpZHRoIG9mIHRoZSBzZXJpZXMgYm9yZGVyLlxuICAgICAqL1xuICAgIGJvcmRlcjogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHBhdHRlcm4gb2YgZGFzaGVzIGFuZCBnYXBzIHRvIHN0cm9rZSB0aGUgbGluZXMgaW4gYExpbmVgIHR5cGUgc2VyaWVzLlxuICAgICAqIEBkZWZhdWx0ICcwJ1xuICAgICAqL1xuICAgIGRhc2hBcnJheTogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IGRlZmluZXMgdGhlIGRhdGEgc291cmNlIGZvciBhIHNlcmllcy5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZGF0YVNvdXJjZTogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWxsIGNvbG9yIGZvciB0aGUgc2VyaWVzIHRoYXQgYWNjZXB0cyB2YWx1ZSBpbiBoZXggYW5kIHJnYmEgYXMgYSB2YWxpZCBDU1MgY29sb3Igc3RyaW5nLlxuICAgICAqIEl0IGFsc28gcmVwcmVzZW50cyB0aGUgY29sb3Igb2YgdGhlIHNpZ25hbCBsaW5lcyBpbiB0ZWNobmljYWwgaW5kaWNhdG9ycy5cbiAgICAgKiBGb3IgdGVjaG5pY2FsIGluZGljYXRvcnMsIHRoZSBkZWZhdWx0IHZhbHVlIGlzICdibHVlJyBhbmQgZm9yIHNlcmllcywgaXQgaGFzIG51bGwuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGZpbGw6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgb3BhY2l0eSBmb3IgdGhlIGJhY2tncm91bmQuXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIG9wYWNpdHk6IGFueTtcbiAgICAvKipcbiAgICAgKiBJdCBkZWZpbmVzIHRoZSBxdWVyeSBmb3IgdGhlIGRhdGEgc291cmNlXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHF1ZXJ5OiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIHN0cm9rZSB3aWR0aCBmb3IgdGhlIHNlcmllcyB0aGF0IGlzIGFwcGxpY2FibGUgb25seSBmb3IgYExpbmVgIHR5cGUgc2VyaWVzLlxuICAgICAqIEl0IGFsc28gcmVwcmVzZW50cyB0aGUgc3Ryb2tlIHdpZHRoIG9mIHRoZSBzaWduYWwgbGluZXMgaW4gdGVjaG5pY2FsIGluZGljYXRvcnMuXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHdpZHRoOiBhbnk7XG4gICAgLyoqXG4gICAgICogSXQgZGVmaW5lcyB0aGUgeE5hbWUgZm9yIHRoZSBzZXJpZXNcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgeE5hbWU6IGFueTtcbiAgICAvKipcbiAgICAgKiBJdCBkZWZpbmVzIHRoZSB5TmFtZSBmb3IgdGhlIHNlcmllc1xuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICB5TmFtZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpO1xufVxuLyoqXG4gKiBSYW5nZW5hdmlnYXRvclNlcmllcyBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJhbmdlbmF2aWdhdG9yU2VyaWVzQ29sbGVjdGlvbkRpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxSYW5nZW5hdmlnYXRvclNlcmllc0NvbGxlY3Rpb25EaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19