import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
import * as ɵngcc0 from '@angular/core';
export declare class SmithchartSeriesDirective extends ComplexBase<SmithchartSeriesDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * perform animation of series based on animation duration.
     * @default '2000ms'
     */
    animationDuration: any;
    /**
     *  Specifies the dataSource
     * @default null
     * @isdatamanager false
     */
    dataSource: any;
    /**
     * enable or disable the animation of series.
     * @default false
     */
    enableAnimation: any;
    /**
     * avoid the overlap of dataLabels.
     * @default false
     */
    enableSmartLabels: any;
    /**
     * color for series.
     * @default null
     */
    fill: any;
    /**
     *  options for customizing marker
     */
    marker: any;
    /**
     * The name of the series visible in legend.
     * @default ''
     */
    name: any;
    /**
     * opacity for series.
     * @default 1
     */
    opacity: any;
    /**
     * points for series.
     * @default []
     */
    points: any;
    /**
     * reactance name for dataSource
     * @default ''
     */
    reactance: any;
    /**
     * resistance name for dataSource
     * @default ''
     */
    resistance: any;
    /**
     *  options for customizing tooltip
     */
    tooltip: any;
    /**
     * visibility for series.
     * @default 'visible'
     */
    visibility: any;
    /**
     * width for series.
     * @default 1
     */
    width: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SmithchartSeriesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SmithchartSeriesDirective, "e-seriesCollection>e-series", never, { "animationDuration": "animationDuration"; "dataSource": "dataSource"; "enableAnimation": "enableAnimation"; "enableSmartLabels": "enableSmartLabels"; "fill": "fill"; "marker": "marker"; "name": "name"; "opacity": "opacity"; "points": "points"; "reactance": "reactance"; "resistance": "resistance"; "tooltip": "tooltip"; "visibility": "visibility"; "width": "width"; }, {}, never>;
}
/**
 * SmithchartSeries Array Directive
 * @private
 */
export declare class SmithchartSeriesCollectionDirective extends ArrayBase<SmithchartSeriesCollectionDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SmithchartSeriesCollectionDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SmithchartSeriesCollectionDirective, "ejs-smithchart>e-seriesCollection", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWVzLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZXJpZXMuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU21pdGhjaGFydFNlcmllc0RpcmVjdGl2ZSBleHRlbmRzIENvbXBsZXhCYXNlPFNtaXRoY2hhcnRTZXJpZXNEaXJlY3RpdmU+IHtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBwZXJmb3JtIGFuaW1hdGlvbiBvZiBzZXJpZXMgYmFzZWQgb24gYW5pbWF0aW9uIGR1cmF0aW9uLlxuICAgICAqIEBkZWZhdWx0ICcyMDAwbXMnXG4gICAgICovXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IGFueTtcbiAgICAvKipcbiAgICAgKiAgU3BlY2lmaWVzIHRoZSBkYXRhU291cmNlXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqIEBpc2RhdGFtYW5hZ2VyIGZhbHNlXG4gICAgICovXG4gICAgZGF0YVNvdXJjZTogYW55O1xuICAgIC8qKlxuICAgICAqIGVuYWJsZSBvciBkaXNhYmxlIHRoZSBhbmltYXRpb24gb2Ygc2VyaWVzLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZW5hYmxlQW5pbWF0aW9uOiBhbnk7XG4gICAgLyoqXG4gICAgICogYXZvaWQgdGhlIG92ZXJsYXAgb2YgZGF0YUxhYmVscy5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGVuYWJsZVNtYXJ0TGFiZWxzOiBhbnk7XG4gICAgLyoqXG4gICAgICogY29sb3IgZm9yIHNlcmllcy5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZmlsbDogYW55O1xuICAgIC8qKlxuICAgICAqICBvcHRpb25zIGZvciBjdXN0b21pemluZyBtYXJrZXJcbiAgICAgKi9cbiAgICBtYXJrZXI6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgc2VyaWVzIHZpc2libGUgaW4gbGVnZW5kLlxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgbmFtZTogYW55O1xuICAgIC8qKlxuICAgICAqIG9wYWNpdHkgZm9yIHNlcmllcy5cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgb3BhY2l0eTogYW55O1xuICAgIC8qKlxuICAgICAqIHBvaW50cyBmb3Igc2VyaWVzLlxuICAgICAqIEBkZWZhdWx0IFtdXG4gICAgICovXG4gICAgcG9pbnRzOiBhbnk7XG4gICAgLyoqXG4gICAgICogcmVhY3RhbmNlIG5hbWUgZm9yIGRhdGFTb3VyY2VcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHJlYWN0YW5jZTogYW55O1xuICAgIC8qKlxuICAgICAqIHJlc2lzdGFuY2UgbmFtZSBmb3IgZGF0YVNvdXJjZVxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgcmVzaXN0YW5jZTogYW55O1xuICAgIC8qKlxuICAgICAqICBvcHRpb25zIGZvciBjdXN0b21pemluZyB0b29sdGlwXG4gICAgICovXG4gICAgdG9vbHRpcDogYW55O1xuICAgIC8qKlxuICAgICAqIHZpc2liaWxpdHkgZm9yIHNlcmllcy5cbiAgICAgKiBAZGVmYXVsdCAndmlzaWJsZSdcbiAgICAgKi9cbiAgICB2aXNpYmlsaXR5OiBhbnk7XG4gICAgLyoqXG4gICAgICogd2lkdGggZm9yIHNlcmllcy5cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgd2lkdGg6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbn1cbi8qKlxuICogU21pdGhjaGFydFNlcmllcyBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNtaXRoY2hhcnRTZXJpZXNDb2xsZWN0aW9uRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPFNtaXRoY2hhcnRTZXJpZXNDb2xsZWN0aW9uRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKTtcbn1cbiJdfQ==