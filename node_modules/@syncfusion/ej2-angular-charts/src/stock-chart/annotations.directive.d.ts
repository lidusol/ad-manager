import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Annotation Directive
 * ```html
 * <e-stockchart-annotations><e-stockchart-annotation></e-stockchart-annotation><e-stockchart-annotations>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class StockChartAnnotationDirective extends ComplexBase<StockChartAnnotationDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Specifies the coordinate units of the annotation. They are
     * * Pixel - Annotation renders based on x and y pixel value.
     * * Point - Annotation renders based on x and y axis value.
     * @default 'Pixel'
     */
    coordinateUnits: any;
    /**
     * Information about annotation for assistive technology.
     * @default null
     */
    description: any;
    /**
     * Specifies the alignment of the annotation. They are
     * * Near - Align the annotation element as left side.
     * * Far - Align the annotation element as right side.
     * * Center - Align the annotation element as mid point.
     * @default 'Center'
     */
    horizontalAlignment: any;
    /**
     * Specifies the regions of the annotation. They are
     * * Chart - Annotation renders based on chart coordinates.
     * * Series - Annotation renders based on series coordinates.
     * @default 'Chart'
     */
    region: any;
    /**
     * Specifies the position of the annotation. They are
     * * Top - Align the annotation element as top side.
     * * Bottom - Align the annotation element as bottom side.
     * * Middle - Align the annotation element as mid point.
     * @default 'Middle'
     */
    verticalAlignment: any;
    /**
     * if set coordinateUnit as `Pixel` X specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    x: any;
    /**
     * The name of horizontal axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    xAxisName: any;
    /**
     * if set coordinateUnit as `Pixel` Y specifies the axis value
     * else is specifies pixel or percentage of coordinate
     * @default '0'
     */
    y: any;
    /**
     * The name of vertical axis associated with the annotation.
     * It requires `axes` of chart.
     * @default null
     */
    yAxisName: any;
    /**
     * Content of the annotation, which accepts the id of the custom element.
     * @default null
     */
    content: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartAnnotationDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockChartAnnotationDirective, "ejs-stockchart-annotations>e-stockchart-annotation", never, { "content": "content"; "coordinateUnits": "coordinateUnits"; "description": "description"; "horizontalAlignment": "horizontalAlignment"; "region": "region"; "verticalAlignment": "verticalAlignment"; "x": "x"; "xAxisName": "xAxisName"; "y": "y"; "yAxisName": "yAxisName"; }, {}, ["content"]>;
}
/**
 * StockChartAnnotation Array Directive
 * @private
 */
export declare class StockChartAnnotationsDirective extends ArrayBase<StockChartAnnotationsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartAnnotationsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockChartAnnotationsDirective, "ejs-stockchart>e-stockchart-annotations", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbnMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImFubm90YXRpb25zLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuLyoqXG4gKiBBbm5vdGF0aW9uIERpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtc3RvY2tjaGFydC1hbm5vdGF0aW9ucz48ZS1zdG9ja2NoYXJ0LWFubm90YXRpb24+PC9lLXN0b2NrY2hhcnQtYW5ub3RhdGlvbj48ZS1zdG9ja2NoYXJ0LWFubm90YXRpb25zPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b2NrQ2hhcnRBbm5vdGF0aW9uRGlyZWN0aXZlIGV4dGVuZHMgQ29tcGxleEJhc2U8U3RvY2tDaGFydEFubm90YXRpb25EaXJlY3RpdmU+IHtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGNvb3JkaW5hdGUgdW5pdHMgb2YgdGhlIGFubm90YXRpb24uIFRoZXkgYXJlXG4gICAgICogKiBQaXhlbCAtIEFubm90YXRpb24gcmVuZGVycyBiYXNlZCBvbiB4IGFuZCB5IHBpeGVsIHZhbHVlLlxuICAgICAqICogUG9pbnQgLSBBbm5vdGF0aW9uIHJlbmRlcnMgYmFzZWQgb24geCBhbmQgeSBheGlzIHZhbHVlLlxuICAgICAqIEBkZWZhdWx0ICdQaXhlbCdcbiAgICAgKi9cbiAgICBjb29yZGluYXRlVW5pdHM6IGFueTtcbiAgICAvKipcbiAgICAgKiBJbmZvcm1hdGlvbiBhYm91dCBhbm5vdGF0aW9uIGZvciBhc3Npc3RpdmUgdGVjaG5vbG9neS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZGVzY3JpcHRpb246IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGFsaWdubWVudCBvZiB0aGUgYW5ub3RhdGlvbi4gVGhleSBhcmVcbiAgICAgKiAqIE5lYXIgLSBBbGlnbiB0aGUgYW5ub3RhdGlvbiBlbGVtZW50IGFzIGxlZnQgc2lkZS5cbiAgICAgKiAqIEZhciAtIEFsaWduIHRoZSBhbm5vdGF0aW9uIGVsZW1lbnQgYXMgcmlnaHQgc2lkZS5cbiAgICAgKiAqIENlbnRlciAtIEFsaWduIHRoZSBhbm5vdGF0aW9uIGVsZW1lbnQgYXMgbWlkIHBvaW50LlxuICAgICAqIEBkZWZhdWx0ICdDZW50ZXInXG4gICAgICovXG4gICAgaG9yaXpvbnRhbEFsaWdubWVudDogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgcmVnaW9ucyBvZiB0aGUgYW5ub3RhdGlvbi4gVGhleSBhcmVcbiAgICAgKiAqIENoYXJ0IC0gQW5ub3RhdGlvbiByZW5kZXJzIGJhc2VkIG9uIGNoYXJ0IGNvb3JkaW5hdGVzLlxuICAgICAqICogU2VyaWVzIC0gQW5ub3RhdGlvbiByZW5kZXJzIGJhc2VkIG9uIHNlcmllcyBjb29yZGluYXRlcy5cbiAgICAgKiBAZGVmYXVsdCAnQ2hhcnQnXG4gICAgICovXG4gICAgcmVnaW9uOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgYW5ub3RhdGlvbi4gVGhleSBhcmVcbiAgICAgKiAqIFRvcCAtIEFsaWduIHRoZSBhbm5vdGF0aW9uIGVsZW1lbnQgYXMgdG9wIHNpZGUuXG4gICAgICogKiBCb3R0b20gLSBBbGlnbiB0aGUgYW5ub3RhdGlvbiBlbGVtZW50IGFzIGJvdHRvbSBzaWRlLlxuICAgICAqICogTWlkZGxlIC0gQWxpZ24gdGhlIGFubm90YXRpb24gZWxlbWVudCBhcyBtaWQgcG9pbnQuXG4gICAgICogQGRlZmF1bHQgJ01pZGRsZSdcbiAgICAgKi9cbiAgICB2ZXJ0aWNhbEFsaWdubWVudDogYW55O1xuICAgIC8qKlxuICAgICAqIGlmIHNldCBjb29yZGluYXRlVW5pdCBhcyBgUGl4ZWxgIFggc3BlY2lmaWVzIHRoZSBheGlzIHZhbHVlXG4gICAgICogZWxzZSBpcyBzcGVjaWZpZXMgcGl4ZWwgb3IgcGVyY2VudGFnZSBvZiBjb29yZGluYXRlXG4gICAgICogQGRlZmF1bHQgJzAnXG4gICAgICovXG4gICAgeDogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIGhvcml6b250YWwgYXhpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGFubm90YXRpb24uXG4gICAgICogSXQgcmVxdWlyZXMgYGF4ZXNgIG9mIGNoYXJ0LlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICB4QXhpc05hbWU6IGFueTtcbiAgICAvKipcbiAgICAgKiBpZiBzZXQgY29vcmRpbmF0ZVVuaXQgYXMgYFBpeGVsYCBZIHNwZWNpZmllcyB0aGUgYXhpcyB2YWx1ZVxuICAgICAqIGVsc2UgaXMgc3BlY2lmaWVzIHBpeGVsIG9yIHBlcmNlbnRhZ2Ugb2YgY29vcmRpbmF0ZVxuICAgICAqIEBkZWZhdWx0ICcwJ1xuICAgICAqL1xuICAgIHk6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB2ZXJ0aWNhbCBheGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYW5ub3RhdGlvbi5cbiAgICAgKiBJdCByZXF1aXJlcyBgYXhlc2Agb2YgY2hhcnQuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHlBeGlzTmFtZTogYW55O1xuICAgIC8qKlxuICAgICAqIENvbnRlbnQgb2YgdGhlIGFubm90YXRpb24sIHdoaWNoIGFjY2VwdHMgdGhlIGlkIG9mIHRoZSBjdXN0b20gZWxlbWVudC5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgY29udGVudDogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpO1xufVxuLyoqXG4gKiBTdG9ja0NoYXJ0QW5ub3RhdGlvbiBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b2NrQ2hhcnRBbm5vdGF0aW9uc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxTdG9ja0NoYXJ0QW5ub3RhdGlvbnNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19