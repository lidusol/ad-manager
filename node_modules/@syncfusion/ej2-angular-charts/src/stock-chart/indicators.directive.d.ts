import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Indicator Directive
 * ```html
 * <e-stockchart-indicators>
 * <e-stockchart-indicator></e-stockchart-indicator>
 * </e-stockchart-indicators>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class StockChartIndicatorDirective extends ComplexBase<StockChartIndicatorDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Defines the type of the technical indicator
     * @default 'Sma'
     */
    type: any;
    /**
     * Options to customizing animation for the series.
     */
    animation: any;
    /**
     * Options for customizing the BollingerBand in the indicator.
     * @default 'rgba(211,211,211,0.25)'
     */
    bandColor: any;
    /**
     * The DataSource field that contains the close value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    close: any;
    /**
     * Defines the period, the price changes over which will define the %D value in stochastic indicators
     * @default 3
     */
    dPeriod: any;
    /**
     * Defines the pattern of dashes and gaps to stroke the lines in `Line` type series.
     * @default '0'
     */
    dashArray: any;
    /**
     * Specifies the DataSource for the series. It can be an array of JSON objects or an instance of DataManager.
     *
     * @default ''
     */
    dataSource: any;
    /**
     * Sets the fast period to define the Macd line
     * @default 26
     */
    fastPeriod: any;
    /**
     * Defines the field to compare the current value with previous values
     * @default 'Close'
     */
    field: any;
    /**
     * The fill color for the series that accepts value in hex and rgba as a valid CSS color string.
     * It also represents the color of the signal lines in technical indicators.
     * For technical indicators, the default value is 'blue' and for series, it has null.
     * @default null
     */
    fill: any;
    /**
     * The DataSource field that contains the high value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    high: any;
    /**
     * Defines the look back period, the price changes over which will define the %K value in stochastic indicators
     * @default 14
     */
    kPeriod: any;
    /**
     * The DataSource field that contains the low value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    low: any;
    /**
     * Defines the appearance of lower line in technical indicators
     */
    lowerLine: any;
    /**
     * Defines the appearance of the the MacdLine of Macd indicator
     * @default { color: '#ff9933', width: 2 }
     */
    macdLine: any;
    /**
     * Defines the color of the negative bars in Macd indicators
     * @default '#e74c3d'
     */
    macdNegativeColor: any;
    /**
     * Defines the color of the positive bars in Macd indicators
     * @default '#2ecd71'
     */
    macdPositiveColor: any;
    /**
     * Defines the type of the Macd indicator.
     * @default 'Both'
     */
    macdType: any;
    /**
     * The DataSource field that contains the open value of y
     * It is applicable for series and technical indicators
     * @default ''
     */
    open: any;
    /**
     * Defines the over-bought(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 80
     */
    overBought: any;
    /**
     * Defines the over-sold(threshold) values. It is applicable for RSI and stochastic indicators
     * @default 20
     */
    overSold: any;
    /**
     * Defines the period, the price changes over which will be considered to predict the trend
     * @default 14
     */
    period: any;
    /**
     * Defines the appearance of period line in technical indicators
     */
    periodLine: any;
    /**
     * The DataSource field that contains the color value of point
     * It is applicable for series
     * @default ''
     */
    pointColorMapping: any;
    /**
     * Specifies query to select data from DataSource. This property is applicable only when the DataSource is `ej.DataManager`.
     * @default null
     */
    query: any;
    /**
     * Defines the name of the series, the data of which has to be depicted as indicator
     * @default ''
     */
    seriesName: any;
    /**
     * Enables/Disables the over-bought and over-sold regions
     * @default true
     */
    showZones: any;
    /**
     * Sets the slow period to define the Macd line
     * @default 12
     */
    slowPeriod: any;
    /**
     * Sets the standard deviation values that helps to define the upper and lower bollinger bands
     * @default 2
     */
    standardDeviation: any;
    /**
     * Defines the appearance of the upper line in technical indicators
     */
    upperLine: any;
    /**
     * Defines the data source field that contains the volume value in candle charts
     * It is applicable for financial series and technical indicators
     * @default ''
     */
    volume: any;
    /**
     * The stroke width for the series that is applicable only for `Line` type series.
     * It also represents the stroke width of the signal lines in technical indicators.
     * @default 1
     */
    width: any;
    /**
     * The name of the horizontal axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     *
     * @default null
     */
    xAxisName: any;
    /**
     * The DataSource field that contains the x value.
     * It is applicable for series and technical indicators
     * @default ''
     */
    xName: any;
    /**
     * The name of the vertical axis associated with the series. It requires `axes` of the chart.
     * It is applicable for series and technical indicators
     *
     * @default null
     */
    yAxisName: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartIndicatorDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockChartIndicatorDirective, "e-stockchart-indicators>e-stockchart-indicator", never, { "animation": "animation"; "bandColor": "bandColor"; "close": "close"; "dPeriod": "dPeriod"; "dashArray": "dashArray"; "dataSource": "dataSource"; "fastPeriod": "fastPeriod"; "field": "field"; "fill": "fill"; "high": "high"; "kPeriod": "kPeriod"; "low": "low"; "lowerLine": "lowerLine"; "macdLine": "macdLine"; "macdNegativeColor": "macdNegativeColor"; "macdPositiveColor": "macdPositiveColor"; "macdType": "macdType"; "open": "open"; "overBought": "overBought"; "overSold": "overSold"; "period": "period"; "periodLine": "periodLine"; "pointColorMapping": "pointColorMapping"; "query": "query"; "seriesName": "seriesName"; "showZones": "showZones"; "slowPeriod": "slowPeriod"; "standardDeviation": "standardDeviation"; "type": "type"; "upperLine": "upperLine"; "volume": "volume"; "width": "width"; "xAxisName": "xAxisName"; "xName": "xName"; "yAxisName": "yAxisName"; }, {}, never>;
}
/**
 * StockChartIndicator Array Directive
 * @private
 */
export declare class StockChartIndicatorsDirective extends ArrayBase<StockChartIndicatorsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartIndicatorsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockChartIndicatorsDirective, "ejs-stockchart>e-stockchart-indicators", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,