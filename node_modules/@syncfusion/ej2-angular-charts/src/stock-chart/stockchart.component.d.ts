import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { StockChart } from '@syncfusion/ej2-charts';
import { StockChartSeriesCollectionDirective } from './series.directive';
import { StockChartAxesDirective } from './axes.directive';
import { StockChartRowsDirective } from './rows.directive';
import { StockChartAnnotationsDirective } from './annotations.directive';
import { StockChartSelectedDataIndexesDirective } from './selecteddataindexes.directive';
import { StockChartPeriodsDirective } from './periods.directive';
import { StockEventsDirective } from './stockevents.directive';
import { StockChartIndicatorsDirective } from './indicators.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Stock Chart Component
 * ```html
 * <ejs-stockchart></ejs-stockchart>
 * ```
 */
export declare class StockChartComponent extends StockChart implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    childSeries: QueryList<StockChartSeriesCollectionDirective>;
    childAxes: QueryList<StockChartAxesDirective>;
    childRows: QueryList<StockChartRowsDirective>;
    childAnnotations: QueryList<StockChartAnnotationsDirective>;
    childSelectedDataIndexes: QueryList<StockChartSelectedDataIndexesDirective>;
    childPeriods: QueryList<StockChartPeriodsDirective>;
    childStockEvents: QueryList<StockEventsDirective>;
    childIndicators: QueryList<StockChartIndicatorsDirective>;
    tags: string[];
    dataSourceChange: any;
    tooltip_template: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StockChartComponent, "ejs-stockchart", never, { "annotations": "annotations"; "axes": "axes"; "background": "background"; "border": "border"; "chartArea": "chartArea"; "crosshair": "crosshair"; "dataSource": "dataSource"; "enableCustomRange": "enableCustomRange"; "enablePeriodSelector": "enablePeriodSelector"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enableSelector": "enableSelector"; "exportType": "exportType"; "height": "height"; "indicatorType": "indicatorType"; "indicators": "indicators"; "isMultiSelect": "isMultiSelect"; "isSelect": "isSelect"; "isTransposed": "isTransposed"; "locale": "locale"; "margin": "margin"; "periods": "periods"; "primaryXAxis": "primaryXAxis"; "primaryYAxis": "primaryYAxis"; "rows": "rows"; "selectedDataIndexes": "selectedDataIndexes"; "selectionMode": "selectionMode"; "series": "series"; "seriesType": "seriesType"; "stockEvents": "stockEvents"; "theme": "theme"; "title": "title"; "titleStyle": "titleStyle"; "tooltip": "tooltip"; "trendlineType": "trendlineType"; "width": "width"; "zoomSettings": "zoomSettings"; }, { "axisLabelRender": "axisLabelRender"; "load": "load"; "loaded": "loaded"; "onZooming": "onZooming"; "pointClick": "pointClick"; "pointMove": "pointMove"; "rangeChange": "rangeChange"; "selectorRender": "selectorRender"; "seriesRender": "seriesRender"; "stockChartMouseClick": "stockChartMouseClick"; "stockChartMouseDown": "stockChartMouseDown"; "stockChartMouseLeave": "stockChartMouseLeave"; "stockChartMouseMove": "stockChartMouseMove"; "stockChartMouseUp": "stockChartMouseUp"; "stockEventRender": "stockEventRender"; "tooltipRender": "tooltipRender"; "dataSourceChange": "dataSourceChange"; }, ["tooltip_template", "childSeries", "childAxes", "childRows", "childAnnotations", "childSelectedDataIndexes", "childPeriods", "childStockEvents", "childIndicators"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2tjaGFydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RvY2tjaGFydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFF1ZXJ5TGlzdCwgUmVuZGVyZXIyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNvbXBvbmVudEJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IFN0b2NrQ2hhcnQgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItY2hhcnRzJztcbmltcG9ydCB7IFN0b2NrQ2hhcnRTZXJpZXNDb2xsZWN0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9zZXJpZXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN0b2NrQ2hhcnRBeGVzRGlyZWN0aXZlIH0gZnJvbSAnLi9heGVzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTdG9ja0NoYXJ0Um93c0RpcmVjdGl2ZSB9IGZyb20gJy4vcm93cy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3RvY2tDaGFydEFubm90YXRpb25zRGlyZWN0aXZlIH0gZnJvbSAnLi9hbm5vdGF0aW9ucy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3RvY2tDaGFydFNlbGVjdGVkRGF0YUluZGV4ZXNEaXJlY3RpdmUgfSBmcm9tICcuL3NlbGVjdGVkZGF0YWluZGV4ZXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN0b2NrQ2hhcnRQZXJpb2RzRGlyZWN0aXZlIH0gZnJvbSAnLi9wZXJpb2RzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTdG9ja0V2ZW50c0RpcmVjdGl2ZSB9IGZyb20gJy4vc3RvY2tldmVudHMuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN0b2NrQ2hhcnRJbmRpY2F0b3JzRGlyZWN0aXZlIH0gZnJvbSAnLi9pbmRpY2F0b3JzLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogU3RvY2sgQ2hhcnQgQ29tcG9uZW50XG4gKiBgYGBodG1sXG4gKiA8ZWpzLXN0b2NrY2hhcnQ+PC9lanMtc3RvY2tjaGFydD5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdG9ja0NoYXJ0Q29tcG9uZW50IGV4dGVuZHMgU3RvY2tDaGFydCBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRTZXJpZXM6IFF1ZXJ5TGlzdDxTdG9ja0NoYXJ0U2VyaWVzQ29sbGVjdGlvbkRpcmVjdGl2ZT47XG4gICAgY2hpbGRBeGVzOiBRdWVyeUxpc3Q8U3RvY2tDaGFydEF4ZXNEaXJlY3RpdmU+O1xuICAgIGNoaWxkUm93czogUXVlcnlMaXN0PFN0b2NrQ2hhcnRSb3dzRGlyZWN0aXZlPjtcbiAgICBjaGlsZEFubm90YXRpb25zOiBRdWVyeUxpc3Q8U3RvY2tDaGFydEFubm90YXRpb25zRGlyZWN0aXZlPjtcbiAgICBjaGlsZFNlbGVjdGVkRGF0YUluZGV4ZXM6IFF1ZXJ5TGlzdDxTdG9ja0NoYXJ0U2VsZWN0ZWREYXRhSW5kZXhlc0RpcmVjdGl2ZT47XG4gICAgY2hpbGRQZXJpb2RzOiBRdWVyeUxpc3Q8U3RvY2tDaGFydFBlcmlvZHNEaXJlY3RpdmU+O1xuICAgIGNoaWxkU3RvY2tFdmVudHM6IFF1ZXJ5TGlzdDxTdG9ja0V2ZW50c0RpcmVjdGl2ZT47XG4gICAgY2hpbGRJbmRpY2F0b3JzOiBRdWVyeUxpc3Q8U3RvY2tDaGFydEluZGljYXRvcnNEaXJlY3RpdmU+O1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICAgIGRhdGFTb3VyY2VDaGFuZ2U6IGFueTtcbiAgICB0b29sdGlwX3RlbXBsYXRlOiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19