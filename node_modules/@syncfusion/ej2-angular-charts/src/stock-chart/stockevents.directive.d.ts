import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * StockEvents
 * ```html
 * <e-stockchart-stockevents>
 * <e-stockchart-stockevent></e-stockchart-stockevent>
 * </e-stockchart-stockevents>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class StockEventDirective extends ComplexBase<StockEventDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Specifies type of stock events
     * * Circle
     * * Square
     * * Flag
     * * Text
     * * Sign
     * * Triangle
     * * InvertedTriangle
     * * ArrowUp
     * * ArrowDown
     * * ArrowLeft
     * * ArrowRight
     * @default 'Circle'
     */
    type: any;
    /**
     * The background of the stock event that accepts value in hex and rgba as a valid CSS color string.
     * @default 'transparent'
     */
    background: any;
    /**
     * Options to customize the border of the stock events.
     */
    border: any;
    /**
     * Date value of stock event in which stock event shows.
     */
    date: any;
    /**
     * Specifies the description for the chart which renders in tooltip for stock event.
     */
    description: any;
    /**
     * Corresponding values in which stock event placed.
     * * Close
     * * Open
     * * High
     * * Close
     * @default 'close'
     */
    placeAt: any;
    /**
     * Enables the stock events to be render on series. If it disabled, stock event rendered on primaryXAxis.
     * @default true
     */
    showOnSeries: any;
    /**
     * Specifies the text for the stock chart text.
     */
    text: any;
    /**
     * Options to customize the styles for stock events text.
     */
    textStyle: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockEventDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockEventDirective, "e-stockchart-indicators>e-stockchart-stockevent", never, { "background": "background"; "border": "border"; "date": "date"; "description": "description"; "placeAt": "placeAt"; "showOnSeries": "showOnSeries"; "text": "text"; "textStyle": "textStyle"; "type": "type"; }, {}, never>;
}
/**
 * StockEvent Array Directive
 * @private
 */
export declare class StockEventsDirective extends ArrayBase<StockEventsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockEventsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockEventsDirective, "ejs-stockchart>e-stockchart-stockevents", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2tldmVudHMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInN0b2NrZXZlbnRzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBsZXhCYXNlLCBBcnJheUJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbi8qKlxuICogU3RvY2tFdmVudHNcbiAqIGBgYGh0bWxcbiAqIDxlLXN0b2NrY2hhcnQtc3RvY2tldmVudHM+XG4gKiA8ZS1zdG9ja2NoYXJ0LXN0b2NrZXZlbnQ+PC9lLXN0b2NrY2hhcnQtc3RvY2tldmVudD5cbiAqIDwvZS1zdG9ja2NoYXJ0LXN0b2NrZXZlbnRzPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b2NrRXZlbnREaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxTdG9ja0V2ZW50RGlyZWN0aXZlPiB7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHR5cGUgb2Ygc3RvY2sgZXZlbnRzXG4gICAgICogKiBDaXJjbGVcbiAgICAgKiAqIFNxdWFyZVxuICAgICAqICogRmxhZ1xuICAgICAqICogVGV4dFxuICAgICAqICogU2lnblxuICAgICAqICogVHJpYW5nbGVcbiAgICAgKiAqIEludmVydGVkVHJpYW5nbGVcbiAgICAgKiAqIEFycm93VXBcbiAgICAgKiAqIEFycm93RG93blxuICAgICAqICogQXJyb3dMZWZ0XG4gICAgICogKiBBcnJvd1JpZ2h0XG4gICAgICogQGRlZmF1bHQgJ0NpcmNsZSdcbiAgICAgKi9cbiAgICB0eXBlOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIGJhY2tncm91bmQgb2YgdGhlIHN0b2NrIGV2ZW50IHRoYXQgYWNjZXB0cyB2YWx1ZSBpbiBoZXggYW5kIHJnYmEgYXMgYSB2YWxpZCBDU1MgY29sb3Igc3RyaW5nLlxuICAgICAqIEBkZWZhdWx0ICd0cmFuc3BhcmVudCdcbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kOiBhbnk7XG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIGJvcmRlciBvZiB0aGUgc3RvY2sgZXZlbnRzLlxuICAgICAqL1xuICAgIGJvcmRlcjogYW55O1xuICAgIC8qKlxuICAgICAqIERhdGUgdmFsdWUgb2Ygc3RvY2sgZXZlbnQgaW4gd2hpY2ggc3RvY2sgZXZlbnQgc2hvd3MuXG4gICAgICovXG4gICAgZGF0ZTogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgZGVzY3JpcHRpb24gZm9yIHRoZSBjaGFydCB3aGljaCByZW5kZXJzIGluIHRvb2x0aXAgZm9yIHN0b2NrIGV2ZW50LlxuICAgICAqL1xuICAgIGRlc2NyaXB0aW9uOiBhbnk7XG4gICAgLyoqXG4gICAgICogQ29ycmVzcG9uZGluZyB2YWx1ZXMgaW4gd2hpY2ggc3RvY2sgZXZlbnQgcGxhY2VkLlxuICAgICAqICogQ2xvc2VcbiAgICAgKiAqIE9wZW5cbiAgICAgKiAqIEhpZ2hcbiAgICAgKiAqIENsb3NlXG4gICAgICogQGRlZmF1bHQgJ2Nsb3NlJ1xuICAgICAqL1xuICAgIHBsYWNlQXQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSBzdG9jayBldmVudHMgdG8gYmUgcmVuZGVyIG9uIHNlcmllcy4gSWYgaXQgZGlzYWJsZWQsIHN0b2NrIGV2ZW50IHJlbmRlcmVkIG9uIHByaW1hcnlYQXhpcy5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgc2hvd09uU2VyaWVzOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0ZXh0IGZvciB0aGUgc3RvY2sgY2hhcnQgdGV4dC5cbiAgICAgKi9cbiAgICB0ZXh0OiBhbnk7XG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIHN0eWxlcyBmb3Igc3RvY2sgZXZlbnRzIHRleHQuXG4gICAgICovXG4gICAgdGV4dFN0eWxlOiBhbnk7XG4gICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZik7XG59XG4vKipcbiAqIFN0b2NrRXZlbnQgQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdG9ja0V2ZW50c0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxTdG9ja0V2ZW50c0RpcmVjdGl2ZT4ge1xuICAgIGNvbnN0cnVjdG9yKCk7XG59XG4iXX0=