import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * Series Directive
 * ```html
 * <e-stockchart-series-collection>
 * <e-stockchart-series>
 * <e-trendlines>
 * </e-trendline>
 * <e-trendline>
 * </e-trendlines>
 * </e-stockchart-series>
 * </e-stockchart-series-collection>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class StockChartTrendlineDirective extends ComplexBase<StockChartTrendlineDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Defines the type of the trendline
     * @default 'Linear'
     */
    type: any;
    /**
     * Options to customize the animation for trendlines
     */
    animation: any;
    /**
     * Defines the period, by which the trend has to backward forecast
     * @default 0
     */
    backwardForecast: any;
    /**
     * Defines the pattern of dashes and gaps to stroke.
     * @default '0'
     */
    dashArray: any;
    /**
     * Enables/disables tooltip for trendlines
     * @default true
     */
    enableTooltip: any;
    /**
     * Defines the fill color of trendline
     * @default ''
     */
    fill: any;
    /**
     * Defines the period, by which the trend has to forward forecast
     * @default 0
     */
    forwardForecast: any;
    /**
     * Defines the intercept of the trendline
     * @default null
     * @aspdefaultvalueignore
     */
    intercept: any;
    /**
     * Sets the legend shape of the trendline
     * @default 'SeriesType'
     */
    legendShape: any;
    /**
     * Options to customize the marker for trendlines
     * @deprecated
     */
    marker: any;
    /**
     * Defines the name of trendline
     * @default ''
     */
    name: any;
    /**
     * Defines the period, the price changes over which will be considered to predict moving average trend line
     * @default 2
     */
    period: any;
    /**
     * Defines the polynomial order of the polynomial trendline
     * @default 2
     */
    polynomialOrder: any;
    /**
     * Specifies the visibility of trendline.
     * @default true
     */
    visible: any;
    /**
     * Defines the width of the trendline
     * @default 1
     */
    width: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartTrendlineDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockChartTrendlineDirective, "e-stockchart-series>e-trendlines>e-trendline", never, { "animation": "animation"; "backwardForecast": "backwardForecast"; "dashArray": "dashArray"; "enableTooltip": "enableTooltip"; "fill": "fill"; "forwardForecast": "forwardForecast"; "intercept": "intercept"; "legendShape": "legendShape"; "marker": "marker"; "name": "name"; "period": "period"; "polynomialOrder": "polynomialOrder"; "type": "type"; "visible": "visible"; "width": "width"; }, {}, never>;
}
/**
 * StockChartTrendline Array Directive
 * @private
 */
export declare class StockChartTrendlinesDirective extends ArrayBase<StockChartTrendlinesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartTrendlinesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StockChartTrendlinesDirective, "e-stockchart-series>e-trendlines", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlbmRsaW5lcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidHJlbmRsaW5lcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBsZXhCYXNlLCBBcnJheUJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbi8qKlxuICogU2VyaWVzIERpcmVjdGl2ZVxuICogYGBgaHRtbFxuICogPGUtc3RvY2tjaGFydC1zZXJpZXMtY29sbGVjdGlvbj5cbiAqIDxlLXN0b2NrY2hhcnQtc2VyaWVzPlxuICogPGUtdHJlbmRsaW5lcz5cbiAqIDwvZS10cmVuZGxpbmU+XG4gKiA8ZS10cmVuZGxpbmU+XG4gKiA8L2UtdHJlbmRsaW5lcz5cbiAqIDwvZS1zdG9ja2NoYXJ0LXNlcmllcz5cbiAqIDwvZS1zdG9ja2NoYXJ0LXNlcmllcy1jb2xsZWN0aW9uPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b2NrQ2hhcnRUcmVuZGxpbmVEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxTdG9ja0NoYXJ0VHJlbmRsaW5lRGlyZWN0aXZlPiB7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdHlwZSBvZiB0aGUgdHJlbmRsaW5lXG4gICAgICogQGRlZmF1bHQgJ0xpbmVhcidcbiAgICAgKi9cbiAgICB0eXBlOiBhbnk7XG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIGFuaW1hdGlvbiBmb3IgdHJlbmRsaW5lc1xuICAgICAqL1xuICAgIGFuaW1hdGlvbjogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHBlcmlvZCwgYnkgd2hpY2ggdGhlIHRyZW5kIGhhcyB0byBiYWNrd2FyZCBmb3JlY2FzdFxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBiYWNrd2FyZEZvcmVjYXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcGF0dGVybiBvZiBkYXNoZXMgYW5kIGdhcHMgdG8gc3Ryb2tlLlxuICAgICAqIEBkZWZhdWx0ICcwJ1xuICAgICAqL1xuICAgIGRhc2hBcnJheTogYW55O1xuICAgIC8qKlxuICAgICAqIEVuYWJsZXMvZGlzYWJsZXMgdG9vbHRpcCBmb3IgdHJlbmRsaW5lc1xuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBlbmFibGVUb29sdGlwOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZmlsbCBjb2xvciBvZiB0cmVuZGxpbmVcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIGZpbGw6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBwZXJpb2QsIGJ5IHdoaWNoIHRoZSB0cmVuZCBoYXMgdG8gZm9yd2FyZCBmb3JlY2FzdFxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBmb3J3YXJkRm9yZWNhc3Q6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBpbnRlcmNlcHQgb2YgdGhlIHRyZW5kbGluZVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlaWdub3JlXG4gICAgICovXG4gICAgaW50ZXJjZXB0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGVnZW5kIHNoYXBlIG9mIHRoZSB0cmVuZGxpbmVcbiAgICAgKiBAZGVmYXVsdCAnU2VyaWVzVHlwZSdcbiAgICAgKi9cbiAgICBsZWdlbmRTaGFwZTogYW55O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgdG8gY3VzdG9taXplIHRoZSBtYXJrZXIgZm9yIHRyZW5kbGluZXNcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIG1hcmtlcjogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIG5hbWUgb2YgdHJlbmRsaW5lXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBuYW1lOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcGVyaW9kLCB0aGUgcHJpY2UgY2hhbmdlcyBvdmVyIHdoaWNoIHdpbGwgYmUgY29uc2lkZXJlZCB0byBwcmVkaWN0IG1vdmluZyBhdmVyYWdlIHRyZW5kIGxpbmVcbiAgICAgKiBAZGVmYXVsdCAyXG4gICAgICovXG4gICAgcGVyaW9kOiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcG9seW5vbWlhbCBvcmRlciBvZiB0aGUgcG9seW5vbWlhbCB0cmVuZGxpbmVcbiAgICAgKiBAZGVmYXVsdCAyXG4gICAgICovXG4gICAgcG9seW5vbWlhbE9yZGVyOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2aXNpYmlsaXR5IG9mIHRyZW5kbGluZS5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgdmlzaWJsZTogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHdpZHRoIG9mIHRoZSB0cmVuZGxpbmVcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgd2lkdGg6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbn1cbi8qKlxuICogU3RvY2tDaGFydFRyZW5kbGluZSBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0b2NrQ2hhcnRUcmVuZGxpbmVzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPFN0b2NrQ2hhcnRUcmVuZGxpbmVzRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKTtcbn1cbiJdfQ==