import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * `e-aggregate->e-column` directive represent a aggregate column of the Angular Grid.
 * ```html
 * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'>
 *   <e-columns>
 *     <e-column field='ID' width='100'></e-column>
 *     <e-column field='name' headerText='Name' width='100'></e-column>
 *   </e-columns>
 *   <e-aggregates>
 *     <e-aggregate>
 *       <e-columns>
 *         <e-column field='ID' type='Min'></e-column>
 *       </e-columns>
 *      </e-aggregate>
 *    </e-aggregates>
 * </ejs-grid>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class AggregateColumnDirective extends ComplexBase<AggregateColumnDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Defines the aggregate type of a particular column.
     * To use multiple aggregates for single column, specify the `type` as array.
     * Types of aggregate are,
     * * sum
     * * average
     * * max
     * * min
     * * count
     * * truecount
     * * falsecount
     * * custom
     * > Specify the `type` value as `custom` to use custom aggregation.
     * @asptype string
     * @default null
     */
    type: any;
    /**
     * Defines the column name to display the aggregate value. If `columnName` is not defined,
     * then `field` name value will be assigned to the `columnName` property.
     * @default null
     */
    columnName: any;
    /**
     * Defines a function to calculate custom aggregate value. The `type` value should be set to `custom`.
     * To use custom aggregate value in the template, use the key as `${custom}`.
     * **Total aggregation**: The custom function will be called with the whole data and the current `AggregateColumn` object.
     * **Group aggregation**: This will be called with the current group details and the `AggregateColumn` object.
     * @default null
     */
    customAggregate: any;
    /**
     * Defines the column name to perform aggregation.
     * @default null
     */
    field: any;
    /**
     * Format is applied to a calculated value before it is displayed.
     * Gets the format from the user, which can be standard or custom
     * [`number`](../../common/internationalization/#number-formatting/)
     * and [`date`](../../common/internationalization/#number-formatting/) formats.
     * @asptype string
     * @blazortype string
     * @default null
     */
    format: any;
    /**
     * Defines the footer cell template as a string for the aggregate column.
     * The `type` name should be used to access aggregate values inside the template.
     *
     * {% codeBlock src="grid/footer-template-api/index.ts" %}{% endcodeBlock %}
     * @default null
     */
    footerTemplate: any;
    /**
     * Defines the group footer cell template as a string for the aggregate column.
     * The `type` name should be used to access aggregate values inside the template.
     * Additionally, the following fields can be accessed in the template.
     * * **field**: The current grouped field.
     * * **key**: The current grouped value.
     *
     * {% codeBlock src="grid/group-footer-api/index.ts" %}{% endcodeBlock %}
     * @default null
     */
    groupFooterTemplate: any;
    /**
     * Defines the group caption cell template as a string for the aggregate column.
     * The `type` name should be used to access aggregate values inside the template.
     * Additionally, the following fields can be accessed in the template.
     * * **field**: The current grouped field name.
     * * **key**: The current grouped field value.
     *
     * {% codeBlock src="grid/group-caption-api/index.ts" %}{% endcodeBlock %}
     * @default null
     */
    groupCaptionTemplate: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AggregateColumnDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AggregateColumnDirective, "ejs-grid>e-aggregates>e-aggregate>e-columns>e-column", never, { "columnName": "columnName"; "customAggregate": "customAggregate"; "field": "field"; "footerTemplate": "footerTemplate"; "format": "format"; "groupCaptionTemplate": "groupCaptionTemplate"; "groupFooterTemplate": "groupFooterTemplate"; "type": "type"; }, {}, ["footerTemplate", "groupFooterTemplate", "groupCaptionTemplate"]>;
}
/**
 * AggregateColumn Array Directive
 * @private
 */
export declare class AggregateColumnsDirective extends ArrayBase<AggregateColumnsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AggregateColumnsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AggregateColumnsDirective, "ejs-grid>e-aggregates>e-aggregate>e-columns", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLWNvbHVtbnMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImFnZ3JlZ2F0ZS1jb2x1bW5zLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuLyoqXG4gKiBgZS1hZ2dyZWdhdGUtPmUtY29sdW1uYCBkaXJlY3RpdmUgcmVwcmVzZW50IGEgYWdncmVnYXRlIGNvbHVtbiBvZiB0aGUgQW5ndWxhciBHcmlkLlxuICogYGBgaHRtbFxuICogPGVqcy1ncmlkIFtkYXRhU291cmNlXT0nZGF0YScgYWxsb3dQYWdpbmc9J3RydWUnIGFsbG93U29ydGluZz0ndHJ1ZSc+XG4gKiAgIDxlLWNvbHVtbnM+XG4gKiAgICAgPGUtY29sdW1uIGZpZWxkPSdJRCcgd2lkdGg9JzEwMCc+PC9lLWNvbHVtbj5cbiAqICAgICA8ZS1jb2x1bW4gZmllbGQ9J25hbWUnIGhlYWRlclRleHQ9J05hbWUnIHdpZHRoPScxMDAnPjwvZS1jb2x1bW4+XG4gKiAgIDwvZS1jb2x1bW5zPlxuICogICA8ZS1hZ2dyZWdhdGVzPlxuICogICAgIDxlLWFnZ3JlZ2F0ZT5cbiAqICAgICAgIDxlLWNvbHVtbnM+XG4gKiAgICAgICAgIDxlLWNvbHVtbiBmaWVsZD0nSUQnIHR5cGU9J01pbic+PC9lLWNvbHVtbj5cbiAqICAgICAgIDwvZS1jb2x1bW5zPlxuICogICAgICA8L2UtYWdncmVnYXRlPlxuICogICAgPC9lLWFnZ3JlZ2F0ZXM+XG4gKiA8L2Vqcy1ncmlkPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFnZ3JlZ2F0ZUNvbHVtbkRpcmVjdGl2ZSBleHRlbmRzIENvbXBsZXhCYXNlPEFnZ3JlZ2F0ZUNvbHVtbkRpcmVjdGl2ZT4ge1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBkaXJlY3RpdmVQcm9wTGlzdDogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGFnZ3JlZ2F0ZSB0eXBlIG9mIGEgcGFydGljdWxhciBjb2x1bW4uXG4gICAgICogVG8gdXNlIG11bHRpcGxlIGFnZ3JlZ2F0ZXMgZm9yIHNpbmdsZSBjb2x1bW4sIHNwZWNpZnkgdGhlIGB0eXBlYCBhcyBhcnJheS5cbiAgICAgKiBUeXBlcyBvZiBhZ2dyZWdhdGUgYXJlLFxuICAgICAqICogc3VtXG4gICAgICogKiBhdmVyYWdlXG4gICAgICogKiBtYXhcbiAgICAgKiAqIG1pblxuICAgICAqICogY291bnRcbiAgICAgKiAqIHRydWVjb3VudFxuICAgICAqICogZmFsc2Vjb3VudFxuICAgICAqICogY3VzdG9tXG4gICAgICogPiBTcGVjaWZ5IHRoZSBgdHlwZWAgdmFsdWUgYXMgYGN1c3RvbWAgdG8gdXNlIGN1c3RvbSBhZ2dyZWdhdGlvbi5cbiAgICAgKiBAYXNwdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgdHlwZTogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGNvbHVtbiBuYW1lIHRvIGRpc3BsYXkgdGhlIGFnZ3JlZ2F0ZSB2YWx1ZS4gSWYgYGNvbHVtbk5hbWVgIGlzIG5vdCBkZWZpbmVkLFxuICAgICAqIHRoZW4gYGZpZWxkYCBuYW1lIHZhbHVlIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGBjb2x1bW5OYW1lYCBwcm9wZXJ0eS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgY29sdW1uTmFtZTogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBmdW5jdGlvbiB0byBjYWxjdWxhdGUgY3VzdG9tIGFnZ3JlZ2F0ZSB2YWx1ZS4gVGhlIGB0eXBlYCB2YWx1ZSBzaG91bGQgYmUgc2V0IHRvIGBjdXN0b21gLlxuICAgICAqIFRvIHVzZSBjdXN0b20gYWdncmVnYXRlIHZhbHVlIGluIHRoZSB0ZW1wbGF0ZSwgdXNlIHRoZSBrZXkgYXMgYCR7Y3VzdG9tfWAuXG4gICAgICogKipUb3RhbCBhZ2dyZWdhdGlvbioqOiBUaGUgY3VzdG9tIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHdob2xlIGRhdGEgYW5kIHRoZSBjdXJyZW50IGBBZ2dyZWdhdGVDb2x1bW5gIG9iamVjdC5cbiAgICAgKiAqKkdyb3VwIGFnZ3JlZ2F0aW9uKio6IFRoaXMgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCBncm91cCBkZXRhaWxzIGFuZCB0aGUgYEFnZ3JlZ2F0ZUNvbHVtbmAgb2JqZWN0LlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBjdXN0b21BZ2dyZWdhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjb2x1bW4gbmFtZSB0byBwZXJmb3JtIGFnZ3JlZ2F0aW9uLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBmaWVsZDogYW55O1xuICAgIC8qKlxuICAgICAqIEZvcm1hdCBpcyBhcHBsaWVkIHRvIGEgY2FsY3VsYXRlZCB2YWx1ZSBiZWZvcmUgaXQgaXMgZGlzcGxheWVkLlxuICAgICAqIEdldHMgdGhlIGZvcm1hdCBmcm9tIHRoZSB1c2VyLCB3aGljaCBjYW4gYmUgc3RhbmRhcmQgb3IgY3VzdG9tXG4gICAgICogW2BudW1iZXJgXSguLi8uLi9jb21tb24vaW50ZXJuYXRpb25hbGl6YXRpb24vI251bWJlci1mb3JtYXR0aW5nLylcbiAgICAgKiBhbmQgW2BkYXRlYF0oLi4vLi4vY29tbW9uL2ludGVybmF0aW9uYWxpemF0aW9uLyNudW1iZXItZm9ybWF0dGluZy8pIGZvcm1hdHMuXG4gICAgICogQGFzcHR5cGUgc3RyaW5nXG4gICAgICogQGJsYXpvcnR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGZvcm1hdDogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGZvb3RlciBjZWxsIHRlbXBsYXRlIGFzIGEgc3RyaW5nIGZvciB0aGUgYWdncmVnYXRlIGNvbHVtbi5cbiAgICAgKiBUaGUgYHR5cGVgIG5hbWUgc2hvdWxkIGJlIHVzZWQgdG8gYWNjZXNzIGFnZ3JlZ2F0ZSB2YWx1ZXMgaW5zaWRlIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIHslIGNvZGVCbG9jayBzcmM9XCJncmlkL2Zvb3Rlci10ZW1wbGF0ZS1hcGkvaW5kZXgudHNcIiAlfXslIGVuZGNvZGVCbG9jayAlfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBmb290ZXJUZW1wbGF0ZTogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGdyb3VwIGZvb3RlciBjZWxsIHRlbXBsYXRlIGFzIGEgc3RyaW5nIGZvciB0aGUgYWdncmVnYXRlIGNvbHVtbi5cbiAgICAgKiBUaGUgYHR5cGVgIG5hbWUgc2hvdWxkIGJlIHVzZWQgdG8gYWNjZXNzIGFnZ3JlZ2F0ZSB2YWx1ZXMgaW5zaWRlIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiBBZGRpdGlvbmFsbHksIHRoZSBmb2xsb3dpbmcgZmllbGRzIGNhbiBiZSBhY2Nlc3NlZCBpbiB0aGUgdGVtcGxhdGUuXG4gICAgICogKiAqKmZpZWxkKio6IFRoZSBjdXJyZW50IGdyb3VwZWQgZmllbGQuXG4gICAgICogKiAqKmtleSoqOiBUaGUgY3VycmVudCBncm91cGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogeyUgY29kZUJsb2NrIHNyYz1cImdyaWQvZ3JvdXAtZm9vdGVyLWFwaS9pbmRleC50c1wiICV9eyUgZW5kY29kZUJsb2NrICV9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGdyb3VwRm9vdGVyVGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBncm91cCBjYXB0aW9uIGNlbGwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgZm9yIHRoZSBhZ2dyZWdhdGUgY29sdW1uLlxuICAgICAqIFRoZSBgdHlwZWAgbmFtZSBzaG91bGQgYmUgdXNlZCB0byBhY2Nlc3MgYWdncmVnYXRlIHZhbHVlcyBpbnNpZGUgdGhlIHRlbXBsYXRlLlxuICAgICAqIEFkZGl0aW9uYWxseSwgdGhlIGZvbGxvd2luZyBmaWVsZHMgY2FuIGJlIGFjY2Vzc2VkIGluIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiAqICoqZmllbGQqKjogVGhlIGN1cnJlbnQgZ3JvdXBlZCBmaWVsZCBuYW1lLlxuICAgICAqICogKiprZXkqKjogVGhlIGN1cnJlbnQgZ3JvdXBlZCBmaWVsZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIHslIGNvZGVCbG9jayBzcmM9XCJncmlkL2dyb3VwLWNhcHRpb24tYXBpL2luZGV4LnRzXCIgJX17JSBlbmRjb2RlQmxvY2sgJX1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgZ3JvdXBDYXB0aW9uVGVtcGxhdGU6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbn1cbi8qKlxuICogQWdncmVnYXRlQ29sdW1uIEFycmF5IERpcmVjdGl2ZVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWdncmVnYXRlQ29sdW1uc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxBZ2dyZWdhdGVDb2x1bW5zRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKTtcbn1cbiJdfQ==