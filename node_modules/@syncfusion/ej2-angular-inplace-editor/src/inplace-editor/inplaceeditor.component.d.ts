import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { InPlaceEditor } from '@syncfusion/ej2-inplace-editor';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * `ejs-inplaceeditor` represents the Angular InPlaceEditor Component.
 * ```html
 * <ejs-inplaceeditor></ejs-inplaceeditor>
 * ```
 */
export declare class InPlaceEditorComponent extends InPlaceEditor implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    formCompContext: any;
    formContext: any;
    tagObjects: any;
    /**
     * Specifies the HTML element ID as a string that can be added as a editable field.
     * @default ''
     * @blazortype string
     */
    template: any;
    focus: any;
    blur: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    registerOnChange(registerFunction: (_: any) => void): void;
    registerOnTouched(registerFunction: () => void): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InPlaceEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InPlaceEditorComponent, "ejs-inplaceeditor", never, { "actionOnBlur": "actionOnBlur"; "adaptor": "adaptor"; "cancelButton": "cancelButton"; "cssClass": "cssClass"; "disabled": "disabled"; "editableOn": "editableOn"; "emptyText": "emptyText"; "enableEditMode": "enableEditMode"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "locale": "locale"; "mode": "mode"; "model": "model"; "name": "name"; "popupSettings": "popupSettings"; "primaryKey": "primaryKey"; "saveButton": "saveButton"; "showButtons": "showButtons"; "submitOnEnter": "submitOnEnter"; "template": "template"; "textOption": "textOption"; "type": "type"; "url": "url"; "validationRules": "validationRules"; "value": "value"; }, { "focus": "focus"; "blur": "blur"; "actionBegin": "actionBegin"; "actionFailure": "actionFailure"; "actionSuccess": "actionSuccess"; "beforeSanitizeHtml": "beforeSanitizeHtml"; "beginEdit": "beginEdit"; "created": "created"; "destroyed": "destroyed"; "validating": "validating"; }, ["template"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wbGFjZWVkaXRvci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW5wbGFjZWVkaXRvci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDb21wb25lbnRCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBJblBsYWNlRWRpdG9yIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWlucGxhY2UtZWRpdG9yJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGlucHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCBvdXRwdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHR3b1dheXM6IHN0cmluZ1tdO1xuLyoqXG4gKiBgZWpzLWlucGxhY2VlZGl0b3JgIHJlcHJlc2VudHMgdGhlIEFuZ3VsYXIgSW5QbGFjZUVkaXRvciBDb21wb25lbnQuXG4gKiBgYGBodG1sXG4gKiA8ZWpzLWlucGxhY2VlZGl0b3I+PC9lanMtaW5wbGFjZWVkaXRvcj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJblBsYWNlRWRpdG9yQ29tcG9uZW50IGV4dGVuZHMgSW5QbGFjZUVkaXRvciBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGZvcm1Db21wQ29udGV4dDogYW55O1xuICAgIGZvcm1Db250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgSFRNTCBlbGVtZW50IElEIGFzIGEgc3RyaW5nIHRoYXQgY2FuIGJlIGFkZGVkIGFzIGEgZWRpdGFibGUgZmllbGQuXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKiBAYmxhem9ydHlwZSBzdHJpbmdcbiAgICAgKi9cbiAgICB0ZW1wbGF0ZTogYW55O1xuICAgIGZvY3VzOiBhbnk7XG4gICAgYmx1cjogYW55O1xuICAgIGNvbnN0cnVjdG9yKG5nRWxlOiBFbGVtZW50UmVmLCBzcmVuZGVyZXI6IFJlbmRlcmVyMiwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKHJlZ2lzdGVyRnVuY3Rpb246IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKHJlZ2lzdGVyRnVuY3Rpb246ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyRXZlbnRzOiAoZXZlbnRMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbiAgICBhZGRUd29XYXk6IChwcm9wTGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG59XG4iXX0=