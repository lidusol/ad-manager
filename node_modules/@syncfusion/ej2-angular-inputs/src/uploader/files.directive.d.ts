import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * 'e-files' directive represent a file of angular uploader
 * It must be contained in a Uploader component(`ejs-uploader`).
 * ```html
 * <ejs-uploader id='fileupload' multiple=true>
 *   <e-files>
 *    <e-file name='Java' size=23000 type='pdf'></e-file>
 *    <e-file name='C++' size=30000 type='.docx'></e-file>
 *   </e-files>
 * </ejs-uploader>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class UploadedFilesDirective extends ComplexBase<UploadedFilesDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Specifies the type of the file
     * @default ''
     */
    type: any;
    /**
     * Specifies the name of the file
     * @default ''
     */
    name: any;
    /**
     * Specifies the size of the file
     * @default null
     */
    size: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UploadedFilesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<UploadedFilesDirective, "e-files>e-uploadedfiles", never, { "name": "name"; "size": "size"; "type": "type"; }, {}, never>;
}
/**
 * UploadedFiles Array Directive
 * @private
 */
export declare class FilesDirective extends ArrayBase<FilesDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FilesDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FilesDirective, "ejs-uploader>e-files", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImZpbGVzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBsZXhCYXNlLCBBcnJheUJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbi8qKlxuICogJ2UtZmlsZXMnIGRpcmVjdGl2ZSByZXByZXNlbnQgYSBmaWxlIG9mIGFuZ3VsYXIgdXBsb2FkZXJcbiAqIEl0IG11c3QgYmUgY29udGFpbmVkIGluIGEgVXBsb2FkZXIgY29tcG9uZW50KGBlanMtdXBsb2FkZXJgKS5cbiAqIGBgYGh0bWxcbiAqIDxlanMtdXBsb2FkZXIgaWQ9J2ZpbGV1cGxvYWQnIG11bHRpcGxlPXRydWU+XG4gKiAgIDxlLWZpbGVzPlxuICogICAgPGUtZmlsZSBuYW1lPSdKYXZhJyBzaXplPTIzMDAwIHR5cGU9J3BkZic+PC9lLWZpbGU+XG4gKiAgICA8ZS1maWxlIG5hbWU9J0MrKycgc2l6ZT0zMDAwMCB0eXBlPScuZG9jeCc+PC9lLWZpbGU+XG4gKiAgIDwvZS1maWxlcz5cbiAqIDwvZWpzLXVwbG9hZGVyPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFVwbG9hZGVkRmlsZXNEaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxVcGxvYWRlZEZpbGVzRGlyZWN0aXZlPiB7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0eXBlIG9mIHRoZSBmaWxlXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICB0eXBlOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBmaWxlXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBuYW1lOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBzaXplIG9mIHRoZSBmaWxlXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHNpemU6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKTtcbn1cbi8qKlxuICogVXBsb2FkZWRGaWxlcyBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpbGVzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPEZpbGVzRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKTtcbn1cbiJdfQ==