import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Uploader } from '@syncfusion/ej2-inputs';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents the EJ2 Angular Uploader Component.
 * ```html
 * <ejs-uploader></ejs-uploader>
 * ```
 */
export declare class UploaderComponent extends Uploader implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    formCompContext: any;
    formContext: any;
    tagObjects: any;
    childFiles: any;
    tags: string[];
    /**
     * Specifies the HTML string that used to customize the content of each file in the list.
     *
     * > For more information, refer to the [template](../../uploader/template/) section from the documentation.
     *
     * @default null
     */
    template: any;
    focus: any;
    blur: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    registerOnChange(registerFunction: (_: any) => void): void;
    registerOnTouched(registerFunction: () => void): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UploaderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<UploaderComponent, "ejs-uploader", never, { "allowedExtensions": "allowedExtensions"; "asyncSettings": "asyncSettings"; "autoUpload": "autoUpload"; "buttons": "buttons"; "cssClass": "cssClass"; "directoryUpload": "directoryUpload"; "dropArea": "dropArea"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enabled": "enabled"; "files": "files"; "htmlAttributes": "htmlAttributes"; "locale": "locale"; "maxFileSize": "maxFileSize"; "minFileSize": "minFileSize"; "multiple": "multiple"; "sequentialUpload": "sequentialUpload"; "showFileList": "showFileList"; "template": "template"; }, { "focus": "focus"; "blur": "blur"; "actionComplete": "actionComplete"; "beforeRemove": "beforeRemove"; "beforeUpload": "beforeUpload"; "canceling": "canceling"; "change": "change"; "chunkFailure": "chunkFailure"; "chunkSuccess": "chunkSuccess"; "chunkUploading": "chunkUploading"; "clearing": "clearing"; "created": "created"; "failure": "failure"; "fileListRendering": "fileListRendering"; "pausing": "pausing"; "progress": "progress"; "removing": "removing"; "rendering": "rendering"; "resuming": "resuming"; "selected": "selected"; "success": "success"; "uploading": "uploading"; }, ["template", "childFiles"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInVwbG9hZGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBSZW5kZXJlcjIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgVXBsb2FkZXIgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItaW5wdXRzJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGlucHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCBvdXRwdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHR3b1dheXM6IHN0cmluZ1tdO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBFSjIgQW5ndWxhciBVcGxvYWRlciBDb21wb25lbnQuXG4gKiBgYGBodG1sXG4gKiA8ZWpzLXVwbG9hZGVyPjwvZWpzLXVwbG9hZGVyPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFVwbG9hZGVyQ29tcG9uZW50IGV4dGVuZHMgVXBsb2FkZXIgaW1wbGVtZW50cyBJQ29tcG9uZW50QmFzZSB7XG4gICAgcHJpdmF0ZSBuZ0VsZTtcbiAgICBwcml2YXRlIHNyZW5kZXJlcjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBmb3JtQ29tcENvbnRleHQ6IGFueTtcbiAgICBmb3JtQ29udGV4dDogYW55O1xuICAgIHRhZ09iamVjdHM6IGFueTtcbiAgICBjaGlsZEZpbGVzOiBhbnk7XG4gICAgdGFnczogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBIVE1MIHN0cmluZyB0aGF0IHVzZWQgdG8gY3VzdG9taXplIHRoZSBjb250ZW50IG9mIGVhY2ggZmlsZSBpbiB0aGUgbGlzdC5cbiAgICAgKlxuICAgICAqID4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbdGVtcGxhdGVdKC4uLy4uL3VwbG9hZGVyL3RlbXBsYXRlLykgc2VjdGlvbiBmcm9tIHRoZSBkb2N1bWVudGF0aW9uLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHRlbXBsYXRlOiBhbnk7XG4gICAgZm9jdXM6IGFueTtcbiAgICBibHVyOiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UocmVnaXN0ZXJGdW5jdGlvbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQocmVnaXN0ZXJGdW5jdGlvbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGRpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==