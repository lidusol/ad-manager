import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { ListView } from '@syncfusion/ej2-lists';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents Angular ListView Component
 * ```
 * <ejs-listview [dataSource]='data'></ejs-listview>
 * ```
 */
export declare class ListViewComponent extends ListView implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    /**
     * The ListView supports to customize the content of each list items with the help of template property.
     * Refer the documentation [here](../../listview/customizing-templates)
     *  to know more about this property with demo.
     *
     * {% codeBlock src="listview/template-api/index.ts" %}{% endcodeBlock %}
     * @default null
     */
    template: any;
    /**
     * The ListView has an option to custom design the group header title with the help of groupTemplate property.
     * Refer the documentation [here]
     * (./listview/customizing-templates#group-template)
     *  to know more about this property with demo.
     *
     * {% codeBlock src="listview/grouptemplate-api/index.ts" %}{% endcodeBlock %}
     * @default null
     */
    groupTemplate: any;
    /**
     * The ListView has an option to custom design the ListView header title with the help of headerTemplate property.
     * Refer the documentation [here]
     * (./listview/customizing-templates#header-template)
     *  to know more about this property with demo.
     *
     * {% codeBlock src="listview/headertemplate-api/index.ts" %}{% endcodeBlock %}
     * @default null
     */
    headerTemplate: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ListViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ListViewComponent, "ejs-listview", never, { "animation": "animation"; "checkBoxPosition": "checkBoxPosition"; "cssClass": "cssClass"; "dataSource": "dataSource"; "enable": "enable"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enableVirtualization": "enableVirtualization"; "fields": "fields"; "groupTemplate": "groupTemplate"; "headerTemplate": "headerTemplate"; "headerTitle": "headerTitle"; "height": "height"; "htmlAttributes": "htmlAttributes"; "locale": "locale"; "query": "query"; "showCheckBox": "showCheckBox"; "showHeader": "showHeader"; "showIcon": "showIcon"; "sortOrder": "sortOrder"; "template": "template"; "width": "width"; }, { "actionBegin": "actionBegin"; "actionComplete": "actionComplete"; "actionFailure": "actionFailure"; "select": "select"; }, ["template", "groupTemplate", "headerTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdHZpZXcuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImxpc3R2aWV3LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBSZW5kZXJlcjIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgTGlzdFZpZXcgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItbGlzdHMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaW5wdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IG91dHB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHdvV2F5czogc3RyaW5nW107XG4vKipcbiAqIFJlcHJlc2VudHMgQW5ndWxhciBMaXN0VmlldyBDb21wb25lbnRcbiAqIGBgYFxuICogPGVqcy1saXN0dmlldyBbZGF0YVNvdXJjZV09J2RhdGEnPjwvZWpzLWxpc3R2aWV3PlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExpc3RWaWV3Q29tcG9uZW50IGV4dGVuZHMgTGlzdFZpZXcgaW1wbGVtZW50cyBJQ29tcG9uZW50QmFzZSB7XG4gICAgcHJpdmF0ZSBuZ0VsZTtcbiAgICBwcml2YXRlIHNyZW5kZXJlcjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBjb250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSBMaXN0VmlldyBzdXBwb3J0cyB0byBjdXN0b21pemUgdGhlIGNvbnRlbnQgb2YgZWFjaCBsaXN0IGl0ZW1zIHdpdGggdGhlIGhlbHAgb2YgdGVtcGxhdGUgcHJvcGVydHkuXG4gICAgICogUmVmZXIgdGhlIGRvY3VtZW50YXRpb24gW2hlcmVdKC4uLy4uL2xpc3R2aWV3L2N1c3RvbWl6aW5nLXRlbXBsYXRlcylcbiAgICAgKiAgdG8ga25vdyBtb3JlIGFib3V0IHRoaXMgcHJvcGVydHkgd2l0aCBkZW1vLlxuICAgICAqXG4gICAgICogeyUgY29kZUJsb2NrIHNyYz1cImxpc3R2aWV3L3RlbXBsYXRlLWFwaS9pbmRleC50c1wiICV9eyUgZW5kY29kZUJsb2NrICV9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHRlbXBsYXRlOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIExpc3RWaWV3IGhhcyBhbiBvcHRpb24gdG8gY3VzdG9tIGRlc2lnbiB0aGUgZ3JvdXAgaGVhZGVyIHRpdGxlIHdpdGggdGhlIGhlbHAgb2YgZ3JvdXBUZW1wbGF0ZSBwcm9wZXJ0eS5cbiAgICAgKiBSZWZlciB0aGUgZG9jdW1lbnRhdGlvbiBbaGVyZV1cbiAgICAgKiAoLi9saXN0dmlldy9jdXN0b21pemluZy10ZW1wbGF0ZXMjZ3JvdXAtdGVtcGxhdGUpXG4gICAgICogIHRvIGtub3cgbW9yZSBhYm91dCB0aGlzIHByb3BlcnR5IHdpdGggZGVtby5cbiAgICAgKlxuICAgICAqIHslIGNvZGVCbG9jayBzcmM9XCJsaXN0dmlldy9ncm91cHRlbXBsYXRlLWFwaS9pbmRleC50c1wiICV9eyUgZW5kY29kZUJsb2NrICV9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGdyb3VwVGVtcGxhdGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgTGlzdFZpZXcgaGFzIGFuIG9wdGlvbiB0byBjdXN0b20gZGVzaWduIHRoZSBMaXN0VmlldyBoZWFkZXIgdGl0bGUgd2l0aCB0aGUgaGVscCBvZiBoZWFkZXJUZW1wbGF0ZSBwcm9wZXJ0eS5cbiAgICAgKiBSZWZlciB0aGUgZG9jdW1lbnRhdGlvbiBbaGVyZV1cbiAgICAgKiAoLi9saXN0dmlldy9jdXN0b21pemluZy10ZW1wbGF0ZXMjaGVhZGVyLXRlbXBsYXRlKVxuICAgICAqICB0byBrbm93IG1vcmUgYWJvdXQgdGhpcyBwcm9wZXJ0eSB3aXRoIGRlbW8uXG4gICAgICpcbiAgICAgKiB7JSBjb2RlQmxvY2sgc3JjPVwibGlzdHZpZXcvaGVhZGVydGVtcGxhdGUtYXBpL2luZGV4LnRzXCIgJX17JSBlbmRjb2RlQmxvY2sgJX1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaGVhZGVyVGVtcGxhdGU6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihuZ0VsZTogRWxlbWVudFJlZiwgc3JlbmRlcmVyOiBSZW5kZXJlcjIsIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIGluamVjdG9yOiBJbmplY3Rvcik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyRXZlbnRzOiAoZXZlbnRMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbiAgICBhZGRUd29XYXk6IChwcm9wTGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG59XG4iXX0=