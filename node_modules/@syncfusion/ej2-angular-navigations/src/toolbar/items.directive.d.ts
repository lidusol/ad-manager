import { ViewContainerRef } from '@angular/core';
import { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';
/**
 * 'e-item' directive represent a item of the Angular Toolbar.
 * It must be contained in a Toolbar component(`ejs-toolbar`).
 * ```html
 * <ejs-toolbar>
 *   <e-items>
 *    <e-item text='Cut'></e-item>
 *    <e-item text='Copy'></e-item>
 *   </e-items>
 * </ejs-toolbar>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ItemDirective extends ComplexBase<ItemDirective> {
    private viewContainerRef;
    directivePropList: any;
    /**
     * Specifies the types of command to be rendered in the Toolbar.
     * Supported types are:
     * - Button: Creates the Button control with its given properties like text, prefixIcon, etc.
     * - Separator: Adds a horizontal line that separates the Toolbar commands.
     * - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,
     * AutoComplete, etc.
     * @default 'Button'
     */
    type: any;
    /**
     * Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `align` property.
     * Possible values are:
     * - Left: To align commands to the left side of the Toolbar.
     * - Center: To align commands at the center of the Toolbar.
     * - Right: To align commands to the right side of the Toolbar.
     *
     * @default "Left"
     */
    align: any;
    /**
     * Defines single/multiple classes (separated by space) to be used for customization of commands.
     * @default ""
     */
    cssClass: any;
    /**
     * Specifies whether an item should be disabled or not.
     * @default false
     */
    disabled: any;
    /**
     * Defines htmlAttributes used to add custom attributes to Toolbar command.
     * Supports HTML attributes such as style, class, etc.
     * @default null
     */
    htmlAttributes: any;
    /**
     * Specifies the unique ID to be used with button or input element of Toolbar items.
     * @default ""
     */
    id: any;
    /**
     * Specifies the Toolbar command display area when an element's content is too large to fit available space.
     * This is applicable only to `popup` mode. Possible values are:
     * - Show:  Always shows the item as the primary priority on the *Toolbar*.
     * - Hide: Always shows the item as the secondary priority on the *popup*.
     * - None: No priority for display, and as per normal order moves to popup when content exceeds.
     * @default 'None'
     */
    overflow: any;
    /**
     * Defines single/multiple classes separated by space used to specify an icon for the button.
     * The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.
     * @default ""
     */
    prefixIcon: any;
    /**
     * Defines the priority of items to display it in popup always.
     * It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.
     * @default false
     */
    showAlwaysInPopup: any;
    /**
     * Specifies where the button text will be displayed on *popup mode* of the Toolbar.
     * Possible values are:
     * - Toolbar:  Text will be displayed on *Toolbar* only.
     * - Overflow: Text will be displayed only when content overflows to *popup*.
     * - Both: Text will be displayed on *popup* and *Toolbar*.
     * @default 'Both'
     */
    showTextOn: any;
    /**
     * Defines single/multiple classes separated by space used to specify an icon for the button.
     * The icon will be positioned after the text content if text is available.
     * @default ""
     */
    suffixIcon: any;
    /**
     * Specifies the text to be displayed on the Toolbar button.
     * @default ""
     */
    text: any;
    /**
     * Specifies the text to be displayed on the Toolbar button.
     * @default ""
     */
    tooltipText: any;
    /**
     * Specifies whether an item should be hidden or not.
     * @default true
     */
    visible: any;
    /**
     * Specifies the width of the Toolbar button commands.
     * @default 'auto'
     */
    width: any;
    /**
     * Specifies the HTML element/element ID as a string that can be added as a Toolbar command.
     *
     * @default ""
     */
    template: any;
    constructor(viewContainerRef: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ItemDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ItemDirective, "e-items>e-item", never, { "align": "align"; "cssClass": "cssClass"; "disabled": "disabled"; "htmlAttributes": "htmlAttributes"; "id": "id"; "overflow": "overflow"; "prefixIcon": "prefixIcon"; "showAlwaysInPopup": "showAlwaysInPopup"; "showTextOn": "showTextOn"; "suffixIcon": "suffixIcon"; "template": "template"; "text": "text"; "tooltipText": "tooltipText"; "type": "type"; "visible": "visible"; "width": "width"; }, { "click": "click"; }, ["template"]>;
}
/**
 * Item Array Directive
 * @private
 */
export declare class ItemsDirective extends ArrayBase<ItemsDirective> {
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ItemsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ItemsDirective, "ejs-toolbar>e-items", never, {}, {}, ["children"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIml0ZW1zLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuLyoqXG4gKiAnZS1pdGVtJyBkaXJlY3RpdmUgcmVwcmVzZW50IGEgaXRlbSBvZiB0aGUgQW5ndWxhciBUb29sYmFyLlxuICogSXQgbXVzdCBiZSBjb250YWluZWQgaW4gYSBUb29sYmFyIGNvbXBvbmVudChgZWpzLXRvb2xiYXJgKS5cbiAqIGBgYGh0bWxcbiAqIDxlanMtdG9vbGJhcj5cbiAqICAgPGUtaXRlbXM+XG4gKiAgICA8ZS1pdGVtIHRleHQ9J0N1dCc+PC9lLWl0ZW0+XG4gKiAgICA8ZS1pdGVtIHRleHQ9J0NvcHknPjwvZS1pdGVtPlxuICogICA8L2UtaXRlbXM+XG4gKiA8L2Vqcy10b29sYmFyPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEl0ZW1EaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxJdGVtRGlyZWN0aXZlPiB7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0eXBlcyBvZiBjb21tYW5kIHRvIGJlIHJlbmRlcmVkIGluIHRoZSBUb29sYmFyLlxuICAgICAqIFN1cHBvcnRlZCB0eXBlcyBhcmU6XG4gICAgICogLSBCdXR0b246IENyZWF0ZXMgdGhlIEJ1dHRvbiBjb250cm9sIHdpdGggaXRzIGdpdmVuIHByb3BlcnRpZXMgbGlrZSB0ZXh0LCBwcmVmaXhJY29uLCBldGMuXG4gICAgICogLSBTZXBhcmF0b3I6IEFkZHMgYSBob3Jpem9udGFsIGxpbmUgdGhhdCBzZXBhcmF0ZXMgdGhlIFRvb2xiYXIgY29tbWFuZHMuXG4gICAgICogLSBJbnB1dDogQ3JlYXRlcyBhbiBpbnB1dCBlbGVtZW50IHRoYXQgaXMgYXBwbGljYWJsZSB0byB0ZW1wbGF0ZSByZW5kZXJpbmcgd2l0aCBTeW5jZnVzaW9uIGNvbnRyb2xzIGxpa2UgRHJvcERvd25MaXN0LFxuICAgICAqIEF1dG9Db21wbGV0ZSwgZXRjLlxuICAgICAqIEBkZWZhdWx0ICdCdXR0b24nXG4gICAgICovXG4gICAgdHlwZTogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgbG9jYXRpb24gZm9yIGFsaWduaW5nIFRvb2xiYXIgaXRlbXMgb24gdGhlIFRvb2xiYXIuIEVhY2ggY29tbWFuZCB3aWxsIGJlIGFsaWduZWQgYWNjb3JkaW5nIHRvIHRoZSBgYWxpZ25gIHByb3BlcnR5LlxuICAgICAqIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAgICogLSBMZWZ0OiBUbyBhbGlnbiBjb21tYW5kcyB0byB0aGUgbGVmdCBzaWRlIG9mIHRoZSBUb29sYmFyLlxuICAgICAqIC0gQ2VudGVyOiBUbyBhbGlnbiBjb21tYW5kcyBhdCB0aGUgY2VudGVyIG9mIHRoZSBUb29sYmFyLlxuICAgICAqIC0gUmlnaHQ6IFRvIGFsaWduIGNvbW1hbmRzIHRvIHRoZSByaWdodCBzaWRlIG9mIHRoZSBUb29sYmFyLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgXCJMZWZ0XCJcbiAgICAgKi9cbiAgICBhbGlnbjogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgc2luZ2xlL211bHRpcGxlIGNsYXNzZXMgKHNlcGFyYXRlZCBieSBzcGFjZSkgdG8gYmUgdXNlZCBmb3IgY3VzdG9taXphdGlvbiBvZiBjb21tYW5kcy5cbiAgICAgKiBAZGVmYXVsdCBcIlwiXG4gICAgICovXG4gICAgY3NzQ2xhc3M6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBhbiBpdGVtIHNob3VsZCBiZSBkaXNhYmxlZCBvciBub3QuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgaHRtbEF0dHJpYnV0ZXMgdXNlZCB0byBhZGQgY3VzdG9tIGF0dHJpYnV0ZXMgdG8gVG9vbGJhciBjb21tYW5kLlxuICAgICAqIFN1cHBvcnRzIEhUTUwgYXR0cmlidXRlcyBzdWNoIGFzIHN0eWxlLCBjbGFzcywgZXRjLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBodG1sQXR0cmlidXRlczogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdW5pcXVlIElEIHRvIGJlIHVzZWQgd2l0aCBidXR0b24gb3IgaW5wdXQgZWxlbWVudCBvZiBUb29sYmFyIGl0ZW1zLlxuICAgICAqIEBkZWZhdWx0IFwiXCJcbiAgICAgKi9cbiAgICBpZDogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgVG9vbGJhciBjb21tYW5kIGRpc3BsYXkgYXJlYSB3aGVuIGFuIGVsZW1lbnQncyBjb250ZW50IGlzIHRvbyBsYXJnZSB0byBmaXQgYXZhaWxhYmxlIHNwYWNlLlxuICAgICAqIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IHRvIGBwb3B1cGAgbW9kZS4gUG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKiAtIFNob3c6ICBBbHdheXMgc2hvd3MgdGhlIGl0ZW0gYXMgdGhlIHByaW1hcnkgcHJpb3JpdHkgb24gdGhlICpUb29sYmFyKi5cbiAgICAgKiAtIEhpZGU6IEFsd2F5cyBzaG93cyB0aGUgaXRlbSBhcyB0aGUgc2Vjb25kYXJ5IHByaW9yaXR5IG9uIHRoZSAqcG9wdXAqLlxuICAgICAqIC0gTm9uZTogTm8gcHJpb3JpdHkgZm9yIGRpc3BsYXksIGFuZCBhcyBwZXIgbm9ybWFsIG9yZGVyIG1vdmVzIHRvIHBvcHVwIHdoZW4gY29udGVudCBleGNlZWRzLlxuICAgICAqIEBkZWZhdWx0ICdOb25lJ1xuICAgICAqL1xuICAgIG92ZXJmbG93OiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBzaW5nbGUvbXVsdGlwbGUgY2xhc3NlcyBzZXBhcmF0ZWQgYnkgc3BhY2UgdXNlZCB0byBzcGVjaWZ5IGFuIGljb24gZm9yIHRoZSBidXR0b24uXG4gICAgICogVGhlIGljb24gd2lsbCBiZSBwb3NpdGlvbmVkIGJlZm9yZSB0aGUgdGV4dCBjb250ZW50IGlmIHRleHQgaXMgYXZhaWxhYmxlLCBvdGhlcndpc2UgdGhlIGljb24gYWxvbmUgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKiBAZGVmYXVsdCBcIlwiXG4gICAgICovXG4gICAgcHJlZml4SWNvbjogYW55O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHByaW9yaXR5IG9mIGl0ZW1zIHRvIGRpc3BsYXkgaXQgaW4gcG9wdXAgYWx3YXlzLlxuICAgICAqIEl0IGFsbG93cyB0byBtYWludGFpbiB0b29sYmFyIGl0ZW0gb24gcG9wdXAgYWx3YXlzIGJ1dCBpdCBkb2VzIG5vdCB3b3JrIGZvciB0b29sYmFyIHByaW9yaXR5IGl0ZW1zLlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgc2hvd0Fsd2F5c0luUG9wdXA6IGFueTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hlcmUgdGhlIGJ1dHRvbiB0ZXh0IHdpbGwgYmUgZGlzcGxheWVkIG9uICpwb3B1cCBtb2RlKiBvZiB0aGUgVG9vbGJhci5cbiAgICAgKiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqIC0gVG9vbGJhcjogIFRleHQgd2lsbCBiZSBkaXNwbGF5ZWQgb24gKlRvb2xiYXIqIG9ubHkuXG4gICAgICogLSBPdmVyZmxvdzogVGV4dCB3aWxsIGJlIGRpc3BsYXllZCBvbmx5IHdoZW4gY29udGVudCBvdmVyZmxvd3MgdG8gKnBvcHVwKi5cbiAgICAgKiAtIEJvdGg6IFRleHQgd2lsbCBiZSBkaXNwbGF5ZWQgb24gKnBvcHVwKiBhbmQgKlRvb2xiYXIqLlxuICAgICAqIEBkZWZhdWx0ICdCb3RoJ1xuICAgICAqL1xuICAgIHNob3dUZXh0T246IGFueTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHNpbmdsZS9tdWx0aXBsZSBjbGFzc2VzIHNlcGFyYXRlZCBieSBzcGFjZSB1c2VkIHRvIHNwZWNpZnkgYW4gaWNvbiBmb3IgdGhlIGJ1dHRvbi5cbiAgICAgKiBUaGUgaWNvbiB3aWxsIGJlIHBvc2l0aW9uZWQgYWZ0ZXIgdGhlIHRleHQgY29udGVudCBpZiB0ZXh0IGlzIGF2YWlsYWJsZS5cbiAgICAgKiBAZGVmYXVsdCBcIlwiXG4gICAgICovXG4gICAgc3VmZml4SWNvbjogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIFRvb2xiYXIgYnV0dG9uLlxuICAgICAqIEBkZWZhdWx0IFwiXCJcbiAgICAgKi9cbiAgICB0ZXh0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0ZXh0IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgVG9vbGJhciBidXR0b24uXG4gICAgICogQGRlZmF1bHQgXCJcIlxuICAgICAqL1xuICAgIHRvb2x0aXBUZXh0OiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgYW4gaXRlbSBzaG91bGQgYmUgaGlkZGVuIG9yIG5vdC5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgdmlzaWJsZTogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgd2lkdGggb2YgdGhlIFRvb2xiYXIgYnV0dG9uIGNvbW1hbmRzLlxuICAgICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgICAqL1xuICAgIHdpZHRoOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBIVE1MIGVsZW1lbnQvZWxlbWVudCBJRCBhcyBhIHN0cmluZyB0aGF0IGNhbiBiZSBhZGRlZCBhcyBhIFRvb2xiYXIgY29tbWFuZC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IFwiXCJcbiAgICAgKi9cbiAgICB0ZW1wbGF0ZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpO1xufVxuLyoqXG4gKiBJdGVtIEFycmF5IERpcmVjdGl2ZVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSXRlbXNEaXJlY3RpdmUgZXh0ZW5kcyBBcnJheUJhc2U8SXRlbXNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19