import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { TreeView } from '@syncfusion/ej2-navigations';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * TreeView component is used to represent the hierarchical data in tree like structure with advanced functions to perform edit, drag and drop, selection with check-box and more.
 * ```html
 * <ej-treeview allowDragAndDrop='true'></ej-treeview>
 * ```
 */
export declare class TreeViewComponent extends TreeView implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    /**
     * Specifies a template to render customized content for all the nodes. If the `nodeTemplate` property
     * is set, the template content overrides the displayed node text. The property accepts template string
     * [template string](http://ej2.syncfusion.com/documentation/base/template-engine.html)
     * or HTML element ID holding the content. For more information on template concept, refer to
     * [Template](../../treeview/template/).
     * @default null
     */
    nodeTemplate: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeViewComponent, "ejs-treeview", never, { "allowDragAndDrop": "allowDragAndDrop"; "allowEditing": "allowEditing"; "allowMultiSelection": "allowMultiSelection"; "animation": "animation"; "autoCheck": "autoCheck"; "checkedNodes": "checkedNodes"; "cssClass": "cssClass"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "expandOn": "expandOn"; "expandedNodes": "expandedNodes"; "fields": "fields"; "fullRowSelect": "fullRowSelect"; "loadOnDemand": "loadOnDemand"; "locale": "locale"; "nodeTemplate": "nodeTemplate"; "selectedNodes": "selectedNodes"; "showCheckBox": "showCheckBox"; "sortOrder": "sortOrder"; }, { "actionFailure": "actionFailure"; "created": "created"; "dataBound": "dataBound"; "dataSourceChanged": "dataSourceChanged"; "destroyed": "destroyed"; "drawNode": "drawNode"; "keyPress": "keyPress"; "nodeChecked": "nodeChecked"; "nodeChecking": "nodeChecking"; "nodeClicked": "nodeClicked"; "nodeCollapsed": "nodeCollapsed"; "nodeCollapsing": "nodeCollapsing"; "nodeDragStart": "nodeDragStart"; "nodeDragStop": "nodeDragStop"; "nodeDragging": "nodeDragging"; "nodeDropped": "nodeDropped"; "nodeEdited": "nodeEdited"; "nodeEditing": "nodeEditing"; "nodeExpanded": "nodeExpanded"; "nodeExpanding": "nodeExpanding"; "nodeSelected": "nodeSelected"; "nodeSelecting": "nodeSelecting"; }, ["nodeTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXZpZXcuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRyZWV2aWV3LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDb21wb25lbnRCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBUcmVlVmlldyB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1uYXZpZ2F0aW9ucyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogVHJlZVZpZXcgY29tcG9uZW50IGlzIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBoaWVyYXJjaGljYWwgZGF0YSBpbiB0cmVlIGxpa2Ugc3RydWN0dXJlIHdpdGggYWR2YW5jZWQgZnVuY3Rpb25zIHRvIHBlcmZvcm0gZWRpdCwgZHJhZyBhbmQgZHJvcCwgc2VsZWN0aW9uIHdpdGggY2hlY2stYm94IGFuZCBtb3JlLlxuICogYGBgaHRtbFxuICogPGVqLXRyZWV2aWV3IGFsbG93RHJhZ0FuZERyb3A9J3RydWUnPjwvZWotdHJlZXZpZXc+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHJlZVZpZXdDb21wb25lbnQgZXh0ZW5kcyBUcmVlVmlldyBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgdGVtcGxhdGUgdG8gcmVuZGVyIGN1c3RvbWl6ZWQgY29udGVudCBmb3IgYWxsIHRoZSBub2Rlcy4gSWYgdGhlIGBub2RlVGVtcGxhdGVgIHByb3BlcnR5XG4gICAgICogaXMgc2V0LCB0aGUgdGVtcGxhdGUgY29udGVudCBvdmVycmlkZXMgdGhlIGRpc3BsYXllZCBub2RlIHRleHQuIFRoZSBwcm9wZXJ0eSBhY2NlcHRzIHRlbXBsYXRlIHN0cmluZ1xuICAgICAqIFt0ZW1wbGF0ZSBzdHJpbmddKGh0dHA6Ly9lajIuc3luY2Z1c2lvbi5jb20vZG9jdW1lbnRhdGlvbi9iYXNlL3RlbXBsYXRlLWVuZ2luZS5odG1sKVxuICAgICAqIG9yIEhUTUwgZWxlbWVudCBJRCBob2xkaW5nIHRoZSBjb250ZW50LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0ZW1wbGF0ZSBjb25jZXB0LCByZWZlciB0b1xuICAgICAqIFtUZW1wbGF0ZV0oLi4vLi4vdHJlZXZpZXcvdGVtcGxhdGUvKS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgbm9kZVRlbXBsYXRlOiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19