import * as ɵngcc0 from '@angular/core';

var _c0 = ["title"];
var _c1 = ["content"];
var _c2 = ["template"];
var _c3 = ["*"];
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';
import { ArrayBase, ComplexBase, ComponentBase, ComponentMixins, Template, setValue } from '@syncfusion/ej2-angular-base';
import { Toast } from '@syncfusion/ej2-notifications';
import { CommonModule } from '@angular/common';
var input = ['model'];
var outputs = ['click'];
/**
 * 'e-button' directive represent a button of angular toast
 * It must be contained in a Toast component(`ejs-toast`).
 * ```html
 * <ejs-toast id='toast' showCloseIcon=true>
 *   <e-buttons>
 *    <e-button content='Ok' isPrimary=true></e-button>
 *    <e-button content='Cancel'></e-button>
 *   </e-buttons>
 * </ejs-toast>
 * ```
 */
var ButtonModelPropDirective = /** @class */ (function (_super) {
    __extends(ButtonModelPropDirective, _super);
    /**
     * @param {?} viewContainerRef
     */
    function ButtonModelPropDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.registerEvents(outputs);
        _this.directivePropList = input;
        return _this;
    }
ButtonModelPropDirective.ɵfac = function ButtonModelPropDirective_Factory(t) { return new (t || ButtonModelPropDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ButtonModelPropDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ButtonModelPropDirective, selectors: [["e-buttonmodelprop"]], inputs: { model: "model" }, outputs: { click: "click" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ButtonModelPropDirective, [{
        type: Directive,
        args: [{
                selector: 'e-buttonmodelprops>e-buttonmodelprop',
                inputs: input,
                outputs: outputs,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ButtonModelPropDirective;
}(ComplexBase));
/**
 * @nocollapse
 */
ButtonModelPropDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
/**
 * ButtonModelProp Array Directive
 */
var ButtonModelPropsDirective = /** @class */ (function (_super) {
    __extends(ButtonModelPropsDirective, _super);
    function ButtonModelPropsDirective() {
        return _super.call(this, 'buttons') || this;
    }
ButtonModelPropsDirective.ɵfac = function ButtonModelPropsDirective_Factory(t) { return new (t || ButtonModelPropsDirective)(); };
ButtonModelPropsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ButtonModelPropsDirective, selectors: [["e-buttonmodelprops"]], contentQueries: function ButtonModelPropsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ButtonModelPropDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ButtonModelPropsDirective, [{
        type: Directive,
        args: [{
                selector: 'ejs-toast>e-buttonmodelprops',
                queries: {
                    children: new ContentChildren(ButtonModelPropDirective)
                }
            }]
    }], function () { return []; }, null); })();
    return ButtonModelPropsDirective;
}(ArrayBase));
/**
 * @nocollapse
 */
ButtonModelPropsDirective.ctorParameters = function () { return []; };
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs = ['animation', 'buttons', 'content', 'cssClass', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'extendedTimeout', 'height', 'icon', 'locale', 'newestOnTop', 'position', 'showCloseButton', 'showProgressBar', 'target', 'template', 'timeOut', 'title', 'width'];
var outputs$1 = ['beforeOpen', 'beforeSanitizeHtml', 'click', 'close', 'created', 'destroyed', 'open'];
var twoWays = [''];
/**
 * Represents the Angular Toast Component
 * ```html
 * <ejs-toast></ejs-toast>
 * ```
 */
var ToastComponent = /** @class */ (function (_super) {
    __extends(ToastComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function ToastComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.tags = ['buttons'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$1);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.containerContext = new ComponentBase();
        return _this;
    }
    /**
     * @return {?}
     */
    ToastComponent.prototype.ngOnInit = function () {
        this.containerContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    ToastComponent.prototype.ngAfterViewInit = function () {
        this.containerContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    ToastComponent.prototype.ngOnDestroy = function () {
        this.containerContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    ToastComponent.prototype.ngAfterContentChecked = function () {
        this.tagObjects[0].instance = this.childButtons;
        this.containerContext.ngAfterContentChecked(this);
    };
ToastComponent.ɵfac = function ToastComponent_Factory(t) { return new (t || ToastComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
ToastComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ToastComponent, selectors: [["ejs-toast"]], contentQueries: function ToastComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ButtonModelPropsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.title = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childButtons = _t.first);
    } }, inputs: { animation: "animation", buttons: "buttons", content: "content", cssClass: "cssClass", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", extendedTimeout: "extendedTimeout", height: "height", icon: "icon", locale: "locale", newestOnTop: "newestOnTop", position: "position", showCloseButton: "showCloseButton", showProgressBar: "showProgressBar", target: "target", template: "template", timeOut: "timeOut", title: "title", width: "width" }, outputs: { beforeOpen: "beforeOpen", beforeSanitizeHtml: "beforeSanitizeHtml", click: "click", close: "close", created: "created", destroyed: "destroyed", open: "open" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 1, vars: 0, template: function ToastComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToastComponent, [{
        type: Component,
        args: [{
                selector: 'ejs-toast',
                inputs: inputs,
                outputs: outputs$1,
                template: "<ng-content ></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {
                    childButtons: new ContentChild(ButtonModelPropsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { title: [{
            type: ContentChild,
            args: ['title']
        }], content: [{
            type: ContentChild,
            args: ['content']
        }], template: [{
            type: ContentChild,
            args: ['template']
        }] }); })();
    return ToastComponent;
}(Toast));
/**
 * @nocollapse
 */
ToastComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
]; };
ToastComponent.propDecorators = {
    'title': [{ type: ContentChild, args: ['title',] },],
    'content': [{ type: ContentChild, args: ['content',] },],
    'template': [{ type: ContentChild, args: ['template',] },],
};
__decorate([
    Template(),
    __metadata("design:type", Object)
], ToastComponent.prototype, "title", void 0);
__decorate([
    Template(),
    __metadata("design:type", Object)
], ToastComponent.prototype, "content", void 0);
__decorate([
    Template(),
    __metadata("design:type", Object)
], ToastComponent.prototype, "template", void 0);
ToastComponent = __decorate([
    ComponentMixins([ComponentBase]),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], ToastComponent);
/**
 * NgModule definition for the Toast component.
 */
var ToastModule = /** @class */ (function () {
    function ToastModule() {
    }
ToastModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ToastModule });
ToastModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ToastModule_Factory(t) { return new (t || ToastModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastModule, { declarations: function () { return [ToastComponent,
        ButtonModelPropDirective,
        ButtonModelPropsDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ToastComponent,
        ButtonModelPropDirective,
        ButtonModelPropsDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToastModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    ToastComponent,
                    ButtonModelPropDirective,
                    ButtonModelPropsDirective
                ],
                exports: [
                    ToastComponent,
                    ButtonModelPropDirective,
                    ButtonModelPropsDirective
                ]
            }]
    }], function () { return []; }, null); })();
    return ToastModule;
}());
/**
 * @nocollapse
 */
ToastModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the Toast component with providers.
 */
var ToastAllModule = /** @class */ (function () {
    function ToastAllModule() {
    }
ToastAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ToastAllModule });
ToastAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ToastAllModule_Factory(t) { return new (t || ToastAllModule)(); }, providers: [], imports: [[CommonModule, ToastModule],
        ToastModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ToastAllModule, { imports: function () { return [CommonModule,
        ToastModule]; }, exports: function () { return [ToastModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToastAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ToastModule],
                exports: [
                    ToastModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return ToastAllModule;
}());
/**
 * @nocollapse
 */
ToastAllModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { ButtonModelPropDirective, ButtonModelPropsDirective, ToastComponent, ToastModule, ToastAllModule, inputs as ɵa, outputs$1 as ɵb };
export { ToastPosition, ButtonModelProps, ToastAnimations, ToastAnimationSettings, Toast } from '@syncfusion/ej2-notifications';

//# sourceMappingURL=ej2-angular-notifications.es5.js.map