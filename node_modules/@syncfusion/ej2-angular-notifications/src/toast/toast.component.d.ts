import { ElementRef, ViewContainerRef, Renderer2, Injector, QueryList } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Toast } from '@syncfusion/ej2-notifications';
import { ButtonModelPropsDirective } from './buttons.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents the Angular Toast Component
 * ```html
 * <ejs-toast></ejs-toast>
 * ```
 */
export declare class ToastComponent extends Toast implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    containerContext: any;
    tagObjects: any;
    childButtons: QueryList<ButtonModelPropsDirective>;
    tags: string[];
    /**
     * Specifies the title to be displayed on the Toast.
     * Works only with string values.
     * @default null
     */
    title: any;
    /**
     * Specifies the content to be displayed on the Toast.
     * Accepts selectors, string values and HTML elements.
     * @default null
     * @blazortype string
     */
    content: any;
    /**
     * Specifies the HTML element/element ID as a string that can be displayed as a Toast.
     * The given template is taken as preference to render the Toast, even if the built-in properties such as title and content are defined.
     * @default null
     */
    template: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToastComponent, "ejs-toast", never, { "animation": "animation"; "buttons": "buttons"; "content": "content"; "cssClass": "cssClass"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "extendedTimeout": "extendedTimeout"; "height": "height"; "icon": "icon"; "locale": "locale"; "newestOnTop": "newestOnTop"; "position": "position"; "showCloseButton": "showCloseButton"; "showProgressBar": "showProgressBar"; "target": "target"; "template": "template"; "timeOut": "timeOut"; "title": "title"; "width": "width"; }, { "beforeOpen": "beforeOpen"; "beforeSanitizeHtml": "beforeSanitizeHtml"; "click": "click"; "close": "close"; "created": "created"; "destroyed": "destroyed"; "open": "open"; }, ["title", "content", "template", "childButtons"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRvYXN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgVG9hc3QgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItbm90aWZpY2F0aW9ucyc7XG5pbXBvcnQgeyBCdXR0b25Nb2RlbFByb3BzRGlyZWN0aXZlIH0gZnJvbSAnLi9idXR0b25zLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgQW5ndWxhciBUb2FzdCBDb21wb25lbnRcbiAqIGBgYGh0bWxcbiAqIDxlanMtdG9hc3Q+PC9lanMtdG9hc3Q+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RDb21wb25lbnQgZXh0ZW5kcyBUb2FzdCBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRhaW5lckNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRCdXR0b25zOiBRdWVyeUxpc3Q8QnV0dG9uTW9kZWxQcm9wc0RpcmVjdGl2ZT47XG4gICAgdGFnczogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0aXRsZSB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIFRvYXN0LlxuICAgICAqIFdvcmtzIG9ubHkgd2l0aCBzdHJpbmcgdmFsdWVzLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICB0aXRsZTogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgY29udGVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIFRvYXN0LlxuICAgICAqIEFjY2VwdHMgc2VsZWN0b3JzLCBzdHJpbmcgdmFsdWVzIGFuZCBIVE1MIGVsZW1lbnRzLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKiBAYmxhem9ydHlwZSBzdHJpbmdcbiAgICAgKi9cbiAgICBjb250ZW50OiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBIVE1MIGVsZW1lbnQvZWxlbWVudCBJRCBhcyBhIHN0cmluZyB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgYXMgYSBUb2FzdC5cbiAgICAgKiBUaGUgZ2l2ZW4gdGVtcGxhdGUgaXMgdGFrZW4gYXMgcHJlZmVyZW5jZSB0byByZW5kZXIgdGhlIFRvYXN0LCBldmVuIGlmIHRoZSBidWlsdC1pbiBwcm9wZXJ0aWVzIHN1Y2ggYXMgdGl0bGUgYW5kIGNvbnRlbnQgYXJlIGRlZmluZWQuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHRlbXBsYXRlOiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19