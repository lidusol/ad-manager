import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { PivotView } from '@syncfusion/ej2-pivotview';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * `ej-pivotview` represents the Angular PivotView Component.
 * ```html
 * <ej-pivotview></ej-pivotview>
 * ```
 */
export declare class PivotViewComponent extends PivotView implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    /**
     * The template option which is used to render the pivot cells on the pivotview. Here, the template accepts either
     *  the string or HTMLElement as template design and then the parsed design is displayed onto the pivot cells.
     * @default null
     */
    cellTemplate: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PivotViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PivotViewComponent, "ejs-pivotview", never, { "allowCalculatedField": "allowCalculatedField"; "allowConditionalFormatting": "allowConditionalFormatting"; "allowDataCompression": "allowDataCompression"; "allowDeferLayoutUpdate": "allowDeferLayoutUpdate"; "allowDrillThrough": "allowDrillThrough"; "allowExcelExport": "allowExcelExport"; "allowGrouping": "allowGrouping"; "allowNumberFormatting": "allowNumberFormatting"; "allowPdfExport": "allowPdfExport"; "cellTemplate": "cellTemplate"; "chartSettings": "chartSettings"; "currencyCode": "currencyCode"; "dataSourceSettings": "dataSourceSettings"; "displayOption": "displayOption"; "editSettings": "editSettings"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "enableValueSorting": "enableValueSorting"; "enableVirtualization": "enableVirtualization"; "gridSettings": "gridSettings"; "groupingBarSettings": "groupingBarSettings"; "height": "height"; "hyperlinkSettings": "hyperlinkSettings"; "loadOnDemandInMemberEditor": "loadOnDemandInMemberEditor"; "locale": "locale"; "maxNodeLimitInMemberEditor": "maxNodeLimitInMemberEditor"; "maxRowsInDrillThrough": "maxRowsInDrillThrough"; "pivotValues": "pivotValues"; "showFieldList": "showFieldList"; "showGroupingBar": "showGroupingBar"; "showToolbar": "showToolbar"; "showTooltip": "showTooltip"; "showValuesButton": "showValuesButton"; "spinnerTemplate": "spinnerTemplate"; "toolbar": "toolbar"; "width": "width"; }, { "aggregateCellInfo": "aggregateCellInfo"; "beforeExport": "beforeExport"; "beginDrillThrough": "beginDrillThrough"; "cellClick": "cellClick"; "cellSelected": "cellSelected"; "cellSelecting": "cellSelecting"; "chartSeriesCreated": "chartSeriesCreated"; "conditionalFormatting": "conditionalFormatting"; "created": "created"; "dataBound": "dataBound"; "destroyed": "destroyed"; "drill": "drill"; "drillThrough": "drillThrough"; "enginePopulated": "enginePopulated"; "enginePopulating": "enginePopulating"; "fetchReport": "fetchReport"; "fieldDrop": "fieldDrop"; "fieldListRefreshed": "fieldListRefreshed"; "hyperlinkCellClick": "hyperlinkCellClick"; "load": "load"; "loadReport": "loadReport"; "memberFiltering": "memberFiltering"; "newReport": "newReport"; "onFieldDropped": "onFieldDropped"; "onPdfCellRender": "onPdfCellRender"; "removeReport": "removeReport"; "renameReport": "renameReport"; "saveReport": "saveReport"; "toolbarClick": "toolbarClick"; "toolbarRender": "toolbarRender"; }, ["cellTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGl2b3R2aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwaXZvdHZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNvbXBvbmVudEJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IFBpdm90VmlldyB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1waXZvdHZpZXcnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaW5wdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IG91dHB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHdvV2F5czogc3RyaW5nW107XG4vKipcbiAqIGBlai1waXZvdHZpZXdgIHJlcHJlc2VudHMgdGhlIEFuZ3VsYXIgUGl2b3RWaWV3IENvbXBvbmVudC5cbiAqIGBgYGh0bWxcbiAqIDxlai1waXZvdHZpZXc+PC9lai1waXZvdHZpZXc+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGl2b3RWaWV3Q29tcG9uZW50IGV4dGVuZHMgUGl2b3RWaWV3IGltcGxlbWVudHMgSUNvbXBvbmVudEJhc2Uge1xuICAgIHByaXZhdGUgbmdFbGU7XG4gICAgcHJpdmF0ZSBzcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIHByaXZhdGUgaW5qZWN0b3I7XG4gICAgY29udGV4dDogYW55O1xuICAgIHRhZ09iamVjdHM6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgb3B0aW9uIHdoaWNoIGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBwaXZvdCBjZWxscyBvbiB0aGUgcGl2b3R2aWV3LiBIZXJlLCB0aGUgdGVtcGxhdGUgYWNjZXB0cyBlaXRoZXJcbiAgICAgKiAgdGhlIHN0cmluZyBvciBIVE1MRWxlbWVudCBhcyB0ZW1wbGF0ZSBkZXNpZ24gYW5kIHRoZW4gdGhlIHBhcnNlZCBkZXNpZ24gaXMgZGlzcGxheWVkIG9udG8gdGhlIHBpdm90IGNlbGxzLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBjZWxsVGVtcGxhdGU6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihuZ0VsZTogRWxlbWVudFJlZiwgc3JlbmRlcmVyOiBSZW5kZXJlcjIsIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIGluamVjdG9yOiBJbmplY3Rvcik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyRXZlbnRzOiAoZXZlbnRMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbiAgICBhZGRUd29XYXk6IChwcm9wTGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG59XG4iXX0=