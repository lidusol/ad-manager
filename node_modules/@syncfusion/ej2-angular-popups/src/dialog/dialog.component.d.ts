import { ElementRef, ViewContainerRef, Renderer2, Injector, QueryList } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Dialog } from '@syncfusion/ej2-popups';
import { ButtonsDirective } from './buttons.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents the Angular Dialog Component
 * ```html
 * <ejs-dialog></ejs-dialog>
 * ```
 */
export declare class DialogComponent extends Dialog implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    containerContext: any;
    tagObjects: any;
    childButtons: QueryList<ButtonsDirective>;
    tags: string[];
    visibleChange: any;
    /**
     * Specifies the template value that can be displayed with dialog's footer area.
     * This is optional property and can be used only when the footer is occupied with information or custom components.
     * By default, the footer is configured with action [buttons](#buttons).
     * If footer template is configured to dialog, the action buttons property will be disabled.
     *
     * > More information on the footer template configuration can be found on this [documentation](../../dialog/template/#footer) section.
     *
     * @default ''
     * @blazortype string
     */
    footerTemplate: any;
    /**
     * Specifies the value that can be displayed in the dialog's title area that can be configured with plain text or HTML elements.
     * This is optional property and the dialog can be displayed without header, if the header property is null.
     * @default ''
     * @blazortype string
     */
    header: any;
    /**
     * Specifies the value that can be displayed in dialog's content area.
     * It can be information, list, or other HTML elements.
     * The content of dialog can be loaded with dynamic data such as database, AJAX content, and more.
     *
     * {% codeBlock src="dialog/content-api/index.ts" %}{% endcodeBlock %}
     *
     *{% codeBlock src="dialog/content-api/index.html" %}{% endcodeBlock %}
     * @default ''
     * @blazortype string
     */
    content: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DialogComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DialogComponent, "ejs-dialog", never, { "allowDragging": "allowDragging"; "animationSettings": "animationSettings"; "buttons": "buttons"; "closeOnEscape": "closeOnEscape"; "content": "content"; "cssClass": "cssClass"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableResize": "enableResize"; "enableRtl": "enableRtl"; "footerTemplate": "footerTemplate"; "header": "header"; "height": "height"; "isModal": "isModal"; "locale": "locale"; "minHeight": "minHeight"; "position": "position"; "showCloseIcon": "showCloseIcon"; "target": "target"; "visible": "visible"; "width": "width"; "zIndex": "zIndex"; }, { "beforeClose": "beforeClose"; "beforeOpen": "beforeOpen"; "beforeSanitizeHtml": "beforeSanitizeHtml"; "close": "close"; "created": "created"; "destroyed": "destroyed"; "drag": "drag"; "dragStart": "dragStart"; "dragStop": "dragStop"; "open": "open"; "overlayClick": "overlayClick"; "resizeStart": "resizeStart"; "resizeStop": "resizeStop"; "resizing": "resizing"; "visibleChange": "visibleChange"; }, ["footerTemplate", "header", "content", "childButtons"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkaWFsb2cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNvbXBvbmVudEJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1wb3B1cHMnO1xuaW1wb3J0IHsgQnV0dG9uc0RpcmVjdGl2ZSB9IGZyb20gJy4vYnV0dG9ucy5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaW5wdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IG91dHB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHdvV2F5czogc3RyaW5nW107XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIEFuZ3VsYXIgRGlhbG9nIENvbXBvbmVudFxuICogYGBgaHRtbFxuICogPGVqcy1kaWFsb2c+PC9lanMtZGlhbG9nPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERpYWxvZ0NvbXBvbmVudCBleHRlbmRzIERpYWxvZyBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRhaW5lckNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRCdXR0b25zOiBRdWVyeUxpc3Q8QnV0dG9uc0RpcmVjdGl2ZT47XG4gICAgdGFnczogc3RyaW5nW107XG4gICAgdmlzaWJsZUNoYW5nZTogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdGVtcGxhdGUgdmFsdWUgdGhhdCBjYW4gYmUgZGlzcGxheWVkIHdpdGggZGlhbG9nJ3MgZm9vdGVyIGFyZWEuXG4gICAgICogVGhpcyBpcyBvcHRpb25hbCBwcm9wZXJ0eSBhbmQgY2FuIGJlIHVzZWQgb25seSB3aGVuIHRoZSBmb290ZXIgaXMgb2NjdXBpZWQgd2l0aCBpbmZvcm1hdGlvbiBvciBjdXN0b20gY29tcG9uZW50cy5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgZm9vdGVyIGlzIGNvbmZpZ3VyZWQgd2l0aCBhY3Rpb24gW2J1dHRvbnNdKCNidXR0b25zKS5cbiAgICAgKiBJZiBmb290ZXIgdGVtcGxhdGUgaXMgY29uZmlndXJlZCB0byBkaWFsb2csIHRoZSBhY3Rpb24gYnV0dG9ucyBwcm9wZXJ0eSB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqXG4gICAgICogPiBNb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBmb290ZXIgdGVtcGxhdGUgY29uZmlndXJhdGlvbiBjYW4gYmUgZm91bmQgb24gdGhpcyBbZG9jdW1lbnRhdGlvbl0oLi4vLi4vZGlhbG9nL3RlbXBsYXRlLyNmb290ZXIpIHNlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqIEBibGF6b3J0eXBlIHN0cmluZ1xuICAgICAqL1xuICAgIGZvb3RlclRlbXBsYXRlOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YWx1ZSB0aGF0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gdGhlIGRpYWxvZydzIHRpdGxlIGFyZWEgdGhhdCBjYW4gYmUgY29uZmlndXJlZCB3aXRoIHBsYWluIHRleHQgb3IgSFRNTCBlbGVtZW50cy5cbiAgICAgKiBUaGlzIGlzIG9wdGlvbmFsIHByb3BlcnR5IGFuZCB0aGUgZGlhbG9nIGNhbiBiZSBkaXNwbGF5ZWQgd2l0aG91dCBoZWFkZXIsIGlmIHRoZSBoZWFkZXIgcHJvcGVydHkgaXMgbnVsbC5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqIEBibGF6b3J0eXBlIHN0cmluZ1xuICAgICAqL1xuICAgIGhlYWRlcjogYW55O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdmFsdWUgdGhhdCBjYW4gYmUgZGlzcGxheWVkIGluIGRpYWxvZydzIGNvbnRlbnQgYXJlYS5cbiAgICAgKiBJdCBjYW4gYmUgaW5mb3JtYXRpb24sIGxpc3QsIG9yIG90aGVyIEhUTUwgZWxlbWVudHMuXG4gICAgICogVGhlIGNvbnRlbnQgb2YgZGlhbG9nIGNhbiBiZSBsb2FkZWQgd2l0aCBkeW5hbWljIGRhdGEgc3VjaCBhcyBkYXRhYmFzZSwgQUpBWCBjb250ZW50LCBhbmQgbW9yZS5cbiAgICAgKlxuICAgICAqIHslIGNvZGVCbG9jayBzcmM9XCJkaWFsb2cvY29udGVudC1hcGkvaW5kZXgudHNcIiAlfXslIGVuZGNvZGVCbG9jayAlfVxuICAgICAqXG4gICAgICp7JSBjb2RlQmxvY2sgc3JjPVwiZGlhbG9nL2NvbnRlbnQtYXBpL2luZGV4Lmh0bWxcIiAlfXslIGVuZGNvZGVCbG9jayAlfVxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICogQGJsYXpvcnR5cGUgc3RyaW5nXG4gICAgICovXG4gICAgY29udGVudDogYW55O1xuICAgIGNvbnN0cnVjdG9yKG5nRWxlOiBFbGVtZW50UmVmLCBzcmVuZGVyZXI6IFJlbmRlcmVyMiwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==