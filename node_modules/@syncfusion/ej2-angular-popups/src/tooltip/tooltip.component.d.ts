import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Tooltip } from '@syncfusion/ej2-popups';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents the Angular Tooltip component that displays a piece of information about the target element on mouse hover.
 * ```html
 * <ejs-tooltip content='Tooltip content'>Show Tooltip</ejs-tooltip>
 * ```
 */
export declare class TooltipComponent extends Tooltip implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    containerContext: any;
    tagObjects: any;
    /**
     * It is used to display the content of Tooltip which can be both string and HTML Elements.
     * Refer the documentation [here](https://ej2.syncfusion.com/documentation/tooltip/content.html?lang=typescript)
     *  to know more about this property with demo.
     *
     * {% codeBlock src="tooltip/content-api/index.ts" %}{% endcodeBlock %}
     * @blazortype object
     */
    content: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TooltipComponent, "ejs-tooltip", never, { "animation": "animation"; "closeDelay": "closeDelay"; "content": "content"; "cssClass": "cssClass"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "height": "height"; "isSticky": "isSticky"; "locale": "locale"; "mouseTrail": "mouseTrail"; "offsetX": "offsetX"; "offsetY": "offsetY"; "openDelay": "openDelay"; "opensOn": "opensOn"; "position": "position"; "showTipPointer": "showTipPointer"; "target": "target"; "tipPointerPosition": "tipPointerPosition"; "width": "width"; }, { "afterClose": "afterClose"; "afterOpen": "afterOpen"; "beforeClose": "beforeClose"; "beforeCollision": "beforeCollision"; "beforeOpen": "beforeOpen"; "beforeRender": "beforeRender"; "created": "created"; "destroyed": "destroyed"; }, ["content"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBSZW5kZXJlcjIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50QmFzZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1wb3B1cHMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaW5wdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IG91dHB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHdvV2F5czogc3RyaW5nW107XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIEFuZ3VsYXIgVG9vbHRpcCBjb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIHBpZWNlIG9mIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0YXJnZXQgZWxlbWVudCBvbiBtb3VzZSBob3Zlci5cbiAqIGBgYGh0bWxcbiAqIDxlanMtdG9vbHRpcCBjb250ZW50PSdUb29sdGlwIGNvbnRlbnQnPlNob3cgVG9vbHRpcDwvZWpzLXRvb2x0aXA+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9vbHRpcENvbXBvbmVudCBleHRlbmRzIFRvb2x0aXAgaW1wbGVtZW50cyBJQ29tcG9uZW50QmFzZSB7XG4gICAgcHJpdmF0ZSBuZ0VsZTtcbiAgICBwcml2YXRlIHNyZW5kZXJlcjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBjb250YWluZXJDb250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIC8qKlxuICAgICAqIEl0IGlzIHVzZWQgdG8gZGlzcGxheSB0aGUgY29udGVudCBvZiBUb29sdGlwIHdoaWNoIGNhbiBiZSBib3RoIHN0cmluZyBhbmQgSFRNTCBFbGVtZW50cy5cbiAgICAgKiBSZWZlciB0aGUgZG9jdW1lbnRhdGlvbiBbaGVyZV0oaHR0cHM6Ly9lajIuc3luY2Z1c2lvbi5jb20vZG9jdW1lbnRhdGlvbi90b29sdGlwL2NvbnRlbnQuaHRtbD9sYW5nPXR5cGVzY3JpcHQpXG4gICAgICogIHRvIGtub3cgbW9yZSBhYm91dCB0aGlzIHByb3BlcnR5IHdpdGggZGVtby5cbiAgICAgKlxuICAgICAqIHslIGNvZGVCbG9jayBzcmM9XCJ0b29sdGlwL2NvbnRlbnQtYXBpL2luZGV4LnRzXCIgJX17JSBlbmRjb2RlQmxvY2sgJX1cbiAgICAgKiBAYmxhem9ydHlwZSBvYmplY3RcbiAgICAgKi9cbiAgICBjb250ZW50OiBhbnk7XG4gICAgY29uc3RydWN0b3IobmdFbGU6IEVsZW1lbnRSZWYsIHNyZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19