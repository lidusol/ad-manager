import * as ɵngcc0 from '@angular/core';

var _c0 = ["ejs-dropdownbutton", ""];
var _c1 = ["*"];
var _c2 = ["ejs-progressbutton", ""];
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';
import { ArrayBase, ComplexBase, ComponentBase, ComponentMixins, setValue } from '@syncfusion/ej2-angular-base';
import { DropDownButton, ProgressButton, SplitButton } from '@syncfusion/ej2-splitbuttons';
import { CommonModule } from '@angular/common';
var input = ['iconCss', 'id', 'separator', 'text', 'url'];
var outputs = [];
var DropDownButtonItemDirective = /** @class */ (function (_super) {
    __extends(DropDownButtonItemDirective, _super);
    /**
     * @param {?} viewContainerRef
     */
    function DropDownButtonItemDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.registerEvents(outputs);
        _this.directivePropList = input;
        return _this;
    }
DropDownButtonItemDirective.ɵfac = function DropDownButtonItemDirective_Factory(t) { return new (t || DropDownButtonItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
DropDownButtonItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DropDownButtonItemDirective, selectors: [["e-dropdownbuttonitem"]], inputs: { iconCss: "iconCss", id: "id", separator: "separator", text: "text", url: "url" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownButtonItemDirective, [{
        type: Directive,
        args: [{
                selector: 'e-dropdownbuttonitems>e-dropdownbuttonitem',
                inputs: input,
                outputs: outputs,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return DropDownButtonItemDirective;
}(ComplexBase));
/**
 * @nocollapse
 */
DropDownButtonItemDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
/**
 * DropDownButtonItem Array Directive
 */
var DropDownButtonItemsDirective = /** @class */ (function (_super) {
    __extends(DropDownButtonItemsDirective, _super);
    function DropDownButtonItemsDirective() {
        return _super.call(this, 'items') || this;
    }
DropDownButtonItemsDirective.ɵfac = function DropDownButtonItemsDirective_Factory(t) { return new (t || DropDownButtonItemsDirective)(); };
DropDownButtonItemsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DropDownButtonItemsDirective, selectors: [["e-dropdownbuttonitems"]], contentQueries: function DropDownButtonItemsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DropDownButtonItemDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownButtonItemsDirective, [{
        type: Directive,
        args: [{
                selector: 'ejs-dropdownbutton>e-dropdownbuttonitems',
                queries: {
                    children: new ContentChildren(DropDownButtonItemDirective)
                }
            }]
    }], function () { return []; }, null); })();
    return DropDownButtonItemsDirective;
}(ArrayBase));
/**
 * @nocollapse
 */
DropDownButtonItemsDirective.ctorParameters = function () { return []; };
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs = ['content', 'cssClass', 'disabled', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'iconCss', 'iconPosition', 'items', 'locale', 'target'];
var outputs$1 = ['beforeClose', 'beforeItemRender', 'beforeOpen', 'close', 'created', 'open', 'select'];
var twoWays = [];
/**
 * Represents the Angular DropDownButton Component.
 * ```html
 * <button ejs-dropdownbutton>DropDownButton</button>
 * ```
 */
var DropDownButtonComponent = /** @class */ (function (_super) {
    __extends(DropDownButtonComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function DropDownButtonComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.tags = ['items'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$1);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.containerContext = new ComponentBase();
        return _this;
    }
    /**
     * @return {?}
     */
    DropDownButtonComponent.prototype.ngOnInit = function () {
        this.containerContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    DropDownButtonComponent.prototype.ngAfterViewInit = function () {
        this.containerContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    DropDownButtonComponent.prototype.ngOnDestroy = function () {
        this.containerContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    DropDownButtonComponent.prototype.ngAfterContentChecked = function () {
        this.tagObjects[0].instance = this.childItems;
        this.containerContext.ngAfterContentChecked(this);
    };
DropDownButtonComponent.ɵfac = function DropDownButtonComponent_Factory(t) { return new (t || DropDownButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
DropDownButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropDownButtonComponent, selectors: [["", "ejs-dropdownbutton", ""]], contentQueries: function DropDownButtonComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DropDownButtonItemsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childItems = _t.first);
    } }, inputs: { content: "content", cssClass: "cssClass", disabled: "disabled", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", iconCss: "iconCss", iconPosition: "iconPosition", items: "items", locale: "locale", target: "target" }, outputs: { beforeClose: "beforeClose", beforeItemRender: "beforeItemRender", beforeOpen: "beforeOpen", close: "close", created: "created", open: "open", select: "select" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 1, vars: 0, template: function DropDownButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownButtonComponent, [{
        type: Component,
        args: [{
                selector: '[ejs-dropdownbutton]',
                inputs: inputs,
                outputs: outputs$1,
                template: "<ng-content ></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {
                    childItems: new ContentChild(DropDownButtonItemsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return DropDownButtonComponent;
}(DropDownButton));
/**
 * @nocollapse
 */
DropDownButtonComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
]; };
DropDownButtonComponent = __decorate([
    ComponentMixins([ComponentBase]),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], DropDownButtonComponent);
/**
 * NgModule definition for the DropDownButton component.
 */
var DropDownButtonModule = /** @class */ (function () {
    function DropDownButtonModule() {
    }
DropDownButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownButtonModule });
DropDownButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownButtonModule_Factory(t) { return new (t || DropDownButtonModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownButtonModule, { declarations: function () { return [DropDownButtonComponent,
        DropDownButtonItemDirective,
        DropDownButtonItemsDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [DropDownButtonComponent,
        DropDownButtonItemDirective,
        DropDownButtonItemsDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownButtonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    DropDownButtonComponent,
                    DropDownButtonItemDirective,
                    DropDownButtonItemsDirective
                ],
                exports: [
                    DropDownButtonComponent,
                    DropDownButtonItemDirective,
                    DropDownButtonItemsDirective
                ]
            }]
    }], function () { return []; }, null); })();
    return DropDownButtonModule;
}());
/**
 * @nocollapse
 */
DropDownButtonModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the DropDownButton component with providers.
 */
var DropDownButtonAllModule = /** @class */ (function () {
    function DropDownButtonAllModule() {
    }
DropDownButtonAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownButtonAllModule });
DropDownButtonAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownButtonAllModule_Factory(t) { return new (t || DropDownButtonAllModule)(); }, providers: [], imports: [[CommonModule, DropDownButtonModule],
        DropDownButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownButtonAllModule, { imports: function () { return [CommonModule,
        DropDownButtonModule]; }, exports: function () { return [DropDownButtonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownButtonAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, DropDownButtonModule],
                exports: [
                    DropDownButtonModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return DropDownButtonAllModule;
}());
/**
 * @nocollapse
 */
DropDownButtonAllModule.ctorParameters = function () { return []; };
var input$1 = ['iconCss', 'id', 'separator', 'text', 'url'];
var outputs$2 = [];
var SplitButtonItemDirective = /** @class */ (function (_super) {
    __extends(SplitButtonItemDirective, _super);
    /**
     * @param {?} viewContainerRef
     */
    function SplitButtonItemDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.registerEvents(outputs$2);
        _this.directivePropList = input$1;
        return _this;
    }
SplitButtonItemDirective.ɵfac = function SplitButtonItemDirective_Factory(t) { return new (t || SplitButtonItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
SplitButtonItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SplitButtonItemDirective, selectors: [["e-splitbuttonitem"]], inputs: { iconCss: "iconCss", id: "id", separator: "separator", text: "text", url: "url" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SplitButtonItemDirective, [{
        type: Directive,
        args: [{
                selector: 'e-splitbuttonitems>e-splitbuttonitem',
                inputs: input$1,
                outputs: outputs$2,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return SplitButtonItemDirective;
}(ComplexBase));
/**
 * @nocollapse
 */
SplitButtonItemDirective.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
/**
 * SplitButtonItem Array Directive
 */
var SplitButtonItemsDirective = /** @class */ (function (_super) {
    __extends(SplitButtonItemsDirective, _super);
    function SplitButtonItemsDirective() {
        return _super.call(this, 'items') || this;
    }
SplitButtonItemsDirective.ɵfac = function SplitButtonItemsDirective_Factory(t) { return new (t || SplitButtonItemsDirective)(); };
SplitButtonItemsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SplitButtonItemsDirective, selectors: [["e-splitbuttonitems"]], contentQueries: function SplitButtonItemsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, SplitButtonItemDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SplitButtonItemsDirective, [{
        type: Directive,
        args: [{
                selector: 'ejs-splitbutton>e-splitbuttonitems',
                queries: {
                    children: new ContentChildren(SplitButtonItemDirective)
                }
            }]
    }], function () { return []; }, null); })();
    return SplitButtonItemsDirective;
}(ArrayBase));
/**
 * @nocollapse
 */
SplitButtonItemsDirective.ctorParameters = function () { return []; };
var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$1 = ['content', 'cssClass', 'disabled', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'iconCss', 'iconPosition', 'items', 'locale', 'target'];
var outputs$3 = ['beforeClose', 'beforeItemRender', 'beforeOpen', 'click', 'close', 'created', 'open', 'select'];
var twoWays$1 = [];
/**
 * Represents the Angular SplitButton Component.
 * ```html
 * <ejs-splitbutton content='Split Button'></ejs-splitbutton>
 * ```
 */
var SplitButtonComponent = /** @class */ (function (_super) {
    __extends(SplitButtonComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function SplitButtonComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.tags = ['items'];
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$3);
        _this.addTwoWay.call(_this, twoWays$1);
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.containerContext = new ComponentBase();
        return _this;
    }
    /**
     * @return {?}
     */
    SplitButtonComponent.prototype.ngOnInit = function () {
        this.containerContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    SplitButtonComponent.prototype.ngAfterViewInit = function () {
        this.containerContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    SplitButtonComponent.prototype.ngOnDestroy = function () {
        this.containerContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    SplitButtonComponent.prototype.ngAfterContentChecked = function () {
        this.tagObjects[0].instance = this.childItems;
        this.containerContext.ngAfterContentChecked(this);
    };
SplitButtonComponent.ɵfac = function SplitButtonComponent_Factory(t) { return new (t || SplitButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
SplitButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SplitButtonComponent, selectors: [["ejs-splitbutton"]], contentQueries: function SplitButtonComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, SplitButtonItemsDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childItems = _t.first);
    } }, inputs: { content: "content", cssClass: "cssClass", disabled: "disabled", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", iconCss: "iconCss", iconPosition: "iconPosition", items: "items", locale: "locale", target: "target" }, outputs: { beforeClose: "beforeClose", beforeItemRender: "beforeItemRender", beforeOpen: "beforeOpen", click: "click", close: "close", created: "created", open: "open", select: "select" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, template: function SplitButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SplitButtonComponent, [{
        type: Component,
        args: [{
                selector: 'ejs-splitbutton',
                inputs: inputs$1,
                outputs: outputs$3,
                template: "<ng-content ></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {
                    childItems: new ContentChild(SplitButtonItemsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return SplitButtonComponent;
}(SplitButton));
/**
 * @nocollapse
 */
SplitButtonComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
]; };
SplitButtonComponent = __decorate$1([
    ComponentMixins([ComponentBase]),
    __metadata$1("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], SplitButtonComponent);
/**
 * NgModule definition for the SplitButton component.
 */
var SplitButtonModule = /** @class */ (function () {
    function SplitButtonModule() {
    }
SplitButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SplitButtonModule });
SplitButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SplitButtonModule_Factory(t) { return new (t || SplitButtonModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SplitButtonModule, { declarations: function () { return [SplitButtonComponent,
        SplitButtonItemDirective,
        SplitButtonItemsDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SplitButtonComponent,
        SplitButtonItemDirective,
        SplitButtonItemsDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SplitButtonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    SplitButtonComponent,
                    SplitButtonItemDirective,
                    SplitButtonItemsDirective
                ],
                exports: [
                    SplitButtonComponent,
                    SplitButtonItemDirective,
                    SplitButtonItemsDirective
                ]
            }]
    }], function () { return []; }, null); })();
    return SplitButtonModule;
}());
/**
 * @nocollapse
 */
SplitButtonModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the SplitButton component with providers.
 */
var SplitButtonAllModule = /** @class */ (function () {
    function SplitButtonAllModule() {
    }
SplitButtonAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SplitButtonAllModule });
SplitButtonAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SplitButtonAllModule_Factory(t) { return new (t || SplitButtonAllModule)(); }, providers: [], imports: [[CommonModule, SplitButtonModule],
        SplitButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SplitButtonAllModule, { imports: function () { return [CommonModule,
        SplitButtonModule]; }, exports: function () { return [SplitButtonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SplitButtonAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, SplitButtonModule],
                exports: [
                    SplitButtonModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return SplitButtonAllModule;
}());
/**
 * @nocollapse
 */
SplitButtonAllModule.ctorParameters = function () { return []; };
var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var inputs$2 = ['animationSettings', 'content', 'cssClass', 'disabled', 'duration', 'enableHtmlSanitizer', 'enableProgress', 'iconCss', 'iconPosition', 'isPrimary', 'isToggle', 'spinSettings'];
var outputs$4 = ['begin', 'created', 'end', 'fail', 'progress'];
var twoWays$2 = [];
/**
 * Represents the Angular ProgressButton Component.
 * ```html
 * <button ejs-progressbutton content='Progress Button'></button>
 * ```
 */
var ProgressButtonComponent = /** @class */ (function (_super) {
    __extends(ProgressButtonComponent, _super);
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    function ProgressButtonComponent(ngEle, srenderer, viewContainerRef, injector) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.injector = injector;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        _this.registerEvents(outputs$4);
        _this.addTwoWay.call(_this, twoWays$2);
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.containerContext = new ComponentBase();
        return _this;
    }
    /**
     * @return {?}
     */
    ProgressButtonComponent.prototype.ngOnInit = function () {
        this.containerContext.ngOnInit(this);
    };
    /**
     * @return {?}
     */
    ProgressButtonComponent.prototype.ngAfterViewInit = function () {
        this.containerContext.ngAfterViewInit(this);
    };
    /**
     * @return {?}
     */
    ProgressButtonComponent.prototype.ngOnDestroy = function () {
        this.containerContext.ngOnDestroy(this);
    };
    /**
     * @return {?}
     */
    ProgressButtonComponent.prototype.ngAfterContentChecked = function () {
        this.containerContext.ngAfterContentChecked(this);
    };
ProgressButtonComponent.ɵfac = function ProgressButtonComponent_Factory(t) { return new (t || ProgressButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
ProgressButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressButtonComponent, selectors: [["", "ejs-progressbutton", ""]], inputs: { animationSettings: "animationSettings", content: "content", cssClass: "cssClass", disabled: "disabled", duration: "duration", enableHtmlSanitizer: "enableHtmlSanitizer", enableProgress: "enableProgress", iconCss: "iconCss", iconPosition: "iconPosition", isPrimary: "isPrimary", isToggle: "isToggle", spinSettings: "spinSettings" }, outputs: { begin: "begin", created: "created", end: "end", fail: "fail", progress: "progress" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c2, ngContentSelectors: _c1, decls: 1, vars: 0, template: function ProgressButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressButtonComponent, [{
        type: Component,
        args: [{
                selector: '[ejs-progressbutton]',
                inputs: inputs$2,
                outputs: outputs$4,
                template: "<ng-content ></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, null); })();
    return ProgressButtonComponent;
}(ProgressButton));
/**
 * @nocollapse
 */
ProgressButtonComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
]; };
ProgressButtonComponent = __decorate$2([
    ComponentMixins([ComponentBase]),
    __metadata$2("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], ProgressButtonComponent);
/**
 * NgModule definition for the ProgressButton component.
 */
var ProgressButtonModule = /** @class */ (function () {
    function ProgressButtonModule() {
    }
ProgressButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProgressButtonModule });
ProgressButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProgressButtonModule_Factory(t) { return new (t || ProgressButtonModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressButtonModule, { declarations: function () { return [ProgressButtonComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ProgressButtonComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressButtonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    ProgressButtonComponent
                ],
                exports: [
                    ProgressButtonComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return ProgressButtonModule;
}());
/**
 * @nocollapse
 */
ProgressButtonModule.ctorParameters = function () { return []; };
/**
 * NgModule definition for the ProgressButton component with providers.
 */
var ProgressButtonAllModule = /** @class */ (function () {
    function ProgressButtonAllModule() {
    }
ProgressButtonAllModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProgressButtonAllModule });
ProgressButtonAllModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProgressButtonAllModule_Factory(t) { return new (t || ProgressButtonAllModule)(); }, providers: [], imports: [[CommonModule, ProgressButtonModule],
        ProgressButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressButtonAllModule, { imports: function () { return [CommonModule,
        ProgressButtonModule]; }, exports: function () { return [ProgressButtonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressButtonAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ProgressButtonModule],
                exports: [
                    ProgressButtonModule
                ],
                providers: []
            }]
    }], function () { return []; }, null); })();
    return ProgressButtonAllModule;
}());
/**
 * @nocollapse
 */
ProgressButtonAllModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { DropDownButtonItemDirective, DropDownButtonItemsDirective, DropDownButtonComponent, DropDownButtonModule, DropDownButtonAllModule, SplitButtonItemDirective, SplitButtonItemsDirective, SplitButtonComponent, SplitButtonModule, SplitButtonAllModule, ProgressButtonComponent, ProgressButtonModule, ProgressButtonAllModule, inputs as ɵa, outputs$1 as ɵb, inputs$2 as ɵe, outputs$4 as ɵf, inputs$1 as ɵc, outputs$3 as ɵd };
export { getModel, Item, dropDownButtonObserver, DropDownButton, SplitButton, Deferred, createButtonGroup, SpinSettings, AnimationSettings, ProgressButton } from '@syncfusion/ej2-splitbuttons';

//# sourceMappingURL=ej2-angular-splitbuttons.es5.js.map