import { ElementRef, ViewContainerRef, Renderer2, Injector, QueryList } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { SplitButton } from '@syncfusion/ej2-splitbuttons';
import { SplitButtonItemsDirective } from './items.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents the Angular SplitButton Component.
 * ```html
 * <ejs-splitbutton content='Split Button'></ejs-splitbutton>
 * ```
 */
export declare class SplitButtonComponent extends SplitButton implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    containerContext: any;
    tagObjects: any;
    childItems: QueryList<SplitButtonItemsDirective>;
    tags: string[];
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SplitButtonComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SplitButtonComponent, "ejs-splitbutton", never, { "content": "content"; "cssClass": "cssClass"; "disabled": "disabled"; "enableHtmlSanitizer": "enableHtmlSanitizer"; "enablePersistence": "enablePersistence"; "enableRtl": "enableRtl"; "iconCss": "iconCss"; "iconPosition": "iconPosition"; "items": "items"; "locale": "locale"; "target": "target"; }, { "beforeClose": "beforeClose"; "beforeItemRender": "beforeItemRender"; "beforeOpen": "beforeOpen"; "click": "click"; "close": "close"; "created": "created"; "open": "open"; "select": "select"; }, ["childItems"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRidXR0b24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNwbGl0YnV0dG9uLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNvbXBvbmVudEJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IFNwbGl0QnV0dG9uIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLXNwbGl0YnV0dG9ucyc7XG5pbXBvcnQgeyBTcGxpdEJ1dHRvbkl0ZW1zRGlyZWN0aXZlIH0gZnJvbSAnLi9pdGVtcy5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgaW5wdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IG91dHB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHdvV2F5czogc3RyaW5nW107XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIEFuZ3VsYXIgU3BsaXRCdXR0b24gQ29tcG9uZW50LlxuICogYGBgaHRtbFxuICogPGVqcy1zcGxpdGJ1dHRvbiBjb250ZW50PSdTcGxpdCBCdXR0b24nPjwvZWpzLXNwbGl0YnV0dG9uPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNwbGl0QnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgU3BsaXRCdXR0b24gaW1wbGVtZW50cyBJQ29tcG9uZW50QmFzZSB7XG4gICAgcHJpdmF0ZSBuZ0VsZTtcbiAgICBwcml2YXRlIHNyZW5kZXJlcjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBjb250YWluZXJDb250ZXh0OiBhbnk7XG4gICAgdGFnT2JqZWN0czogYW55O1xuICAgIGNoaWxkSXRlbXM6IFF1ZXJ5TGlzdDxTcGxpdEJ1dHRvbkl0ZW1zRGlyZWN0aXZlPjtcbiAgICB0YWdzOiBzdHJpbmdbXTtcbiAgICBjb25zdHJ1Y3RvcihuZ0VsZTogRWxlbWVudFJlZiwgc3JlbmRlcmVyOiBSZW5kZXJlcjIsIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIGluamVjdG9yOiBJbmplY3Rvcik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyRXZlbnRzOiAoZXZlbnRMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbiAgICBhZGRUd29XYXk6IChwcm9wTGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG59XG4iXX0=