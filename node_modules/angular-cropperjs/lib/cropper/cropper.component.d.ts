import { OnInit, ElementRef, EventEmitter } from '@angular/core';
import Cropper from 'cropperjs';
import * as ɵngcc0 from '@angular/core';
export interface ImageCropperSetting {
    width: number;
    height: number;
}
export interface ImageCropperResult {
    imageData: Cropper.ImageData;
    cropData: Cropper.CropBoxData;
    blob?: Blob;
    dataUrl?: string;
}
export declare class CropperComponent implements OnInit {
    image: ElementRef;
    imageUrl: any;
    settings: ImageCropperSetting;
    cropbox: Cropper.CropBoxData;
    loadImageErrorText: string;
    cropperOptions: any;
    export: EventEmitter<ImageCropperResult>;
    ready: EventEmitter<{}>;
    isLoading: boolean;
    cropper: Cropper;
    imageElement: HTMLImageElement;
    loadError: any;
    constructor();
    ngOnInit(): void;
    /**
     * Image loaded
     * @param ev
     */
    imageLoaded(ev: Event): void;
    /**
     * Image load error
     * @param event
     */
    imageLoadError(event: any): void;
    /**
     * Export canvas
     * @param base64
     */
    exportCanvas(base64?: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CropperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CropperComponent, "angular-cropper", never, { "cropperOptions": "cropperOptions"; "imageUrl": "imageUrl"; "settings": "settings"; "cropbox": "cropbox"; "loadImageErrorText": "loadImageErrorText"; }, { "export": "export"; "ready": "ready"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JvcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY3JvcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgQ3JvcHBlciBmcm9tICdjcm9wcGVyanMnO1xuZXhwb3J0IGludGVyZmFjZSBJbWFnZUNyb3BwZXJTZXR0aW5nIHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBJbWFnZUNyb3BwZXJSZXN1bHQge1xuICAgIGltYWdlRGF0YTogQ3JvcHBlci5JbWFnZURhdGE7XG4gICAgY3JvcERhdGE6IENyb3BwZXIuQ3JvcEJveERhdGE7XG4gICAgYmxvYj86IEJsb2I7XG4gICAgZGF0YVVybD86IHN0cmluZztcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENyb3BwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGltYWdlOiBFbGVtZW50UmVmO1xuICAgIGltYWdlVXJsOiBhbnk7XG4gICAgc2V0dGluZ3M6IEltYWdlQ3JvcHBlclNldHRpbmc7XG4gICAgY3JvcGJveDogQ3JvcHBlci5Dcm9wQm94RGF0YTtcbiAgICBsb2FkSW1hZ2VFcnJvclRleHQ6IHN0cmluZztcbiAgICBjcm9wcGVyT3B0aW9uczogYW55O1xuICAgIGV4cG9ydDogRXZlbnRFbWl0dGVyPEltYWdlQ3JvcHBlclJlc3VsdD47XG4gICAgcmVhZHk6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgaXNMb2FkaW5nOiBib29sZWFuO1xuICAgIGNyb3BwZXI6IENyb3BwZXI7XG4gICAgaW1hZ2VFbGVtZW50OiBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIGxvYWRFcnJvcjogYW55O1xuICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbWFnZSBsb2FkZWRcbiAgICAgKiBAcGFyYW0gZXZcbiAgICAgKi9cbiAgICBpbWFnZUxvYWRlZChldjogRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEltYWdlIGxvYWQgZXJyb3JcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBpbWFnZUxvYWRFcnJvcihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFeHBvcnQgY2FudmFzXG4gICAgICogQHBhcmFtIGJhc2U2NFxuICAgICAqL1xuICAgIGV4cG9ydENhbnZhcyhiYXNlNjQ/OiBhbnkpOiB2b2lkO1xufVxuIl19