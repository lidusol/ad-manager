/// <reference path="./types.ts" />
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject } from 'rxjs';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ChartEditorRef } from './chart-editor-ref';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class ChartEditorComponent {
    constructor(scriptLoaderService) {
        this.scriptLoaderService = scriptLoaderService;
        this.initializedSubject = new Subject();
    }
    /**
     * Emits as soon as the chart editor is fully initialized.
     */
    get initialized$() {
        return this.initializedSubject.asObservable();
    }
    ngOnInit() {
        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {
            this.editor = new google.visualization.ChartEditor();
            this.initializedSubject.next(this.editor);
            this.initializedSubject.complete();
        });
    }
    editChart(component, options) {
        const handle = new ChartEditorRef(this.editor);
        this.editor.openDialog(component.chartWrapper, options || {});
        handle.afterClosed().subscribe(result => {
            if (result) {
                component.chartWrapper = result;
            }
        });
        return handle;
    }
}
ChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) { return new (t || ChartEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService)); };
ChartEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartEditorComponent, selectors: [["chart-editor"]], hostAttrs: [1, "chart-editor"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ChartEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
ChartEditorComponent.ctorParameters = () => [
    { type: ScriptLoaderService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartEditorComponent, [{
        type: Component,
        args: [{
                selector: 'chart-editor',
                template: `<ng-content></ng-content>`,
                host: { class: 'chart-editor' },
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ScriptLoaderService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9jb21wb25lbnRzL2NoYXJ0LWVkaXRvci9jaGFydC1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUVuQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFHaEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBUXBELE1BQU0sT0FBTyxvQkFBb0I7QUFBRyxJQUlsQyxZQUFvQixtQkFBd0M7QUFBSSxRQUE1Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0FBQUMsUUFGckQsdUJBQWtCLEdBQUcsSUFBSSxPQUFPLEVBQW9DLENBQUM7QUFDL0UsSUFDaUUsQ0FBQztBQUNsRSxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSxJQUFXLFlBQVk7QUFDekIsUUFBSSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSCxJQUNTLFFBQVE7QUFDakIsUUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtBQUM3RSxZQUFNLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzNELFlBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDaEQsWUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDekMsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBVVMsU0FBUyxDQUFDLFNBQW9CLEVBQUUsT0FBaUQ7QUFDMUYsUUFBSSxNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkQsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNsRSxRQUNJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDNUMsWUFBTSxJQUFJLE1BQU0sRUFBRTtBQUNsQixnQkFBUSxTQUFTLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUN4QyxhQUFPO0FBQ1AsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQ0ksT0FBTyxNQUFNLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBQ0g7Z0RBaERDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsY0FBYyxrQkFDeEIsUUFBUSxFQUFFO0VBQTJCLGtCQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLGtCQUMvQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxjQUNoRDs7O2lEQUNJO0FBQUM7QUFBOEMsWUFYM0MsbUJBQW1CO0FBQUc7Ozs7Ozs7Ozs2RUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdHlwZXMudHNcIiAvPlxuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgU2NyaXB0TG9hZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NjcmlwdC1sb2FkZXIvc2NyaXB0LWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IENoYXJ0QmFzZSB9IGZyb20gJy4uL2NoYXJ0LWJhc2UvY2hhcnQtYmFzZS5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBDaGFydEVkaXRvclJlZiB9IGZyb20gJy4vY2hhcnQtZWRpdG9yLXJlZic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NoYXJ0LWVkaXRvcicsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGhvc3Q6IHsgY2xhc3M6ICdjaGFydC1lZGl0b3InIH0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENoYXJ0RWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBlZGl0b3I6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yO1xuICBwcml2YXRlIGluaXRpYWxpemVkU3ViamVjdCA9IG5ldyBTdWJqZWN0PGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2NyaXB0TG9hZGVyU2VydmljZTogU2NyaXB0TG9hZGVyU2VydmljZSkge31cblxuICAvKipcbiAgICogRW1pdHMgYXMgc29vbiBhcyB0aGUgY2hhcnQgZWRpdG9yIGlzIGZ1bGx5IGluaXRpYWxpemVkLlxuICAgKi9cbiAgcHVibGljIGdldCBpbml0aWFsaXplZCQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZWRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2NyaXB0TG9hZGVyU2VydmljZS5sb2FkQ2hhcnRQYWNrYWdlcygnY2hhcnRlZGl0b3InKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5lZGl0b3IgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3IoKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWRTdWJqZWN0Lm5leHQodGhpcy5lZGl0b3IpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZFN1YmplY3QuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgY2hhcnQgZWRpdG9yIGFzIGFuIGVtYmVkZGVkIGRpYWxvZyBib3ggb24gdGhlIHBhZ2UuXG4gICAqIElmIHRoZSBlZGl0b3IgZ2V0cyBzYXZlZCwgdGhlIGNvbXBvbmVudHMnIGNoYXJ0IHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSByZXN1bHQuXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNoYXJ0IHRvIGJlIGVkaXRlZC5cbiAgICogQHJldHVybnMgQSByZWZlcmVuY2UgdG8gdGhlIG9wZW4gZWRpdG9yLlxuICAgKi9cbiAgcHVibGljIGVkaXRDaGFydChjb21wb25lbnQ6IENoYXJ0QmFzZSk6IENoYXJ0RWRpdG9yUmVmO1xuICBwdWJsaWMgZWRpdENoYXJ0KGNvbXBvbmVudDogQ2hhcnRCYXNlLCBvcHRpb25zOiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvck9wdGlvbnMpOiBDaGFydEVkaXRvclJlZjtcbiAgcHVibGljIGVkaXRDaGFydChjb21wb25lbnQ6IENoYXJ0QmFzZSwgb3B0aW9ucz86IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yT3B0aW9ucykge1xuICAgIGNvbnN0IGhhbmRsZSA9IG5ldyBDaGFydEVkaXRvclJlZih0aGlzLmVkaXRvcik7XG4gICAgdGhpcy5lZGl0b3Iub3BlbkRpYWxvZyhjb21wb25lbnQuY2hhcnRXcmFwcGVyLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIGhhbmRsZS5hZnRlckNsb3NlZCgpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBjb21wb25lbnQuY2hhcnRXcmFwcGVyID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZTtcbiAgfVxufVxuIl19