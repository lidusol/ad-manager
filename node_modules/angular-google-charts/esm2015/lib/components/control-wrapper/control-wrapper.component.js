import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { generateRandomId } from '../../helpers/id.helper';
import { FilterType } from '../../models/control-type.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import * as ɵngcc0 from '@angular/core';
export class ControlWrapperComponent {
    constructor(loaderService) {
        this.loaderService = loaderService;
        /**
         * Emits when an error occurs when attempting to render the control.
         */
        this.error = new EventEmitter();
        /**
         * The control is ready to accept user interaction and for external method calls.
         *
         * Alternatively, you can listen for a ready event on the dashboard holding the control
         * and call control methods only after the event was fired.
         */
        this.ready = new EventEmitter();
        /**
         * Emits when the user interacts with the control, affecting its state.
         * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.
         *
         * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.
         */
        this.stateChange = new EventEmitter();
        /**
         * A generated id assigned to this components DOM element.
         */
        this.id = generateRandomId();
        this.wrapperReadySubject = new ReplaySubject(1);
        this.initialized = false;
    }
    /**
     * Emits after the `ControlWrapper` was created.
     */
    get wrapperReady$() {
        return this.wrapperReadySubject.asObservable();
    }
    get controlWrapper() {
        return this._controlWrapper;
    }
    ngOnInit() {
        this.loaderService.loadChartPackages('controls').subscribe(() => {
            this.createControlWrapper();
            this.initialized = true;
        });
    }
    ngOnChanges(changes) {
        if (!this.initialized) {
            return;
        }
        if (changes.type) {
            this._controlWrapper.setControlType(this.type);
        }
        if (changes.options) {
            this._controlWrapper.setOptions(this.options);
        }
        if (changes.state) {
            this._controlWrapper.setState(this.state);
        }
    }
    createControlWrapper() {
        this._controlWrapper = new google.visualization.ControlWrapper({
            containerId: this.id,
            controlType: this.type,
            state: this.state,
            options: this.options
        });
        this.addEventListeners();
        this.wrapperReadySubject.next(this._controlWrapper);
    }
    addEventListeners() {
        google.visualization.events.removeAllListeners(this._controlWrapper);
        google.visualization.events.addListener(this._controlWrapper, 'ready', event => this.ready.emit(event));
        google.visualization.events.addListener(this._controlWrapper, 'error', event => this.error.emit(event));
        google.visualization.events.addListener(this._controlWrapper, 'statechange', event => this.stateChange.emit(event));
    }
}
ControlWrapperComponent.ɵfac = function ControlWrapperComponent_Factory(t) { return new (t || ControlWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ScriptLoaderService)); };
ControlWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ControlWrapperComponent, selectors: [["control-wrapper"]], hostAttrs: [1, "control-wrapper"], hostVars: 1, hostBindings: function ControlWrapperComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
    } }, inputs: { for: "for", type: "type", options: "options", state: "state" }, outputs: { error: "error", ready: "ready", stateChange: "stateChange" }, exportAs: ["controlWrapper"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function ControlWrapperComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
ControlWrapperComponent.ctorParameters = () => [
    { type: ScriptLoaderService }
];
ControlWrapperComponent.propDecorators = {
    for: [{ type: Input }],
    type: [{ type: Input }],
    options: [{ type: Input }],
    state: [{ type: Input }],
    error: [{ type: Output }],
    ready: [{ type: Output }],
    stateChange: [{ type: Output }],
    id: [{ type: HostBinding, args: ['id',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ControlWrapperComponent, [{
        type: Component,
        args: [{
                selector: 'control-wrapper',
                template: '',
                host: { class: 'control-wrapper' },
                exportAs: 'controlWrapper',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ScriptLoaderService }]; }, { error: [{
            type: Output
        }], ready: [{
            type: Output
        }], stateChange: [{
            type: Output
        }], id: [{
            type: HostBinding,
            args: ['id']
        }], for: [{
            type: Input
        }], type: [{
            type: Input
        }], options: [{
            type: Input
        }], state: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC13cmFwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9jb21wb25lbnRzL2NvbnRyb2wtd3JhcHBlci9jb250cm9sLXdyYXBwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUdMLE1BQU0sRUFFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUU3RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQzs7QUFVaEYsTUFBTSxPQUFPLHVCQUF1QjtBQUFHLElBb0ZyQyxZQUFvQixhQUFrQztBQUFJLFFBQXRDLGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtBQUFDLFFBbEN2RDtBQUNGO0FBRUEsV0FESztBQUNMLFFBQ1MsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDO0FBQ3JELFFBQ0U7QUFDRjtBQUVDO0FBQVc7QUFDTTtBQUdaLFdBRkQ7QUFDTCxRQUNTLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0FBQzFDLFFBQ0U7QUFDRjtBQUNNO0FBRUM7QUFBVztBQUdaLFdBRkQ7QUFDTCxRQUNTLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztBQUNoRCxRQUNFO0FBQ0Y7QUFFQSxXQURLO0FBQ0wsUUFDa0IsT0FBRSxHQUFHLGdCQUFnQixFQUFFLENBQUM7QUFDMUMsUUFFVSx3QkFBbUIsR0FBRyxJQUFJLGFBQWEsQ0FBc0MsQ0FBQyxDQUFDLENBQUM7QUFDMUYs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QUFDO0FBQ3hILElBQUUsQ0FBQztBQUNIO21EQXBKQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGlCQUFpQixrQkFDM0IsUUFBUSxFQUFFLEVBQUUsa0JBQ1osSUFBSSxFQUFFO0FBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLGtCQUNsQyxRQUFRLEVBQUUsZ0JBQWdCLGtCQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxjQUNoRDs7Z1dBQ0k7QUFBQztBQUFpRCxZQVY5QyxtQkFBbUI7QUFBRztBQUFHO0FBQTJDLGtCQWMxRSxLQUFLO0FBQ04sbUJBWUMsS0FBSztBQUNOLHNCQVlDLEtBQUs7QUFDTixvQkFnQkMsS0FBSztBQUNOLG9CQUtDLE1BQU07QUFDUCxvQkFRQyxNQUFNO0FBQ1AsMEJBUUMsTUFBTTtBQUNQLGlCQUtDLFdBQVcsU0FBQyxJQUFJO0FBQ2Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IGdlbmVyYXRlUmFuZG9tSWQgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2lkLmhlbHBlcic7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2NvbnRyb2wtdHlwZS5tb2RlbCc7XG5pbXBvcnQgeyBDaGFydEVycm9yRXZlbnQgfSBmcm9tICcuLi8uLi9tb2RlbHMvZXZlbnRzLm1vZGVsJztcbmltcG9ydCB7IFNjcmlwdExvYWRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zY3JpcHQtbG9hZGVyL3NjcmlwdC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDaGFydEJhc2UgfSBmcm9tICcuLi9jaGFydC1iYXNlL2NoYXJ0LWJhc2UuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29udHJvbC13cmFwcGVyJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBob3N0OiB7IGNsYXNzOiAnY29udHJvbC13cmFwcGVyJyB9LFxuICBleHBvcnRBczogJ2NvbnRyb2xXcmFwcGVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ29udHJvbFdyYXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIC8qKlxuICAgKiBDaGFydHMgY29udHJvbGxlZCBieSB0aGlzIGNvbnRyb2wgd3JhcHBlci4gQ2FuIGJlIGEgc2luZ2xlIGNoYXJ0IG9yIGFuIGFycmF5IG9mIGNoYXJ0cy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBmb3IhOiBDaGFydEJhc2UgfCBDaGFydEJhc2VbXTtcblxuICAvKipcbiAgICogVGhlIGNsYXNzIG5hbWUgb2YgdGhlIGNvbnRyb2wuXG4gICAqIFRoZSBgZ29vZ2xlLnZpc3VhbGl6YXRpb25gIHBhY2thZ2UgbmFtZSBjYW4gYmUgb21pdHRlZCBmb3IgR29vZ2xlIGNvbnRyb2xzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDxjb250cm9sLXdyYXBwZXIgdHlwZT1cIkNhdGVnb3J5RmlsdGVyXCI+PC9jb250cm9sLXdyYXBwZXI+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIHR5cGUhOiBGaWx0ZXJUeXBlO1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgb3B0aW9ucyBmb3IgdGhlIGNvbnRyb2wuXG4gICAqIFlvdSBjYW4gdXNlIGVpdGhlciBKYXZhU2NyaXB0IGxpdGVyYWwgbm90YXRpb24sIG9yIHByb3ZpZGUgYSBoYW5kbGUgdG8gdGhlIG9iamVjdC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogYGBgaHRtbFxuICAgKiA8Y29udHJvbC13cmFwcGVyIFtvcHRpb25zXT1cInsnZmlsdGVyQ29sdW1uTGFiZWwnOiAnQWdlJywgJ21pblZhbHVlJzogMTAsICdtYXhWYWx1ZSc6IDgwfVwiPjwvY29udHJvbC13cmFwcGVyPlxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBvcHRpb25zPzogb2JqZWN0O1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgc3RhdGUgb2YgdGhlIGNvbnRyb2wuXG4gICAqIFRoZSBzdGF0ZSBjb2xsZWN0cyBhbGwgdGhlIHZhcmlhYmxlcyB0aGF0IHRoZSB1c2VyIG9wZXJhdGluZyB0aGUgY29udHJvbCBjYW4gYWZmZWN0LlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgYSByYW5nZSBzbGlkZXIgc3RhdGUgY2FuIGJlIGRlc2NyaWJlZCBpbiB0ZXJtIG9mIHRoZSBwb3NpdGlvbnMgdGhhdCB0aGUgbG93IGFuZCBoaWdoIHRodW1iXG4gICAqIG9mIHRoZSBzbGlkZXIgb2NjdXB5LlxuICAgKiBZb3UgY2FuIHVzZSBlaXRoZXIgSmF2YXNjcmlwdCBsaXRlcmFsIG5vdGF0aW9uLCBvciBwcm92aWRlIGEgaGFuZGxlIHRvIHRoZSBvYmplY3QuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqICBgYGBodG1sXG4gICAqIDxjb250cm9sLXdyYXBwZXIgW3N0YXRlXT1cInsnbG93VmFsdWUnOiAyMCwgJ2hpZ2hWYWx1ZSc6IDUwfVwiPjwvY29udHJvbC13cmFwcGVyPlxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzdGF0ZT86IG9iamVjdDtcblxuICAvKipcbiAgICogRW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgd2hlbiBhdHRlbXB0aW5nIHRvIHJlbmRlciB0aGUgY29udHJvbC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPENoYXJ0RXJyb3JFdmVudD4oKTtcblxuICAvKipcbiAgICogVGhlIGNvbnRyb2wgaXMgcmVhZHkgdG8gYWNjZXB0IHVzZXIgaW50ZXJhY3Rpb24gYW5kIGZvciBleHRlcm5hbCBtZXRob2QgY2FsbHMuXG4gICAqXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gbGlzdGVuIGZvciBhIHJlYWR5IGV2ZW50IG9uIHRoZSBkYXNoYm9hcmQgaG9sZGluZyB0aGUgY29udHJvbFxuICAgKiBhbmQgY2FsbCBjb250cm9sIG1ldGhvZHMgb25seSBhZnRlciB0aGUgZXZlbnQgd2FzIGZpcmVkLlxuICAgKi9cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyByZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvKipcbiAgICogRW1pdHMgd2hlbiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgY29udHJvbCwgYWZmZWN0aW5nIGl0cyBzdGF0ZS5cbiAgICogRm9yIGV4YW1wbGUsIGEgYHN0YXRlQ2hhbmdlYCBldmVudCB3aWxsIGJlIGVtaXR0ZWQgd2hlbmV2ZXIgeW91IG1vdmUgdGhlIHRodW1icyBvZiBhIHJhbmdlIHNsaWRlciBjb250cm9sLlxuICAgKlxuICAgKiBUbyByZXRyaWV2ZSBhbiB1cGRhdGVkIGNvbnRyb2wgc3RhdGUgYWZ0ZXIgdGhlIGV2ZW50IGZpcmVkLCBjYWxsIGBDb250cm9sV3JhcHBlci5nZXRTdGF0ZSgpYC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgc3RhdGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIEEgZ2VuZXJhdGVkIGlkIGFzc2lnbmVkIHRvIHRoaXMgY29tcG9uZW50cyBET00gZWxlbWVudC5cbiAgICovXG4gIEBIb3N0QmluZGluZygnaWQnKVxuICBwdWJsaWMgcmVhZG9ubHkgaWQgPSBnZW5lcmF0ZVJhbmRvbUlkKCk7XG5cbiAgcHJpdmF0ZSBfY29udHJvbFdyYXBwZXI6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNvbnRyb2xXcmFwcGVyO1xuICBwcml2YXRlIHdyYXBwZXJSZWFkeVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxnb29nbGUudmlzdWFsaXphdGlvbi5Db250cm9sV3JhcHBlcj4oMSk7XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvYWRlclNlcnZpY2U6IFNjcmlwdExvYWRlclNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFmdGVyIHRoZSBgQ29udHJvbFdyYXBwZXJgIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgcHVibGljIGdldCB3cmFwcGVyUmVhZHkkKCkge1xuICAgIHJldHVybiB0aGlzLndyYXBwZXJSZWFkeVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNvbnRyb2xXcmFwcGVyKCk6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNvbnRyb2xXcmFwcGVyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xXcmFwcGVyO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMubG9hZGVyU2VydmljZS5sb2FkQ2hhcnRQYWNrYWdlcygnY29udHJvbHMnKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5jcmVhdGVDb250cm9sV3JhcHBlcigpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLnR5cGUpIHtcbiAgICAgIHRoaXMuX2NvbnRyb2xXcmFwcGVyLnNldENvbnRyb2xUeXBlKHRoaXMudHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXMub3B0aW9ucykge1xuICAgICAgdGhpcy5fY29udHJvbFdyYXBwZXIuc2V0T3B0aW9ucyh0aGlzLm9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLnN0YXRlKSB7XG4gICAgICB0aGlzLl9jb250cm9sV3JhcHBlci5zZXRTdGF0ZSh0aGlzLnN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUNvbnRyb2xXcmFwcGVyKCkge1xuICAgIHRoaXMuX2NvbnRyb2xXcmFwcGVyID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkNvbnRyb2xXcmFwcGVyKHtcbiAgICAgIGNvbnRhaW5lcklkOiB0aGlzLmlkLFxuICAgICAgY29udHJvbFR5cGU6IHRoaXMudHlwZSxcbiAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy53cmFwcGVyUmVhZHlTdWJqZWN0Lm5leHQodGhpcy5fY29udHJvbFdyYXBwZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMucmVtb3ZlQWxsTGlzdGVuZXJzKHRoaXMuX2NvbnRyb2xXcmFwcGVyKTtcblxuICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmV2ZW50cy5hZGRMaXN0ZW5lcih0aGlzLl9jb250cm9sV3JhcHBlciwgJ3JlYWR5JywgZXZlbnQgPT4gdGhpcy5yZWFkeS5lbWl0KGV2ZW50KSk7XG4gICAgZ29vZ2xlLnZpc3VhbGl6YXRpb24uZXZlbnRzLmFkZExpc3RlbmVyKHRoaXMuX2NvbnRyb2xXcmFwcGVyLCAnZXJyb3InLCBldmVudCA9PiB0aGlzLmVycm9yLmVtaXQoZXZlbnQpKTtcbiAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMuYWRkTGlzdGVuZXIodGhpcy5fY29udHJvbFdyYXBwZXIsICdzdGF0ZWNoYW5nZScsIGV2ZW50ID0+IHRoaXMuc3RhdGVDaGFuZ2UuZW1pdChldmVudCkpO1xuICB9XG59XG4iXX0=