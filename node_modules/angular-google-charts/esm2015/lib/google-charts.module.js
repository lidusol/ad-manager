import { NgModule } from '@angular/core';
import { ChartEditorComponent } from './components/chart-editor/chart-editor.component';
import { ChartWrapperComponent } from './components/chart-wrapper/chart-wrapper.component';
import { ControlWrapperComponent } from './components/control-wrapper/control-wrapper.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { GoogleChartComponent } from './components/google-chart/google-chart.component';
import { GOOGLE_CHARTS_CONFIG } from './models/injection-tokens.model';
import * as ɵngcc0 from '@angular/core';
export class GoogleChartsModule {
    static forRoot(config = {}) {
        return {
            ngModule: GoogleChartsModule,
            providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]
        };
    }
}
GoogleChartsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GoogleChartsModule });
GoogleChartsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GoogleChartsModule_Factory(t) { return new (t || GoogleChartsModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GoogleChartsModule, { declarations: function () { return [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]; }, exports: function () { return [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartsModule, [{
        type: NgModule,
        args: [{
                declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],
                exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1nb29nbGUtY2hhcnRzL3NyYy9saWIvZ29vZ2xlLWNoYXJ0cy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDeEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDM0YsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDakcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDaEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFFeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7O0FBTXZFLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFBUyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQTZCLEVBQUU7QUFBSSxRQUN2RCxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsa0JBQWtCO0FBQ2xDLFlBQU0sU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3RFLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzhDQVhDLFFBQVEsU0FBQztBQUNSLFlBQVksRUFBRSxDQUFDLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLG9CQUFvQixDQUFDLGtCQUM5SDtHQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxvQkFBb0IsQ0FBQyxjQUMxSDs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2hhcnRFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY2hhcnQtZWRpdG9yL2NoYXJ0LWVkaXRvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2hhcnRXcmFwcGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2NoYXJ0LXdyYXBwZXIvY2hhcnQtd3JhcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbFdyYXBwZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbC13cmFwcGVyL2NvbnRyb2wtd3JhcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50JztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2dvb2dsZS1jaGFydC9nb29nbGUtY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0NvbmZpZyB9IGZyb20gJy4vbW9kZWxzL2dvb2dsZS1jaGFydHMtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IEdPT0dMRV9DSEFSVFNfQ09ORklHIH0gZnJvbSAnLi9tb2RlbHMvaW5qZWN0aW9uLXRva2Vucy5tb2RlbCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0dvb2dsZUNoYXJ0Q29tcG9uZW50LCBDaGFydFdyYXBwZXJDb21wb25lbnQsIERhc2hib2FyZENvbXBvbmVudCwgQ29udHJvbFdyYXBwZXJDb21wb25lbnQsIENoYXJ0RWRpdG9yQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0dvb2dsZUNoYXJ0Q29tcG9uZW50LCBDaGFydFdyYXBwZXJDb21wb25lbnQsIERhc2hib2FyZENvbXBvbmVudCwgQ29udHJvbFdyYXBwZXJDb21wb25lbnQsIENoYXJ0RWRpdG9yQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVDaGFydHNNb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlnOiBHb29nbGVDaGFydHNDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8R29vZ2xlQ2hhcnRzTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBHb29nbGVDaGFydHNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IEdPT0dMRV9DSEFSVFNfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH1dXG4gICAgfTtcbiAgfVxufVxuIl19