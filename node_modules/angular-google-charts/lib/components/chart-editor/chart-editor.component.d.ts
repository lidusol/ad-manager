/// <reference path="types.d.ts" />
import { OnInit } from '@angular/core';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ChartBase } from '../chart-base/chart-base.component';
import { ChartEditorRef } from './chart-editor-ref';
import * as ɵngcc0 from '@angular/core';
export declare class ChartEditorComponent implements OnInit {
    private scriptLoaderService;
    private editor;
    private initializedSubject;
    constructor(scriptLoaderService: ScriptLoaderService);
    /**
     * Emits as soon as the chart editor is fully initialized.
     */
    get initialized$(): import("rxjs").Observable<google.visualization.ChartEditor>;
    ngOnInit(): void;
    /**
     * Opens the chart editor as an embedded dialog box on the page.
     * If the editor gets saved, the components' chart will be updated with the result.
     *
     * @param component The chart to be edited.
     * @returns A reference to the open editor.
     */
    editChart(component: ChartBase): ChartEditorRef;
    editChart(component: ChartBase, options: google.visualization.ChartEditorOptions): ChartEditorRef;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChartEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChartEditorComponent, "chart-editor", never, {}, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjaGFydC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwidHlwZXMuZC50c1wiIC8+XG5pbXBvcnQgeyBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNjcmlwdExvYWRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zY3JpcHQtbG9hZGVyL3NjcmlwdC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDaGFydEJhc2UgfSBmcm9tICcuLi9jaGFydC1iYXNlL2NoYXJ0LWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IENoYXJ0RWRpdG9yUmVmIH0gZnJvbSAnLi9jaGFydC1lZGl0b3ItcmVmJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENoYXJ0RWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIHNjcmlwdExvYWRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlZGl0b3I7XG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZFN1YmplY3Q7XG4gICAgY29uc3RydWN0b3Ioc2NyaXB0TG9hZGVyU2VydmljZTogU2NyaXB0TG9hZGVyU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogRW1pdHMgYXMgc29vbiBhcyB0aGUgY2hhcnQgZWRpdG9yIGlzIGZ1bGx5IGluaXRpYWxpemVkLlxuICAgICAqL1xuICAgIGdldCBpbml0aWFsaXplZCQoKTogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yPjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBjaGFydCBlZGl0b3IgYXMgYW4gZW1iZWRkZWQgZGlhbG9nIGJveCBvbiB0aGUgcGFnZS5cbiAgICAgKiBJZiB0aGUgZWRpdG9yIGdldHMgc2F2ZWQsIHRoZSBjb21wb25lbnRzJyBjaGFydCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCB0aGUgcmVzdWx0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBUaGUgY2hhcnQgdG8gYmUgZWRpdGVkLlxuICAgICAqIEByZXR1cm5zIEEgcmVmZXJlbmNlIHRvIHRoZSBvcGVuIGVkaXRvci5cbiAgICAgKi9cbiAgICBlZGl0Q2hhcnQoY29tcG9uZW50OiBDaGFydEJhc2UpOiBDaGFydEVkaXRvclJlZjtcbiAgICBlZGl0Q2hhcnQoY29tcG9uZW50OiBDaGFydEJhc2UsIG9wdGlvbnM6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yT3B0aW9ucyk6IENoYXJ0RWRpdG9yUmVmO1xufVxuIl19