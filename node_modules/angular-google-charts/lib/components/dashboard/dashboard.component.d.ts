import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ChartErrorEvent } from '../../models/events.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { Column, Row } from '../chart-base/chart-base.component';
import * as ɵngcc0 from '@angular/core';
export declare class DashboardComponent implements OnInit, OnChanges {
    private element;
    private loaderService;
    /**
     * Data used to initialize the table.
     *
     * This must also contain all roles that are set in the `columns` property.
     */
    data: Row[];
    /**
     * The columns the `data` consists of.
     * The length of this array must match the length of each row in the `data` object.
     *
     * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.
     */
    columns: Column[];
    /**
     * The dashboard has completed drawing and is ready to accept changes.
     *
     * The ready event will also fire:
     * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,
     * - after redrawing any chart on the dashboard.
     */
    ready: EventEmitter<void>;
    /**
     * Emits when an error occurs when attempting to render the dashboard.
     * One or more of the controls and charts that are part of the dashboard may have failed rendering.
     */
    error: EventEmitter<ChartErrorEvent>;
    private controlWrappers;
    private dashboard;
    private dataTable;
    private initialized;
    constructor(element: ElementRef, loaderService: ScriptLoaderService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private createDashboard;
    private initializeBindings;
    private createDataTable;
    private getDataAsTable;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DashboardComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DashboardComponent, "dashboard", ["dashboard"], { "data": "data"; "columns": "columns"; }, { "ready": "ready"; "error": "error"; }, ["controlWrappers"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkYXNoYm9hcmQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2hhcnRFcnJvckV2ZW50IH0gZnJvbSAnLi4vLi4vbW9kZWxzL2V2ZW50cy5tb2RlbCc7XG5pbXBvcnQgeyBTY3JpcHRMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2NyaXB0LWxvYWRlci9zY3JpcHQtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sdW1uLCBSb3cgfSBmcm9tICcuLi9jaGFydC1iYXNlL2NoYXJ0LWJhc2UuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhc2hib2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBsb2FkZXJTZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIERhdGEgdXNlZCB0byBpbml0aWFsaXplIHRoZSB0YWJsZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbXVzdCBhbHNvIGNvbnRhaW4gYWxsIHJvbGVzIHRoYXQgYXJlIHNldCBpbiB0aGUgYGNvbHVtbnNgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGRhdGE6IFJvd1tdO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb2x1bW5zIHRoZSBgZGF0YWAgY29uc2lzdHMgb2YuXG4gICAgICogVGhlIGxlbmd0aCBvZiB0aGlzIGFycmF5IG11c3QgbWF0Y2ggdGhlIGxlbmd0aCBvZiBlYWNoIHJvdyBpbiB0aGUgYGRhdGFgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIElmIHtAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9jaGFydC9pbnRlcmFjdGl2ZS9kb2NzL3JvbGVzIHJvbGVzfSBzaG91bGQgYmUgYXBwbGllZCwgdGhleSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoaXMgYXJyYXkgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBjb2x1bW5zOiBDb2x1bW5bXTtcbiAgICAvKipcbiAgICAgKiBUaGUgZGFzaGJvYXJkIGhhcyBjb21wbGV0ZWQgZHJhd2luZyBhbmQgaXMgcmVhZHkgdG8gYWNjZXB0IGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBUaGUgcmVhZHkgZXZlbnQgd2lsbCBhbHNvIGZpcmU6XG4gICAgICogLSBhZnRlciB0aGUgY29tcGxldGlvbiBvZiBhIGRhc2hib2FyZCByZWZyZXNoIHRyaWdnZXJlZCBieSBhIHVzZXIgb3IgcHJvZ3JhbW1hdGljIGludGVyYWN0aW9uIHdpdGggb25lIG9mIHRoZSBjb250cm9scyxcbiAgICAgKiAtIGFmdGVyIHJlZHJhd2luZyBhbnkgY2hhcnQgb24gdGhlIGRhc2hib2FyZC5cbiAgICAgKi9cbiAgICByZWFkeTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW4gYW4gZXJyb3Igb2NjdXJzIHdoZW4gYXR0ZW1wdGluZyB0byByZW5kZXIgdGhlIGRhc2hib2FyZC5cbiAgICAgKiBPbmUgb3IgbW9yZSBvZiB0aGUgY29udHJvbHMgYW5kIGNoYXJ0cyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBkYXNoYm9hcmQgbWF5IGhhdmUgZmFpbGVkIHJlbmRlcmluZy5cbiAgICAgKi9cbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPENoYXJ0RXJyb3JFdmVudD47XG4gICAgcHJpdmF0ZSBjb250cm9sV3JhcHBlcnM7XG4gICAgcHJpdmF0ZSBkYXNoYm9hcmQ7XG4gICAgcHJpdmF0ZSBkYXRhVGFibGU7XG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBsb2FkZXJTZXJ2aWNlOiBTY3JpcHRMb2FkZXJTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHByaXZhdGUgY3JlYXRlRGFzaGJvYXJkO1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZUJpbmRpbmdzO1xuICAgIHByaXZhdGUgY3JlYXRlRGF0YVRhYmxlO1xuICAgIHByaXZhdGUgZ2V0RGF0YUFzVGFibGU7XG59XG4iXX0=