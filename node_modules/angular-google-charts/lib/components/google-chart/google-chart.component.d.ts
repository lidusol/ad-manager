/// <reference types="@types/google.visualization" />
import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ChartType } from '../../models/chart-type.model';
import { ChartErrorEvent, ChartMouseLeaveEvent, ChartMouseOverEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../models/events.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ChartBase, Column, Row } from '../chart-base/chart-base.component';
import { DashboardComponent } from '../dashboard/dashboard.component';
import * as ɵngcc0 from '@angular/core';
export interface Formatter {
    formatter: google.visualization.DefaultFormatter;
    colIndex: number;
}
export declare class GoogleChartComponent implements ChartBase, OnChanges, OnInit {
    private element;
    private scriptLoaderService;
    private dashboard?;
    /**
     * The type of the chart to create.
     */
    type: ChartType;
    /**
     * Data used to initialize the table.
     *
     * This must also contain all roles that are set in the `columns` property.
     */
    data: Row[];
    /**
     * The columns the `data` consists of.
     * The length of this array must match the length of each row in the `data` object.
     *
     * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.
     */
    columns: Column[];
    /**
     * A convenience property used to set the title of the chart.
     *
     * This can also be set using `options.title`, which, if existant, will overwrite this value.
     */
    title?: string;
    /**
     * A convenience property used to set the width of the chart in pixels.
     *
     * This can also be set using `options.width`, which, if existant, will overwrite this value.
     */
    width?: number;
    /**
     * A convenience property used to set the height of the chart in pixels.
     *
     * This can also be set using `options.height`, which, if existant, will overwrite this value.
     */
    height?: number;
    /**
     * The chart-specific options. All options listen in the Google Charts documentation applying
     * to the chart type specified can be used here.
     */
    options: object;
    /**
     * Used to change the displayed value of the specified column in all rows.
     *
     * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)
     * and the index of the column you want the formatter to get applied to.
     */
    formatters?: Formatter[];
    /**
     * If this is set to `true`, the chart will be redrawn if the browser window is resized.
     * Defaults to `false` and should only be used when specifying the width or height of the chart
     * in percent.
     *
     * Note that this can impact performance.
     */
    dynamicResize: boolean;
    ready: EventEmitter<ChartReadyEvent<google.visualization.ChartBase>>;
    error: EventEmitter<ChartErrorEvent>;
    select: EventEmitter<ChartSelectionChangedEvent>;
    mouseover: EventEmitter<ChartMouseOverEvent>;
    mouseleave: EventEmitter<ChartMouseLeaveEvent>;
    private dataTable;
    private resizeSubscription;
    private wrapper;
    private wrapperReadySubject;
    private initialized;
    constructor(element: ElementRef, scriptLoaderService: ScriptLoaderService, dashboard?: DashboardComponent);
    get chart(): google.visualization.ChartBase | null;
    get wrapperReady$(): import("rxjs").Observable<google.visualization.ChartWrapper>;
    get chartWrapper(): google.visualization.ChartWrapper;
    set chartWrapper(wrapper: google.visualization.ChartWrapper);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private createDataTable;
    private getDataAsTable;
    private updateResizeListener;
    private mergeOptions;
    private applyFormatters;
    private registerChartEvents;
    private drawChart;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GoogleChartComponent, [null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GoogleChartComponent, "google-chart", ["googleChart"], { "options": "options"; "dynamicResize": "dynamicResize"; "type": "type"; "data": "data"; "columns": "columns"; "title": "title"; "width": "width"; "height": "height"; "formatters": "formatters"; }, { "ready": "ready"; "error": "error"; "select": "select"; "mouseover": "mouseover"; "mouseleave": "mouseleave"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJnb29nbGUtY2hhcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQHR5cGVzL2dvb2dsZS52aXN1YWxpemF0aW9uXCIgLz5cbmltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENoYXJ0VHlwZSB9IGZyb20gJy4uLy4uL21vZGVscy9jaGFydC10eXBlLm1vZGVsJztcbmltcG9ydCB7IENoYXJ0RXJyb3JFdmVudCwgQ2hhcnRNb3VzZUxlYXZlRXZlbnQsIENoYXJ0TW91c2VPdmVyRXZlbnQsIENoYXJ0UmVhZHlFdmVudCwgQ2hhcnRTZWxlY3Rpb25DaGFuZ2VkRXZlbnQgfSBmcm9tICcuLi8uLi9tb2RlbHMvZXZlbnRzLm1vZGVsJztcbmltcG9ydCB7IFNjcmlwdExvYWRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zY3JpcHQtbG9hZGVyL3NjcmlwdC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDaGFydEJhc2UsIENvbHVtbiwgUm93IH0gZnJvbSAnLi4vY2hhcnQtYmFzZS9jaGFydC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICcuLi9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudCc7XG5leHBvcnQgaW50ZXJmYWNlIEZvcm1hdHRlciB7XG4gICAgZm9ybWF0dGVyOiBnb29nbGUudmlzdWFsaXphdGlvbi5EZWZhdWx0Rm9ybWF0dGVyO1xuICAgIGNvbEluZGV4OiBudW1iZXI7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHb29nbGVDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIENoYXJ0QmFzZSwgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIHNjcmlwdExvYWRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkYXNoYm9hcmQ/O1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBjaGFydCB0byBjcmVhdGUuXG4gICAgICovXG4gICAgdHlwZTogQ2hhcnRUeXBlO1xuICAgIC8qKlxuICAgICAqIERhdGEgdXNlZCB0byBpbml0aWFsaXplIHRoZSB0YWJsZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbXVzdCBhbHNvIGNvbnRhaW4gYWxsIHJvbGVzIHRoYXQgYXJlIHNldCBpbiB0aGUgYGNvbHVtbnNgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGRhdGE6IFJvd1tdO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb2x1bW5zIHRoZSBgZGF0YWAgY29uc2lzdHMgb2YuXG4gICAgICogVGhlIGxlbmd0aCBvZiB0aGlzIGFycmF5IG11c3QgbWF0Y2ggdGhlIGxlbmd0aCBvZiBlYWNoIHJvdyBpbiB0aGUgYGRhdGFgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIElmIHtAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9jaGFydC9pbnRlcmFjdGl2ZS9kb2NzL3JvbGVzIHJvbGVzfSBzaG91bGQgYmUgYXBwbGllZCwgdGhleSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoaXMgYXJyYXkgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBjb2x1bW5zOiBDb2x1bW5bXTtcbiAgICAvKipcbiAgICAgKiBBIGNvbnZlbmllbmNlIHByb3BlcnR5IHVzZWQgdG8gc2V0IHRoZSB0aXRsZSBvZiB0aGUgY2hhcnQuXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNldCB1c2luZyBgb3B0aW9ucy50aXRsZWAsIHdoaWNoLCBpZiBleGlzdGFudCwgd2lsbCBvdmVyd3JpdGUgdGhpcyB2YWx1ZS5cbiAgICAgKi9cbiAgICB0aXRsZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBIGNvbnZlbmllbmNlIHByb3BlcnR5IHVzZWQgdG8gc2V0IHRoZSB3aWR0aCBvZiB0aGUgY2hhcnQgaW4gcGl4ZWxzLlxuICAgICAqXG4gICAgICogVGhpcyBjYW4gYWxzbyBiZSBzZXQgdXNpbmcgYG9wdGlvbnMud2lkdGhgLCB3aGljaCwgaWYgZXhpc3RhbnQsIHdpbGwgb3ZlcndyaXRlIHRoaXMgdmFsdWUuXG4gICAgICovXG4gICAgd2lkdGg/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQSBjb252ZW5pZW5jZSBwcm9wZXJ0eSB1c2VkIHRvIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBjaGFydCBpbiBwaXhlbHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBhbHNvIGJlIHNldCB1c2luZyBgb3B0aW9ucy5oZWlnaHRgLCB3aGljaCwgaWYgZXhpc3RhbnQsIHdpbGwgb3ZlcndyaXRlIHRoaXMgdmFsdWUuXG4gICAgICovXG4gICAgaGVpZ2h0PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBjaGFydC1zcGVjaWZpYyBvcHRpb25zLiBBbGwgb3B0aW9ucyBsaXN0ZW4gaW4gdGhlIEdvb2dsZSBDaGFydHMgZG9jdW1lbnRhdGlvbiBhcHBseWluZ1xuICAgICAqIHRvIHRoZSBjaGFydCB0eXBlIHNwZWNpZmllZCBjYW4gYmUgdXNlZCBoZXJlLlxuICAgICAqL1xuICAgIG9wdGlvbnM6IG9iamVjdDtcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGNoYW5nZSB0aGUgZGlzcGxheWVkIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgY29sdW1uIGluIGFsbCByb3dzLlxuICAgICAqXG4gICAgICogRWFjaCBhcnJheSBlbGVtZW50IG11c3QgY29uc2lzdCBvZiBhbiBpbnN0YW5jZSBvZiBhIFtgZm9ybWF0dGVyYF0oaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY2hhcnQvaW50ZXJhY3RpdmUvZG9jcy9yZWZlcmVuY2UjZm9ybWF0dGVycylcbiAgICAgKiBhbmQgdGhlIGluZGV4IG9mIHRoZSBjb2x1bW4geW91IHdhbnQgdGhlIGZvcm1hdHRlciB0byBnZXQgYXBwbGllZCB0by5cbiAgICAgKi9cbiAgICBmb3JtYXR0ZXJzPzogRm9ybWF0dGVyW107XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBpcyBzZXQgdG8gYHRydWVgLCB0aGUgY2hhcnQgd2lsbCBiZSByZWRyYXduIGlmIHRoZSBicm93c2VyIHdpbmRvdyBpcyByZXNpemVkLlxuICAgICAqIERlZmF1bHRzIHRvIGBmYWxzZWAgYW5kIHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiBzcGVjaWZ5aW5nIHRoZSB3aWR0aCBvciBoZWlnaHQgb2YgdGhlIGNoYXJ0XG4gICAgICogaW4gcGVyY2VudC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGNhbiBpbXBhY3QgcGVyZm9ybWFuY2UuXG4gICAgICovXG4gICAgZHluYW1pY1Jlc2l6ZTogYm9vbGVhbjtcbiAgICByZWFkeTogRXZlbnRFbWl0dGVyPENoYXJ0UmVhZHlFdmVudDxnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEJhc2U+PjtcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPENoYXJ0RXJyb3JFdmVudD47XG4gICAgc2VsZWN0OiBFdmVudEVtaXR0ZXI8Q2hhcnRTZWxlY3Rpb25DaGFuZ2VkRXZlbnQ+O1xuICAgIG1vdXNlb3ZlcjogRXZlbnRFbWl0dGVyPENoYXJ0TW91c2VPdmVyRXZlbnQ+O1xuICAgIG1vdXNlbGVhdmU6IEV2ZW50RW1pdHRlcjxDaGFydE1vdXNlTGVhdmVFdmVudD47XG4gICAgcHJpdmF0ZSBkYXRhVGFibGU7XG4gICAgcHJpdmF0ZSByZXNpemVTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSB3cmFwcGVyO1xuICAgIHByaXZhdGUgd3JhcHBlclJlYWR5U3ViamVjdDtcbiAgICBwcml2YXRlIGluaXRpYWxpemVkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHNjcmlwdExvYWRlclNlcnZpY2U6IFNjcmlwdExvYWRlclNlcnZpY2UsIGRhc2hib2FyZD86IERhc2hib2FyZENvbXBvbmVudCk7XG4gICAgZ2V0IGNoYXJ0KCk6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0QmFzZSB8IG51bGw7XG4gICAgZ2V0IHdyYXBwZXJSZWFkeSQoKTogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0V3JhcHBlcj47XG4gICAgZ2V0IGNoYXJ0V3JhcHBlcigpOiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydFdyYXBwZXI7XG4gICAgc2V0IGNoYXJ0V3JhcHBlcih3cmFwcGVyOiBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydFdyYXBwZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjcmVhdGVEYXRhVGFibGU7XG4gICAgcHJpdmF0ZSBnZXREYXRhQXNUYWJsZTtcbiAgICBwcml2YXRlIHVwZGF0ZVJlc2l6ZUxpc3RlbmVyO1xuICAgIHByaXZhdGUgbWVyZ2VPcHRpb25zO1xuICAgIHByaXZhdGUgYXBwbHlGb3JtYXR0ZXJzO1xuICAgIHByaXZhdGUgcmVnaXN0ZXJDaGFydEV2ZW50cztcbiAgICBwcml2YXRlIGRyYXdDaGFydDtcbn1cbiJdfQ==