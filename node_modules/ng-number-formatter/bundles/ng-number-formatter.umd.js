(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-number-formatter', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
    (factory(global.ng.core,global.ng.common,(global['ng-number-formatter'] = {}),global.ng.core,global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterComponent = /** @class */ (function () {
        function NgNumberFormatterComponent() {
        }
        /**
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var incomingNumber = parseInt(this.ngNumber);
                if (isNaN(incomingNumber)) {
                    this.ngOutputNumber = (this.ngNumber).toString();
                }
                else {
                    this.ngOutputNumber = (incomingNumber > 0) ? '' : '-';
                    this.ngOutputNumber += this.nFormatter(Math.abs(incomingNumber));
                }
            };
        /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.nFormatter = /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
            function (num, digits) {
                if (digits === void 0) {
                    digits = 1;
                }
                /** @type {?} */
                var si = [
                    { value: 1E18, symbol: "E" },
                    { value: 1E15, symbol: "P" },
                    { value: 1E12, symbol: "T" },
                    { value: 1E9, symbol: "B" },
                    { value: 1E6, symbol: "M" },
                    { value: 1E3, symbol: "K" }
                ];
                /** @type {?} */
                var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
                /** @type {?} */
                var i;
                for (i = 0; i < si.length; i++) {
                    if (num >= si[i].value) {
                        return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
                    }
                }
                return num.toFixed(digits).replace(rx, "$1");
            };
        /** @nocollapse */
        NgNumberFormatterComponent.ctorParameters = function () { return []; };
NgNumberFormatterComponent.ɵfac = function NgNumberFormatterComponent_Factory(t) { return new (t || NgNumberFormatterComponent)(); };
NgNumberFormatterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgNumberFormatterComponent, selectors: [["ng-number-formatter"]], inputs: { ngNumber: "ngNumber" }, decls: 2, vars: 1, template: function NgNumberFormatterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.ngOutputNumber);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgNumberFormatterComponent, [{
        type: core.Component,
        args: [{
                selector: 'ng-number-formatter',
                inputs: ['ngNumber'],
                template: '<span>{{ngOutputNumber}}</span>'
            }]
    }], function () { return []; }, null); })();
        return NgNumberFormatterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterModule = /** @class */ (function () {
        function NgNumberFormatterModule() {
        }
NgNumberFormatterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgNumberFormatterModule });
NgNumberFormatterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgNumberFormatterModule_Factory(t) { return new (t || NgNumberFormatterModule)(); }, imports: [[
            common.CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgNumberFormatterModule, { declarations: [NgNumberFormatterComponent], imports: [ɵngcc1.CommonModule], exports: [NgNumberFormatterComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgNumberFormatterModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule
                ],
                declarations: [
                    NgNumberFormatterComponent
                ],
                exports: [
                    NgNumberFormatterComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return NgNumberFormatterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgNumberFormatterModule = NgNumberFormatterModule;
    exports.ɵa = NgNumberFormatterComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbnVtYmVyLWZvcm1hdHRlci51bWQuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy1udW1iZXItZm9ybWF0dGVyL3NyYy9hcHAvbW9kdWxlcy9uZy1udW1iZXItZm9ybWF0dGVyL25nLW51bWJlci1mb3JtYXR0ZXIuY29tcG9uZW50LnRzIiwibmc6L25nLW51bWJlci1mb3JtYXR0ZXIvc3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5tb2R1bGUudHMiXSwibmFtZXMiOlsiQ29tcG9uZW50IiwiTmdNb2R1bGUiLCJDb21tb25Nb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUdDLFFBU0M7QUFHSSxTQUhhO0FBQ25CO0FBQ1c7QUFDUTtBQUFZLFFBRDdCLDZDQUFRO0FBQ1I7QUFBdUI7QUFBWSxZQURuQztBQUNEO0FBQWlDLGdCQUE5QixJQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ25ELGdCQUFJLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFO0FBQy9CLG9CQUFNLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ3ZELGlCQUFLO0FBQUMscUJBQUs7QUFDWCxvQkFBTSxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsY0FBYyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQzVELG9CQUFNLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFDdkUsaUJBQUs7QUFDTCxhQUFHO0FBRUg7QUFBWTtBQUNOO0FBQ2U7QUFDYjtBQUFZLFFBSGxCLCtDQUFVO0FBQU87QUFDTjtBQUNlO0FBQ2I7QUFBWSxZQUh6QixVQUFXLEdBQUcsRUFBRSxNQUFVO0FBQzVCLGdCQURrQix1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QUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFQQSxBQU9BLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBckNBRixBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFOQSxBQ0FBLEFBSUFDLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBQyxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQWRBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctbnVtYmVyLWZvcm1hdHRlcicsXG4gIGlucHV0czogWyduZ051bWJlciddLFxuICB0ZW1wbGF0ZTogJzxzcGFuPnt7bmdPdXRwdXROdW1iZXJ9fTwvc3Bhbj4nLFxufSlcblxuZXhwb3J0IGNsYXNzIE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgbmdOdW1iZXI6IHN0cmluZztcbiAgbmdPdXRwdXROdW1iZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IGluY29taW5nTnVtYmVyID0gcGFyc2VJbnQodGhpcy5uZ051bWJlcik7XG4gICAgaWYgKGlzTmFOKGluY29taW5nTnVtYmVyKSkge1xuICAgICAgdGhpcy5uZ091dHB1dE51bWJlciA9ICh0aGlzLm5nTnVtYmVyKS50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5nT3V0cHV0TnVtYmVyID0gKGluY29taW5nTnVtYmVyID4gMCkgPyAnJyA6ICctJztcbiAgICAgIHRoaXMubmdPdXRwdXROdW1iZXIgKz0gdGhpcy5uRm9ybWF0dGVyKE1hdGguYWJzKGluY29taW5nTnVtYmVyKSk7XG4gICAgfVxuICB9XG5cbiAgbkZvcm1hdHRlcihudW0sIGRpZ2l0cyA9IDEpIHtcbiAgICB2YXIgc2kgPSBbXG4gICAgICB7IHZhbHVlOiAxRTE4LCBzeW1ib2w6IFwiRVwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTE1LCBzeW1ib2w6IFwiUFwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTEyLCBzeW1ib2w6IFwiVFwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTksIHN5bWJvbDogXCJCXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFNiwgc3ltYm9sOiBcIk1cIiB9LFxuICAgICAgeyB2YWx1ZTogMUUzLCBzeW1ib2w6IFwiS1wiIH1cbiAgICBdLCByeCA9IC9cXC4wKyR8KFxcLlswLTldKlsxLTldKTArJC8sIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHNpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobnVtID49IHNpW2ldLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiAobnVtIC8gc2lbaV0udmFsdWUpLnRvRml4ZWQoZGlnaXRzKS5yZXBsYWNlKHJ4LCBcIiQxXCIpICsgc2lbaV0uc3ltYm9sO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtLnRvRml4ZWQoZGlnaXRzKS5yZXBsYWNlKHJ4LCBcIiQxXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50IH0gZnJvbSAnLi9uZy1udW1iZXItZm9ybWF0dGVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTmdOdW1iZXJGb3JtYXR0ZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdOdW1iZXJGb3JtYXR0ZXJNb2R1bGUgeyB9XG4iXX0=