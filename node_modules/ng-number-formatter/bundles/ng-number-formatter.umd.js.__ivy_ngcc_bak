(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-number-formatter', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng-number-formatter'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterComponent = /** @class */ (function () {
        function NgNumberFormatterComponent() {
        }
        /**
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var incomingNumber = parseInt(this.ngNumber);
                if (isNaN(incomingNumber)) {
                    this.ngOutputNumber = (this.ngNumber).toString();
                }
                else {
                    this.ngOutputNumber = (incomingNumber > 0) ? '' : '-';
                    this.ngOutputNumber += this.nFormatter(Math.abs(incomingNumber));
                }
            };
        /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
        NgNumberFormatterComponent.prototype.nFormatter = /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
            function (num, digits) {
                if (digits === void 0) {
                    digits = 1;
                }
                /** @type {?} */
                var si = [
                    { value: 1E18, symbol: "E" },
                    { value: 1E15, symbol: "P" },
                    { value: 1E12, symbol: "T" },
                    { value: 1E9, symbol: "B" },
                    { value: 1E6, symbol: "M" },
                    { value: 1E3, symbol: "K" }
                ];
                /** @type {?} */
                var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
                /** @type {?} */
                var i;
                for (i = 0; i < si.length; i++) {
                    if (num >= si[i].value) {
                        return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
                    }
                }
                return num.toFixed(digits).replace(rx, "$1");
            };
        NgNumberFormatterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-number-formatter',
                        inputs: ['ngNumber'],
                        template: '<span>{{ngOutputNumber}}</span>',
                    },] },
        ];
        /** @nocollapse */
        NgNumberFormatterComponent.ctorParameters = function () { return []; };
        return NgNumberFormatterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgNumberFormatterModule = /** @class */ (function () {
        function NgNumberFormatterModule() {
        }
        NgNumberFormatterModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            NgNumberFormatterComponent
                        ],
                        exports: [
                            NgNumberFormatterComponent
                        ]
                    },] },
        ];
        return NgNumberFormatterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgNumberFormatterModule = NgNumberFormatterModule;
    exports.Éµa = NgNumberFormatterComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbnVtYmVyLWZvcm1hdHRlci51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLW51bWJlci1mb3JtYXR0ZXIvc3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5jb21wb25lbnQudHMiLCJuZzovL25nLW51bWJlci1mb3JtYXR0ZXIvc3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctbnVtYmVyLWZvcm1hdHRlcicsXG4gIGlucHV0czogWyduZ051bWJlciddLFxuICB0ZW1wbGF0ZTogJzxzcGFuPnt7bmdPdXRwdXROdW1iZXJ9fTwvc3Bhbj4nLFxufSlcblxuZXhwb3J0IGNsYXNzIE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgbmdOdW1iZXI6IHN0cmluZztcbiAgbmdPdXRwdXROdW1iZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IGluY29taW5nTnVtYmVyID0gcGFyc2VJbnQodGhpcy5uZ051bWJlcik7XG4gICAgaWYgKGlzTmFOKGluY29taW5nTnVtYmVyKSkge1xuICAgICAgdGhpcy5uZ091dHB1dE51bWJlciA9ICh0aGlzLm5nTnVtYmVyKS50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5nT3V0cHV0TnVtYmVyID0gKGluY29taW5nTnVtYmVyID4gMCkgPyAnJyA6ICctJztcbiAgICAgIHRoaXMubmdPdXRwdXROdW1iZXIgKz0gdGhpcy5uRm9ybWF0dGVyKE1hdGguYWJzKGluY29taW5nTnVtYmVyKSk7XG4gICAgfVxuICB9XG5cbiAgbkZvcm1hdHRlcihudW0sIGRpZ2l0cyA9IDEpIHtcbiAgICB2YXIgc2kgPSBbXG4gICAgICB7IHZhbHVlOiAxRTE4LCBzeW1ib2w6IFwiRVwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTE1LCBzeW1ib2w6IFwiUFwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTEyLCBzeW1ib2w6IFwiVFwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTksIHN5bWJvbDogXCJCXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFNiwgc3ltYm9sOiBcIk1cIiB9LFxuICAgICAgeyB2YWx1ZTogMUUzLCBzeW1ib2w6IFwiS1wiIH1cbiAgICBdLCByeCA9IC9cXC4wKyR8KFxcLlswLTldKlsxLTldKTArJC8sIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHNpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobnVtID49IHNpW2ldLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiAobnVtIC8gc2lbaV0udmFsdWUpLnRvRml4ZWQoZGlnaXRzKS5yZXBsYWNlKHJ4LCBcIiQxXCIpICsgc2lbaV0uc3ltYm9sO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtLnRvRml4ZWQoZGlnaXRzKS5yZXBsYWNlKHJ4LCBcIiQxXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50IH0gZnJvbSAnLi9uZy1udW1iZXItZm9ybWF0dGVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTmdOdW1iZXJGb3JtYXR0ZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdOdW1iZXJGb3JtYXR0ZXJNb2R1bGUgeyB9XG4iXSwibmFtZXMiOlsiQ29tcG9uZW50IiwiTmdNb2R1bGUiLCJDb21tb25Nb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQVlFO1NBQWlCOzs7O1FBRWpCLDZDQUFROzs7WUFBUjs7Z0JBQ0UsSUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDL0MsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUU7b0JBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO2lCQUNsRDtxQkFBTTtvQkFDTCxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsY0FBYyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO29CQUN0RCxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2lCQUNsRTthQUNGOzs7Ozs7UUFFRCwrQ0FBVTs7Ozs7WUFBVixVQUFXLEdBQUcsRUFBRSxNQUFVO2dCQUFWLHVCQUFBO29CQUFBLFVBQVU7OztnQkFDeEIsSUFBSSxFQUFFLEdBQUc7b0JBQ1AsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7b0JBQzVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO29CQUM1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtvQkFDNUIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7b0JBQzNCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO29CQUMzQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtpQkFDNUIsQ0FBcUM7O2dCQVB0QyxJQU9HLEVBQUUsR0FBRywwQkFBMEIsQ0FBSTs7Z0JBUHRDLElBT29DLENBQUMsQ0FBQztnQkFDdEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUM5QixJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFO3dCQUN0QixPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztxQkFDN0U7aUJBQ0Y7Z0JBQ0QsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDOUM7O29CQXJDRkEsY0FBUyxTQUFDO3dCQUNULFFBQVEsRUFBRSxxQkFBcUI7d0JBQy9CLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQzt3QkFDcEIsUUFBUSxFQUFFLGlDQUFpQztxQkFDNUM7Ozs7eUNBTkQ7Ozs7Ozs7QUNBQTs7OztvQkFJQ0MsYUFBUSxTQUFDO3dCQUNSLE9BQU8sRUFBRTs0QkFDUEMsbUJBQVk7eUJBQ2I7d0JBQ0QsWUFBWSxFQUFFOzRCQUNaLDBCQUEwQjt5QkFDM0I7d0JBQ0QsT0FBTyxFQUFFOzRCQUNQLDBCQUEwQjt5QkFDM0I7cUJBQ0Y7O3NDQWREOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=