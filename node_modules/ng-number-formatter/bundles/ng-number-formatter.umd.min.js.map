{"version":3,"sources":["ng://ng-number-formatter/src/app/modules/ng-number-formatter/ng-number-formatter.component.ts","ng://ng-number-formatter/src/app/modules/ng-number-formatter/ng-number-formatter.module.ts"],"names":["NgNumberFormatterComponent","prototype","ngOnInit","incomingNumber","parseInt","this","ngNumber","isNaN","ngOutputNumber","toString","nFormatter","Math","abs","num","digits","i","si","value","symbol","rx","length","toFixed","replace","Component","args","selector","inputs","template","NgNumberFormatterModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"+UAAA,IAAAA,EAAA,WAYE,SAAAA,YAEAA,EAAAC,UAAAC,SAAA,WACE,IAAMC,EAAiBC,SAASC,KAAKC,UACjCC,MAAMJ,GACRE,KAAKG,eAAkBH,KAAa,SAAEI,YAEtCJ,KAAKG,eAAmC,EAAjBL,EAAsB,GAAK,IAClDE,KAAKG,gBAAkBH,KAAKK,WAAWC,KAAKC,IAAIT,MAIpDH,EAAAC,UAAAS,WAAA,SAAWG,EAAKC,QAAA,IAAAA,IAAAA,EAAA,GACd,IAOoCC,EAPhCC,EAAK,CACP,CAAEC,MAAO,KAAMC,OAAQ,KACvB,CAAED,MAAO,KAAMC,OAAQ,KACvB,CAAED,MAAO,KAAMC,OAAQ,KACvB,CAAED,MAAO,IAAKC,OAAQ,KACtB,CAAED,MAAO,IAAKC,OAAQ,KACtB,CAAED,MAAO,IAAKC,OAAQ,MACrBC,EAAK,2BACR,IAAKJ,EAAI,EAAGA,EAAIC,EAAGI,OAAQL,IACzB,GAAIF,GAAOG,EAAGD,GAAGE,MACf,OAAQJ,EAAMG,EAAGD,GAAGE,OAAOI,QAAQP,GAAQQ,QAAQH,EAAI,MAAQH,EAAGD,GAAGG,OAGzE,OAAOL,EAAIQ,QAAQP,GAAQQ,QAAQH,EAAI,2BApC1CI,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,sBACVC,OAAQ,CAAC,YACTC,SAAU,8EALZ,GCAAC,EAAA,oDAICC,EAAAA,SAAQL,KAAA,CAAC,CACRM,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZhC,GAEFiC,QAAS,CACPjC,SAZJ","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ng-number-formatter',\n  inputs: ['ngNumber'],\n  template: '<span>{{ngOutputNumber}}</span>',\n})\n\nexport class NgNumberFormatterComponent implements OnInit {\n  ngNumber: string;\n  ngOutputNumber: string;\n\n  constructor() { }\n\n  ngOnInit() {\n    const incomingNumber = parseInt(this.ngNumber);\n    if (isNaN(incomingNumber)) {\n      this.ngOutputNumber = (this.ngNumber).toString();\n    } else {\n      this.ngOutputNumber = (incomingNumber > 0) ? '' : '-';\n      this.ngOutputNumber += this.nFormatter(Math.abs(incomingNumber));\n    }\n  }\n\n  nFormatter(num, digits = 1) {\n    var si = [\n      { value: 1E18, symbol: \"E\" },\n      { value: 1E15, symbol: \"P\" },\n      { value: 1E12, symbol: \"T\" },\n      { value: 1E9, symbol: \"B\" },\n      { value: 1E6, symbol: \"M\" },\n      { value: 1E3, symbol: \"K\" }\n    ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/, i;\n    for (i = 0; i < si.length; i++) {\n      if (num >= si[i].value) {\n        return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n      }\n    }\n    return num.toFixed(digits).replace(rx, \"$1\");\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgNumberFormatterComponent } from './ng-number-formatter.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgNumberFormatterComponent\n  ],\n  exports: [\n    NgNumberFormatterComponent\n  ]\n})\nexport class NgNumberFormatterModule { }\n"]}