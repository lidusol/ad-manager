import { Component, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgNumberFormatterComponent = /** @class */ (function () {
    function NgNumberFormatterComponent() {
    }
    /**
     * @return {?}
     */
    NgNumberFormatterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var incomingNumber = parseInt(this.ngNumber);
        if (isNaN(incomingNumber)) {
            this.ngOutputNumber = (this.ngNumber).toString();
        }
        else {
            this.ngOutputNumber = (incomingNumber > 0) ? '' : '-';
            this.ngOutputNumber += this.nFormatter(Math.abs(incomingNumber));
        }
    };
    /**
     * @param {?} num
     * @param {?=} digits
     * @return {?}
     */
    NgNumberFormatterComponent.prototype.nFormatter = /**
     * @param {?} num
     * @param {?=} digits
     * @return {?}
     */
    function (num, digits) {
        if (digits === void 0) { digits = 1; }
        /** @type {?} */
        var si = [
            { value: 1E18, symbol: "E" },
            { value: 1E15, symbol: "P" },
            { value: 1E12, symbol: "T" },
            { value: 1E9, symbol: "B" },
            { value: 1E6, symbol: "M" },
            { value: 1E3, symbol: "K" }
        ];
        /** @type {?} */
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        /** @type {?} */
        var i;
        for (i = 0; i < si.length; i++) {
            if (num >= si[i].value) {
                return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
            }
        }
        return num.toFixed(digits).replace(rx, "$1");
    };
    NgNumberFormatterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-number-formatter',
                    inputs: ['ngNumber'],
                    template: '<span>{{ngOutputNumber}}</span>',
                },] },
    ];
    /** @nocollapse */
    NgNumberFormatterComponent.ctorParameters = function () { return []; };
    return NgNumberFormatterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgNumberFormatterModule = /** @class */ (function () {
    function NgNumberFormatterModule() {
    }
    NgNumberFormatterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        NgNumberFormatterComponent
                    ],
                    exports: [
                        NgNumberFormatterComponent
                    ]
                },] },
    ];
    return NgNumberFormatterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgNumberFormatterModule, NgNumberFormatterComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbnVtYmVyLWZvcm1hdHRlci5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmctbnVtYmVyLWZvcm1hdHRlci9zcmMvYXBwL21vZHVsZXMvbmctbnVtYmVyLWZvcm1hdHRlci9uZy1udW1iZXItZm9ybWF0dGVyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctbnVtYmVyLWZvcm1hdHRlci9zcmMvYXBwL21vZHVsZXMvbmctbnVtYmVyLWZvcm1hdHRlci9uZy1udW1iZXItZm9ybWF0dGVyLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1udW1iZXItZm9ybWF0dGVyJyxcbiAgaW5wdXRzOiBbJ25nTnVtYmVyJ10sXG4gIHRlbXBsYXRlOiAnPHNwYW4+e3tuZ091dHB1dE51bWJlcn19PC9zcGFuPicsXG59KVxuXG5leHBvcnQgY2xhc3MgTmdOdW1iZXJGb3JtYXR0ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBuZ051bWJlcjogc3RyaW5nO1xuICBuZ091dHB1dE51bWJlcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgaW5jb21pbmdOdW1iZXIgPSBwYXJzZUludCh0aGlzLm5nTnVtYmVyKTtcbiAgICBpZiAoaXNOYU4oaW5jb21pbmdOdW1iZXIpKSB7XG4gICAgICB0aGlzLm5nT3V0cHV0TnVtYmVyID0gKHRoaXMubmdOdW1iZXIpLnRvU3RyaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmdPdXRwdXROdW1iZXIgPSAoaW5jb21pbmdOdW1iZXIgPiAwKSA/ICcnIDogJy0nO1xuICAgICAgdGhpcy5uZ091dHB1dE51bWJlciArPSB0aGlzLm5Gb3JtYXR0ZXIoTWF0aC5hYnMoaW5jb21pbmdOdW1iZXIpKTtcbiAgICB9XG4gIH1cblxuICBuRm9ybWF0dGVyKG51bSwgZGlnaXRzID0gMSkge1xuICAgIHZhciBzaSA9IFtcbiAgICAgIHsgdmFsdWU6IDFFMTgsIHN5bWJvbDogXCJFXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMTUsIHN5bWJvbDogXCJQXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFMTIsIHN5bWJvbDogXCJUXCIgfSxcbiAgICAgIHsgdmFsdWU6IDFFOSwgc3ltYm9sOiBcIkJcIiB9LFxuICAgICAgeyB2YWx1ZTogMUU2LCBzeW1ib2w6IFwiTVwiIH0sXG4gICAgICB7IHZhbHVlOiAxRTMsIHN5bWJvbDogXCJLXCIgfVxuICAgIF0sIHJ4ID0gL1xcLjArJHwoXFwuWzAtOV0qWzEtOV0pMCskLywgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2kubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChudW0gPj0gc2lbaV0udmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChudW0gLyBzaVtpXS52YWx1ZSkudG9GaXhlZChkaWdpdHMpLnJlcGxhY2UocngsIFwiJDFcIikgKyBzaVtpXS5zeW1ib2w7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW0udG9GaXhlZChkaWdpdHMpLnJlcGxhY2UocngsIFwiJDFcIik7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdOdW1iZXJGb3JtYXR0ZXJDb21wb25lbnQgfSBmcm9tICcuL25nLW51bWJlci1mb3JtYXR0ZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOZ051bWJlckZvcm1hdHRlckNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgTmdOdW1iZXJGb3JtYXR0ZXJDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ051bWJlckZvcm1hdHRlck1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7SUFZRTtLQUFpQjs7OztJQUVqQiw2Q0FBUTs7O0lBQVI7O1FBQ0UsSUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQztTQUNsRDthQUFNO1lBQ0wsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLGNBQWMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUN0RCxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO0tBQ0Y7Ozs7OztJQUVELCtDQUFVOzs7OztJQUFWLFVBQVcsR0FBRyxFQUFFLE1BQVU7UUFBVix1QkFBQSxFQUFBLFVBQVU7O1FBQ3hCLElBQUksRUFBRSxHQUFHO1lBQ1AsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDNUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDNUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDNUIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDM0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDM0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7U0FDNUIsQ0FBcUM7O1FBUHRDLElBT0csRUFBRSxHQUFHLDBCQUEwQixDQUFJOztRQVB0QyxJQU9vQyxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2FBQzdFO1NBQ0Y7UUFDRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM5Qzs7Z0JBckNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUM7b0JBQ3BCLFFBQVEsRUFBRSxpQ0FBaUM7aUJBQzVDOzs7O3FDQU5EOzs7Ozs7O0FDQUE7Ozs7Z0JBSUMsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3FCQUNiO29CQUNELFlBQVksRUFBRTt3QkFDWiwwQkFBMEI7cUJBQzNCO29CQUNELE9BQU8sRUFBRTt3QkFDUCwwQkFBMEI7cUJBQzNCO2lCQUNGOztrQ0FkRDs7Ozs7Ozs7Ozs7Ozs7OyJ9