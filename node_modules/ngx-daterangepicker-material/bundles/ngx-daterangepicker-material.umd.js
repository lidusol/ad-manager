(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('@angular/material/button'),require('@angular/material/select'),require('@angular/forms'),require('@angular/material/core'),require('@angular/cdk/overlay'),exports, require('@angular/cdk/overlay'), require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/select'), require('moment'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/portal')) :
    typeof define === 'function' && define.amd ? define('ngx-daterangepicker-material', ['@angular/core','@angular/common','@angular/material/button','@angular/material/select','@angular/forms','@angular/material/core','@angular/cdk/overlay','exports', '@angular/cdk/overlay', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/button', '@angular/material/select', 'moment', 'rxjs', 'rxjs/operators', '@angular/cdk/portal'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,global.ng.material.button,global.ng.material.select,global.ng.forms,global.ng.material.core,global.ng.cdk.overlay,global['ngx-daterangepicker-material'] = {}, global.ng.cdk.overlay, global.ng.common, global.ng.core, global.ng.forms, global.ng.material.button, global.ng.material.select, global.moment, global.rxjs, global.rxjs.operators, global.ng.cdk.portal));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,exports, overlay, common, core, forms, button, select, _moment, rxjs, operators, portal) { 
var _c0 = ["pickerContainer"];
var _c1 = function (a0) { return { active: a0 }; };
function DaterangepickerComponent_div_2_li_2_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "button", 8);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_2_li_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); var range_r6 = ctx.$implicit; var ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.clickRange(range_r6); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var range_r6 = ctx.$implicit;
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r5.disableRange(range_r6))("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c1, range_r6 === ctx_r5.chosenRange));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", range_r6, " ");
} }
function DaterangepickerComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelementStart(1, "ul");
    ɵngcc0.ɵɵtemplate(2, DaterangepickerComponent_div_2_li_2_Template, 3, 5, "li", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.rangesArray);
} }
function DaterangepickerComponent_div_3_table_2_th_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "th");
} }
function DaterangepickerComponent_div_3_table_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "th");
    ɵngcc0.ɵɵelementStart(2, "button", 20);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_3_table_2_ng_container_4_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r22); var ctx_r21 = ɵngcc0.ɵɵnextContext(3); return ctx_r21.clickPrev(ctx_r21.sideEnum.left); });
    ɵngcc0.ɵɵelement(3, "span", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_3_table_2_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "th");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_3_table_2_ng_container_7_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var m_r25 = ctx.$implicit;
    var ctx_r23 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("value", m_r25)("disabled", ctx_r23.calendarVariables.left.dropdowns.inMinYear && m_r25 < ctx_r23.calendarVariables.left.minDate.month() || ctx_r23.calendarVariables.left.dropdowns.inMaxYear && m_r25 > ctx_r23.calendarVariables.left.maxDate.month());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r23.locale.monthNames[m_r25], " ");
} }
function DaterangepickerComponent_div_3_table_2_ng_container_7_mat_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var y_r26 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", y_r26);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", y_r26, " ");
} }
function DaterangepickerComponent_div_3_table_2_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵelementStart(2, "mat-select", 23);
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_3_table_2_ng_container_7_mat_option_3_Template, 2, 3, "mat-option", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 22);
    ɵngcc0.ɵɵelementStart(5, "mat-select", 23);
    ɵngcc0.ɵɵtemplate(6, DaterangepickerComponent_div_3_table_2_ng_container_7_mat_option_6_Template, 2, 2, "mat-option", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r14 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControl", ctx_r14.fromMonthControl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r14.calendarVariables.left.dropdowns.monthArrays);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControl", ctx_r14.fromYearControl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r14.calendarVariables.left.dropdowns.yearArrays);
} }
function DaterangepickerComponent_div_3_table_2_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r15 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ctx_r15.locale.monthNames[ctx_r15.calendarVariables == null ? null : ctx_r15.calendarVariables.left == null ? null : ctx_r15.calendarVariables.left.calendar[1][1].month()], " ", ctx_r15.calendarVariables == null ? null : ctx_r15.calendarVariables.left == null ? null : ctx_r15.calendarVariables.left.calendar[1][1].format(" YYYY"), " ");
} }
function DaterangepickerComponent_div_3_table_2_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    var _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "th");
    ɵngcc0.ɵɵelementStart(2, "button", 20);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_3_table_2_ng_container_9_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r27 = ɵngcc0.ɵɵnextContext(3); return ctx_r27.clickNext(ctx_r27.sideEnum.left); });
    ɵngcc0.ɵɵelement(3, "span", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_3_table_2_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "th");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_3_table_2_th_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 29);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r18.locale.weekLabel);
} }
function DaterangepickerComponent_div_3_table_2_th_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th");
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var dayofweek_r29 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(dayofweek_r29);
} }
function DaterangepickerComponent_div_3_table_2_tr_15_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 29);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var row_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r31 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r31.calendarVariables.left.calendar[row_r30][0].week());
} }
function DaterangepickerComponent_div_3_table_2_tr_15_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 29);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var row_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r32 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r32.calendarVariables.left.calendar[row_r30][0].isoWeek());
} }
function DaterangepickerComponent_div_3_table_2_tr_15_td_3_Template(rf, ctx) { if (rf & 1) {
    var _r38 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 31);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_3_table_2_tr_15_td_3_Template_td_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); var col_r36 = ctx.$implicit; var row_r30 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r37 = ɵngcc0.ɵɵnextContext(3); return ctx_r37.clickDate($event, ctx_r37.sideEnum.left, row_r30, col_r36); })("mouseenter", function DaterangepickerComponent_div_3_table_2_tr_15_td_3_Template_td_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r38); var col_r36 = ctx.$implicit; var row_r30 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r40 = ɵngcc0.ɵɵnextContext(3); return ctx_r40.hoverDate($event, ctx_r40.sideEnum.left, row_r30, col_r36); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var col_r36 = ctx.$implicit;
    var row_r30 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r33 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap(ctx_r33.calendarVariables.left.classes[row_r30][col_r36]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r33.calendarVariables.left.calendar[row_r30][col_r36].date());
} }
function DaterangepickerComponent_div_3_table_2_tr_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵtemplate(1, DaterangepickerComponent_div_3_table_2_tr_15_td_1_Template, 3, 1, "td", 17);
    ɵngcc0.ɵɵtemplate(2, DaterangepickerComponent_div_3_table_2_tr_15_td_2_Template, 3, 1, "td", 17);
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_3_table_2_tr_15_td_3_Template, 3, 3, "td", 30);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var row_r30 = ctx.$implicit;
    var ctx_r20 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap(ctx_r20.calendarVariables.left.classes[row_r30].classList);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r20.showWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r20.showISOWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r20.calendarVariables.left.calCols);
} }
function DaterangepickerComponent_div_3_table_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 13);
    ɵngcc0.ɵɵelementStart(1, "thead");
    ɵngcc0.ɵɵelementStart(2, "tr");
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_3_table_2_th_3_Template, 1, 0, "th", 14);
    ɵngcc0.ɵɵtemplate(4, DaterangepickerComponent_div_3_table_2_ng_container_4_Template, 4, 0, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(5, DaterangepickerComponent_div_3_table_2_ng_container_5_Template, 2, 0, "ng-container", 14);
    ɵngcc0.ɵɵelementStart(6, "th", 15);
    ɵngcc0.ɵɵtemplate(7, DaterangepickerComponent_div_3_table_2_ng_container_7_Template, 7, 4, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(8, DaterangepickerComponent_div_3_table_2_ng_container_8_Template, 2, 2, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, DaterangepickerComponent_div_3_table_2_ng_container_9_Template, 4, 0, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(10, DaterangepickerComponent_div_3_table_2_ng_container_10_Template, 2, 0, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "tr", 16);
    ɵngcc0.ɵɵtemplate(12, DaterangepickerComponent_div_3_table_2_th_12_Template, 3, 1, "th", 17);
    ɵngcc0.ɵɵtemplate(13, DaterangepickerComponent_div_3_table_2_th_13_Template, 3, 1, "th", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "tbody", 18);
    ɵngcc0.ɵɵtemplate(15, DaterangepickerComponent_div_3_table_2_tr_15_Template, 4, 5, "tr", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.showWeekNumbers || ctx_r9.showISOWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r9.calendarVariables.left.minDate || ctx_r9.calendarVariables.left.minDate.isBefore(ctx_r9.calendarVariables.left.calendar.firstDay) && (!ctx_r9.linkedCalendars || true));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(!ctx_r9.calendarVariables.left.minDate || ctx_r9.calendarVariables.left.minDate.isBefore(ctx_r9.calendarVariables.left.calendar.firstDay) && (!ctx_r9.linkedCalendars || true)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.showDropdowns && ctx_r9.calendarVariables.left.dropdowns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r9.showDropdowns || !ctx_r9.calendarVariables.left.dropdowns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (!ctx_r9.calendarVariables.left.maxDate || ctx_r9.calendarVariables.left.maxDate.isAfter(ctx_r9.calendarVariables.left.calendar.lastDay)) && (!ctx_r9.linkedCalendars || ctx_r9.singleDatePicker));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !((!ctx_r9.calendarVariables.left.maxDate || ctx_r9.calendarVariables.left.maxDate.isAfter(ctx_r9.calendarVariables.left.calendar.lastDay)) && (!ctx_r9.linkedCalendars || ctx_r9.singleDatePicker)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.showWeekNumbers || ctx_r9.showISOWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r9.locale.daysOfWeek);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r9.calendarVariables.left.calRows);
} }
function DaterangepickerComponent_div_3_div_3_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var i_r47 = ctx.$implicit;
    var ctx_r43 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("value", i_r47)("disabled", ctx_r43.timepickerVariables.left.disabledHours.indexOf(i_r47) > 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", i_r47, " ");
} }
function DaterangepickerComponent_div_3_div_3_mat_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var i_r48 = ctx.$implicit;
    var index_r49 = ctx.index;
    var ctx_r44 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("value", i_r48)("disabled", ctx_r44.timepickerVariables.left.disabledMinutes.indexOf(i_r48) > 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r44.timepickerVariables.left.minutesLabel[index_r49], " ");
} }
function DaterangepickerComponent_div_3_div_3_mat_select_10_mat_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var i_r51 = ctx.$implicit;
    var index_r52 = ctx.index;
    var ctx_r50 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("value", i_r51)("disabled", ctx_r50.timepickerVariables.left.disabledSeconds.indexOf(i_r51) > 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r50.timepickerVariables.left.secondsLabel[index_r52], " ");
} }
function DaterangepickerComponent_div_3_div_3_mat_select_10_Template(rf, ctx) { if (rf & 1) {
    var _r54 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-select", 40);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_3_div_3_mat_select_10_Template_mat_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r54); var ctx_r53 = ɵngcc0.ɵɵnextContext(3); return ctx_r53.timepickerVariables.left.selectedSecond = $event; })("ngModelChange", function DaterangepickerComponent_div_3_div_3_mat_select_10_Template_mat_select_ngModelChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r54); var ctx_r55 = ɵngcc0.ɵɵnextContext(3); return ctx_r55.timeChanged(ctx_r55.sideEnum.left); });
    ɵngcc0.ɵɵtemplate(1, DaterangepickerComponent_div_3_div_3_mat_select_10_mat_option_1_Template, 2, 3, "mat-option", 24);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r45 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r45.startDate)("ngModel", ctx_r45.timepickerVariables.left.selectedSecond);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r45.timepickerVariables.left.seconds);
} }
function DaterangepickerComponent_div_3_div_3_mat_select_14_Template(rf, ctx) { if (rf & 1) {
    var _r57 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-select", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_3_div_3_mat_select_14_Template_mat_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r57); var ctx_r56 = ɵngcc0.ɵɵnextContext(3); return ctx_r56.timepickerVariables.left.ampmModel = $event; })("ngModelChange", function DaterangepickerComponent_div_3_div_3_mat_select_14_Template_mat_select_ngModelChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r57); var ctx_r58 = ɵngcc0.ɵɵnextContext(3); return ctx_r58.timeChanged(ctx_r58.sideEnum.left); });
    ɵngcc0.ɵɵelementStart(1, "mat-option", 42);
    ɵngcc0.ɵɵtext(2, "AM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-option", 43);
    ɵngcc0.ɵɵtext(4, "PM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r46 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r46.timepickerVariables.left.ampmModel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r46.timepickerVariables.left.amDisabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r46.timepickerVariables.left.pmDisabled);
} }
function DaterangepickerComponent_div_3_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r60 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵelementStart(2, "mat-select", 34);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_3_div_3_Template_mat_select_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r60); var ctx_r59 = ɵngcc0.ɵɵnextContext(2); return ctx_r59.timepickerVariables.left.selectedHour = $event; })("ngModelChange", function DaterangepickerComponent_div_3_div_3_Template_mat_select_ngModelChange_2_listener() { ɵngcc0.ɵɵrestoreView(_r60); var ctx_r61 = ɵngcc0.ɵɵnextContext(2); return ctx_r61.timeChanged(ctx_r61.sideEnum.left); });
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_3_div_3_mat_option_3_Template, 2, 3, "mat-option", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 33);
    ɵngcc0.ɵɵelementStart(5, "mat-select", 35);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_3_div_3_Template_mat_select_ngModelChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r60); var ctx_r62 = ɵngcc0.ɵɵnextContext(2); return ctx_r62.timepickerVariables.left.selectedMinute = $event; })("ngModelChange", function DaterangepickerComponent_div_3_div_3_Template_mat_select_ngModelChange_5_listener() { ɵngcc0.ɵɵrestoreView(_r60); var ctx_r63 = ɵngcc0.ɵɵnextContext(2); return ctx_r63.timeChanged(ctx_r63.sideEnum.left); });
    ɵngcc0.ɵɵtemplate(6, DaterangepickerComponent_div_3_div_3_mat_option_6_Template, 2, 3, "mat-option", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(7, "span", 36);
    ɵngcc0.ɵɵelement(8, "span", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 33);
    ɵngcc0.ɵɵtemplate(10, DaterangepickerComponent_div_3_div_3_mat_select_10_Template, 2, 3, "mat-select", 38);
    ɵngcc0.ɵɵelement(11, "span", 36);
    ɵngcc0.ɵɵelement(12, "span", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "div", 33);
    ɵngcc0.ɵɵtemplate(14, DaterangepickerComponent_div_3_div_3_mat_select_14_Template, 5, 3, "mat-select", 39);
    ɵngcc0.ɵɵelement(15, "span", 36);
    ɵngcc0.ɵɵelement(16, "span", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r10.startDate)("ngModel", ctx_r10.timepickerVariables.left.selectedHour);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r10.timepickerVariables.left.hours);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r10.startDate)("ngModel", ctx_r10.timepickerVariables.left.selectedMinute);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r10.timepickerVariables.left.minutes);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.timePickerSeconds);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r10.timePicker24Hour);
} }
var _c2 = function (a0, a1) { return { right: a0, left: a1 }; };
function DaterangepickerComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵtemplate(2, DaterangepickerComponent_div_3_table_2_Template, 16, 10, "table", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_3_div_3_Template, 17, 8, "div", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx_r2.singleDatePicker, !ctx_r2.singleDatePicker));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.calendarVariables);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.timePicker);
} }
function DaterangepickerComponent_div_4_table_2_th_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "th");
} }
function DaterangepickerComponent_div_4_table_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    var _r77 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "th");
    ɵngcc0.ɵɵelementStart(2, "button", 20);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_4_table_2_ng_container_4_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r77); var ctx_r76 = ɵngcc0.ɵɵnextContext(3); return ctx_r76.clickPrev(ctx_r76.sideEnum.right); });
    ɵngcc0.ɵɵelement(3, "span", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_4_table_2_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "th");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_4_table_2_ng_container_7_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var m_r80 = ctx.$implicit;
    var ctx_r78 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("disabled", ctx_r78.calendarVariables.right.dropdowns.inMinYear && ctx_r78.calendarVariables.right.minDate && m_r80 < ctx_r78.calendarVariables.right.minDate.month() || ctx_r78.calendarVariables.right.dropdowns.inMaxYear && ctx_r78.calendarVariables.right.maxDate && m_r80 > ctx_r78.calendarVariables.right.maxDate.month())("value", m_r80);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r78.locale.monthNames[m_r80], " ");
} }
function DaterangepickerComponent_div_4_table_2_ng_container_7_mat_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var y_r81 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", y_r81);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", y_r81, " ");
} }
function DaterangepickerComponent_div_4_table_2_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵelementStart(2, "mat-select", 23);
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_4_table_2_ng_container_7_mat_option_3_Template, 2, 3, "mat-option", 46);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 22);
    ɵngcc0.ɵɵelementStart(5, "mat-select", 23);
    ɵngcc0.ɵɵtemplate(6, DaterangepickerComponent_div_4_table_2_ng_container_7_mat_option_6_Template, 2, 2, "mat-option", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r69 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControl", ctx_r69.toMonthControl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r69.calendarVariables.right.dropdowns.monthArrays);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControl", ctx_r69.toYearControl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r69.calendarVariables.right.dropdowns.yearArrays);
} }
function DaterangepickerComponent_div_4_table_2_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r70 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ctx_r70.locale.monthNames[ctx_r70.calendarVariables == null ? null : ctx_r70.calendarVariables.right == null ? null : ctx_r70.calendarVariables.right.calendar[1][1].month()], " ", ctx_r70.calendarVariables == null ? null : ctx_r70.calendarVariables.right == null ? null : ctx_r70.calendarVariables.right.calendar[1][1].format(" YYYY"), " ");
} }
function DaterangepickerComponent_div_4_table_2_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    var _r83 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "th");
    ɵngcc0.ɵɵelementStart(2, "button", 20);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_4_table_2_ng_container_9_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r83); var ctx_r82 = ɵngcc0.ɵɵnextContext(3); return ctx_r82.clickNext(ctx_r82.sideEnum.right); });
    ɵngcc0.ɵɵelement(3, "span", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_4_table_2_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "th");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DaterangepickerComponent_div_4_table_2_th_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 29);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r73 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r73.locale.weekLabel);
} }
function DaterangepickerComponent_div_4_table_2_th_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th");
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var dayofweek_r84 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(dayofweek_r84);
} }
function DaterangepickerComponent_div_4_table_2_tr_15_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 29);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var row_r85 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r86 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r86.calendarVariables.right.calendar[row_r85][0].week());
} }
function DaterangepickerComponent_div_4_table_2_tr_15_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 29);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var row_r85 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r87 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r87.calendarVariables.right.calendar[row_r85][0].isoWeek());
} }
function DaterangepickerComponent_div_4_table_2_tr_15_td_3_Template(rf, ctx) { if (rf & 1) {
    var _r93 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 31);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_4_table_2_tr_15_td_3_Template_td_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r93); var col_r91 = ctx.$implicit; var row_r85 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r92 = ɵngcc0.ɵɵnextContext(3); return ctx_r92.clickDate($event, ctx_r92.sideEnum.right, row_r85, col_r91); })("mouseenter", function DaterangepickerComponent_div_4_table_2_tr_15_td_3_Template_td_mouseenter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r93); var col_r91 = ctx.$implicit; var row_r85 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r95 = ɵngcc0.ɵɵnextContext(3); return ctx_r95.hoverDate($event, ctx_r95.sideEnum.right, row_r85, col_r91); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var col_r91 = ctx.$implicit;
    var row_r85 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r88 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap(ctx_r88.calendarVariables.right.classes[row_r85][col_r91]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r88.calendarVariables.right.calendar[row_r85][col_r91].date());
} }
function DaterangepickerComponent_div_4_table_2_tr_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵtemplate(1, DaterangepickerComponent_div_4_table_2_tr_15_td_1_Template, 3, 1, "td", 17);
    ɵngcc0.ɵɵtemplate(2, DaterangepickerComponent_div_4_table_2_tr_15_td_2_Template, 3, 1, "td", 17);
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_4_table_2_tr_15_td_3_Template, 3, 3, "td", 30);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var row_r85 = ctx.$implicit;
    var ctx_r75 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap(ctx_r75.calendarVariables.right.classes[row_r85].classList);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r75.showWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r75.showISOWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r75.calendarVariables.right.calCols);
} }
function DaterangepickerComponent_div_4_table_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 13);
    ɵngcc0.ɵɵelementStart(1, "thead");
    ɵngcc0.ɵɵelementStart(2, "tr");
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_4_table_2_th_3_Template, 1, 0, "th", 14);
    ɵngcc0.ɵɵtemplate(4, DaterangepickerComponent_div_4_table_2_ng_container_4_Template, 4, 0, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(5, DaterangepickerComponent_div_4_table_2_ng_container_5_Template, 2, 0, "ng-container", 14);
    ɵngcc0.ɵɵelementStart(6, "th", 45);
    ɵngcc0.ɵɵtemplate(7, DaterangepickerComponent_div_4_table_2_ng_container_7_Template, 7, 4, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(8, DaterangepickerComponent_div_4_table_2_ng_container_8_Template, 2, 2, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(9, DaterangepickerComponent_div_4_table_2_ng_container_9_Template, 4, 0, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(10, DaterangepickerComponent_div_4_table_2_ng_container_10_Template, 2, 0, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "tr", 16);
    ɵngcc0.ɵɵtemplate(12, DaterangepickerComponent_div_4_table_2_th_12_Template, 3, 1, "th", 17);
    ɵngcc0.ɵɵtemplate(13, DaterangepickerComponent_div_4_table_2_th_13_Template, 3, 1, "th", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "tbody");
    ɵngcc0.ɵɵtemplate(15, DaterangepickerComponent_div_4_table_2_tr_15_Template, 4, 5, "tr", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r64 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r64.showWeekNumbers || ctx_r64.showISOWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (!ctx_r64.calendarVariables.right.minDate || ctx_r64.calendarVariables.right.minDate.isBefore(ctx_r64.calendarVariables.right.calendar.firstDay)) && !ctx_r64.linkedCalendars);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !((!ctx_r64.calendarVariables.right.minDate || ctx_r64.calendarVariables.right.minDate.isBefore(ctx_r64.calendarVariables.right.calendar.firstDay)) && !ctx_r64.linkedCalendars));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r64.showDropdowns && ctx_r64.calendarVariables.right.dropdowns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r64.showDropdowns || !ctx_r64.calendarVariables.right.dropdowns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r64.calendarVariables.right.maxDate || ctx_r64.calendarVariables.right.maxDate.isAfter(ctx_r64.calendarVariables.right.calendar.lastDay) && (!ctx_r64.linkedCalendars || ctx_r64.singleDatePicker || true));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(!ctx_r64.calendarVariables.right.maxDate || ctx_r64.calendarVariables.right.maxDate.isAfter(ctx_r64.calendarVariables.right.calendar.lastDay) && (!ctx_r64.linkedCalendars || ctx_r64.singleDatePicker || true)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r64.showWeekNumbers || ctx_r64.showISOWeekNumbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r64.locale.daysOfWeek);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r64.calendarVariables.right.calRows);
} }
function DaterangepickerComponent_div_4_div_3_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var i_r102 = ctx.$implicit;
    var ctx_r98 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("value", i_r102)("disabled", ctx_r98.timepickerVariables.right.disabledHours.indexOf(i_r102) > 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", i_r102, " ");
} }
function DaterangepickerComponent_div_4_div_3_mat_option_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var i_r103 = ctx.$implicit;
    var index_r104 = ctx.index;
    var ctx_r99 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("value", i_r103)("disabled", ctx_r99.timepickerVariables.right.disabledMinutes.indexOf(i_r103) > 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r99.timepickerVariables.right.minutesLabel[index_r104], " ");
} }
function DaterangepickerComponent_div_4_div_3_mat_select_12_mat_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var i_r106 = ctx.$implicit;
    var index_r107 = ctx.index;
    var ctx_r105 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("value", i_r106)("disabled", ctx_r105.timepickerVariables.right.disabledSeconds.indexOf(i_r106) > 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r105.timepickerVariables.right.secondsLabel[index_r107], " ");
} }
function DaterangepickerComponent_div_4_div_3_mat_select_12_Template(rf, ctx) { if (rf & 1) {
    var _r109 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-select", 40);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_4_div_3_mat_select_12_Template_mat_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r109); var ctx_r108 = ɵngcc0.ɵɵnextContext(3); return ctx_r108.timepickerVariables.right.selectedSecond = $event; })("ngModelChange", function DaterangepickerComponent_div_4_div_3_mat_select_12_Template_mat_select_ngModelChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r109); var ctx_r110 = ɵngcc0.ɵɵnextContext(3); return ctx_r110.timeChanged(ctx_r110.sideEnum.right); });
    ɵngcc0.ɵɵtemplate(1, DaterangepickerComponent_div_4_div_3_mat_select_12_mat_option_1_Template, 2, 3, "mat-option", 24);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r100 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r100.startDate)("ngModel", ctx_r100.timepickerVariables.right.selectedSecond);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r100.timepickerVariables.right.seconds);
} }
function DaterangepickerComponent_div_4_div_3_mat_select_16_Template(rf, ctx) { if (rf & 1) {
    var _r112 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-select", 41);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_4_div_3_mat_select_16_Template_mat_select_ngModelChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r112); var ctx_r111 = ɵngcc0.ɵɵnextContext(3); return ctx_r111.timepickerVariables.right.ampmModel = $event; })("ngModelChange", function DaterangepickerComponent_div_4_div_3_mat_select_16_Template_mat_select_ngModelChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r112); var ctx_r113 = ɵngcc0.ɵɵnextContext(3); return ctx_r113.timeChanged(ctx_r113.sideEnum.right); });
    ɵngcc0.ɵɵelementStart(1, "mat-option", 42);
    ɵngcc0.ɵɵtext(2, "AM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-option", 43);
    ɵngcc0.ɵɵtext(4, "PM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r101 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r101.timepickerVariables.right.ampmModel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r101.timepickerVariables.right.amDisabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r101.timepickerVariables.right.pmDisabled);
} }
function DaterangepickerComponent_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r115 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelementStart(1, "div", 33);
    ɵngcc0.ɵɵelementStart(2, "mat-select", 34);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_4_div_3_Template_mat_select_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r115); var ctx_r114 = ɵngcc0.ɵɵnextContext(2); return ctx_r114.timepickerVariables.right.selectedHour = $event; })("ngModelChange", function DaterangepickerComponent_div_4_div_3_Template_mat_select_ngModelChange_2_listener() { ɵngcc0.ɵɵrestoreView(_r115); var ctx_r116 = ɵngcc0.ɵɵnextContext(2); return ctx_r116.timeChanged(ctx_r116.sideEnum.right); });
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_4_div_3_mat_option_3_Template, 2, 3, "mat-option", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "span", 36);
    ɵngcc0.ɵɵelement(5, "span", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 33);
    ɵngcc0.ɵɵelementStart(7, "mat-select", 35);
    ɵngcc0.ɵɵlistener("ngModelChange", function DaterangepickerComponent_div_4_div_3_Template_mat_select_ngModelChange_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r115); var ctx_r117 = ɵngcc0.ɵɵnextContext(2); return ctx_r117.timepickerVariables.right.selectedMinute = $event; })("ngModelChange", function DaterangepickerComponent_div_4_div_3_Template_mat_select_ngModelChange_7_listener() { ɵngcc0.ɵɵrestoreView(_r115); var ctx_r118 = ɵngcc0.ɵɵnextContext(2); return ctx_r118.timeChanged(ctx_r118.sideEnum.right); });
    ɵngcc0.ɵɵtemplate(8, DaterangepickerComponent_div_4_div_3_mat_option_8_Template, 2, 3, "mat-option", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "span", 36);
    ɵngcc0.ɵɵelement(10, "span", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 33);
    ɵngcc0.ɵɵtemplate(12, DaterangepickerComponent_div_4_div_3_mat_select_12_Template, 2, 3, "mat-select", 38);
    ɵngcc0.ɵɵelement(13, "span", 36);
    ɵngcc0.ɵɵelement(14, "span", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 33);
    ɵngcc0.ɵɵtemplate(16, DaterangepickerComponent_div_4_div_3_mat_select_16_Template, 5, 3, "mat-select", 39);
    ɵngcc0.ɵɵelement(17, "span", 36);
    ɵngcc0.ɵɵelement(18, "span", 37);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r65 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r65.startDate)("ngModel", ctx_r65.timepickerVariables.right.selectedHour);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r65.timepickerVariables.right.hours);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r65.startDate)("ngModel", ctx_r65.timepickerVariables.right.selectedMinute);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r65.timepickerVariables.right.minutes);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r65.timePickerSeconds);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r65.timePicker24Hour);
} }
function DaterangepickerComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 44);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵtemplate(2, DaterangepickerComponent_div_4_table_2_Template, 16, 10, "table", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_4_div_3_Template, 19, 8, "div", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.calendarVariables);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.timePicker);
} }
function DaterangepickerComponent_div_5_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r122 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 53);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_5_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r122); var ctx_r121 = ɵngcc0.ɵɵnextContext(2); return ctx_r121.clear(); });
    ɵngcc0.ɵɵelementStart(1, "span", 54);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementStart(3, "span", 55);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(4, "svg", 56);
    ɵngcc0.ɵɵelement(5, "path", 57);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r119 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("title", ctx_r119.locale.clearLabel);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r119.locale.clearLabel, " ");
} }
function DaterangepickerComponent_div_5_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r124 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 58);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_5_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r124); var ctx_r123 = ɵngcc0.ɵɵnextContext(2); return ctx_r123.clickCancel(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r120 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r120.locale.cancelLabel);
} }
function DaterangepickerComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    var _r126 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 48);
    ɵngcc0.ɵɵelementStart(1, "div", 49);
    ɵngcc0.ɵɵtemplate(2, DaterangepickerComponent_div_5_button_2_Template, 6, 2, "button", 50);
    ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_5_button_3_Template, 2, 1, "button", 51);
    ɵngcc0.ɵɵelementStart(4, "button", 52);
    ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_div_5_Template_button_click_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r126); var ctx_r125 = ɵngcc0.ɵɵnextContext(); return ctx_r125.clickApply($event); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showClearButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showCancel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.applyBtn.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.locale.applyLabel, " ");
} }
var _c3 = function (a0, a1, a2, a3, a4, a5, a6) { return { ltr: a0, rtl: a1, shown: a2, hidden: a3, inline: a4, double: a5, "show-ranges": a6 }; };
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var moment = _moment;
    var LOCALE_CONFIG = new core.InjectionToken('daterangepicker.config');
    /**
     *  DefaultLocaleConfig
     */
    var DefaultLocaleConfig = {
        direction: 'ltr',
        separator: ' - ',
        weekLabel: 'W',
        applyLabel: 'Apply',
        cancelLabel: 'Cancel',
        clearLabel: 'Clear',
        customRangeLabel: 'Custom range',
        daysOfWeek: moment.weekdaysMin(),
        monthNames: moment.monthsShort(),
        firstDay: moment.localeData().firstDayOfWeek(),
    };

    var LocaleService = /** @class */ (function () {
        function LocaleService(_config) {
            this._config = _config;
        }
        Object.defineProperty(LocaleService.prototype, "config", {
            get: function () {
                if (!this._config) {
                    return DefaultLocaleConfig;
                }
                return __assign(__assign({}, DefaultLocaleConfig), this._config);
            },
            enumerable: true,
            configurable: true
        });
        LocaleService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [LOCALE_CONFIG,] }] }
        ]; };
        LocaleService = __decorate([ __param(0, core.Inject(LOCALE_CONFIG))
        ], LocaleService);
LocaleService.ɵfac = function LocaleService_Factory(t) { return new (t || LocaleService)(ɵngcc0.ɵɵinject(LOCALE_CONFIG)); };
LocaleService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocaleService, factory: function (t) { return LocaleService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocaleService, [{
        type: core.Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: core.Inject,
                args: [LOCALE_CONFIG]
            }] }]; }, null); })();
        return LocaleService;
    }());

    var moment$1 = _moment;
    var SideEnum;
    (function (SideEnum) {
        SideEnum["left"] = "left";
        SideEnum["right"] = "right";
    })(SideEnum || (SideEnum = {}));
    var DaterangepickerComponent = /** @class */ (function () {
        function DaterangepickerComponent(el, _ref, _localeService) {
            this.el = el;
            this._ref = _ref;
            this._localeService = _localeService;
            this._old = { start: null, end: null };
            this.calendarVariables = { left: {}, right: {} };
            this.tooltiptext = []; // for storing tooltiptext
            this.timepickerVariables = { left: {}, right: {} };
            this.daterangepicker = { start: new forms.FormControl(), end: new forms.FormControl() };
            this.fromMonthControl = new forms.FormControl();
            this.fromYearControl = new forms.FormControl();
            this.toMonthControl = new forms.FormControl();
            this.toYearControl = new forms.FormControl();
            this.applyBtn = { disabled: false };
            this.startDate = moment$1().startOf('day');
            this.endDate = moment$1().endOf('day');
            this.dateLimit = null;
            // used in template for compile time support of enum values.
            this.sideEnum = SideEnum;
            this.minDate = null;
            this.maxDate = null;
            this.autoApply = false;
            this.singleDatePicker = false;
            this.showDropdowns = false;
            this.showWeekNumbers = false;
            this.showISOWeekNumbers = false;
            this.linkedCalendars = false;
            this.autoUpdateInput = true;
            this.alwaysShowCalendars = false;
            this.maxSpan = false;
            this.lockStartDate = false;
            // timepicker variables
            this.timePicker = false;
            this.timePicker24Hour = false;
            this.timePickerIncrement = 1;
            this.timePickerSeconds = false;
            // end of timepicker variables
            this.showClearButton = false;
            this.firstMonthDayClass = null;
            this.lastMonthDayClass = null;
            this.emptyWeekRowClass = null;
            this.firstDayOfNextMonthClass = null;
            this.lastDayOfPreviousMonthClass = null;
            this._locale = {};
            // custom ranges
            this._ranges = {};
            this.showCancel = false;
            this.keepCalendarOpeningWithRange = false;
            this.showRangeLabelOnInput = false;
            this.customRangeDirection = false;
            this.rangesArray = [];
            this.nowHoveredDate = null;
            this.pickingDate = false;
            // some state information
            this.isShown = false;
            this.inline = true;
            this.leftCalendar = { month: null };
            this.rightCalendar = { month: null };
            this.showCalInRanges = false;
            this.closeOnAutoApply = true;
            this.chosenDate = new core.EventEmitter();
            this.rangeClicked = new core.EventEmitter();
            this.datesUpdated = new core.EventEmitter();
            this.startDateChanged = new core.EventEmitter();
            this.endDateChanged = new core.EventEmitter();
            this.closeDateRangePicker = new core.EventEmitter();
            this.destroy$ = new rxjs.Subject();
        }
        DaterangepickerComponent_1 = DaterangepickerComponent;
        Object.defineProperty(DaterangepickerComponent.prototype, "locale", {
            get: function () {
                return this._locale;
            },
            set: function (value) {
                this._locale = __assign(__assign({}, this._localeService.config), value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangepickerComponent.prototype, "ranges", {
            get: function () {
                return this._ranges;
            },
            set: function (value) {
                this._ranges = value;
                this.renderRanges();
            },
            enumerable: true,
            configurable: true
        });
        DaterangepickerComponent.prototype.isInvalidDate = function (date) {
            return false;
        };
        DaterangepickerComponent.prototype.isCustomDate = function (date) {
            return false;
        };
        DaterangepickerComponent.prototype.isTooltipDate = function (date) {
            return null;
        };
        DaterangepickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.fromMonthControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (month) {
                _this.monthChanged(month, SideEnum.left);
            });
            this.fromYearControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (year) {
                _this.yearChanged(year, SideEnum.left);
            });
            this.toMonthControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (month) {
                _this.monthChanged(month, SideEnum.right);
            });
            this.toYearControl.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (year) {
                _this.yearChanged(year, SideEnum.right);
            });
            this._buildLocale();
            var daysOfWeek = __spread(this.locale.daysOfWeek);
            this.locale.firstDay = this.locale.firstDay % 7;
            if (this.locale.firstDay !== 0) {
                var iterator = this.locale.firstDay;
                while (iterator > 0) {
                    daysOfWeek.push(daysOfWeek.shift());
                    iterator--;
                }
            }
            this.locale.daysOfWeek = daysOfWeek;
            if (this.inline) {
                this._old.start = this.startDate.clone();
                this._old.end = this.endDate.clone();
            }
            if (this.startDate && this.timePicker) {
                this.setStartDate(this.startDate);
                this.renderTimePicker(SideEnum.left);
            }
            if (this.endDate && this.timePicker) {
                this.setEndDate(this.endDate);
                this.renderTimePicker(SideEnum.right);
            }
            this.updateMonthsInView();
            this.renderCalendar(SideEnum.left);
            this.renderCalendar(SideEnum.right);
            this.renderRanges();
        };
        DaterangepickerComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
        };
        DaterangepickerComponent.prototype.renderRanges = function () {
            this.rangesArray = [];
            var start, end;
            if (typeof this.ranges === 'object') {
                for (var range in this.ranges) {
                    if (this.ranges[range]) {
                        if (typeof this.ranges[range][0] === 'string') {
                            start = moment$1(this.ranges[range][0], this.locale.format);
                        }
                        else {
                            start = moment$1(this.ranges[range][0]);
                        }
                        if (typeof this.ranges[range][1] === 'string') {
                            end = moment$1(this.ranges[range][1], this.locale.format);
                        }
                        else {
                            end = moment$1(this.ranges[range][1]);
                        }
                        // If the start or end date exceed those allowed by the minDate or maxSpan
                        // options, shorten the range to the allowable period.
                        if (this.minDate && start.isBefore(this.minDate)) {
                            start = this.minDate.clone();
                        }
                        var maxDate = this.maxDate;
                        if (this.maxSpan && maxDate && start.clone().add(this.maxSpan).isAfter(maxDate)) {
                            maxDate = start.clone().add(this.maxSpan);
                        }
                        if (maxDate && end.isAfter(maxDate)) {
                            end = maxDate.clone();
                        }
                        // If the end of the range is before the minimum or the start of the range is
                        // after the maximum, don't display this range option at all.
                        if ((this.minDate && end.isBefore(this.minDate, this.timePicker ? 'minute' : 'day')) ||
                            (maxDate && start.isAfter(maxDate, this.timePicker ? 'minute' : 'day'))) {
                            continue;
                        }
                        // Support unicode chars in the range names.
                        var elem = document.createElement('textarea');
                        elem.innerHTML = range;
                        var rangeHtml = elem.value;
                        this.ranges[rangeHtml] = [start, end];
                    }
                }
                for (var range in this.ranges) {
                    if (this.ranges[range]) {
                        this.rangesArray.push(range);
                    }
                }
                if (this.showCustomRangeLabel) {
                    this.rangesArray.push(this.locale.customRangeLabel);
                }
                this.showCalInRanges = !this.rangesArray.length || this.alwaysShowCalendars;
                if (!this.timePicker) {
                    this.startDate = this.startDate.startOf('day');
                    this.endDate = this.endDate.endOf('day');
                }
            }
        };
        DaterangepickerComponent.prototype.renderTimePicker = function (side) {
            var selected, minDate;
            var maxDate = this.maxDate;
            if (side === SideEnum.left) {
                (selected = this.startDate.clone()), (minDate = this.minDate);
            }
            else if (side === SideEnum.right && this.endDate) {
                (selected = this.endDate.clone()), (minDate = this.startDate);
            }
            else if (side === SideEnum.right && !this.endDate) {
                // don't have an end date, use the start date then put the selected time for the right side as the time
                selected = this._getDateWithTime(this.startDate, SideEnum.right);
                if (selected.isBefore(this.startDate)) {
                    selected = this.startDate.clone(); //set it back to the start date the time was backwards
                }
                minDate = this.startDate;
            }
            var start = this.timePicker24Hour ? 0 : 1;
            var end = this.timePicker24Hour ? 23 : 12;
            this.timepickerVariables[side] = {
                hours: [],
                minutes: [],
                minutesLabel: [],
                seconds: [],
                secondsLabel: [],
                disabledHours: [],
                disabledMinutes: [],
                disabledSeconds: [],
                selectedHour: 0,
                selectedMinute: 0,
                selectedSecond: 0,
            };
            // generate hours
            for (var i = start; i <= end; i++) {
                var i_in_24 = i;
                if (!this.timePicker24Hour) {
                    i_in_24 = selected.hour() >= 12 ? (i === 12 ? 12 : i + 12) : i === 12 ? 0 : i;
                }
                var time = selected.clone().hour(i_in_24);
                var disabled = false;
                if (minDate && time.minute(59).isBefore(minDate)) {
                    disabled = true;
                }
                if (maxDate && time.minute(0).isAfter(maxDate)) {
                    disabled = true;
                }
                this.timepickerVariables[side].hours.push(i);
                if (i_in_24 === selected.hour() && !disabled) {
                    this.timepickerVariables[side].selectedHour = i;
                }
                else if (disabled) {
                    this.timepickerVariables[side].disabledHours.push(i);
                }
            }
            // generate minutes
            for (var i = 0; i < 60; i += this.timePickerIncrement) {
                var padded = i < 10 ? '0' + i : i;
                var time = selected.clone().minute(i);
                var disabled = false;
                if (minDate && time.second(59).isBefore(minDate)) {
                    disabled = true;
                }
                if (maxDate && time.second(0).isAfter(maxDate)) {
                    disabled = true;
                }
                this.timepickerVariables[side].minutes.push(i);
                this.timepickerVariables[side].minutesLabel.push(padded);
                if (selected.minute() === i && !disabled) {
                    this.timepickerVariables[side].selectedMinute = i;
                }
                else if (disabled) {
                    this.timepickerVariables[side].disabledMinutes.push(i);
                }
            }
            // generate seconds
            if (this.timePickerSeconds) {
                for (var i = 0; i < 60; i++) {
                    var padded = i < 10 ? '0' + i : i;
                    var time = selected.clone().second(i);
                    var disabled = false;
                    if (minDate && time.isBefore(minDate)) {
                        disabled = true;
                    }
                    if (maxDate && time.isAfter(maxDate)) {
                        disabled = true;
                    }
                    this.timepickerVariables[side].seconds.push(i);
                    this.timepickerVariables[side].secondsLabel.push(padded);
                    if (selected.second() === i && !disabled) {
                        this.timepickerVariables[side].selectedSecond = i;
                    }
                    else if (disabled) {
                        this.timepickerVariables[side].disabledSeconds.push(i);
                    }
                }
            }
            // generate AM/PM
            if (!this.timePicker24Hour) {
                if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate)) {
                    this.timepickerVariables[side].amDisabled = true;
                }
                if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate)) {
                    this.timepickerVariables[side].pmDisabled = true;
                }
                if (selected.hour() >= 12) {
                    this.timepickerVariables[side].ampmModel = 'PM';
                }
                else {
                    this.timepickerVariables[side].ampmModel = 'AM';
                }
            }
            this.timepickerVariables[side].selected = selected;
        };
        DaterangepickerComponent.prototype.renderCalendar = function (side) {
            var mainCalendar = side === SideEnum.left ? this.leftCalendar : this.rightCalendar;
            var month = mainCalendar.month.month();
            var year = mainCalendar.month.year();
            var hour = mainCalendar.month.hour();
            var minute = mainCalendar.month.minute();
            var second = mainCalendar.month.second();
            var daysInMonth = moment$1([year, month]).daysInMonth();
            var firstDay = moment$1([year, month, 1]);
            var lastDay = moment$1([year, month, daysInMonth]);
            var lastMonth = moment$1(firstDay).subtract(1, 'month').month();
            var lastYear = moment$1(firstDay).subtract(1, 'month').year();
            var daysInLastMonth = moment$1([lastYear, lastMonth]).daysInMonth();
            var dayOfWeek = firstDay.day();
            // initialize a 6 rows x 7 columns array for the calendar
            var calendar = [];
            calendar.firstDay = firstDay;
            calendar.lastDay = lastDay;
            for (var i = 0; i < 6; i++) {
                calendar[i] = [];
            }
            // populate the calendar with date objects
            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
            if (startDay > daysInLastMonth) {
                startDay -= 7;
            }
            if (dayOfWeek === this.locale.firstDay) {
                startDay = daysInLastMonth - 6;
            }
            var curDate = moment$1([lastYear, lastMonth, startDay, 12, minute, second]);
            for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment$1(curDate).add(24, 'hour')) {
                if (i > 0 && col % 7 === 0) {
                    col = 0;
                    row++;
                }
                calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
                curDate.hour(12);
                if (this.minDate &&
                    calendar[row][col].format('YYYY-MM-DD') === this.minDate.format('YYYY-MM-DD') &&
                    calendar[row][col].isBefore(this.minDate) &&
                    side === 'left') {
                    calendar[row][col] = this.minDate.clone();
                }
                if (this.maxDate &&
                    calendar[row][col].format('YYYY-MM-DD') === this.maxDate.format('YYYY-MM-DD') &&
                    calendar[row][col].isAfter(this.maxDate) &&
                    side === 'right') {
                    calendar[row][col] = this.maxDate.clone();
                }
            }
            // make the calendar object available to hoverDate/clickDate
            if (side === SideEnum.left) {
                this.leftCalendar.calendar = calendar;
            }
            else {
                this.rightCalendar.calendar = calendar;
            }
            //
            // Display the calendar
            //
            var minDate = side === 'left' ? this.minDate : this.startDate;
            var maxDate = this.maxDate;
            // adjust maxDate to reflect the dateLimit setting in order to
            // grey out end dates beyond the dateLimit
            if (this.endDate === null && this.dateLimit) {
                var maxLimit = this.startDate.clone().add(this.dateLimit, 'day').endOf('day');
                if (!maxDate || maxLimit.isBefore(maxDate)) {
                    maxDate = maxLimit;
                }
            }
            this.calendarVariables[side] = {
                month: month,
                year: year,
                hour: hour,
                minute: minute,
                second: second,
                daysInMonth: daysInMonth,
                firstDay: firstDay,
                lastDay: lastDay,
                lastMonth: lastMonth,
                lastYear: lastYear,
                daysInLastMonth: daysInLastMonth,
                dayOfWeek: dayOfWeek,
                // other vars
                calRows: Array.from(Array(6).keys()),
                calCols: Array.from(Array(7).keys()),
                classes: {},
                minDate: minDate,
                maxDate: maxDate,
                calendar: calendar,
            };
            if (this.showDropdowns) {
                var currentMonth = calendar[1][1].month();
                var currentYear = calendar[1][1].year();
                var realCurrentYear = moment$1().year();
                var maxYear = (maxDate && maxDate.year()) || realCurrentYear + 5;
                var minYear = (minDate && minDate.year()) || realCurrentYear - 50;
                var inMinYear = currentYear === minYear;
                var inMaxYear = currentYear === maxYear;
                var years = [];
                for (var y = minYear; y <= maxYear; y++) {
                    years.push(y);
                }
                this.calendarVariables[side].dropdowns = {
                    currentMonth: currentMonth,
                    currentYear: currentYear,
                    maxYear: maxYear,
                    minYear: minYear,
                    inMinYear: inMinYear,
                    inMaxYear: inMaxYear,
                    monthArrays: Array.from(Array(12).keys()),
                    yearArrays: years,
                };
                if (side === SideEnum.left) {
                    this.fromMonthControl.setValue(currentMonth, { emitEvent: false });
                    this.fromYearControl.setValue(currentYear, { emitEvent: false });
                }
                else if (side === SideEnum.right) {
                    this.toMonthControl.setValue(currentMonth, { emitEvent: false });
                    this.toYearControl.setValue(currentYear, { emitEvent: false });
                }
            }
            this._buildCells(calendar, side);
        };
        DaterangepickerComponent.prototype.setStartDate = function (startDate) {
            if (typeof startDate === 'string') {
                this.startDate = moment$1(startDate, this.locale.format);
            }
            if (typeof startDate === 'object') {
                this.pickingDate = true;
                this.startDate = moment$1(startDate);
            }
            if (!this.timePicker) {
                this.pickingDate = true;
                this.startDate = this.startDate.startOf('day');
            }
            if (this.timePicker && this.timePickerIncrement) {
                this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }
            if (this.minDate && this.startDate.isBefore(this.minDate)) {
                this.startDate = this.minDate.clone();
                if (this.timePicker && this.timePickerIncrement) {
                    this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
                }
            }
            if (this.maxDate && this.startDate.isAfter(this.maxDate)) {
                this.startDate = this.maxDate.clone();
                if (this.timePicker && this.timePickerIncrement) {
                    this.startDate.minute(Math.floor(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
                }
            }
            if (!this.isShown) {
                this.updateElement();
            }
            this.startDateChanged.emit({ startDate: this.startDate });
            this.updateMonthsInView();
        };
        DaterangepickerComponent.prototype.setEndDate = function (endDate) {
            if (typeof endDate === 'string') {
                this.endDate = moment$1(endDate, this.locale.format);
            }
            if (typeof endDate === 'object') {
                this.pickingDate = false;
                this.endDate = moment$1(endDate);
            }
            if (!this.timePicker) {
                this.pickingDate = false;
                this.endDate = this.endDate.add(1, 'd').startOf('day').subtract(1, 'second');
            }
            if (this.timePicker && this.timePickerIncrement) {
                this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);
            }
            if (this.endDate.isBefore(this.startDate)) {
                this.endDate = this.startDate.clone();
            }
            if (this.maxDate && this.endDate.isAfter(this.maxDate)) {
                this.endDate = this.maxDate.clone();
            }
            if (this.dateLimit && this.startDate.clone().add(this.dateLimit, 'day').isBefore(this.endDate)) {
                this.endDate = this.startDate.clone().add(this.dateLimit, 'day');
            }
            if (!this.isShown) {
                // this.updateElement();
            }
            this.endDateChanged.emit({ endDate: this.endDate });
            this.updateMonthsInView();
        };
        DaterangepickerComponent.prototype.updateView = function () {
            if (this.timePicker) {
                this.renderTimePicker(SideEnum.left);
                this.renderTimePicker(SideEnum.right);
            }
            this.updateMonthsInView();
            this.updateCalendars();
        };
        DaterangepickerComponent.prototype.updateMonthsInView = function () {
            if (this.endDate) {
                // if both dates are visible already, do nothing
                if (!this.singleDatePicker &&
                    this.leftCalendar.month &&
                    this.rightCalendar.month &&
                    ((this.startDate && this.leftCalendar && this.startDate.format('YYYY-MM') === this.leftCalendar.month.format('YYYY-MM')) ||
                        (this.startDate &&
                            this.rightCalendar &&
                            this.startDate.format('YYYY-MM') === this.rightCalendar.month.format('YYYY-MM'))) &&
                    (this.endDate.format('YYYY-MM') === this.leftCalendar.month.format('YYYY-MM') ||
                        this.endDate.format('YYYY-MM') === this.rightCalendar.month.format('YYYY-MM'))) {
                    return;
                }
                if (this.startDate) {
                    this.leftCalendar.month = this.startDate.clone().date(2);
                    if (!this.linkedCalendars &&
                        (this.endDate.month() !== this.startDate.month() || this.endDate.year() !== this.startDate.year())) {
                        this.rightCalendar.month = this.endDate.clone().date(2);
                    }
                    else {
                        this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                    }
                }
            }
            else {
                if (this.leftCalendar.month.format('YYYY-MM') !== this.startDate.format('YYYY-MM') &&
                    this.rightCalendar.month.format('YYYY-MM') !== this.startDate.format('YYYY-MM')) {
                    this.leftCalendar.month = this.startDate.clone().date(2);
                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
                }
            }
            if (this.maxDate && this.linkedCalendars && !this.singleDatePicker && this.rightCalendar.month > this.maxDate) {
                this.rightCalendar.month = this.maxDate.clone().date(2);
                this.leftCalendar.month = this.maxDate.clone().date(2).subtract(1, 'month');
            }
        };
        /**
         *  This is responsible for updating the calendars
         */
        DaterangepickerComponent.prototype.updateCalendars = function () {
            this.renderCalendar(SideEnum.left);
            this.renderCalendar(SideEnum.right);
            if (this.endDate === null) {
                return;
            }
            this.calculateChosenLabel();
        };
        DaterangepickerComponent.prototype.updateElement = function () {
            var format = this.locale.displayFormat ? this.locale.displayFormat : this.locale.format;
            if (!this.singleDatePicker && this.autoUpdateInput) {
                if (this.startDate && this.endDate) {
                    // if we use ranges and should show range label on input
                    if (this.rangesArray.length &&
                        this.showRangeLabelOnInput === true &&
                        this.chosenRange &&
                        this.locale.customRangeLabel !== this.chosenRange) {
                        this.chosenLabel = this.chosenRange;
                    }
                    else {
                        this.chosenLabel = this.startDate.format(format) + this.locale.separator + this.endDate.format(format);
                    }
                }
            }
            else if (this.autoUpdateInput) {
                this.chosenLabel = this.startDate.format(format);
            }
        };
        /**
         * this should calculate the label
         */
        DaterangepickerComponent.prototype.calculateChosenLabel = function () {
            if (!this.locale || !this.locale.separator) {
                this._buildLocale();
            }
            var customRange = true;
            var i = 0;
            if (this.rangesArray.length > 0) {
                for (var range in this.ranges) {
                    if (this.ranges[range]) {
                        if (this.timePicker) {
                            var format = this.timePickerSeconds ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD HH:mm';
                            // ignore times when comparing dates if time picker seconds is not enabled
                            if (this.startDate.format(format) === this.ranges[range][0].format(format) &&
                                this.endDate.format(format) === this.ranges[range][1].format(format)) {
                                customRange = false;
                                this.chosenRange = this.rangesArray[i];
                                break;
                            }
                        }
                        else {
                            // ignore times when comparing dates if time picker is not enabled
                            if (this.startDate.format('YYYY-MM-DD') === this.ranges[range][0].format('YYYY-MM-DD') &&
                                this.endDate.format('YYYY-MM-DD') === this.ranges[range][1].format('YYYY-MM-DD')) {
                                customRange = false;
                                this.chosenRange = this.rangesArray[i];
                                break;
                            }
                        }
                        i++;
                    }
                }
                if (customRange) {
                    if (this.showCustomRangeLabel) {
                        this.chosenRange = this.locale.customRangeLabel;
                    }
                    else {
                        this.chosenRange = null;
                    }
                    // if custom label: show calendar
                    this.showCalInRanges = true;
                }
            }
            this.updateElement();
        };
        DaterangepickerComponent.prototype.clickApply = function (e) {
            if (!this.singleDatePicker && this.startDate && !this.endDate) {
                this.endDate = this._getDateWithTime(this.startDate, SideEnum.right);
                this.calculateChosenLabel();
            }
            if (this.isInvalidDate && this.startDate && this.endDate) {
                // get if there are invalid date between range
                var d = this.startDate.clone();
                while (d.isBefore(this.endDate)) {
                    if (this.isInvalidDate(d)) {
                        this.endDate = d.subtract(1, 'days');
                        this.calculateChosenLabel();
                        break;
                    }
                    d.add(1, 'days');
                }
            }
            if (this.chosenLabel) {
                this.chosenDate.emit({ chosenLabel: this.chosenLabel, startDate: this.startDate, endDate: this.endDate });
            }
            this.datesUpdated.emit({ startDate: this.startDate, endDate: this.endDate });
            if (e || (this.closeOnAutoApply && !e)) {
                this.hide();
            }
        };
        DaterangepickerComponent.prototype.clickCancel = function () {
            this.startDate = this._old.start;
            this.endDate = this._old.end;
            if (this.inline) {
                this.updateView();
            }
            this.hide();
        };
        /**
         * called when month is changed
         * @param month month represented by a number (0 through 11)
         * @param side left or right
         */
        DaterangepickerComponent.prototype.monthChanged = function (month, side) {
            var year = this.calendarVariables[side].dropdowns.currentYear;
            this.monthOrYearChanged(month, year, side);
        };
        /**
         * called when year is changed
         * @param year year represented by a number
         * @param side left or right
         */
        DaterangepickerComponent.prototype.yearChanged = function (year, side) {
            var month = this.calendarVariables[side].dropdowns.currentMonth;
            this.monthOrYearChanged(month, year, side);
        };
        /**
         * called when time is changed
         * @param side left or right
         */
        DaterangepickerComponent.prototype.timeChanged = function (side) {
            var hour = parseInt(this.timepickerVariables[side].selectedHour, 10);
            var minute = parseInt(this.timepickerVariables[side].selectedMinute, 10);
            var second = this.timePickerSeconds ? parseInt(this.timepickerVariables[side].selectedSecond, 10) : 0;
            if (!this.timePicker24Hour) {
                var ampm = this.timepickerVariables[side].ampmModel;
                if (ampm === 'PM' && hour < 12) {
                    hour += 12;
                }
                if (ampm === 'AM' && hour === 12) {
                    hour = 0;
                }
            }
            if (side === SideEnum.left) {
                var start = this.startDate.clone();
                start.hour(hour);
                start.minute(minute);
                start.second(second);
                this.setStartDate(start);
                if (this.singleDatePicker) {
                    this.endDate = this.startDate.clone();
                }
                else if (this.endDate && this.endDate.format('YYYY-MM-DD') === start.format('YYYY-MM-DD') && this.endDate.isBefore(start)) {
                    this.setEndDate(start.clone());
                }
                else if (!this.endDate && this.timePicker) {
                    var startClone = this._getDateWithTime(start, SideEnum.right);
                    if (startClone.isBefore(start)) {
                        this.timepickerVariables[SideEnum.right].selectedHour = hour;
                        this.timepickerVariables[SideEnum.right].selectedMinute = minute;
                        this.timepickerVariables[SideEnum.right].selectedSecond = second;
                    }
                }
            }
            else if (this.endDate) {
                var end = this.endDate.clone();
                end.hour(hour);
                end.minute(minute);
                end.second(second);
                this.setEndDate(end);
            }
            // update the calendars so all clickable dates reflect the new time component
            this.updateCalendars();
            // re-render the time pickers because changing one selection can affect what's enabled in another
            this.renderTimePicker(SideEnum.left);
            this.renderTimePicker(SideEnum.right);
            if (this.autoApply) {
                this.clickApply();
            }
        };
        /**
         *  call when month or year changed
         * @param month month number 0 -11
         * @param year year eg: 1995
         * @param side left or right
         */
        DaterangepickerComponent.prototype.monthOrYearChanged = function (month, year, side) {
            var isLeft = side === SideEnum.left;
            if (!isLeft) {
                if (year < this.startDate.year() || (year === this.startDate.year() && month < this.startDate.month())) {
                    month = this.startDate.month();
                    year = this.startDate.year();
                }
            }
            if (this.minDate) {
                if (year < this.minDate.year() || (year === this.minDate.year() && month < this.minDate.month())) {
                    month = this.minDate.month();
                    year = this.minDate.year();
                }
            }
            if (this.maxDate) {
                if (year > this.maxDate.year() || (year === this.maxDate.year() && month > this.maxDate.month())) {
                    month = this.maxDate.month();
                    year = this.maxDate.year();
                }
            }
            this.calendarVariables[side].dropdowns.currentYear = year;
            this.calendarVariables[side].dropdowns.currentMonth = month;
            if (isLeft) {
                this.leftCalendar.month.month(month).year(year);
                if (this.linkedCalendars) {
                    this.rightCalendar.month = this.leftCalendar.month.clone().add(1, 'month');
                }
            }
            else {
                this.rightCalendar.month.month(month).year(year);
                if (this.linkedCalendars) {
                    this.leftCalendar.month = this.rightCalendar.month.clone().subtract(1, 'month');
                }
            }
            this.updateCalendars();
        };
        /**
         * Click on previous month
         * @param side left or right calendar
         */
        DaterangepickerComponent.prototype.clickPrev = function (side) {
            if (side === SideEnum.left) {
                this.leftCalendar.month.subtract(1, 'month');
                if (this.linkedCalendars) {
                    this.rightCalendar.month.subtract(1, 'month');
                }
            }
            else {
                this.rightCalendar.month.subtract(1, 'month');
            }
            this.updateCalendars();
        };
        /**
         * Click on next month
         * @param side left or right calendar
         */
        DaterangepickerComponent.prototype.clickNext = function (side) {
            if (side === SideEnum.left) {
                this.leftCalendar.month.add(1, 'month');
            }
            else {
                this.rightCalendar.month.add(1, 'month');
                if (this.linkedCalendars) {
                    this.leftCalendar.month.add(1, 'month');
                }
            }
            this.updateCalendars();
        };
        /**
         * When hovering a date
         * @param e event: get value by e.target.value
         * @param side left or right
         * @param row row position of the current date clicked
         * @param col col position of the current date clicked
         */
        DaterangepickerComponent.prototype.hoverDate = function (e, side, row, col) {
            var leftCalDate = this.calendarVariables.left.calendar[row][col];
            var rightCalDate = this.calendarVariables.right.calendar[row][col];
            if (this.pickingDate) {
                var hoverDate = side === SideEnum.left ? leftCalDate : rightCalDate;
                this.nowHoveredDate = this._isDateRangeInvalid(hoverDate) ? null : hoverDate;
                this.renderCalendar(SideEnum.left);
                this.renderCalendar(SideEnum.right);
            }
            var tooltip = side === SideEnum.left ? this.tooltiptext[leftCalDate] : this.tooltiptext[rightCalDate];
            if (tooltip.length > 0) {
                e.target.setAttribute('title', tooltip);
            }
        };
        /**
         * When selecting a date
         * @param e event: get value by e.target.value
         * @param side left or right
         * @param row row position of the current date clicked
         * @param col col position of the current date clicked
         */
        DaterangepickerComponent.prototype.clickDate = function (e, side, row, col) {
            if (e.target.tagName === 'TD') {
                if (!e.target.classList.contains('available')) {
                    return;
                }
            }
            else if (e.target.tagName === 'SPAN') {
                if (!e.target.parentElement.classList.contains('available')) {
                    return;
                }
            }
            if (this.rangesArray.length) {
                this.chosenRange = this.locale.customRangeLabel;
            }
            var date = side === SideEnum.left ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];
            if ((this.endDate || (date.isBefore(this.startDate, 'day') && this.customRangeDirection === false)) &&
                this.lockStartDate === false) {
                // picking start
                if (this.timePicker) {
                    date = this._getDateWithTime(date, SideEnum.left);
                }
                this.endDate = null;
                this.setStartDate(date.clone());
            }
            else if (!this.endDate && date.isBefore(this.startDate) && this.customRangeDirection === false) {
                // special case: clicking the same date for start/end,
                // but the time of the end date is before the start date
                this.setEndDate(this.startDate.clone());
            }
            else {
                // picking end
                if (this.timePicker) {
                    date = this._getDateWithTime(date, SideEnum.right);
                }
                if (date.isBefore(this.startDate, 'day') === true && this.customRangeDirection === true) {
                    this.setEndDate(this.startDate);
                    this.setStartDate(date.clone());
                }
                else if (this._isDateRangeInvalid(date)) {
                    this.setStartDate(date.clone());
                }
                else {
                    this.setEndDate(date.clone());
                }
                if (this.autoApply) {
                    this.calculateChosenLabel();
                }
            }
            if (this.singleDatePicker) {
                this.setEndDate(this.startDate);
                this.updateElement();
                if (this.autoApply) {
                    this.clickApply();
                }
            }
            this.updateView();
            if (this.autoApply && this.startDate && this.endDate) {
                this.clickApply();
            }
            // This is to cancel the blur event handler if the mouse was in one of the inputs
            e.stopPropagation();
        };
        /**
         *  Click on the custom range
         * @param label
         */
        DaterangepickerComponent.prototype.clickRange = function (label) {
            this.chosenRange = label;
            if (label === this.locale.customRangeLabel) {
                this.isShown = true; // show calendars
                this.showCalInRanges = true;
            }
            else {
                var dates = this.ranges[label];
                this.startDate = dates[0].clone();
                this.endDate = dates[1].clone();
                if (this.showRangeLabelOnInput && label !== this.locale.customRangeLabel) {
                    this.chosenLabel = label;
                }
                else {
                    this.calculateChosenLabel();
                }
                this.showCalInRanges = !this.rangesArray.length || this.alwaysShowCalendars;
                if (!this.timePicker) {
                    this.startDate.startOf('day');
                    this.endDate.endOf('day');
                }
                if (!this.alwaysShowCalendars) {
                    this.isShown = false; // hide calendars
                }
                this.rangeClicked.emit({ label: label, dates: dates });
                if (!this.keepCalendarOpeningWithRange || this.autoApply) {
                    this.clickApply();
                }
                else {
                    if (!this.alwaysShowCalendars) {
                        return this.clickApply();
                    }
                    if (this.maxDate && this.maxDate.isSame(dates[0], 'month')) {
                        this.rightCalendar.month.month(dates[0].month());
                        this.rightCalendar.month.year(dates[0].year());
                        this.leftCalendar.month.month(dates[0].month() - 1);
                        this.leftCalendar.month.year(dates[1].year());
                    }
                    else {
                        this.leftCalendar.month.month(dates[0].month());
                        this.leftCalendar.month.year(dates[0].year());
                        if (this.linkedCalendars || dates[0].month() === dates[1].month()) {
                            var nextMonth = dates[0].clone().add(1, 'month');
                            this.rightCalendar.month.month(nextMonth.month());
                            this.rightCalendar.month.year(nextMonth.year());
                        }
                        else {
                            this.rightCalendar.month.month(dates[1].month());
                            this.rightCalendar.month.year(dates[1].year());
                        }
                    }
                    this.updateCalendars();
                    if (this.timePicker) {
                        this.renderTimePicker(SideEnum.left);
                        this.renderTimePicker(SideEnum.right);
                    }
                }
            }
        };
        DaterangepickerComponent.prototype.show = function (e) {
            if (this.isShown) {
                return;
            }
            this._old.start = this.startDate.clone();
            this._old.end = this.endDate.clone();
            this.isShown = true;
            this.updateView();
        };
        DaterangepickerComponent.prototype.hide = function () {
            this.closeDateRangePicker.emit();
            if (!this.isShown) {
                return;
            }
            // incomplete date selection, revert to last values
            if (!this.endDate) {
                if (this._old.start) {
                    this.startDate = this._old.start.clone();
                }
                if (this._old.end) {
                    this.endDate = this._old.end.clone();
                }
            }
            // if a new date range was selected, invoke the user callback function
            if (!this.startDate.isSame(this._old.start) || !this.endDate.isSame(this._old.end)) {
                // this.callback(this.startDate, this.endDate, this.chosenLabel);
            }
            // if picker is attached to a text input, update it
            this.updateElement();
            this.isShown = false;
            this._ref.detectChanges();
            this.closeDateRangePicker.emit();
        };
        /**
         * handle click on all element in the component, useful for outside of click
         * @param e event
         */
        DaterangepickerComponent.prototype.handleInternalClick = function (e) {
            e.stopPropagation();
        };
        /**
         * update the locale options
         * @param locale
         */
        DaterangepickerComponent.prototype.updateLocale = function (locale) {
            for (var key in locale) {
                if (locale.hasOwnProperty(key)) {
                    this.locale[key] = locale[key];
                    if (key === 'customRangeLabel') {
                        this.renderRanges();
                    }
                }
            }
        };
        /**
         *  clear the daterange picker
         */
        DaterangepickerComponent.prototype.clear = function () {
            this.startDate = moment$1().startOf('day');
            this.endDate = moment$1().endOf('day');
            this.chosenDate.emit({ chosenLabel: '', startDate: null, endDate: null });
            this.datesUpdated.emit({ startDate: null, endDate: null });
            this.hide();
        };
        /**
         * Find out if the selected range should be disabled if it doesn't
         * fit into minDate and maxDate limitations.
         */
        DaterangepickerComponent.prototype.disableRange = function (range) {
            var _this = this;
            if (range === this.locale.customRangeLabel) {
                return false;
            }
            var rangeMarkers = this.ranges[range];
            var areBothBefore = rangeMarkers.every(function (date) {
                if (!_this.minDate) {
                    return false;
                }
                return date.isBefore(_this.minDate);
            });
            var areBothAfter = rangeMarkers.every(function (date) {
                if (!_this.maxDate) {
                    return false;
                }
                return date.isAfter(_this.maxDate);
            });
            return areBothBefore || areBothAfter;
        };
        /**
         *
         * @param date the date to add time
         * @param side left or right
         */
        DaterangepickerComponent.prototype._getDateWithTime = function (date, side) {
            var hour = parseInt(this.timepickerVariables[side].selectedHour, 10);
            if (!this.timePicker24Hour) {
                var ampm = this.timepickerVariables[side].ampmModel;
                if (ampm === 'PM' && hour < 12) {
                    hour += 12;
                }
                if (ampm === 'AM' && hour === 12) {
                    hour = 0;
                }
            }
            var minute = parseInt(this.timepickerVariables[side].selectedMinute, 10);
            var second = this.timePickerSeconds ? parseInt(this.timepickerVariables[side].selectedSecond, 10) : 0;
            return date.clone().hour(hour).minute(minute).second(second);
        };
        /**
         *  build the locale config
         */
        DaterangepickerComponent.prototype._buildLocale = function () {
            this.locale = __assign(__assign({}, this._localeService.config), this.locale);
            if (!this.locale.format) {
                if (this.timePicker) {
                    this.locale.format = moment$1.localeData().longDateFormat('lll');
                }
                else {
                    this.locale.format = moment$1.localeData().longDateFormat('L');
                }
            }
        };
        DaterangepickerComponent.prototype._buildCells = function (calendar, side) {
            for (var row = 0; row < 6; row++) {
                this.calendarVariables[side].classes[row] = {};
                var rowClasses = [];
                if (this.emptyWeekRowClass && !this.hasCurrentMonthDays(this.calendarVariables[side].month, calendar[row])) {
                    rowClasses.push(this.emptyWeekRowClass);
                }
                for (var col = 0; col < 7; col++) {
                    var classes = [];
                    // highlight today's date
                    if (calendar[row][col].isSame(new Date(), 'day')) {
                        classes.push('today');
                    }
                    // highlight weekends
                    if (calendar[row][col].isoWeekday() > 5) {
                        classes.push('weekend');
                    }
                    // grey out the dates in other months displayed at beginning and end of this calendar
                    if (calendar[row][col].month() !== calendar[1][1].month()) {
                        classes.push('off');
                        // mark the last day of the previous month in this calendar
                        if (this.lastDayOfPreviousMonthClass &&
                            (calendar[row][col].month() < calendar[1][1].month() || calendar[1][1].month() === 0) &&
                            calendar[row][col].date() === this.calendarVariables[side].daysInLastMonth) {
                            classes.push(this.lastDayOfPreviousMonthClass);
                        }
                        // mark the first day of the next month in this calendar
                        if (this.firstDayOfNextMonthClass &&
                            (calendar[row][col].month() > calendar[1][1].month() || calendar[row][col].month() === 0) &&
                            calendar[row][col].date() === 1) {
                            classes.push(this.firstDayOfNextMonthClass);
                        }
                    }
                    // mark the first day of the current month with a custom class
                    if (this.firstMonthDayClass &&
                        calendar[row][col].month() === calendar[1][1].month() &&
                        calendar[row][col].date() === calendar.firstDay.date()) {
                        classes.push(this.firstMonthDayClass);
                    }
                    // mark the last day of the current month with a custom class
                    if (this.lastMonthDayClass &&
                        calendar[row][col].month() === calendar[1][1].month() &&
                        calendar[row][col].date() === calendar.lastDay.date()) {
                        classes.push(this.lastMonthDayClass);
                    }
                    // don't allow selection of dates before the minimum date
                    if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day')) {
                        classes.push('off', 'disabled');
                    }
                    // don't allow selection of dates after the maximum date
                    if (this.calendarVariables[side].maxDate && calendar[row][col].isAfter(this.calendarVariables[side].maxDate, 'day')) {
                        classes.push('off', 'disabled');
                    }
                    // don't allow selection of date if a custom function decides it's invalid
                    if (this.isInvalidDate(calendar[row][col])) {
                        classes.push('off', 'disabled', 'invalid');
                    }
                    // highlight the currently selected start date
                    if (this.startDate && calendar[row][col].format('YYYY-MM-DD') === this.startDate.format('YYYY-MM-DD')) {
                        classes.push('active', 'start-date');
                    }
                    // highlight the currently selected end date
                    if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') === this.endDate.format('YYYY-MM-DD')) {
                        classes.push('active', 'end-date');
                    }
                    // highlight dates in-between the selected dates
                    if (((this.nowHoveredDate != null && this.pickingDate) || this.endDate != null) &&
                        calendar[row][col] > this.startDate &&
                        (calendar[row][col] < this.endDate || (calendar[row][col] < this.nowHoveredDate && this.pickingDate)) &&
                        !classes.find(function (el) { return el === 'off'; })) {
                        classes.push('in-range');
                    }
                    // apply custom classes for this date
                    var isCustom = this.isCustomDate(calendar[row][col]);
                    if (isCustom !== false) {
                        if (typeof isCustom === 'string') {
                            classes.push(isCustom);
                        }
                        else {
                            Array.prototype.push.apply(classes, isCustom);
                        }
                    }
                    // apply custom tooltip for this date
                    var isTooltip = this.isTooltipDate(calendar[row][col]);
                    if (isTooltip) {
                        if (typeof isTooltip === 'string') {
                            this.tooltiptext[calendar[row][col]] = isTooltip; // setting tooltiptext for custom date
                        }
                        else {
                            this.tooltiptext[calendar[row][col]] = 'Put the tooltip as the returned value of isTooltipDate';
                        }
                    }
                    else {
                        this.tooltiptext[calendar[row][col]] = '';
                    }
                    // store classes var
                    var cname = '', disabled = false;
                    for (var i = 0; i < classes.length; i++) {
                        cname += classes[i] + ' ';
                        if (classes[i] === 'disabled') {
                            disabled = true;
                        }
                    }
                    if (!disabled) {
                        cname += 'available';
                    }
                    this.calendarVariables[side].classes[row][col] = cname.replace(/^\s+|\s+$/g, '');
                }
                this.calendarVariables[side].classes[row].classList = rowClasses.join(' ');
            }
        };
        /**
         * Find out if the current calendar row has current month days
         * (as opposed to consisting of only previous/next month days)
         */
        DaterangepickerComponent.prototype.hasCurrentMonthDays = function (currentMonth, row) {
            for (var day = 0; day < 7; day++) {
                if (row[day].month() === currentMonth) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Returns true when a date within the range of dates is invalid
         */
        DaterangepickerComponent.prototype._isDateRangeInvalid = function (endDate) {
            var _this = this;
            var days = [];
            var day = this.startDate;
            while (day <= endDate) {
                days.push(day);
                day = day.clone().add(1, 'd');
            }
            return days.some(function (d) { return _this.isInvalidDate(d); });
        };
        var DaterangepickerComponent_1;
        DaterangepickerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: LocaleService }
        ]; };
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "startDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "endDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "dateLimit", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "minDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "maxDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "autoApply", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "singleDatePicker", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "showDropdowns", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "showWeekNumbers", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "showISOWeekNumbers", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "linkedCalendars", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "autoUpdateInput", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "alwaysShowCalendars", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "maxSpan", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "lockStartDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "timePicker", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "timePicker24Hour", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "timePickerIncrement", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "timePickerSeconds", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "showClearButton", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "firstMonthDayClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "lastMonthDayClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "emptyWeekRowClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "firstDayOfNextMonthClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "lastDayOfPreviousMonthClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "locale", null);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "ranges", null);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "showCustomRangeLabel", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "showCancel", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "keepCalendarOpeningWithRange", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "showRangeLabelOnInput", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "customRangeDirection", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "isInvalidDate", null);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "isCustomDate", null);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "isTooltipDate", null);
        __decorate([
            core.Input()
        ], DaterangepickerComponent.prototype, "closeOnAutoApply", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerComponent.prototype, "chosenDate", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerComponent.prototype, "rangeClicked", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerComponent.prototype, "datesUpdated", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerComponent.prototype, "startDateChanged", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerComponent.prototype, "endDateChanged", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerComponent.prototype, "closeDateRangePicker", void 0);
        __decorate([
            core.ViewChild('pickerContainer', { static: true })
        ], DaterangepickerComponent.prototype, "pickerContainer", void 0);
DaterangepickerComponent.ɵfac = function DaterangepickerComponent_Factory(t) { return new (t || DaterangepickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(LocaleService)); };
DaterangepickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DaterangepickerComponent, selectors: [["ngx-daterangepicker-material"]], viewQuery: function DaterangepickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pickerContainer = _t.first);
    } }, hostBindings: function DaterangepickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DaterangepickerComponent_click_HostBindingHandler($event) { return ctx.handleInternalClick($event); });
    } }, inputs: { startDate: "startDate", endDate: "endDate", dateLimit: "dateLimit", minDate: "minDate", maxDate: "maxDate", autoApply: "autoApply", singleDatePicker: "singleDatePicker", showDropdowns: "showDropdowns", showWeekNumbers: "showWeekNumbers", showISOWeekNumbers: "showISOWeekNumbers", linkedCalendars: "linkedCalendars", autoUpdateInput: "autoUpdateInput", alwaysShowCalendars: "alwaysShowCalendars", maxSpan: "maxSpan", lockStartDate: "lockStartDate", timePicker: "timePicker", timePicker24Hour: "timePicker24Hour", timePickerIncrement: "timePickerIncrement", timePickerSeconds: "timePickerSeconds", showClearButton: "showClearButton", firstMonthDayClass: "firstMonthDayClass", lastMonthDayClass: "lastMonthDayClass", emptyWeekRowClass: "emptyWeekRowClass", firstDayOfNextMonthClass: "firstDayOfNextMonthClass", lastDayOfPreviousMonthClass: "lastDayOfPreviousMonthClass", showCancel: "showCancel", keepCalendarOpeningWithRange: "keepCalendarOpeningWithRange", showRangeLabelOnInput: "showRangeLabelOnInput", customRangeDirection: "customRangeDirection", closeOnAutoApply: "closeOnAutoApply", locale: "locale", ranges: "ranges", isInvalidDate: "isInvalidDate", isCustomDate: "isCustomDate", isTooltipDate: "isTooltipDate", showCustomRangeLabel: "showCustomRangeLabel" }, outputs: { chosenDate: "chosenDate", rangeClicked: "rangeClicked", datesUpdated: "datesUpdated", startDateChanged: "startDateChanged", endDateChanged: "endDateChanged", closeDateRangePicker: "closeDateRangePicker" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return DaterangepickerComponent_1; }),
                multi: true
            },
        ])], decls: 6, vars: 13, consts: [[1, "md-drppicker", 3, "ngClass"], ["pickerContainer", ""], ["class", "ranges", 4, "ngIf"], ["class", "calendar", 3, "ngClass", 4, "ngIf"], ["class", "calendar right", 4, "ngIf"], ["class", "buttons", 4, "ngIf"], [1, "ranges"], [4, "ngFor", "ngForOf"], ["type", "button", 3, "disabled", "ngClass", "click"], [1, "calendar", 3, "ngClass"], [1, "calendar-table"], ["class", "table-condensed", 4, "ngIf"], ["class", "calendar-time", 4, "ngIf"], [1, "table-condensed"], [4, "ngIf"], ["colspan", "5", 1, "month", "drp-animate"], [1, "week-days"], ["class", "week", 4, "ngIf"], [1, "drp-animate"], [3, "class", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 1, "navigation-button", 3, "click"], [1, "calendar-icon", "calendar-icon--left"], [1, "dropdowns"], [3, "formControl"], [3, "value", "disabled", 4, "ngFor", "ngForOf"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value", "disabled"], [3, "value"], [1, "calendar-icon", "calendar-icon--right"], [1, "week"], [3, "class", "click", "mouseenter", 4, "ngFor", "ngForOf"], [3, "click", "mouseenter"], [1, "calendar-time"], [1, "select"], [1, "hourselect", 3, "disabled", "ngModel", "ngModelChange"], [1, "minuteselect", 3, "disabled", "ngModel", "ngModelChange"], [1, "select-highlight"], [1, "select-bar"], ["class", "secondselect", 3, "disabled", "ngModel", "ngModelChange", 4, "ngIf"], ["class", "ampmselect", 3, "ngModel", "ngModelChange", 4, "ngIf"], [1, "secondselect", 3, "disabled", "ngModel", "ngModelChange"], [1, "ampmselect", 3, "ngModel", "ngModelChange"], ["value", "AM", 3, "disabled"], ["value", "PM", 3, "disabled"], [1, "calendar", "right"], ["colspan", "5", 1, "month"], [3, "disabled", "value", 4, "ngFor", "ngForOf"], [3, "disabled", "value"], [1, "buttons"], [1, "buttons_input"], ["mat-raised-button", "", "type", "button", 3, "title", "click", 4, "ngIf"], ["mat-raised-button", "", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "color", "primary", 3, "disabled", "click"], ["mat-raised-button", "", "type", "button", 3, "title", "click"], [1, "clear-button"], [1, "clear-icon"], ["viewBox", "0 0 24 24"], ["fill", "currentColor", "d", "M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"], ["mat-raised-button", "", 3, "click"]], template: function DaterangepickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵtemplate(2, DaterangepickerComponent_div_2_Template, 3, 1, "div", 2);
        ɵngcc0.ɵɵtemplate(3, DaterangepickerComponent_div_3_Template, 4, 6, "div", 3);
        ɵngcc0.ɵɵtemplate(4, DaterangepickerComponent_div_4_Template, 4, 2, "div", 4);
        ɵngcc0.ɵɵtemplate(5, DaterangepickerComponent_div_5_Template, 6, 4, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction7(5, _c3, ctx.locale.direction === "ltr", ctx.locale.direction === "rtl", ctx.isShown || ctx.inline, !ctx.isShown && !ctx.inline, ctx.inline, !ctx.singleDatePicker && ctx.showCalInRanges, ctx.rangesArray.length));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rangesArray.length > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCalInRanges);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCalInRanges && !ctx.singleDatePicker);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.autoApply && (!ctx.rangesArray.length || ctx.showCalInRanges && !ctx.singleDatePicker));
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc2.MatButton, ɵngcc3.MatSelect, ɵngcc4.NgControlStatus, ɵngcc4.FormControlDirective, ɵngcc5.MatOption, ɵngcc4.NgModel], styles: [".md-drppicker{border-radius:4px;width:340px;padding:4px;margin-top:-10px;overflow:hidden;font-size:14px;box-shadow:0 2px 4px 0 rgba(0,0,0,.16),0 2px 8px 0 rgba(0,0,0,.12)}.md-drppicker.double{width:auto}.md-drppicker.inline{position:relative;display:inline-block}.md-drppicker:after,.md-drppicker:before{position:absolute;display:inline-block;border-bottom-color:rgba(0,0,0,.2);content:''}.md-drppicker.openscenter:after,.md-drppicker.openscenter:before{left:0;right:0;width:0;margin-left:auto;margin-right:auto}.md-drppicker.single .calendar,.md-drppicker.single .ranges{float:none}.md-drppicker .calendar{max-width:332px;margin:4px}.md-drppicker .calendar.single .calendar-table{border:none}.md-drppicker .calendar td,.md-drppicker .calendar th{padding:1px;white-space:nowrap;text-align:center;min-width:32px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.md-drppicker .calendar td span,.md-drppicker .calendar th span{pointer-events:none}.md-drppicker .calendar-table{border:1px solid transparent;padding:4px}.md-drppicker .calendar-table table{border-spacing:2px;border-collapse:separate}.md-drppicker .ranges{float:none;text-align:left;margin:0}.md-drppicker .ranges ul{list-style:none;margin:0 auto;padding:0;width:100%}.md-drppicker .ranges ul li{font-size:12px}.md-drppicker .ranges ul li button{padding:8px 12px;width:100%;background:0 0;border:none;text-align:left;cursor:pointer;outline:0}.md-drppicker .ranges ul li button[disabled]{opacity:.3}.md-drppicker .ranges ul li button:active{background:0 0}.md-drppicker table{width:100%;margin:0}.md-drppicker td,.md-drppicker th{text-align:center;border-radius:4px;white-space:nowrap;cursor:pointer;height:2em;width:2em}.md-drppicker td.week,.md-drppicker th.week{font-size:80%}.md-drppicker td.start-date{border-radius:2em 0 0 2em}.md-drppicker td.in-range{border-radius:0}.md-drppicker td.end-date{border-radius:0 2em 2em 0}.md-drppicker td.start-date.end-date{border-radius:4px}.md-drppicker td{margin:.25em 0;transition:450ms cubic-bezier(.23,1,.32,1);border-radius:2em;transform:scale(1)}.md-drppicker th.month{width:auto}.md-drppicker option.disabled,.md-drppicker td.disabled{color:#999;cursor:not-allowed;text-decoration:line-through}.md-drppicker .navigation-button{width:32px!important;height:32px!important;line-height:32px!important}.md-drppicker .navigation-button .calendar-icon{transform:rotate(180deg)}.md-drppicker .navigation-button .calendar-icon::after{display:block;content:'';height:6px;width:6px;border-width:0 0 2px 2px;border-style:solid;position:absolute;left:50%;top:50%}.md-drppicker .navigation-button .calendar-icon.calendar-icon--left::after{margin-left:1px;transform:translate(-50%,-50%) rotate(45deg)}.md-drppicker .navigation-button .calendar-icon.calendar-icon--right::after{margin-left:-1px;transform:translate(-50%,-50%) rotate(225deg)}.md-drppicker .dropdowns{width:60px}.md-drppicker .dropdowns+.dropdowns{margin-left:4px}.md-drppicker th.month>div{position:relative;display:inline-block}.md-drppicker .calendar-time{text-align:center;margin:4px auto 0;line-height:30px;position:relative}.md-drppicker .calendar-time .select{display:inline}.md-drppicker .calendar-time .select mat-select{width:46px}.md-drppicker .calendar-time select.disabled{color:#ccc;cursor:not-allowed}.md-drppicker .md-drppicker_input{position:relative;padding:0 30px 0 0}.md-drppicker .md-drppicker_input i,.md-drppicker .md-drppicker_input svg{position:absolute;left:8px;top:8px}.md-drppicker.rtl .label-input{padding-right:28px;padding-left:6px}.md-drppicker.rtl .md-drppicker_input i,.md-drppicker.rtl .md-drppicker_input svg{left:auto;right:8px}.md-drppicker .show-ranges .drp-calendar.left{border-left:1px solid #ddd}.md-drppicker .show-calendar .ranges{margin-top:8px}.md-drppicker [hidden]{display:none}.md-drppicker button+button{margin-left:8px}.md-drppicker .clear-button{display:flex;align-items:center;justify-content:center}.md-drppicker .clear-button .clear-icon{font-size:20px!important}.md-drppicker .clear-button .clear-icon svg{width:1em;height:1em;fill:currentColor;pointer-events:none;top:.125em;position:relative}.md-drppicker .buttons{text-align:right;margin:0 5px 5px 0}@media (min-width:564px){.md-drppicker{width:auto}.md-drppicker.single .calendar.left{clear:none}.md-drppicker.ltr{direction:ltr;text-align:left}.md-drppicker.ltr .calendar.left{clear:left}.md-drppicker.ltr .calendar.left .calendar-table{border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;padding-right:12px}.md-drppicker.ltr .calendar.right{margin-left:0}.md-drppicker.ltr .calendar.right .calendar-table{border-left:none;border-top-left-radius:0;border-bottom-left-radius:0}.md-drppicker.ltr .left .md-drppicker_input,.md-drppicker.ltr .right .md-drppicker_input{padding-right:35px}.md-drppicker.ltr .calendar,.md-drppicker.ltr .ranges{float:left}.md-drppicker.rtl{direction:rtl;text-align:right}.md-drppicker.rtl .calendar.left{clear:right;margin-left:0}.md-drppicker.rtl .calendar.left .calendar-table{border-left:none;border-top-left-radius:0;border-bottom-left-radius:0}.md-drppicker.rtl .calendar.right{margin-right:0}.md-drppicker.rtl .calendar.right .calendar-table{border-right:none;border-top-right-radius:0;border-bottom-right-radius:0}.md-drppicker.rtl .calendar.left .calendar-table,.md-drppicker.rtl .left .md-drppicker_input{padding-left:12px}.md-drppicker.rtl .calendar,.md-drppicker.rtl .ranges{text-align:right;float:right}.drp-animate{transform:translate(0);transition:transform .2s,opacity .2s}.drp-animate.drp-picker-site-this{transition-timing-function:linear}.drp-animate.drp-animate-right{transform:translateX(10%);opacity:0}.drp-animate.drp-animate-left{transform:translateX(-10%);opacity:0}}@media (min-width:730px){.md-drppicker .ranges{width:auto}.md-drppicker.ltr .ranges{float:left}.md-drppicker.rtl .ranges{float:right}.md-drppicker .calendar.left{clear:none!important}}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DaterangepickerComponent, [{
        type: core.Component,
        args: [{
                selector: 'ngx-daterangepicker-material',
                template: "<div\n    class=\"md-drppicker\"\n    #pickerContainer\n    [ngClass]=\"{\n        ltr: locale.direction === 'ltr',\n        rtl: this.locale.direction === 'rtl',\n        shown: isShown || inline,\n        hidden: !isShown && !inline,\n        inline: inline,\n        double: !singleDatePicker && showCalInRanges,\n        'show-ranges': rangesArray.length\n    }\"\n>\n    <div *ngIf=\"rangesArray.length > 0\" class=\"ranges\">\n        <ul>\n            <li *ngFor=\"let range of rangesArray\">\n                <button\n                    type=\"button\"\n                    [disabled]=\"disableRange(range)\"\n                    [ngClass]=\"{ active: range === chosenRange }\"\n                    (click)=\"clickRange(range)\"\n                >\n                    {{ range }}\n                </button>\n            </li>\n        </ul>\n    </div>\n    <div class=\"calendar\" [ngClass]=\"{ right: singleDatePicker, left: !singleDatePicker }\" *ngIf=\"showCalInRanges\">\n        <div class=\"calendar-table\">\n            <table class=\"table-condensed\" *ngIf=\"calendarVariables\">\n                <thead>\n                    <tr>\n                        <th *ngIf=\"showWeekNumbers || showISOWeekNumbers\"></th>\n                        <ng-container\n                            *ngIf=\"\n                                !calendarVariables.left.minDate ||\n                                (calendarVariables.left.minDate.isBefore(calendarVariables.left.calendar.firstDay) &&\n                                    (!this.linkedCalendars || true))\n                            \"\n                        >\n                            <th>\n                                <button class=\"navigation-button\" mat-icon-button (click)=\"clickPrev(sideEnum.left)\">\n                                    <span class=\"calendar-icon calendar-icon--left\"></span>\n                                </button>\n                            </th>\n                        </ng-container>\n                        <ng-container\n                            *ngIf=\"\n                                !(\n                                    !calendarVariables.left.minDate ||\n                                    (calendarVariables.left.minDate.isBefore(calendarVariables.left.calendar.firstDay) &&\n                                        (!this.linkedCalendars || true))\n                                )\n                            \"\n                        >\n                            <th></th>\n                        </ng-container>\n                        <th colspan=\"5\" class=\"month drp-animate\">\n                            <ng-container *ngIf=\"showDropdowns && calendarVariables.left.dropdowns\">\n                                <div class=\"dropdowns\">\n                                    <mat-select [formControl]=\"fromMonthControl\">\n                                        <mat-option\n                                            *ngFor=\"let m of calendarVariables.left.dropdowns.monthArrays\"\n                                            [value]=\"m\"\n                                            [disabled]=\"\n                                                (calendarVariables.left.dropdowns.inMinYear &&\n                                                    m < calendarVariables.left.minDate.month()) ||\n                                                (calendarVariables.left.dropdowns.inMaxYear && m > calendarVariables.left.maxDate.month())\n                                            \"\n                                        >\n                                            {{ locale.monthNames[m] }}\n                                        </mat-option>\n                                    </mat-select>\n                                </div>\n                                <div class=\"dropdowns\">\n                                    <mat-select [formControl]=\"fromYearControl\">\n                                        <mat-option *ngFor=\"let y of calendarVariables.left.dropdowns.yearArrays\" [value]=\"y\">\n                                            {{ y }}\n                                        </mat-option>\n                                    </mat-select>\n                                </div>\n                            </ng-container>\n                            <ng-container *ngIf=\"!showDropdowns || !calendarVariables.left.dropdowns\">\n                                {{ this.locale.monthNames[calendarVariables?.left?.calendar[1][1].month()] }}\n                                {{ calendarVariables?.left?.calendar[1][1].format(' YYYY') }}\n                            </ng-container>\n                        </th>\n                        <ng-container\n                            *ngIf=\"\n                                (!calendarVariables.left.maxDate ||\n                                    calendarVariables.left.maxDate.isAfter(calendarVariables.left.calendar.lastDay)) &&\n                                (!linkedCalendars || singleDatePicker)\n                            \"\n                        >\n                            <th>\n                                <button class=\"navigation-button\" mat-icon-button (click)=\"clickNext(sideEnum.left)\">\n                                    <span class=\"calendar-icon calendar-icon--right\"></span>\n                                </button>\n                            </th>\n                        </ng-container>\n                        <ng-container\n                            *ngIf=\"\n                                !(\n                                    (!calendarVariables.left.maxDate ||\n                                        calendarVariables.left.maxDate.isAfter(calendarVariables.left.calendar.lastDay)) &&\n                                    (!linkedCalendars || singleDatePicker)\n                                )\n                            \"\n                        >\n                            <th></th>\n                        </ng-container>\n                    </tr>\n                    <tr class=\"week-days\">\n                        <th *ngIf=\"showWeekNumbers || showISOWeekNumbers\" class=\"week\">\n                            <span>{{ this.locale.weekLabel }}</span>\n                        </th>\n                        <th *ngFor=\"let dayofweek of locale.daysOfWeek\">\n                            <span>{{ dayofweek }}</span>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody class=\"drp-animate\">\n                    <tr *ngFor=\"let row of calendarVariables.left.calRows\" [class]=\"calendarVariables.left.classes[row].classList\">\n                        <!-- add week number -->\n                        <td class=\"week\" *ngIf=\"showWeekNumbers\">\n                            <span>{{ calendarVariables.left.calendar[row][0].week() }}</span>\n                        </td>\n                        <td class=\"week\" *ngIf=\"showISOWeekNumbers\">\n                            <span>{{ calendarVariables.left.calendar[row][0].isoWeek() }}</span>\n                        </td>\n                        <!-- cal -->\n                        <td\n                            *ngFor=\"let col of calendarVariables.left.calCols\"\n                            [class]=\"calendarVariables.left.classes[row][col]\"\n                            (click)=\"clickDate($event, sideEnum.left, row, col)\"\n                            (mouseenter)=\"hoverDate($event, sideEnum.left, row, col)\"\n                        >\n                            <span>{{ calendarVariables.left.calendar[row][col].date() }}</span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <div class=\"calendar-time\" *ngIf=\"timePicker\">\n            <div class=\"select\">\n                <mat-select\n                    class=\"hourselect\"\n                    [disabled]=\"!startDate\"\n                    [(ngModel)]=\"timepickerVariables.left.selectedHour\"\n                    (ngModelChange)=\"timeChanged(sideEnum.left)\"\n                >\n                    <mat-option\n                        *ngFor=\"let i of timepickerVariables.left.hours\"\n                        [value]=\"i\"\n                        [disabled]=\"timepickerVariables.left.disabledHours.indexOf(i) > -1\"\n                    >\n                        {{ i }}\n                    </mat-option>\n                </mat-select>\n            </div>\n            <div class=\"select\">\n                <mat-select\n                    class=\"minuteselect\"\n                    [disabled]=\"!startDate\"\n                    [(ngModel)]=\"timepickerVariables.left.selectedMinute\"\n                    (ngModelChange)=\"timeChanged(sideEnum.left)\"\n                >\n                    <mat-option\n                        *ngFor=\"let i of timepickerVariables.left.minutes; let index = index\"\n                        [value]=\"i\"\n                        [disabled]=\"timepickerVariables.left.disabledMinutes.indexOf(i) > -1\"\n                    >\n                        {{ timepickerVariables.left.minutesLabel[index] }}\n                    </mat-option>\n                </mat-select>\n                <span class=\"select-highlight\"></span>\n                <span class=\"select-bar\"></span>\n            </div>\n            <div class=\"select\">\n                <mat-select\n                    class=\"secondselect\"\n                    *ngIf=\"timePickerSeconds\"\n                    [disabled]=\"!startDate\"\n                    [(ngModel)]=\"timepickerVariables.left.selectedSecond\"\n                    (ngModelChange)=\"timeChanged(sideEnum.left)\"\n                >\n                    <mat-option\n                        *ngFor=\"let i of timepickerVariables.left.seconds; let index = index\"\n                        [value]=\"i\"\n                        [disabled]=\"timepickerVariables.left.disabledSeconds.indexOf(i) > -1\"\n                    >\n                        {{ timepickerVariables.left.secondsLabel[index] }}\n                    </mat-option>\n                </mat-select>\n                <span class=\"select-highlight\"></span>\n                <span class=\"select-bar\"></span>\n            </div>\n            <div class=\"select\">\n                <mat-select\n                    class=\"ampmselect\"\n                    *ngIf=\"!timePicker24Hour\"\n                    [(ngModel)]=\"timepickerVariables.left.ampmModel\"\n                    (ngModelChange)=\"timeChanged(sideEnum.left)\"\n                >\n                    <mat-option value=\"AM\" [disabled]=\"timepickerVariables.left.amDisabled\">AM</mat-option>\n                    <mat-option value=\"PM\" [disabled]=\"timepickerVariables.left.pmDisabled\">PM</mat-option>\n                </mat-select>\n                <span class=\"select-highlight\"></span>\n                <span class=\"select-bar\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"calendar right\" *ngIf=\"showCalInRanges && !singleDatePicker\">\n        <div class=\"calendar-table\">\n            <table class=\"table-condensed\" *ngIf=\"calendarVariables\">\n                <thead>\n                    <tr>\n                        <th *ngIf=\"showWeekNumbers || showISOWeekNumbers\"></th>\n                        <ng-container\n                            *ngIf=\"\n                                (!calendarVariables.right.minDate ||\n                                    calendarVariables.right.minDate.isBefore(calendarVariables.right.calendar.firstDay)) &&\n                                !this.linkedCalendars\n                            \"\n                        >\n                            <th>\n                                <button class=\"navigation-button\" mat-icon-button (click)=\"clickPrev(sideEnum.right)\">\n                                    <span class=\"calendar-icon calendar-icon--left\"></span>\n                                </button>\n                            </th>\n                        </ng-container>\n                        <ng-container\n                            *ngIf=\"\n                                !(\n                                    (!calendarVariables.right.minDate ||\n                                        calendarVariables.right.minDate.isBefore(calendarVariables.right.calendar.firstDay)) &&\n                                    !this.linkedCalendars\n                                )\n                            \"\n                        >\n                            <th></th>\n                        </ng-container>\n                        <th colspan=\"5\" class=\"month\">\n                            <ng-container *ngIf=\"showDropdowns && calendarVariables.right.dropdowns\">\n                                <div class=\"dropdowns\">\n                                    <mat-select [formControl]=\"toMonthControl\">\n                                        <mat-option\n                                            *ngFor=\"let m of calendarVariables.right.dropdowns.monthArrays\"\n                                            [disabled]=\"\n                                                (calendarVariables.right.dropdowns.inMinYear && calendarVariables.right.minDate &&\n                                                    m < calendarVariables.right.minDate.month()) ||\n                                                (calendarVariables.right.dropdowns.inMaxYear && calendarVariables.right.maxDate &&\n                                                m > calendarVariables.right.maxDate.month())\n                                            \"\n                                            [value]=\"m\"\n                                        >\n                                            {{ locale.monthNames[m] }}\n                                        </mat-option>\n                                    </mat-select>\n                                </div>\n                                <div class=\"dropdowns\">\n                                    <mat-select [formControl]=\"toYearControl\">\n                                        <mat-option *ngFor=\"let y of calendarVariables.right.dropdowns.yearArrays\" [value]=\"y\">\n                                            {{ y }}\n                                        </mat-option>\n                                    </mat-select>\n                                </div>\n                            </ng-container>\n                            <ng-container *ngIf=\"!showDropdowns || !calendarVariables.right.dropdowns\">\n                                {{ this.locale.monthNames[calendarVariables?.right?.calendar[1][1].month()] }}\n                                {{ calendarVariables?.right?.calendar[1][1].format(' YYYY') }}\n                            </ng-container>\n                        </th>\n                        <ng-container\n                            *ngIf=\"\n                                !calendarVariables.right.maxDate ||\n                                (calendarVariables.right.maxDate.isAfter(calendarVariables.right.calendar.lastDay) &&\n                                    (!linkedCalendars || singleDatePicker || true))\n                            \"\n                        >\n                            <th>\n                                <button class=\"navigation-button\" mat-icon-button (click)=\"clickNext(sideEnum.right)\">\n                                    <span class=\"calendar-icon calendar-icon--right\"></span>\n                                </button>\n                            </th>\n                        </ng-container>\n                        <ng-container\n                            *ngIf=\"\n                                !(\n                                    !calendarVariables.right.maxDate ||\n                                    (calendarVariables.right.maxDate.isAfter(calendarVariables.right.calendar.lastDay) &&\n                                        (!linkedCalendars || singleDatePicker || true))\n                                )\n                            \"\n                        >\n                            <th></th>\n                        </ng-container>\n                    </tr>\n\n                    <tr class=\"week-days\">\n                        <th *ngIf=\"showWeekNumbers || showISOWeekNumbers\" class=\"week\">\n                            <span>{{ this.locale.weekLabel }}</span>\n                        </th>\n                        <th *ngFor=\"let dayofweek of locale.daysOfWeek\">\n                            <span>{{ dayofweek }}</span>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let row of calendarVariables.right.calRows\" [class]=\"calendarVariables.right.classes[row].classList\">\n                        <td class=\"week\" *ngIf=\"showWeekNumbers\">\n                            <span>{{ calendarVariables.right.calendar[row][0].week() }}</span>\n                        </td>\n                        <td class=\"week\" *ngIf=\"showISOWeekNumbers\">\n                            <span>{{ calendarVariables.right.calendar[row][0].isoWeek() }}</span>\n                        </td>\n                        <td\n                            *ngFor=\"let col of calendarVariables.right.calCols\"\n                            [class]=\"calendarVariables.right.classes[row][col]\"\n                            (click)=\"clickDate($event, sideEnum.right, row, col)\"\n                            (mouseenter)=\"hoverDate($event, sideEnum.right, row, col)\"\n                        >\n                            <span>{{ calendarVariables.right.calendar[row][col].date() }}</span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <div class=\"calendar-time\" *ngIf=\"timePicker\">\n            <div class=\"select\">\n                <mat-select\n                    class=\"hourselect\"\n                    [disabled]=\"!startDate\"\n                    [(ngModel)]=\"timepickerVariables.right.selectedHour\"\n                    (ngModelChange)=\"timeChanged(sideEnum.right)\"\n                >\n                    <mat-option\n                        *ngFor=\"let i of timepickerVariables.right.hours\"\n                        [value]=\"i\"\n                        [disabled]=\"timepickerVariables.right.disabledHours.indexOf(i) > -1\"\n                    >\n                        {{ i }}\n                    </mat-option>\n                </mat-select>\n                <span class=\"select-highlight\"></span>\n                <span class=\"select-bar\"></span>\n            </div>\n            <div class=\"select\">\n                <mat-select\n                    class=\"minuteselect\"\n                    [disabled]=\"!startDate\"\n                    [(ngModel)]=\"timepickerVariables.right.selectedMinute\"\n                    (ngModelChange)=\"timeChanged(sideEnum.right)\"\n                >\n                    <mat-option\n                        *ngFor=\"let i of timepickerVariables.right.minutes; let index = index\"\n                        [value]=\"i\"\n                        [disabled]=\"timepickerVariables.right.disabledMinutes.indexOf(i) > -1\"\n                    >\n                        {{ timepickerVariables.right.minutesLabel[index] }}\n                    </mat-option>\n                </mat-select>\n                <span class=\"select-highlight\"></span>\n                <span class=\"select-bar\"></span>\n            </div>\n            <div class=\"select\">\n                <mat-select\n                    *ngIf=\"timePickerSeconds\"\n                    class=\"secondselect\"\n                    [disabled]=\"!startDate\"\n                    [(ngModel)]=\"timepickerVariables.right.selectedSecond\"\n                    (ngModelChange)=\"timeChanged(sideEnum.right)\"\n                >\n                    <mat-option\n                        *ngFor=\"let i of timepickerVariables.right.seconds; let index = index\"\n                        [value]=\"i\"\n                        [disabled]=\"timepickerVariables.right.disabledSeconds.indexOf(i) > -1\"\n                    >\n                        {{ timepickerVariables.right.secondsLabel[index] }}\n                    </mat-option>\n                </mat-select>\n                <span class=\"select-highlight\"></span>\n                <span class=\"select-bar\"></span>\n            </div>\n            <div class=\"select\">\n                <mat-select\n                    *ngIf=\"!timePicker24Hour\"\n                    class=\"ampmselect\"\n                    [(ngModel)]=\"timepickerVariables.right.ampmModel\"\n                    (ngModelChange)=\"timeChanged(sideEnum.right)\"\n                >\n                    <mat-option value=\"AM\" [disabled]=\"timepickerVariables.right.amDisabled\">AM</mat-option>\n                    <mat-option value=\"PM\" [disabled]=\"timepickerVariables.right.pmDisabled\">PM</mat-option>\n                </mat-select>\n                <span class=\"select-highlight\"></span>\n                <span class=\"select-bar\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"buttons\" *ngIf=\"!autoApply && (!rangesArray.length || (showCalInRanges && !singleDatePicker))\">\n        <div class=\"buttons_input\">\n            <button *ngIf=\"showClearButton\" mat-raised-button type=\"button\" [title]=\"locale.clearLabel\" (click)=\"clear()\">\n                <span class=\"clear-button\">\n                    {{ locale.clearLabel }}\n                    <span class=\"clear-icon\">\n                        <svg viewBox=\"0 0 24 24\">\n                            <path fill=\"currentColor\" d=\"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\" />\n                        </svg>\n                    </span>\n                </span>\n            </button>\n            <button *ngIf=\"showCancel\" mat-raised-button (click)=\"clickCancel()\">{{ locale.cancelLabel }}</button>\n            <button [disabled]=\"applyBtn.disabled\" mat-raised-button color=\"primary\" (click)=\"clickApply($event)\">\n                {{ locale.applyLabel }}\n            </button>\n        </div>\n    </div>\n</div>\n",
                host: {
                    '(click)': 'handleInternalClick($event)'
                },
                encapsulation: core.ViewEncapsulation.None,
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return DaterangepickerComponent_1; }),
                        multi: true
                    },
                ],
                styles: [".md-drppicker{border-radius:4px;width:340px;padding:4px;margin-top:-10px;overflow:hidden;font-size:14px;box-shadow:0 2px 4px 0 rgba(0,0,0,.16),0 2px 8px 0 rgba(0,0,0,.12)}.md-drppicker.double{width:auto}.md-drppicker.inline{position:relative;display:inline-block}.md-drppicker:after,.md-drppicker:before{position:absolute;display:inline-block;border-bottom-color:rgba(0,0,0,.2);content:''}.md-drppicker.openscenter:after,.md-drppicker.openscenter:before{left:0;right:0;width:0;margin-left:auto;margin-right:auto}.md-drppicker.single .calendar,.md-drppicker.single .ranges{float:none}.md-drppicker .calendar{max-width:332px;margin:4px}.md-drppicker .calendar.single .calendar-table{border:none}.md-drppicker .calendar td,.md-drppicker .calendar th{padding:1px;white-space:nowrap;text-align:center;min-width:32px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.md-drppicker .calendar td span,.md-drppicker .calendar th span{pointer-events:none}.md-drppicker .calendar-table{border:1px solid transparent;padding:4px}.md-drppicker .calendar-table table{border-spacing:2px;border-collapse:separate}.md-drppicker .ranges{float:none;text-align:left;margin:0}.md-drppicker .ranges ul{list-style:none;margin:0 auto;padding:0;width:100%}.md-drppicker .ranges ul li{font-size:12px}.md-drppicker .ranges ul li button{padding:8px 12px;width:100%;background:0 0;border:none;text-align:left;cursor:pointer;outline:0}.md-drppicker .ranges ul li button[disabled]{opacity:.3}.md-drppicker .ranges ul li button:active{background:0 0}.md-drppicker table{width:100%;margin:0}.md-drppicker td,.md-drppicker th{text-align:center;border-radius:4px;white-space:nowrap;cursor:pointer;height:2em;width:2em}.md-drppicker td.week,.md-drppicker th.week{font-size:80%}.md-drppicker td.start-date{border-radius:2em 0 0 2em}.md-drppicker td.in-range{border-radius:0}.md-drppicker td.end-date{border-radius:0 2em 2em 0}.md-drppicker td.start-date.end-date{border-radius:4px}.md-drppicker td{margin:.25em 0;transition:450ms cubic-bezier(.23,1,.32,1);border-radius:2em;transform:scale(1)}.md-drppicker th.month{width:auto}.md-drppicker option.disabled,.md-drppicker td.disabled{color:#999;cursor:not-allowed;text-decoration:line-through}.md-drppicker .navigation-button{width:32px!important;height:32px!important;line-height:32px!important}.md-drppicker .navigation-button .calendar-icon{transform:rotate(180deg)}.md-drppicker .navigation-button .calendar-icon::after{display:block;content:'';height:6px;width:6px;border-width:0 0 2px 2px;border-style:solid;position:absolute;left:50%;top:50%}.md-drppicker .navigation-button .calendar-icon.calendar-icon--left::after{margin-left:1px;transform:translate(-50%,-50%) rotate(45deg)}.md-drppicker .navigation-button .calendar-icon.calendar-icon--right::after{margin-left:-1px;transform:translate(-50%,-50%) rotate(225deg)}.md-drppicker .dropdowns{width:60px}.md-drppicker .dropdowns+.dropdowns{margin-left:4px}.md-drppicker th.month>div{position:relative;display:inline-block}.md-drppicker .calendar-time{text-align:center;margin:4px auto 0;line-height:30px;position:relative}.md-drppicker .calendar-time .select{display:inline}.md-drppicker .calendar-time .select mat-select{width:46px}.md-drppicker .calendar-time select.disabled{color:#ccc;cursor:not-allowed}.md-drppicker .md-drppicker_input{position:relative;padding:0 30px 0 0}.md-drppicker .md-drppicker_input i,.md-drppicker .md-drppicker_input svg{position:absolute;left:8px;top:8px}.md-drppicker.rtl .label-input{padding-right:28px;padding-left:6px}.md-drppicker.rtl .md-drppicker_input i,.md-drppicker.rtl .md-drppicker_input svg{left:auto;right:8px}.md-drppicker .show-ranges .drp-calendar.left{border-left:1px solid #ddd}.md-drppicker .show-calendar .ranges{margin-top:8px}.md-drppicker [hidden]{display:none}.md-drppicker button+button{margin-left:8px}.md-drppicker .clear-button{display:flex;align-items:center;justify-content:center}.md-drppicker .clear-button .clear-icon{font-size:20px!important}.md-drppicker .clear-button .clear-icon svg{width:1em;height:1em;fill:currentColor;pointer-events:none;top:.125em;position:relative}.md-drppicker .buttons{text-align:right;margin:0 5px 5px 0}@media (min-width:564px){.md-drppicker{width:auto}.md-drppicker.single .calendar.left{clear:none}.md-drppicker.ltr{direction:ltr;text-align:left}.md-drppicker.ltr .calendar.left{clear:left}.md-drppicker.ltr .calendar.left .calendar-table{border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;padding-right:12px}.md-drppicker.ltr .calendar.right{margin-left:0}.md-drppicker.ltr .calendar.right .calendar-table{border-left:none;border-top-left-radius:0;border-bottom-left-radius:0}.md-drppicker.ltr .left .md-drppicker_input,.md-drppicker.ltr .right .md-drppicker_input{padding-right:35px}.md-drppicker.ltr .calendar,.md-drppicker.ltr .ranges{float:left}.md-drppicker.rtl{direction:rtl;text-align:right}.md-drppicker.rtl .calendar.left{clear:right;margin-left:0}.md-drppicker.rtl .calendar.left .calendar-table{border-left:none;border-top-left-radius:0;border-bottom-left-radius:0}.md-drppicker.rtl .calendar.right{margin-right:0}.md-drppicker.rtl .calendar.right .calendar-table{border-right:none;border-top-right-radius:0;border-bottom-right-radius:0}.md-drppicker.rtl .calendar.left .calendar-table,.md-drppicker.rtl .left .md-drppicker_input{padding-left:12px}.md-drppicker.rtl .calendar,.md-drppicker.rtl .ranges{text-align:right;float:right}.drp-animate{transform:translate(0);transition:transform .2s,opacity .2s}.drp-animate.drp-picker-site-this{transition-timing-function:linear}.drp-animate.drp-animate-right{transform:translateX(10%);opacity:0}.drp-animate.drp-animate-left{transform:translateX(-10%);opacity:0}}@media (min-width:730px){.md-drppicker .ranges{width:auto}.md-drppicker.ltr .ranges{float:left}.md-drppicker.rtl .ranges{float:right}.md-drppicker .calendar.left{clear:none!important}}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: LocaleService }]; }, { startDate: [{
            type: core.Input
        }], endDate: [{
            type: core.Input
        }], dateLimit: [{
            type: core.Input
        }], minDate: [{
            type: core.Input
        }], maxDate: [{
            type: core.Input
        }], autoApply: [{
            type: core.Input
        }], singleDatePicker: [{
            type: core.Input
        }], showDropdowns: [{
            type: core.Input
        }], showWeekNumbers: [{
            type: core.Input
        }], showISOWeekNumbers: [{
            type: core.Input
        }], linkedCalendars: [{
            type: core.Input
        }], autoUpdateInput: [{
            type: core.Input
        }], alwaysShowCalendars: [{
            type: core.Input
        }], maxSpan: [{
            type: core.Input
        }], lockStartDate: [{
            type: core.Input
        }], timePicker: [{
            type: core.Input
        }], timePicker24Hour: [{
            type: core.Input
        }], timePickerIncrement: [{
            type: core.Input
        }], timePickerSeconds: [{
            type: core.Input
        }], showClearButton: [{
            type: core.Input
        }], firstMonthDayClass: [{
            type: core.Input
        }], lastMonthDayClass: [{
            type: core.Input
        }], emptyWeekRowClass: [{
            type: core.Input
        }], firstDayOfNextMonthClass: [{
            type: core.Input
        }], lastDayOfPreviousMonthClass: [{
            type: core.Input
        }], showCancel: [{
            type: core.Input
        }], keepCalendarOpeningWithRange: [{
            type: core.Input
        }], showRangeLabelOnInput: [{
            type: core.Input
        }], customRangeDirection: [{
            type: core.Input
        }], closeOnAutoApply: [{
            type: core.Input
        }], chosenDate: [{
            type: core.Output
        }], rangeClicked: [{
            type: core.Output
        }], datesUpdated: [{
            type: core.Output
        }], startDateChanged: [{
            type: core.Output
        }], endDateChanged: [{
            type: core.Output
        }], closeDateRangePicker: [{
            type: core.Output
        }], locale: [{
            type: core.Input
        }], ranges: [{
            type: core.Input
        }], isInvalidDate: [{
            type: core.Input
        }], isCustomDate: [{
            type: core.Input
        }], isTooltipDate: [{
            type: core.Input
        }], showCustomRangeLabel: [{
            type: core.Input
        }], pickerContainer: [{
            type: core.ViewChild,
            args: ['pickerContainer', { static: true }]
        }] }); })();
        return DaterangepickerComponent;
    }());

    var moment$2 = _moment;
    var DaterangepickerDirective = /** @class */ (function () {
        function DaterangepickerDirective(_changeDetectorRef, differs, _localeService, elementRef, overlay) {
            this._changeDetectorRef = _changeDetectorRef;
            this.differs = differs;
            this._localeService = _localeService;
            this.elementRef = elementRef;
            this.overlay = overlay;
            this._onChange = Function.prototype;
            this._onTouched = Function.prototype;
            this._validatorChange = Function.prototype;
            this.dateLimit = null;
            this.ranges = {};
            this.opens = 'center';
            this.drops = 'down';
            this.showCancel = false;
            this.lockStartDate = false;
            this.timePicker = false;
            this.timePicker24Hour = false;
            this.timePickerIncrement = 1;
            this.timePickerSeconds = false;
            this.closeOnAutoApply = true;
            this._locale = {};
            this._endKey = 'endDate';
            this._startKey = 'startDate';
            this.notForChangesProperty = ['locale', 'endKey', 'startKey'];
            this.change = new core.EventEmitter();
            this.rangeClicked = new core.EventEmitter();
            this.datesUpdated = new core.EventEmitter();
            this.startDateChanged = new core.EventEmitter();
            this.endDateChanged = new core.EventEmitter();
            this.destroy$ = new rxjs.Subject();
            this.isInvalidDate = function (date) { return false; };
            this.isCustomDate = function (date) { return false; };
            this.isTooltipDate = function (date) { return null; };
        }
        DaterangepickerDirective_1 = DaterangepickerDirective;
        Object.defineProperty(DaterangepickerDirective.prototype, "locale", {
            get: function () {
                return this._locale;
            },
            set: function (value) {
                this._locale = __assign(__assign({}, this._localeService.config), value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangepickerDirective.prototype, "startKey", {
            set: function (value) {
                if (value !== null) {
                    this._startKey = value;
                }
                else {
                    this._startKey = 'startDate';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangepickerDirective.prototype, "endKey", {
            set: function (value) {
                if (value !== null) {
                    this._endKey = value;
                }
                else {
                    this._endKey = 'endDate';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangepickerDirective.prototype, "value", {
            get: function () {
                return this._value || null;
            },
            set: function (val) {
                this._value = val;
                this._onChange(val);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        DaterangepickerDirective.prototype.ngOnInit = function () {
            this._buildLocale();
        };
        DaterangepickerDirective.prototype.ngOnChanges = function (changes) {
            for (var change in changes) {
                if (changes.hasOwnProperty(change)) {
                    if (this.componentRef && this.notForChangesProperty.indexOf(change) === -1) {
                        this.componentRef[change] = changes[change].currentValue;
                    }
                }
            }
        };
        DaterangepickerDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
        };
        DaterangepickerDirective.prototype.onBlur = function () {
            this._onTouched();
        };
        DaterangepickerDirective.prototype.open = function () {
            var _this = this;
            if (this.overlayRef) {
                this.hide();
            }
            var originX, overlayX;
            switch (this.opens) {
                case 'left':
                    originX = 'end';
                    overlayX = 'end';
                    break;
                case 'center':
                    originX = 'center';
                    overlayX = 'center';
                    break;
                case 'right':
                    originX = 'start';
                    overlayX = 'start';
                    break;
            }
            this.overlayRef = this.overlay.create({
                backdropClass: 'cdk-overlay-transparent-backdrop',
                hasBackdrop: true,
                scrollStrategy: this.overlay.scrollStrategies.reposition(),
                positionStrategy: this.overlay
                    .position()
                    .flexibleConnectedTo(this.elementRef.nativeElement)
                    .withPositions([
                    {
                        offsetY: this.drops === 'up' ? 0 : 13,
                        originX: originX,
                        originY: this.drops === 'up' ? 'top' : 'bottom',
                        overlayX: overlayX,
                        overlayY: this.drops === 'up' ? 'bottom' : 'top',
                    },
                ]),
            });
            var dateRangePickerPortal = new portal.ComponentPortal(DaterangepickerComponent);
            this.componentRef = this.overlayRef.attach(dateRangePickerPortal);
            // Assign all inputs
            this.componentRef.instance.minDate = this.minDate;
            this.componentRef.instance.maxDate = this.maxDate;
            this.componentRef.instance.autoApply = this.autoApply;
            this.componentRef.instance.alwaysShowCalendars = this.alwaysShowCalendars;
            this.componentRef.instance.showCustomRangeLabel = this.showCustomRangeLabel;
            this.componentRef.instance.linkedCalendars = this.linkedCalendars;
            this.componentRef.instance.dateLimit = this.dateLimit;
            this.componentRef.instance.singleDatePicker = this.singleDatePicker;
            this.componentRef.instance.showWeekNumbers = this.showWeekNumbers;
            this.componentRef.instance.showISOWeekNumbers = this.showISOWeekNumbers;
            this.componentRef.instance.showDropdowns = this.showDropdowns;
            this.componentRef.instance.showClearButton = this.showClearButton;
            this.componentRef.instance.customRangeDirection = this.customRangeDirection;
            this.componentRef.instance.ranges = this.ranges;
            this.componentRef.instance.firstMonthDayClass = this.firstMonthDayClass;
            this.componentRef.instance.lastMonthDayClass = this.lastMonthDayClass;
            this.componentRef.instance.emptyWeekRowClass = this.emptyWeekRowClass;
            this.componentRef.instance.firstDayOfNextMonthClass = this.firstDayOfNextMonthClass;
            this.componentRef.instance.lastDayOfPreviousMonthClass = this.lastDayOfPreviousMonthClass;
            this.componentRef.instance.keepCalendarOpeningWithRange = this.keepCalendarOpeningWithRange;
            this.componentRef.instance.showRangeLabelOnInput = this.showRangeLabelOnInput;
            this.componentRef.instance.showCancel = this.showCancel;
            this.componentRef.instance.lockStartDate = this.lockStartDate;
            this.componentRef.instance.timePicker = this.timePicker;
            this.componentRef.instance.timePicker24Hour = this.timePicker24Hour;
            this.componentRef.instance.timePickerIncrement = this.timePickerIncrement;
            this.componentRef.instance.timePickerSeconds = this.timePickerSeconds;
            this.componentRef.instance.closeOnAutoApply = this.closeOnAutoApply;
            this.componentRef.instance.locale = this.locale;
            this.componentRef.instance.isInvalidDate = this.isInvalidDate;
            this.componentRef.instance.isCustomDate = this.isCustomDate;
            this.componentRef.instance.isTooltipDate = this.isTooltipDate;
            // Set the value
            this.setValue(this.value);
            var localeDiffer = this.differs.find(this.locale).create();
            if (localeDiffer) {
                var changes = localeDiffer.diff(this.locale);
                if (changes) {
                    this.componentRef.instance.updateLocale(this.locale);
                }
            }
            // Subscribe to all outputs
            this.componentRef.instance.startDateChanged
                .asObservable()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (itemChanged) {
                _this.startDateChanged.emit(itemChanged);
            });
            this.componentRef.instance.endDateChanged
                .asObservable()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (itemChanged) {
                _this.endDateChanged.emit(itemChanged);
            });
            this.componentRef.instance.rangeClicked
                .asObservable()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (range) {
                _this.rangeClicked.emit(range);
            });
            this.componentRef.instance.datesUpdated
                .asObservable()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (range) {
                _this.datesUpdated.emit(range);
            });
            this.componentRef.instance.chosenDate
                .asObservable()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (chosenDate) {
                var _a;
                if (chosenDate) {
                    var endDate = chosenDate.endDate, startDate = chosenDate.startDate;
                    _this.value = (_a = {}, _a[_this._startKey] = startDate, _a[_this._endKey] = endDate, _a);
                    _this.change.emit(_this.value);
                    if (typeof chosenDate.chosenLabel === 'string') {
                        _this.elementRef.nativeElement.value = chosenDate.chosenLabel;
                    }
                    _this.hide();
                }
            });
            this.componentRef.instance.closeDateRangePicker
                .asObservable()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.hide();
            });
            // Close the DateRangePicker when the backdrop is clicked
            this.overlayRef
                .backdropClick()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.hide();
            });
        };
        DaterangepickerDirective.prototype.hide = function () {
            if (this.overlayRef) {
                this.overlayRef.dispose();
                this.overlayRef = null;
                this.componentRef = null;
            }
        };
        DaterangepickerDirective.prototype.toggle = function () {
            if (this.overlayRef) {
                this.hide();
            }
            else {
                this.open();
            }
        };
        DaterangepickerDirective.prototype.clear = function () {
            if (this.componentRef) {
                this.componentRef.instance.clear();
            }
        };
        DaterangepickerDirective.prototype.writeValue = function (value) {
            var _a, _b;
            if (_moment.isMoment(value)) {
                this.value = (_a = {}, _a[this._startKey] = value, _a);
            }
            else if (value) {
                this.value = (_b = {}, _b[this._startKey] = moment$2(value[this._startKey]), _b[this._endKey] = moment$2(value[this._endKey]), _b);
            }
            else {
                this.value = null;
            }
            this.setValue(this.value);
        };
        DaterangepickerDirective.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        DaterangepickerDirective.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        DaterangepickerDirective.prototype.setValue = function (value) {
            if (this.componentRef) {
                if (value) {
                    if (value[this._startKey]) {
                        this.componentRef.instance.setStartDate(value[this._startKey]);
                    }
                    if (value[this._endKey]) {
                        this.componentRef.instance.setEndDate(value[this._endKey]);
                    }
                    this.componentRef.instance.calculateChosenLabel();
                    if (this.componentRef.instance.chosenLabel) {
                        this.elementRef.nativeElement.value = this.componentRef.instance.chosenLabel;
                    }
                }
                else {
                    this.componentRef.instance.clear();
                }
            }
            this.elementRef.nativeElement.value = value ? this.calculateChosenLabel(value[this._startKey], value[this._endKey]) : null;
        };
        DaterangepickerDirective.prototype.inputChanged = function (e) {
            if (e.target.tagName.toLowerCase() !== 'input') {
                return;
            }
            if (!e.target.value.length) {
                return;
            }
            if (this.componentRef) {
                var dateString = e.target.value.split(this.componentRef.instance.locale.separator);
                var start = null, end = null;
                if (dateString.length === 2) {
                    start = moment$2(dateString[0], this.componentRef.instance.locale.format);
                    end = moment$2(dateString[1], this.componentRef.instance.locale.format);
                }
                if (this.singleDatePicker || start === null || end === null) {
                    start = moment$2(e.target.value, this.componentRef.instance.locale.format);
                    end = start;
                }
                if (!start.isValid() || !end.isValid()) {
                    return;
                }
                this.componentRef.instance.setStartDate(start);
                this.componentRef.instance.setEndDate(end);
                this.componentRef.instance.updateView();
            }
        };
        DaterangepickerDirective.prototype.calculateChosenLabel = function (startDate, endDate) {
            var format = this.locale.displayFormat ? this.locale.displayFormat : this.locale.format;
            if (this.singleDatePicker) {
                return startDate.format(format);
            }
            if (startDate && endDate) {
                return startDate.format(format) + this.locale.separator + endDate.format(format);
            }
            return null;
        };
        /**
         *  build the locale config
         */
        DaterangepickerDirective.prototype._buildLocale = function () {
            this.locale = __assign(__assign({}, this._localeService.config), this.locale);
            if (!this.locale.format) {
                if (this.timePicker) {
                    this.locale.format = _moment.localeData().longDateFormat('lll');
                }
                else {
                    this.locale.format = _moment.localeData().longDateFormat('L');
                }
            }
        };
        var DaterangepickerDirective_1;
        DaterangepickerDirective.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.KeyValueDiffers },
            { type: LocaleService },
            { type: core.ElementRef },
            { type: overlay.Overlay }
        ]; };
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "minDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "maxDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "autoApply", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "alwaysShowCalendars", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "showCustomRangeLabel", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "linkedCalendars", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "dateLimit", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "singleDatePicker", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "showWeekNumbers", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "showISOWeekNumbers", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "showDropdowns", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "showClearButton", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "customRangeDirection", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "ranges", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "opens", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "drops", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "lastMonthDayClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "emptyWeekRowClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "firstDayOfNextMonthClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "lastDayOfPreviousMonthClass", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "keepCalendarOpeningWithRange", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "showRangeLabelOnInput", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "showCancel", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "lockStartDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "timePicker", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "timePicker24Hour", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "timePickerIncrement", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "timePickerSeconds", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "closeOnAutoApply", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "locale", null);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "_endKey", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerDirective.prototype, "change", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerDirective.prototype, "rangeClicked", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerDirective.prototype, "datesUpdated", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerDirective.prototype, "startDateChanged", void 0);
        __decorate([
            core.Output()
        ], DaterangepickerDirective.prototype, "endDateChanged", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "isInvalidDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "isCustomDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "isTooltipDate", void 0);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "startKey", null);
        __decorate([
            core.Input()
        ], DaterangepickerDirective.prototype, "endKey", null);
DaterangepickerDirective.ɵfac = function DaterangepickerDirective_Factory(t) { return new (t || DaterangepickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(LocaleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.Overlay)); };
DaterangepickerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DaterangepickerDirective, selectors: [["input", "ngxDaterangepickerMd", ""]], hostAttrs: ["autocomplete", "off"], hostBindings: function DaterangepickerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup.esc", function DaterangepickerDirective_keyup_esc_HostBindingHandler() { return ctx.hide(); })("blur", function DaterangepickerDirective_blur_HostBindingHandler() { return ctx.onBlur(); })("click", function DaterangepickerDirective_click_HostBindingHandler() { return ctx.open(); })("keyup", function DaterangepickerDirective_keyup_HostBindingHandler($event) { return ctx.inputChanged($event); });
    } }, inputs: { dateLimit: "dateLimit", ranges: "ranges", opens: "opens", drops: "drops", showCancel: "showCancel", lockStartDate: "lockStartDate", timePicker: "timePicker", timePicker24Hour: "timePicker24Hour", timePickerIncrement: "timePickerIncrement", timePickerSeconds: "timePickerSeconds", closeOnAutoApply: "closeOnAutoApply", _endKey: "_endKey", isInvalidDate: "isInvalidDate", isCustomDate: "isCustomDate", isTooltipDate: "isTooltipDate", locale: "locale", startKey: "startKey", endKey: "endKey", minDate: "minDate", maxDate: "maxDate", autoApply: "autoApply", alwaysShowCalendars: "alwaysShowCalendars", showCustomRangeLabel: "showCustomRangeLabel", linkedCalendars: "linkedCalendars", singleDatePicker: "singleDatePicker", showWeekNumbers: "showWeekNumbers", showISOWeekNumbers: "showISOWeekNumbers", showDropdowns: "showDropdowns", showClearButton: "showClearButton", customRangeDirection: "customRangeDirection", lastMonthDayClass: "lastMonthDayClass", emptyWeekRowClass: "emptyWeekRowClass", firstDayOfNextMonthClass: "firstDayOfNextMonthClass", lastDayOfPreviousMonthClass: "lastDayOfPreviousMonthClass", keepCalendarOpeningWithRange: "keepCalendarOpeningWithRange", showRangeLabelOnInput: "showRangeLabelOnInput" }, outputs: { change: "change", rangeClicked: "rangeClicked", datesUpdated: "datesUpdated", startDateChanged: "startDateChanged", endDateChanged: "endDateChanged" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return DaterangepickerDirective_1; }),
                multi: true
            },
        ]), ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DaterangepickerDirective, [{
        type: core.Directive,
        args: [{
                selector: 'input[ngxDaterangepickerMd]',
                host: {
                    '(keyup.esc)': 'hide()',
                    '(blur)': 'onBlur()',
                    '(click)': 'open()',
                    '(keyup)': 'inputChanged($event)',
                    autocomplete: 'off'
                },
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return DaterangepickerDirective_1; }),
                        multi: true
                    },
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.KeyValueDiffers }, { type: LocaleService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc6.Overlay }]; }, { dateLimit: [{
            type: core.Input
        }], ranges: [{
            type: core.Input
        }], opens: [{
            type: core.Input
        }], drops: [{
            type: core.Input
        }], showCancel: [{
            type: core.Input
        }], lockStartDate: [{
            type: core.Input
        }], timePicker: [{
            type: core.Input
        }], timePicker24Hour: [{
            type: core.Input
        }], timePickerIncrement: [{
            type: core.Input
        }], timePickerSeconds: [{
            type: core.Input
        }], closeOnAutoApply: [{
            type: core.Input
        }], _endKey: [{
            type: core.Input
        }], change: [{
            type: core.Output
        }], rangeClicked: [{
            type: core.Output
        }], datesUpdated: [{
            type: core.Output
        }], startDateChanged: [{
            type: core.Output
        }], endDateChanged: [{
            type: core.Output
        }], isInvalidDate: [{
            type: core.Input
        }], isCustomDate: [{
            type: core.Input
        }], isTooltipDate: [{
            type: core.Input
        }], locale: [{
            type: core.Input
        }], startKey: [{
            type: core.Input
        }], endKey: [{
            type: core.Input
        }], minDate: [{
            type: core.Input
        }], maxDate: [{
            type: core.Input
        }], autoApply: [{
            type: core.Input
        }], alwaysShowCalendars: [{
            type: core.Input
        }], showCustomRangeLabel: [{
            type: core.Input
        }], linkedCalendars: [{
            type: core.Input
        }], singleDatePicker: [{
            type: core.Input
        }], showWeekNumbers: [{
            type: core.Input
        }], showISOWeekNumbers: [{
            type: core.Input
        }], showDropdowns: [{
            type: core.Input
        }], showClearButton: [{
            type: core.Input
        }], customRangeDirection: [{
            type: core.Input
        }], lastMonthDayClass: [{
            type: core.Input
        }], emptyWeekRowClass: [{
            type: core.Input
        }], firstDayOfNextMonthClass: [{
            type: core.Input
        }], lastDayOfPreviousMonthClass: [{
            type: core.Input
        }], keepCalendarOpeningWithRange: [{
            type: core.Input
        }], showRangeLabelOnInput: [{
            type: core.Input
        }] }); })();
        return DaterangepickerDirective;
    }());

    var NgxDaterangepickerMd = /** @class */ (function () {
        function NgxDaterangepickerMd() {
        }
        NgxDaterangepickerMd_1 = NgxDaterangepickerMd;
        NgxDaterangepickerMd.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: NgxDaterangepickerMd_1,
                providers: [
                    { provide: LOCALE_CONFIG, useValue: config },
                    { provide: LocaleService, useClass: LocaleService, deps: [LOCALE_CONFIG] },
                ],
            };
        };
        var NgxDaterangepickerMd_1;
NgxDaterangepickerMd.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxDaterangepickerMd });
NgxDaterangepickerMd.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxDaterangepickerMd_Factory(t) { return new (t || NgxDaterangepickerMd)(); }, imports: [[common.CommonModule, forms.FormsModule, forms.ReactiveFormsModule, button.MatButtonModule, select.MatSelectModule, overlay.OverlayModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDaterangepickerMd, { declarations: [DaterangepickerComponent,
        DaterangepickerDirective], imports: [ɵngcc1.CommonModule, ɵngcc4.FormsModule, ɵngcc4.ReactiveFormsModule, ɵngcc2.MatButtonModule, ɵngcc3.MatSelectModule, ɵngcc6.OverlayModule], exports: [DaterangepickerComponent,
        DaterangepickerDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxDaterangepickerMd, [{
        type: core.NgModule,
        args: [{
                declarations: [DaterangepickerComponent, DaterangepickerDirective],
                imports: [common.CommonModule, forms.FormsModule, forms.ReactiveFormsModule, button.MatButtonModule, select.MatSelectModule, overlay.OverlayModule],
                exports: [DaterangepickerComponent, DaterangepickerDirective]
            }]
    }], function () { return []; }, null); })();
        return NgxDaterangepickerMd;
    }());

    exports.DaterangepickerComponent = DaterangepickerComponent;
    exports.DaterangepickerDirective = DaterangepickerDirective;
    exports.DefaultLocaleConfig = DefaultLocaleConfig;
    exports.LOCALE_CONFIG = LOCALE_CONFIG;
    exports.LocaleService = LocaleService;
    exports.NgxDaterangepickerMd = NgxDaterangepickerMd;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-daterangepicker-material.umd.js.map