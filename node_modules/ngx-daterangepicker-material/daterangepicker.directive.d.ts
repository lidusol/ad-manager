import { Overlay } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ElementRef, EventEmitter, KeyValueDiffers, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import * as _moment from 'moment';
import { Subject } from 'rxjs';
import { LocaleConfig } from './daterangepicker.config';
import { LocaleService } from './locale.service';
import * as ɵngcc0 from '@angular/core';
export declare class DaterangepickerDirective implements OnInit, OnChanges, OnDestroy {
    _changeDetectorRef: ChangeDetectorRef;
    private differs;
    private _localeService;
    private elementRef;
    private overlay;
    private _onChange;
    private _onTouched;
    private _validatorChange;
    private _value;
    private overlayRef;
    private componentRef;
    minDate: _moment.Moment;
    maxDate: _moment.Moment;
    autoApply: boolean;
    alwaysShowCalendars: boolean;
    showCustomRangeLabel: boolean;
    linkedCalendars: boolean;
    dateLimit: number;
    singleDatePicker: boolean;
    showWeekNumbers: boolean;
    showISOWeekNumbers: boolean;
    showDropdowns: boolean;
    showClearButton: boolean;
    customRangeDirection: boolean;
    ranges: {};
    opens: 'left' | 'center' | 'right';
    drops: 'up' | 'down';
    firstMonthDayClass: string;
    lastMonthDayClass: string;
    emptyWeekRowClass: string;
    firstDayOfNextMonthClass: string;
    lastDayOfPreviousMonthClass: string;
    keepCalendarOpeningWithRange: boolean;
    showRangeLabelOnInput: boolean;
    showCancel: boolean;
    lockStartDate: boolean;
    timePicker: boolean;
    timePicker24Hour: boolean;
    timePickerIncrement: number;
    timePickerSeconds: boolean;
    closeOnAutoApply: boolean;
    _locale: LocaleConfig;
    set locale(value: any);
    get locale(): any;
    private _endKey;
    private _startKey;
    notForChangesProperty: Array<string>;
    change: EventEmitter<{
        startDate: _moment.Moment;
        endDate: _moment.Moment;
    }>;
    rangeClicked: EventEmitter<{
        label: string;
        dates: [_moment.Moment, _moment.Moment];
    }>;
    datesUpdated: EventEmitter<{
        startDate: _moment.Moment;
        endDate: _moment.Moment;
    }>;
    startDateChanged: EventEmitter<{
        startDate: _moment.Moment;
    }>;
    endDateChanged: EventEmitter<{
        endDate: _moment.Moment;
    }>;
    destroy$: Subject<unknown>;
    isInvalidDate: (date: _moment.Moment) => boolean;
    isCustomDate: (date: _moment.Moment) => boolean;
    isTooltipDate: (date: _moment.Moment) => any;
    set startKey(value: any);
    set endKey(value: any);
    get value(): any;
    set value(val: any);
    constructor(_changeDetectorRef: ChangeDetectorRef, differs: KeyValueDiffers, _localeService: LocaleService, elementRef: ElementRef, overlay: Overlay);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onBlur(): void;
    open(): void;
    hide(): void;
    toggle(): void;
    clear(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private setValue;
    inputChanged(e: any): void;
    calculateChosenLabel(startDate: _moment.Moment, endDate: _moment.Moment): string;
    /**
     *  build the locale config
     */
    private _buildLocale;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DaterangepickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DaterangepickerDirective, "input[ngxDaterangepickerMd]", never, { "dateLimit": "dateLimit"; "ranges": "ranges"; "opens": "opens"; "drops": "drops"; "showCancel": "showCancel"; "lockStartDate": "lockStartDate"; "timePicker": "timePicker"; "timePicker24Hour": "timePicker24Hour"; "timePickerIncrement": "timePickerIncrement"; "timePickerSeconds": "timePickerSeconds"; "closeOnAutoApply": "closeOnAutoApply"; "_endKey": "_endKey"; "isInvalidDate": "isInvalidDate"; "isCustomDate": "isCustomDate"; "isTooltipDate": "isTooltipDate"; "locale": "locale"; "startKey": "startKey"; "endKey": "endKey"; "minDate": "minDate"; "maxDate": "maxDate"; "autoApply": "autoApply"; "alwaysShowCalendars": "alwaysShowCalendars"; "showCustomRangeLabel": "showCustomRangeLabel"; "linkedCalendars": "linkedCalendars"; "singleDatePicker": "singleDatePicker"; "showWeekNumbers": "showWeekNumbers"; "showISOWeekNumbers": "showISOWeekNumbers"; "showDropdowns": "showDropdowns"; "showClearButton": "showClearButton"; "customRangeDirection": "customRangeDirection"; "lastMonthDayClass": "lastMonthDayClass"; "emptyWeekRowClass": "emptyWeekRowClass"; "firstDayOfNextMonthClass": "firstDayOfNextMonthClass"; "lastDayOfPreviousMonthClass": "lastDayOfPreviousMonthClass"; "keepCalendarOpeningWithRange": "keepCalendarOpeningWithRange"; "showRangeLabelOnInput": "showRangeLabelOnInput"; }, { "change": "change"; "rangeClicked": "rangeClicked"; "datesUpdated": "datesUpdated"; "startDateChanged": "startDateChanged"; "endDateChanged": "endDateChanged"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdlcGlja2VyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkYXRlcmFuZ2VwaWNrZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgS2V5VmFsdWVEaWZmZXJzLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBfbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMb2NhbGVDb25maWcgfSBmcm9tICcuL2RhdGVyYW5nZXBpY2tlci5jb25maWcnO1xuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJy4vbG9jYWxlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZXJhbmdlcGlja2VyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcml2YXRlIGRpZmZlcnM7XG4gICAgcHJpdmF0ZSBfbG9jYWxlU2VydmljZTtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBvdmVybGF5O1xuICAgIHByaXZhdGUgX29uQ2hhbmdlO1xuICAgIHByaXZhdGUgX29uVG91Y2hlZDtcbiAgICBwcml2YXRlIF92YWxpZGF0b3JDaGFuZ2U7XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgcHJpdmF0ZSBvdmVybGF5UmVmO1xuICAgIHByaXZhdGUgY29tcG9uZW50UmVmO1xuICAgIG1pbkRhdGU6IF9tb21lbnQuTW9tZW50O1xuICAgIG1heERhdGU6IF9tb21lbnQuTW9tZW50O1xuICAgIGF1dG9BcHBseTogYm9vbGVhbjtcbiAgICBhbHdheXNTaG93Q2FsZW5kYXJzOiBib29sZWFuO1xuICAgIHNob3dDdXN0b21SYW5nZUxhYmVsOiBib29sZWFuO1xuICAgIGxpbmtlZENhbGVuZGFyczogYm9vbGVhbjtcbiAgICBkYXRlTGltaXQ6IG51bWJlcjtcbiAgICBzaW5nbGVEYXRlUGlja2VyOiBib29sZWFuO1xuICAgIHNob3dXZWVrTnVtYmVyczogYm9vbGVhbjtcbiAgICBzaG93SVNPV2Vla051bWJlcnM6IGJvb2xlYW47XG4gICAgc2hvd0Ryb3Bkb3duczogYm9vbGVhbjtcbiAgICBzaG93Q2xlYXJCdXR0b246IGJvb2xlYW47XG4gICAgY3VzdG9tUmFuZ2VEaXJlY3Rpb246IGJvb2xlYW47XG4gICAgcmFuZ2VzOiB7fTtcbiAgICBvcGVuczogJ2xlZnQnIHwgJ2NlbnRlcicgfCAncmlnaHQnO1xuICAgIGRyb3BzOiAndXAnIHwgJ2Rvd24nO1xuICAgIGZpcnN0TW9udGhEYXlDbGFzczogc3RyaW5nO1xuICAgIGxhc3RNb250aERheUNsYXNzOiBzdHJpbmc7XG4gICAgZW1wdHlXZWVrUm93Q2xhc3M6IHN0cmluZztcbiAgICBmaXJzdERheU9mTmV4dE1vbnRoQ2xhc3M6IHN0cmluZztcbiAgICBsYXN0RGF5T2ZQcmV2aW91c01vbnRoQ2xhc3M6IHN0cmluZztcbiAgICBrZWVwQ2FsZW5kYXJPcGVuaW5nV2l0aFJhbmdlOiBib29sZWFuO1xuICAgIHNob3dSYW5nZUxhYmVsT25JbnB1dDogYm9vbGVhbjtcbiAgICBzaG93Q2FuY2VsOiBib29sZWFuO1xuICAgIGxvY2tTdGFydERhdGU6IGJvb2xlYW47XG4gICAgdGltZVBpY2tlcjogYm9vbGVhbjtcbiAgICB0aW1lUGlja2VyMjRIb3VyOiBib29sZWFuO1xuICAgIHRpbWVQaWNrZXJJbmNyZW1lbnQ6IG51bWJlcjtcbiAgICB0aW1lUGlja2VyU2Vjb25kczogYm9vbGVhbjtcbiAgICBjbG9zZU9uQXV0b0FwcGx5OiBib29sZWFuO1xuICAgIF9sb2NhbGU6IExvY2FsZUNvbmZpZztcbiAgICBzZXQgbG9jYWxlKHZhbHVlOiBhbnkpO1xuICAgIGdldCBsb2NhbGUoKTogYW55O1xuICAgIHByaXZhdGUgX2VuZEtleTtcbiAgICBwcml2YXRlIF9zdGFydEtleTtcbiAgICBub3RGb3JDaGFuZ2VzUHJvcGVydHk6IEFycmF5PHN0cmluZz47XG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBzdGFydERhdGU6IF9tb21lbnQuTW9tZW50O1xuICAgICAgICBlbmREYXRlOiBfbW9tZW50Lk1vbWVudDtcbiAgICB9PjtcbiAgICByYW5nZUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIGRhdGVzOiBbX21vbWVudC5Nb21lbnQsIF9tb21lbnQuTW9tZW50XTtcbiAgICB9PjtcbiAgICBkYXRlc1VwZGF0ZWQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIHN0YXJ0RGF0ZTogX21vbWVudC5Nb21lbnQ7XG4gICAgICAgIGVuZERhdGU6IF9tb21lbnQuTW9tZW50O1xuICAgIH0+O1xuICAgIHN0YXJ0RGF0ZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIHN0YXJ0RGF0ZTogX21vbWVudC5Nb21lbnQ7XG4gICAgfT47XG4gICAgZW5kRGF0ZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGVuZERhdGU6IF9tb21lbnQuTW9tZW50O1xuICAgIH0+O1xuICAgIGRlc3Ryb3kkOiBTdWJqZWN0PHVua25vd24+O1xuICAgIGlzSW52YWxpZERhdGU6IChkYXRlOiBfbW9tZW50Lk1vbWVudCkgPT4gYm9vbGVhbjtcbiAgICBpc0N1c3RvbURhdGU6IChkYXRlOiBfbW9tZW50Lk1vbWVudCkgPT4gYm9vbGVhbjtcbiAgICBpc1Rvb2x0aXBEYXRlOiAoZGF0ZTogX21vbWVudC5Nb21lbnQpID0+IGFueTtcbiAgICBzZXQgc3RhcnRLZXkodmFsdWU6IGFueSk7XG4gICAgc2V0IGVuZEtleSh2YWx1ZTogYW55KTtcbiAgICBnZXQgdmFsdWUoKTogYW55O1xuICAgIHNldCB2YWx1ZSh2YWw6IGFueSk7XG4gICAgY29uc3RydWN0b3IoX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgZGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLCBfbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZSwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgb3ZlcmxheTogT3ZlcmxheSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIG9wZW4oKTogdm9pZDtcbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG4gICAgY2xlYXIoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzZXRWYWx1ZTtcbiAgICBpbnB1dENoYW5nZWQoZTogYW55KTogdm9pZDtcbiAgICBjYWxjdWxhdGVDaG9zZW5MYWJlbChzdGFydERhdGU6IF9tb21lbnQuTW9tZW50LCBlbmREYXRlOiBfbW9tZW50Lk1vbWVudCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiAgYnVpbGQgdGhlIGxvY2FsZSBjb25maWdcbiAgICAgKi9cbiAgICBwcml2YXRlIF9idWlsZExvY2FsZTtcbn1cbiJdfQ==