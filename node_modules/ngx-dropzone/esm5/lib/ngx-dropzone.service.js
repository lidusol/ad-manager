/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function FileSelectResult() { }
if (false) {
    /**
     * The added files, emitted in the filesAdded event.
     * @type {?}
     */
    FileSelectResult.prototype.addedFiles;
    /**
     * The rejected files, emitted in the filesRejected event.
     * @type {?}
     */
    FileSelectResult.prototype.rejectedFiles;
}
/**
 * @record
 */
export function RejectedFile() { }
if (false) {
    /**
     * The reason the file was rejected.
     * @type {?|undefined}
     */
    RejectedFile.prototype.reason;
}
/**
 * This service contains the filtering logic to be applied to
 * any dropped or selected file. If a file matches all criteria
 * like maximum size or accept type, it will be emitted in the
 * addedFiles array, otherwise in the rejectedFiles array.
 */
var NgxDropzoneService = /** @class */ (function () {
    function NgxDropzoneService() {
    }
    /**
     * @param {?} files
     * @param {?} accept
     * @param {?} maxFileSize
     * @param {?} multiple
     * @return {?}
     */
    NgxDropzoneService.prototype.parseFileList = /**
     * @param {?} files
     * @param {?} accept
     * @param {?} maxFileSize
     * @param {?} multiple
     * @return {?}
     */
    function (files, accept, maxFileSize, multiple) {
        /** @type {?} */
        var addedFiles = [];
        /** @type {?} */
        var rejectedFiles = [];
        for (var i = 0; i < files.length; i++) {
            /** @type {?} */
            var file = files.item(i);
            if (!this.isAccepted(file, accept)) {
                this.rejectFile(rejectedFiles, file, 'type');
                continue;
            }
            if (maxFileSize && file.size > maxFileSize) {
                this.rejectFile(rejectedFiles, file, 'size');
                continue;
            }
            if (!multiple && addedFiles.length >= 1) {
                this.rejectFile(rejectedFiles, file, 'no_multiple');
                continue;
            }
            addedFiles.push(file);
        }
        /** @type {?} */
        var result = {
            addedFiles: addedFiles,
            rejectedFiles: rejectedFiles
        };
        return result;
    };
    /**
     * @private
     * @param {?} file
     * @param {?} accept
     * @return {?}
     */
    NgxDropzoneService.prototype.isAccepted = /**
     * @private
     * @param {?} file
     * @param {?} accept
     * @return {?}
     */
    function (file, accept) {
        if (accept === '*') {
            return true;
        }
        /** @type {?} */
        var acceptFiletypes = accept.split(',').map((/**
         * @param {?} it
         * @return {?}
         */
        function (it) { return it.toLowerCase().trim(); }));
        /** @type {?} */
        var filetype = file.type.toLowerCase();
        /** @type {?} */
        var filename = file.name.toLowerCase();
        /** @type {?} */
        var matchedFileType = acceptFiletypes.find((/**
         * @param {?} acceptFiletype
         * @return {?}
         */
        function (acceptFiletype) {
            // check for wildcard mimetype (e.g. image/*)
            if (acceptFiletype.endsWith('/*')) {
                return filetype.split('/')[0] === acceptFiletype.split('/')[0];
            }
            // check for file extension (e.g. .csv)
            if (acceptFiletype.startsWith(".")) {
                return filename.endsWith(acceptFiletype);
            }
            // check for exact mimetype match (e.g. image/jpeg)
            return acceptFiletype == filetype;
        }));
        return !!matchedFileType;
    };
    /**
     * @private
     * @param {?} rejectedFiles
     * @param {?} file
     * @param {?} reason
     * @return {?}
     */
    NgxDropzoneService.prototype.rejectFile = /**
     * @private
     * @param {?} rejectedFiles
     * @param {?} file
     * @param {?} reason
     * @return {?}
     */
    function (rejectedFiles, file, reason) {
        /** @type {?} */
        var rejectedFile = (/** @type {?} */ (file));
        rejectedFile.reason = reason;
        rejectedFiles.push(rejectedFile);
    };
NgxDropzoneService.ɵfac = function NgxDropzoneService_Factory(t) { return new (t || NgxDropzoneService)(); };
NgxDropzoneService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxDropzoneService, factory: function (t) { return NgxDropzoneService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxDropzoneService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NgxDropzoneService;
}());
export { NgxDropzoneService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRyb3B6b25lLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtZHJvcHpvbmUvbGliL25neC1kcm9wem9uZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDO0FBQ0c7QUFBVzs7QUFBZCxzQ0FPQztBQUNEO0FBQ1k7QUFBUTtBQUVXO0FBQ3pCO0FBQVEsSUFUYixzQ0FBbUI7QUFDcEI7QUFDTztBQUNEO0FBQWlCO0FBQVEsSUFBOUIseUNBQThCO0FBQy9CO0FBQ0E7QUFDRztBQUFXO0FBQWQsa0NBSUM7QUFDRDtBQUNZO0FBQVE7QUFFcEI7QUFDdUI7QUFBUSxJQU45Qiw4QkFBc0I7QUFDdkI7QUFDQTtBQUNHO0FBR0g7QUFDRTtBQUNEO0FBQTJEO0FBRzVEO0FBR0ssSUFITDtBQUNrQixJQXdFbEIsQ0FBQztBQUNEO0FBQVE7QUFBd0I7QUFBeUI7QUFBOEI7QUFBMkI7QUFBbUI7QUFBUSxJQXZFNUksMENBQWE7QUFBTztBQUF3QjtBQUF5QjtBQUE4QjtBQUVsRjtBQUNkO0FBQVEsSUFIWCxVQUFjLEtBQWUsRUFBRSxNQUFjLEVBQUUsV0FBbUIsRUFBRSxRQUFpQjtBQUFJO0FBRXBGLFlBQUUsVUFBVSxHQUFXLEVBQUU7QUFDL0I7QUFBeUIsWUFBakIsYUFBYSxHQUFtQixFQUFFO0FBQzFDLFFBQ0UsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDekM7QUFBNkIsZ0JBQXBCLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM3QixZQUNHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRTtBQUN2QyxnQkFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVB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QUFDO3NEQXhFRCxVQUFVOzs7O2dEQUNKO0FBQUMsSUF3RVIseUJBQUM7QUFDQSxDQURBLEFBekVELElBeUVDO0FBQ0QsU0F6RWEsa0JBQWtCO0FBRS9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVTZWxlY3RSZXN1bHQge1xuXG5cdC8qKiBUaGUgYWRkZWQgZmlsZXMsIGVtaXR0ZWQgaW4gdGhlIGZpbGVzQWRkZWQgZXZlbnQuICovXG5cdGFkZGVkRmlsZXM6IEZpbGVbXTtcblxuXHQvKiogVGhlIHJlamVjdGVkIGZpbGVzLCBlbWl0dGVkIGluIHRoZSBmaWxlc1JlamVjdGVkIGV2ZW50LiAqL1xuXHRyZWplY3RlZEZpbGVzOiBSZWplY3RlZEZpbGVbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWplY3RlZEZpbGUgZXh0ZW5kcyBGaWxlIHtcblxuXHQvKiogVGhlIHJlYXNvbiB0aGUgZmlsZSB3YXMgcmVqZWN0ZWQuICovXG5cdHJlYXNvbj86IFJlamVjdFJlYXNvbjtcbn1cblxuZXhwb3J0IHR5cGUgUmVqZWN0UmVhc29uID0gJ3R5cGUnIHwgJ3NpemUnIHwgJ25vX211bHRpcGxlJztcblxuLyoqXG4gKiBUaGlzIHNlcnZpY2UgY29udGFpbnMgdGhlIGZpbHRlcmluZyBsb2dpYyB0byBiZSBhcHBsaWVkIHRvXG4gKiBhbnkgZHJvcHBlZCBvciBzZWxlY3RlZCBmaWxlLiBJZiBhIGZpbGUgbWF0Y2hlcyBhbGwgY3JpdGVyaWFcbiAqIGxpa2UgbWF4aW11bSBzaXplIG9yIGFjY2VwdCB0eXBlLCBpdCB3aWxsIGJlIGVtaXR0ZWQgaW4gdGhlXG4gKiBhZGRlZEZpbGVzIGFycmF5LCBvdGhlcndpc2UgaW4gdGhlIHJlamVjdGVkRmlsZXMgYXJyYXkuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hEcm9wem9uZVNlcnZpY2Uge1xuXG5cdHBhcnNlRmlsZUxpc3QoZmlsZXM6IEZpbGVMaXN0LCBhY2NlcHQ6IHN0cmluZywgbWF4RmlsZVNpemU6IG51bWJlciwgbXVsdGlwbGU6IGJvb2xlYW4pOiBGaWxlU2VsZWN0UmVzdWx0IHtcblxuXHRcdGNvbnN0IGFkZGVkRmlsZXM6IEZpbGVbXSA9IFtdO1xuXHRcdGNvbnN0IHJlamVjdGVkRmlsZXM6IFJlamVjdGVkRmlsZVtdID0gW107XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBmaWxlID0gZmlsZXMuaXRlbShpKTtcblxuXHRcdFx0aWYgKCF0aGlzLmlzQWNjZXB0ZWQoZmlsZSwgYWNjZXB0KSkge1xuXHRcdFx0XHR0aGlzLnJlamVjdEZpbGUocmVqZWN0ZWRGaWxlcywgZmlsZSwgJ3R5cGUnKTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtYXhGaWxlU2l6ZSAmJiBmaWxlLnNpemUgPiBtYXhGaWxlU2l6ZSkge1xuXHRcdFx0XHR0aGlzLnJlamVjdEZpbGUocmVqZWN0ZWRGaWxlcywgZmlsZSwgJ3NpemUnKTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghbXVsdGlwbGUgJiYgYWRkZWRGaWxlcy5sZW5ndGggPj0gMSkge1xuXHRcdFx0XHR0aGlzLnJlamVjdEZpbGUocmVqZWN0ZWRGaWxlcywgZmlsZSwgJ25vX211bHRpcGxlJyk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRhZGRlZEZpbGVzLnB1c2goZmlsZSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzdWx0OiBGaWxlU2VsZWN0UmVzdWx0ID0ge1xuXHRcdFx0YWRkZWRGaWxlcyxcblx0XHRcdHJlamVjdGVkRmlsZXNcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHByaXZhdGUgaXNBY2NlcHRlZChmaWxlOiBGaWxlLCBhY2NlcHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuXG5cdFx0aWYgKGFjY2VwdCA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRjb25zdCBhY2NlcHRGaWxldHlwZXMgPSBhY2NlcHQuc3BsaXQoJywnKS5tYXAoaXQgPT4gaXQudG9Mb3dlckNhc2UoKS50cmltKCkpO1xuXHRcdGNvbnN0IGZpbGV0eXBlID0gZmlsZS50eXBlLnRvTG93ZXJDYXNlKCk7XG5cdFx0Y29uc3QgZmlsZW5hbWUgPSBmaWxlLm5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGNvbnN0IG1hdGNoZWRGaWxlVHlwZSA9IGFjY2VwdEZpbGV0eXBlcy5maW5kKGFjY2VwdEZpbGV0eXBlID0+IHtcblxuXHRcdFx0Ly8gY2hlY2sgZm9yIHdpbGRjYXJkIG1pbWV0eXBlIChlLmcuIGltYWdlLyopXG5cdFx0XHRpZiAoYWNjZXB0RmlsZXR5cGUuZW5kc1dpdGgoJy8qJykpIHtcblx0XHRcdFx0cmV0dXJuIGZpbGV0eXBlLnNwbGl0KCcvJylbMF0gPT09IGFjY2VwdEZpbGV0eXBlLnNwbGl0KCcvJylbMF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNoZWNrIGZvciBmaWxlIGV4dGVuc2lvbiAoZS5nLiAuY3N2KVxuXHRcdFx0aWYgKGFjY2VwdEZpbGV0eXBlLnN0YXJ0c1dpdGgoXCIuXCIpKSB7XG5cdFx0XHRcdHJldHVybiBmaWxlbmFtZS5lbmRzV2l0aChhY2NlcHRGaWxldHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNoZWNrIGZvciBleGFjdCBtaW1ldHlwZSBtYXRjaCAoZS5nLiBpbWFnZS9qcGVnKVxuXHRcdFx0cmV0dXJuIGFjY2VwdEZpbGV0eXBlID09IGZpbGV0eXBlO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuICEhbWF0Y2hlZEZpbGVUeXBlO1xuXHR9XG5cblx0cHJpdmF0ZSByZWplY3RGaWxlKHJlamVjdGVkRmlsZXM6IFJlamVjdGVkRmlsZVtdLCBmaWxlOiBGaWxlLCByZWFzb246IFJlamVjdFJlYXNvbikge1xuXG5cdFx0Y29uc3QgcmVqZWN0ZWRGaWxlID0gZmlsZSBhcyBSZWplY3RlZEZpbGU7XG5cdFx0cmVqZWN0ZWRGaWxlLnJlYXNvbiA9IHJlYXNvbjtcblxuXHRcdHJlamVjdGVkRmlsZXMucHVzaChyZWplY3RlZEZpbGUpO1xuXHR9XG59XG4iXX0=