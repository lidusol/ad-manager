/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output, Input, ViewChild, ContentChildren, QueryList, HostBinding, HostListener, Self, ElementRef } from '@angular/core';
import { NgxDropzoneService } from '../ngx-dropzone.service';
import { coerceBooleanProperty, coerceNumberProperty } from '../helpers';
import { NgxDropzonePreviewComponent } from '../ngx-dropzone-preview/ngx-dropzone-preview.component';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

var _c0 = ["fileInput"];
function NgxDropzoneComponent_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 2, ["*ngIf", "!_hasPreviews"]);
} }
var _c1 = [[["ngx-dropzone-preview"]], "*", [["ngx-dropzone-label"]]];
var _c2 = ["ngx-dropzone-preview", "*", "ngx-dropzone-label"];
export function NgxDropzoneChangeEvent() { }
if (false) {
    /** @type {?} */
    NgxDropzoneChangeEvent.prototype.source;
    /** @type {?} */
    NgxDropzoneChangeEvent.prototype.addedFiles;
    /** @type {?} */
    NgxDropzoneChangeEvent.prototype.rejectedFiles;
}
var NgxDropzoneComponent = /** @class */ (function () {
    function NgxDropzoneComponent(service) {
        this.service = service;
        /**
         * Emitted when any files were added or rejected.
         */
        this.change = new EventEmitter();
        /**
         * Set the accepted file types. Defaults to '*'.
         */
        this.accept = '*';
        this._disabled = false;
        this._multiple = true;
        this._maxFileSize = undefined;
        this._expandable = false;
        this._disableClick = false;
        this._isHovered = false;
    }
    Object.defineProperty(NgxDropzoneComponent.prototype, "_hasPreviews", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this._previewChildren.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDropzoneComponent.prototype, "disabled", {
        /** Disable any user interaction with the component. */
        get: /**
         * Disable any user interaction with the component.
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            if (this._isHovered) {
                this._isHovered = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDropzoneComponent.prototype, "multiple", {
        /** Allow the selection of multiple files. */
        get: /**
         * Allow the selection of multiple files.
         * @return {?}
         */
        function () {
            return this._multiple;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._multiple = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDropzoneComponent.prototype, "maxFileSize", {
        /** Set the maximum size a single file may have. */
        get: /**
         * Set the maximum size a single file may have.
         * @return {?}
         */
        function () {
            return this._maxFileSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxFileSize = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDropzoneComponent.prototype, "expandable", {
        /** Allow the dropzone container to expand vertically. */
        get: /**
         * Allow the dropzone container to expand vertically.
         * @return {?}
         */
        function () {
            return this._expandable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._expandable = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDropzoneComponent.prototype, "disableClick", {
        /** Open the file selector on click. */
        get: /**
         * Open the file selector on click.
         * @return {?}
         */
        function () {
            return this._disableClick;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disableClick = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Show the native OS file explorer to select files. */
    /**
     * Show the native OS file explorer to select files.
     * @return {?}
     */
    NgxDropzoneComponent.prototype._onClick = /**
     * Show the native OS file explorer to select files.
     * @return {?}
     */
    function () {
        if (!this.disableClick) {
            this.showFileSelector();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype._onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disabled) {
            return;
        }
        this.preventDefault(event);
        this._isHovered = true;
    };
    /**
     * @return {?}
     */
    NgxDropzoneComponent.prototype._onDragLeave = /**
     * @return {?}
     */
    function () {
        this._isHovered = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype._onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disabled) {
            return;
        }
        this.preventDefault(event);
        this._isHovered = false;
        this.handleFileDrop(event.dataTransfer.files);
    };
    /**
     * @return {?}
     */
    NgxDropzoneComponent.prototype.showFileSelector = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            ((/** @type {?} */ (this._fileInput.nativeElement))).click();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype._onFilesSelected = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var files = event.target.files;
        this.handleFileDrop(files);
        // Reset the native file input element to allow selecting the same file again
        this._fileInput.nativeElement.value = '';
        // fix(#32): Prevent the default event behaviour which caused the change event to emit twice.
        this.preventDefault(event);
    };
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    NgxDropzoneComponent.prototype.handleFileDrop = /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var result = this.service.parseFileList(files, this.accept, this.maxFileSize, this.multiple);
        this.change.next({
            addedFiles: result.addedFiles,
            rejectedFiles: result.rejectedFiles,
            source: this
        });
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    NgxDropzoneComponent.prototype.preventDefault = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    /** @nocollapse */
    NgxDropzoneComponent.ctorParameters = function () { return [
        { type: NgxDropzoneService, decorators: [{ type: Self }] }
    ]; };
    NgxDropzoneComponent.propDecorators = {
        _previewChildren: [{ type: ContentChildren, args: [NgxDropzonePreviewComponent, { descendants: true },] }],
        _fileInput: [{ type: ViewChild, args: ['fileInput',] }],
        change: [{ type: Output }],
        accept: [{ type: Input }],
        disabled: [{ type: Input }, { type: HostBinding, args: ['class.ngx-dz-disabled',] }],
        multiple: [{ type: Input }],
        maxFileSize: [{ type: Input }],
        expandable: [{ type: Input }, { type: HostBinding, args: ['class.expandable',] }],
        disableClick: [{ type: Input }, { type: HostBinding, args: ['class.unclickable',] }],
        id: [{ type: Input }],
        ariaLabel: [{ type: Input, args: ['aria-label',] }],
        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],
        ariaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],
        _isHovered: [{ type: HostBinding, args: ['class.ngx-dz-hovered',] }],
        _onClick: [{ type: HostListener, args: ['click',] }],
        _onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
        _onDragLeave: [{ type: HostListener, args: ['dragleave',] }],
        _onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
    };
NgxDropzoneComponent.ɵfac = function NgxDropzoneComponent_Factory(t) { return new (t || NgxDropzoneComponent)(ɵngcc0.ɵɵdirectiveInject(NgxDropzoneService, 2)); };
NgxDropzoneComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxDropzoneComponent, selectors: [["ngx-dropzone"], ["", "ngx-dropzone", ""]], contentQueries: function NgxDropzoneComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxDropzonePreviewComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewChildren = _t);
    } }, viewQuery: function NgxDropzoneComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._fileInput = _t.first);
    } }, hostVars: 8, hostBindings: function NgxDropzoneComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NgxDropzoneComponent_click_HostBindingHandler() { return ctx._onClick(); })("dragover", function NgxDropzoneComponent_dragover_HostBindingHandler($event) { return ctx._onDragOver($event); })("dragleave", function NgxDropzoneComponent_dragleave_HostBindingHandler() { return ctx._onDragLeave(); })("drop", function NgxDropzoneComponent_drop_HostBindingHandler($event) { return ctx._onDrop($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ngx-dz-hovered", ctx._isHovered)("ngx-dz-disabled", ctx.disabled)("expandable", ctx.expandable)("unclickable", ctx.disableClick);
    } }, inputs: { accept: "accept", disabled: "disabled", multiple: "multiple", maxFileSize: "maxFileSize", expandable: "expandable", disableClick: "disableClick", id: "id", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedBy: ["aria-describedby", "ariaDescribedBy"] }, outputs: { change: "change" }, features: [ɵngcc0.ɵɵProvidersFeature([NgxDropzoneService])], ngContentSelectors: _c2, decls: 5, vars: 8, consts: [["type", "file", 3, "id", "multiple", "accept", "disabled", "change"], ["fileInput", ""], [4, "ngIf"]], template: function NgxDropzoneComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "input", 0, 1);
        ɵngcc0.ɵɵlistener("change", function NgxDropzoneComponent_Template_input_change_0_listener($event) { return ctx._onFilesSelected($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, NgxDropzoneComponent_2_Template, 1, 0, undefined, 2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵprojection(4, 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id)("multiple", ctx.multiple)("accept", ctx.accept)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedBy);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx._hasPreviews);
    } }, directives: [ɵngcc1.NgIf], styles: ["[_nghost-%COMP%]{display:flex;align-items:center;height:180px;background:#fff;cursor:pointer;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px;overflow-x:auto}.ngx-dz-hovered[_nghost-%COMP%]{border-style:solid}.ngx-dz-disabled[_nghost-%COMP%]{opacity:.5;cursor:no-drop;pointer-events:none}.expandable[_nghost-%COMP%]{overflow:hidden;height:unset;min-height:180px;flex-wrap:wrap}.unclickable[_nghost-%COMP%]{cursor:default}[_nghost-%COMP%]     ngx-dropzone-label{text-align:center;z-index:10;margin:10px auto}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}[_nghost-%COMP%]   input[_ngcontent-%COMP%]:focus +   ngx-dropzone-label{outline:#000 dotted 1px;outline:-webkit-focus-ring-color auto 5px}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxDropzoneComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-dropzone, [ngx-dropzone]',
                template: "<input #fileInput type=\"file\" [id]=\"id\" [multiple]=\"multiple\" [accept]=\"accept\" [disabled]=\"disabled\"\n  (change)=\"_onFilesSelected($event)\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-describedby]=\"ariaDescribedBy\">\n<ng-content select=\"ngx-dropzone-label\" *ngIf=\"!_hasPreviews\"></ng-content>\n<ng-content select=\"ngx-dropzone-preview\"></ng-content>\n<ng-content></ng-content>\n",
                styles: [":host(){display:flex;align-items:center;height:180px;background:#fff;cursor:pointer;color:#717386;border:2px dashed #717386;border-radius:5px;font-size:16px;overflow-x:auto}:host().ngx-dz-hovered{border-style:solid}:host().ngx-dz-disabled{opacity:.5;cursor:no-drop;pointer-events:none}:host().expandable{overflow:hidden;height:unset;min-height:180px;flex-wrap:wrap}:host().unclickable{cursor:default}:host() ::ng-deep ngx-dropzone-label{text-align:center;z-index:10;margin:10px auto}:host() input{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}:host() input:focus+::ng-deep ngx-dropzone-label{outline:#000 dotted 1px;outline:-webkit-focus-ring-color auto 5px}"],
                providers: [NgxDropzoneService]
            }]
    }], function () { return [{ type: NgxDropzoneService, decorators: [{
                type: Self
            }] }]; }, { change: [{
            type: Output
        }], accept: [{
            type: Input
        }], _isHovered: [{
            type: HostBinding,
            args: ['class.ngx-dz-hovered']
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.ngx-dz-disabled']
        }], multiple: [{
            type: Input
        }], maxFileSize: [{
            type: Input
        }], expandable: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.expandable']
        }], disableClick: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.unclickable']
        }], _onClick: [{
            type: HostListener,
            args: ['click']
        }], _onDragOver: [{
            type: HostListener,
            args: ['dragover', ['$event']]
        }], _onDragLeave: [{
            type: HostListener,
            args: ['dragleave']
        }], _onDrop: [{
            type: HostListener,
            args: ['drop', ['$event']]
        }], _previewChildren: [{
            type: ContentChildren,
            args: [NgxDropzonePreviewComponent, { descendants: true }]
        }], _fileInput: [{
            type: ViewChild,
            args: ['fileInput']
        }], id: [{
            type: Input
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], ariaDescribedBy: [{
            type: Input,
            args: ['aria-describedby']
        }] }); })();
    return NgxDropzoneComponent;
}());
export { NgxDropzoneComponent };
if (false) {
    /**
     * A list of the content-projected preview children.
     * @type {?}
     */
    NgxDropzoneComponent.prototype._previewChildren;
    /**
     * A template reference to the native file input element.
     * @type {?}
     */
    NgxDropzoneComponent.prototype._fileInput;
    /**
     * Emitted when any files were added or rejected.
     * @type {?}
     */
    NgxDropzoneComponent.prototype.change;
    /**
     * Set the accepted file types. Defaults to '*'.
     * @type {?}
     */
    NgxDropzoneComponent.prototype.accept;
    /**
     * @type {?}
     * @private
     */
    NgxDropzoneComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NgxDropzoneComponent.prototype._multiple;
    /**
     * @type {?}
     * @private
     */
    NgxDropzoneComponent.prototype._maxFileSize;
    /**
     * @type {?}
     * @private
     */
    NgxDropzoneComponent.prototype._expandable;
    /**
     * @type {?}
     * @private
     */
    NgxDropzoneComponent.prototype._disableClick;
    /**
     * Expose the id, aria-label, aria-labelledby and aria-describedby of the native file input for proper accessibility.
     * @type {?}
     */
    NgxDropzoneComponent.prototype.id;
    /** @type {?} */
    NgxDropzoneComponent.prototype.ariaLabel;
    /** @type {?} */
    NgxDropzoneComponent.prototype.ariaLabelledby;
    /** @type {?} */
    NgxDropzoneComponent.prototype.ariaDescribedBy;
    /** @type {?} */
    NgxDropzoneComponent.prototype._isHovered;
    /**
     * @type {?}
     * @private
     */
    NgxDropzoneComponent.prototype.service;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,