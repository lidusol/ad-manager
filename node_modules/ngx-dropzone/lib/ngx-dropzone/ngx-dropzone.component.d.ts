import { EventEmitter, QueryList, ElementRef } from '@angular/core';
import { NgxDropzoneService } from '../ngx-dropzone.service';
import { NgxDropzonePreviewComponent } from '../ngx-dropzone-preview/ngx-dropzone-preview.component';
import * as ɵngcc0 from '@angular/core';
export interface NgxDropzoneChangeEvent {
    source: NgxDropzoneComponent;
    addedFiles: File[];
    rejectedFiles: File[];
}
export declare class NgxDropzoneComponent {
    private service;
    constructor(service: NgxDropzoneService);
    /** A list of the content-projected preview children. */
    _previewChildren: QueryList<NgxDropzonePreviewComponent>;
    readonly _hasPreviews: boolean;
    /** A template reference to the native file input element. */
    _fileInput: ElementRef;
    /** Emitted when any files were added or rejected. */
    readonly change: EventEmitter<NgxDropzoneChangeEvent>;
    /** Set the accepted file types. Defaults to '*'. */
    accept: string;
    /** Disable any user interaction with the component. */
    disabled: boolean;
    private _disabled;
    /** Allow the selection of multiple files. */
    multiple: boolean;
    private _multiple;
    /** Set the maximum size a single file may have. */
    maxFileSize: number;
    private _maxFileSize;
    /** Allow the dropzone container to expand vertically. */
    expandable: boolean;
    private _expandable;
    /** Open the file selector on click. */
    disableClick: boolean;
    private _disableClick;
    /** Expose the id, aria-label, aria-labelledby and aria-describedby of the native file input for proper accessibility. */
    id: string;
    ariaLabel: string;
    ariaLabelledby: string;
    ariaDescribedBy: string;
    _isHovered: boolean;
    /** Show the native OS file explorer to select files. */
    _onClick(): void;
    _onDragOver(event: any): void;
    _onDragLeave(): void;
    _onDrop(event: any): void;
    showFileSelector(): void;
    _onFilesSelected(event: any): void;
    private handleFileDrop;
    private preventDefault;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxDropzoneComponent, [{ self: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxDropzoneComponent, "ngx-dropzone, [ngx-dropzone]", never, { "accept": "accept"; "disabled": "disabled"; "multiple": "multiple"; "maxFileSize": "maxFileSize"; "expandable": "expandable"; "disableClick": "disableClick"; "id": "id"; "ariaLabel": "aria-label"; "ariaLabelledby": "aria-labelledby"; "ariaDescribedBy": "aria-describedby"; }, { "change": "change"; }, ["_previewChildren"], ["ngx-dropzone-label", "ngx-dropzone-preview", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRyb3B6b25lLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtZHJvcHpvbmUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neERyb3B6b25lU2VydmljZSB9IGZyb20gJy4uL25neC1kcm9wem9uZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5neERyb3B6b25lUHJldmlld0NvbXBvbmVudCB9IGZyb20gJy4uL25neC1kcm9wem9uZS1wcmV2aWV3L25neC1kcm9wem9uZS1wcmV2aWV3LmNvbXBvbmVudCc7XG5leHBvcnQgaW50ZXJmYWNlIE5neERyb3B6b25lQ2hhbmdlRXZlbnQge1xuICAgIHNvdXJjZTogTmd4RHJvcHpvbmVDb21wb25lbnQ7XG4gICAgYWRkZWRGaWxlczogRmlsZVtdO1xuICAgIHJlamVjdGVkRmlsZXM6IEZpbGVbXTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neERyb3B6b25lQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIHNlcnZpY2U7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZTogTmd4RHJvcHpvbmVTZXJ2aWNlKTtcbiAgICAvKiogQSBsaXN0IG9mIHRoZSBjb250ZW50LXByb2plY3RlZCBwcmV2aWV3IGNoaWxkcmVuLiAqL1xuICAgIF9wcmV2aWV3Q2hpbGRyZW46IFF1ZXJ5TGlzdDxOZ3hEcm9wem9uZVByZXZpZXdDb21wb25lbnQ+O1xuICAgIHJlYWRvbmx5IF9oYXNQcmV2aWV3czogYm9vbGVhbjtcbiAgICAvKiogQSB0ZW1wbGF0ZSByZWZlcmVuY2UgdG8gdGhlIG5hdGl2ZSBmaWxlIGlucHV0IGVsZW1lbnQuICovXG4gICAgX2ZpbGVJbnB1dDogRWxlbWVudFJlZjtcbiAgICAvKiogRW1pdHRlZCB3aGVuIGFueSBmaWxlcyB3ZXJlIGFkZGVkIG9yIHJlamVjdGVkLiAqL1xuICAgIHJlYWRvbmx5IGNoYW5nZTogRXZlbnRFbWl0dGVyPE5neERyb3B6b25lQ2hhbmdlRXZlbnQ+O1xuICAgIC8qKiBTZXQgdGhlIGFjY2VwdGVkIGZpbGUgdHlwZXMuIERlZmF1bHRzIHRvICcqJy4gKi9cbiAgICBhY2NlcHQ6IHN0cmluZztcbiAgICAvKiogRGlzYWJsZSBhbnkgdXNlciBpbnRlcmFjdGlvbiB3aXRoIHRoZSBjb21wb25lbnQuICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgLyoqIEFsbG93IHRoZSBzZWxlY3Rpb24gb2YgbXVsdGlwbGUgZmlsZXMuICovXG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfbXVsdGlwbGU7XG4gICAgLyoqIFNldCB0aGUgbWF4aW11bSBzaXplIGEgc2luZ2xlIGZpbGUgbWF5IGhhdmUuICovXG4gICAgbWF4RmlsZVNpemU6IG51bWJlcjtcbiAgICBwcml2YXRlIF9tYXhGaWxlU2l6ZTtcbiAgICAvKiogQWxsb3cgdGhlIGRyb3B6b25lIGNvbnRhaW5lciB0byBleHBhbmQgdmVydGljYWxseS4gKi9cbiAgICBleHBhbmRhYmxlOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2V4cGFuZGFibGU7XG4gICAgLyoqIE9wZW4gdGhlIGZpbGUgc2VsZWN0b3Igb24gY2xpY2suICovXG4gICAgZGlzYWJsZUNsaWNrOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2Rpc2FibGVDbGljaztcbiAgICAvKiogRXhwb3NlIHRoZSBpZCwgYXJpYS1sYWJlbCwgYXJpYS1sYWJlbGxlZGJ5IGFuZCBhcmlhLWRlc2NyaWJlZGJ5IG9mIHRoZSBuYXRpdmUgZmlsZSBpbnB1dCBmb3IgcHJvcGVyIGFjY2Vzc2liaWxpdHkuICovXG4gICAgaWQ6IHN0cmluZztcbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICBhcmlhTGFiZWxsZWRieTogc3RyaW5nO1xuICAgIGFyaWFEZXNjcmliZWRCeTogc3RyaW5nO1xuICAgIF9pc0hvdmVyZWQ6IGJvb2xlYW47XG4gICAgLyoqIFNob3cgdGhlIG5hdGl2ZSBPUyBmaWxlIGV4cGxvcmVyIHRvIHNlbGVjdCBmaWxlcy4gKi9cbiAgICBfb25DbGljaygpOiB2b2lkO1xuICAgIF9vbkRyYWdPdmVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIF9vbkRyYWdMZWF2ZSgpOiB2b2lkO1xuICAgIF9vbkRyb3AoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc2hvd0ZpbGVTZWxlY3RvcigpOiB2b2lkO1xuICAgIF9vbkZpbGVzU2VsZWN0ZWQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVGaWxlRHJvcDtcbiAgICBwcml2YXRlIHByZXZlbnREZWZhdWx0O1xufVxuIl19