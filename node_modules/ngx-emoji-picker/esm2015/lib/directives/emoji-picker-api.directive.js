import { __decorate, __metadata } from "tslib";
import { Directive, Input, ComponentFactoryResolver, ViewContainerRef, ComponentFactory, ComponentRef, ElementRef, EventEmitter, Output, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, distinctUntilChanged } from 'rxjs/operators';
import { EmojiPickerComponent } from '../components/emoji-picker.component';
import { DIRECTIONS } from '../misc/picker-directions';
import { EmojiEvent } from '../misc/emoji-event';
import * as ɵngcc0 from '@angular/core';
let EmojiPickerApiDirective = class EmojiPickerApiDirective {
    constructor(_cfr, _vcr, _el) {
        this._cfr = _cfr;
        this._vcr = _vcr;
        this._el = _el;
        this._directionCode = DIRECTIONS.bottom;
        this._searchBar = false;
        this.emojiPickerIfEmitter = new EventEmitter();
        this.selectEmitter = new EventEmitter();
        this._emojiPickerOpenState = new Subject();
        this._destroyed = new Subject();
        this._emojiSubs = [];
        this.initPicker();
        this._emojiPickerOpenState
            .pipe(takeUntil(this._destroyed), distinctUntilChanged())
            .subscribe(value => {
            var _a, _b, _c, _d, _e, _f;
            if (value) {
                (_c = (_b = (_a = this._emojiPickerRef) === null || _a === void 0 ? void 0 : _a.instance) === null || _b === void 0 ? void 0 : _b.show) === null || _c === void 0 ? void 0 : _c.call(_b);
            }
            else {
                (_f = (_e = (_d = this._emojiPickerRef) === null || _d === void 0 ? void 0 : _d.instance) === null || _e === void 0 ? void 0 : _e.hide) === null || _f === void 0 ? void 0 : _f.call(_e);
            }
        });
    }
    set emojiPickerDirection(direction) {
        if (DIRECTIONS[direction] === undefined) {
            console.error(`Emoji-Picker: direction '${direction}' passed as input does not exist in DIRECTIONS table, defaulting to 'bottom'`);
            this._directionCode = DIRECTIONS.bottom;
        }
        else {
            this._directionCode = DIRECTIONS[direction];
        }
    }
    set emojiPickerIf(condition) {
        this._emojiPickerOpenState.next(condition);
    }
    initPicker() {
        this._emojiPickerFactory = this._emojiPickerFactory || this._cfr.resolveComponentFactory(EmojiPickerComponent);
        this._emojiPickerRef = this._emojiPickerRef || this._vcr.createComponent(this._emojiPickerFactory);
        this._emojiPickerRef.instance.setPosition(this._el, this._directionCode);
        this._emojiSubs.push(this._emojiPickerRef.instance.pickerCloseEmitter.subscribe(event => this.emojiPickerIfEmitter.emit(false)), this._emojiPickerRef.instance.selectionEmitter.subscribe(event => this.selectEmitter.emit(EmojiEvent.fromArray(event))));
    }
    closePicker() {
        if (!this._emojiPickerRef || !this._emojiPickerRef.destroy) {
            return;
        }
        this._emojiSubs.forEach((subscription) => subscription.unsubscribe());
        this._emojiPickerRef.destroy();
        this._emojiSubs = [];
        delete this._emojiPickerRef;
    }
    ngOnDestroy() {
        this._destroyed.next(true);
    }
};
EmojiPickerApiDirective.ɵfac = function EmojiPickerApiDirective_Factory(t) { return new (t || EmojiPickerApiDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
EmojiPickerApiDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: EmojiPickerApiDirective, selectors: [["", "emojiPickerIf", ""]], hostBindings: function EmojiPickerApiDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function EmojiPickerApiDirective_click_HostBindingHandler($event) { return $event.emojiPickerExempt = true; });
    } }, inputs: { emojiPickerDirection: "emojiPickerDirection", emojiPickerIf: "emojiPickerIf" }, outputs: { emojiPickerIfEmitter: "emojiPickerIfChange", selectEmitter: "emojiPickerSelect" } });
EmojiPickerApiDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ElementRef }
];
__decorate([
    Input('emojiPickerDirection'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], EmojiPickerApiDirective.prototype, "emojiPickerDirection", null);
__decorate([
    Input('emojiPickerIf'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], EmojiPickerApiDirective.prototype, "emojiPickerIf", null);
__decorate([
    Output('emojiPickerIfChange'),
    __metadata("design:type", Object)
], EmojiPickerApiDirective.prototype, "emojiPickerIfEmitter", void 0);
__decorate([
    Output('emojiPickerSelect'),
    __metadata("design:type", Object)
], EmojiPickerApiDirective.prototype, "selectEmitter", void 0);
EmojiPickerApiDirective = __decorate([ __metadata("design:paramtypes", [ComponentFactoryResolver,
        ViewContainerRef,
        ElementRef])
], EmojiPickerApiDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmojiPickerApiDirective, [{
        type: Directive,
        args: [{
                selector: '[emojiPickerIf]',
                host: {
                    '(click)': '$event.emojiPickerExempt = true' // marking off event listening on anchor
                }
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, { emojiPickerIfEmitter: [{
            type: Output,
            args: ['emojiPickerIfChange']
        }], selectEmitter: [{
            type: Output,
            args: ['emojiPickerSelect']
        }], emojiPickerDirection: [{
            type: Input,
            args: ['emojiPickerDirection']
        }], emojiPickerIf: [{
            type: Input,
            args: ['emojiPickerIf']
        }] }); })();
export { EmojiPickerApiDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,