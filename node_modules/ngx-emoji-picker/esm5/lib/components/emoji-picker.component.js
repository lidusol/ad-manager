import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, Output, ElementRef, Renderer2, } from "@angular/core";
import { DIRECTIONS } from "../misc/picker-directions";
import { Subject } from "rxjs";
import { takeUntil, debounceTime } from "rxjs/operators";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './emoji-content.component';
var EmojiPickerComponent = /** @class */ (function () {
    function EmojiPickerComponent(_renderer, _el) {
        var _this = this;
        this._renderer = _renderer;
        this._el = _el;
        this.selectionEmitter = new EventEmitter();
        this.pickerCloseEmitter = new EventEmitter();
        this._windowResize = new Subject();
        this._destroyed = new Subject();
        this._windowResize
            .pipe(takeUntil(this._destroyed), debounceTime(100))
            .subscribe(function (event) {
            _this.setPosition(_this._currentTarget, _this._currentDirection);
        });
    }
    EmojiPickerComponent.prototype.hide = function () {
        this._renderer.setStyle(this._el.nativeElement, "display", "none");
    };
    EmojiPickerComponent.prototype.show = function () {
        this._renderer.setStyle(this._el.nativeElement, "display", "block");
        this.setPosition(this._currentTarget, this._currentDirection);
    };
    EmojiPickerComponent.prototype.setPosition = function (target, directionCode) {
        if (directionCode === void 0) { directionCode = DIRECTIONS.bottom; }
        if (!target) {
            return console.error("Emoji-Picker: positioning failed due to missing target element or direction code");
        }
        this._renderer.setStyle(this._el.nativeElement, "transform", "");
        /** Store anchor and direction */
        this._currentTarget = target;
        this._currentDirection = directionCode;
        var targetBorders = target.nativeElement.getBoundingClientRect(), thisBorders = this._el.nativeElement.getBoundingClientRect();
        var heightCorrection = 0, widthCorrection = 0;
        /** Setting up centering of picker for all cases */
        switch (this._currentDirection) {
            case DIRECTIONS.top:
            case DIRECTIONS.bottom:
                widthCorrection =
                    targetBorders.left -
                        thisBorders.left +
                        (targetBorders.width - thisBorders.width) / 2;
                break;
            case DIRECTIONS.left:
            case DIRECTIONS.right:
                heightCorrection =
                    targetBorders.top -
                        thisBorders.top +
                        (targetBorders.height - thisBorders.height) / 2;
                break;
        }
        /** Setting up relative positioning for all cases */
        switch (this._currentDirection) {
            case DIRECTIONS.top:
                heightCorrection = targetBorders.top - thisBorders.bottom;
                break;
            case DIRECTIONS.left:
                widthCorrection = targetBorders.left - thisBorders.right;
                break;
            case DIRECTIONS.right:
                widthCorrection = targetBorders.right - thisBorders.left;
                break;
            case DIRECTIONS.bottom:
                heightCorrection = targetBorders.bottom - thisBorders.top;
                break;
        }
        /** Correcting positioning due to overflow problems */
        if (thisBorders.bottom + heightCorrection > window.innerHeight) {
            heightCorrection +=
                window.innerHeight - (thisBorders.bottom + heightCorrection);
        }
        if (thisBorders.top + heightCorrection < 0) {
            heightCorrection -= thisBorders.top + heightCorrection;
        }
        if (thisBorders.right + widthCorrection > window.innerWidth) {
            widthCorrection +=
                window.innerWidth - (thisBorders.right + widthCorrection);
        }
        if (thisBorders.left + widthCorrection < 0) {
            widthCorrection -= thisBorders.left + widthCorrection;
        }
        /** set the position adjustments to the emoji picker element */
        this._renderer.setStyle(this._el.nativeElement, "transform", "translate(" + widthCorrection + "px," + heightCorrection + "px)");
    };
    EmojiPickerComponent.prototype.onBackground = function (event) {
        /** internal mousedowns are ignored */
        if (event === this._lastHostMousedownEvent || event.emojiPickerExempt) {
            return;
        }
        this.pickerCloseEmitter.emit(event);
    };
    EmojiPickerComponent.prototype.ngOnDestroy = function () {
        this._destroyed.next(true);
    };
    EmojiPickerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Output("emoji-select"),
        __metadata("design:type", Object)
    ], EmojiPickerComponent.prototype, "selectionEmitter", void 0);
    __decorate([
        Output("picker-close"),
        __metadata("design:type", Object)
    ], EmojiPickerComponent.prototype, "pickerCloseEmitter", void 0);
    EmojiPickerComponent = __decorate([ __metadata("design:paramtypes", [Renderer2, ElementRef])
    ], EmojiPickerComponent);
EmojiPickerComponent.ɵfac = function EmojiPickerComponent_Factory(t) { return new (t || EmojiPickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
EmojiPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EmojiPickerComponent, selectors: [["emoji-picker"]], hostBindings: function EmojiPickerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function EmojiPickerComponent_click_HostBindingHandler($event) { return ctx.onBackground($event); }, false, ɵngcc0.ɵɵresolveDocument)("click", function EmojiPickerComponent_click_HostBindingHandler($event) { return ctx._lastHostMousedownEvent = $event; })("resize", function EmojiPickerComponent_resize_HostBindingHandler($event) { return ctx._windowResize.next($event); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, outputs: { selectionEmitter: "emoji-select", pickerCloseEmitter: "picker-close" }, decls: 1, vars: 0, consts: [[3, "emoji-selection"]], template: function EmojiPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "emoji-content", 0);
        ɵngcc0.ɵɵlistener("emoji-selection", function EmojiPickerComponent_Template_emoji_content_emoji_selection_0_listener($event) { return ctx.selectionEmitter.emit($event); });
        ɵngcc0.ɵɵelementEnd();
    } }, directives: [ɵngcc1.EmojiContentComponent], styles: ["[_nghost-%COMP%] { position: absolute; z-index: 9999; display: none; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmojiPickerComponent, [{
        type: Component,
        args: [{
                selector: "emoji-picker",
                template: "\n    <emoji-content\n      (emoji-selection)=\"selectionEmitter.emit($event)\"\n    ></emoji-content>\n  ",
                host: {
                    "(document:click)": "onBackground($event)",
                    "(click)": "_lastHostMousedownEvent = $event",
                    "(window:resize)": "_windowResize.next($event)"
                },
                styles: [":host { position: absolute; z-index: 9999; display: none; }"]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { selectionEmitter: [{
            type: Output,
            args: ["emoji-select"]
        }], pickerCloseEmitter: [{
            type: Output,
            args: ["picker-close"]
        }] }); })();
    return EmojiPickerComponent;
}());
export { EmojiPickerComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,