import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { CountryCode } from './data/country-code';
import { CountryISO } from './enums/country-iso.enum';
import { SearchCountryField } from './enums/search-country-field.enum';
import { TooltipLabel } from './enums/tooltip-label.enum';
import { ChangeData } from './interfaces/change-data';
import { Country } from './model/country.model';
import { PhoneNumberFormat } from './enums/phone-number-format.enum';
import * as ɵngcc0 from '@angular/core';
export declare class NgxIntlTelInputComponent implements OnInit, OnChanges {
    private countryCodeData;
    value: string;
    preferredCountries: Array<string>;
    enablePlaceholder: boolean;
    customPlaceholder: string;
    numberFormat: PhoneNumberFormat;
    cssClass: string;
    onlyCountries: Array<string>;
    enableAutoCountrySelect: boolean;
    searchCountryFlag: boolean;
    searchCountryField: SearchCountryField[];
    searchCountryPlaceholder: string;
    maxLength: string;
    tooltipField: TooltipLabel;
    selectFirstCountry: boolean;
    selectedCountryISO: CountryISO;
    phoneValidation: boolean;
    inputId: string;
    separateDialCode: boolean;
    separateDialCodeClass: string;
    readonly countryChange: EventEmitter<Country>;
    selectedCountry: Country;
    phoneNumber: string;
    allCountries: Array<Country>;
    preferredCountriesInDropDown: Array<Country>;
    phoneUtil: any;
    disabled: boolean;
    errors: Array<any>;
    countrySearchText: string;
    countryList: ElementRef;
    onTouched: () => void;
    propagateChange: (_: ChangeData) => void;
    constructor(countryCodeData: CountryCode);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    init(): void;
    setSelectedCountry(country: Country): void;
    /**
     * Search country based on country name, iso2, dialCode or all of them.
     */
    searchCountry(): void;
    onPhoneNumberChange(): void;
    onCountrySelect(country: Country, el: any): void;
    onInputKeyPress(event: KeyboardEvent): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(obj: any): void;
    resolvePlaceholder(): string;
    /**
     * Returns parse PhoneNumber object.
     * @param phoneNumber string
     * @param countryCode string
     */
    private getParsedNumber;
    /**
     * Adjusts input alignment based on the dial code presentation style.
     */
    private checkSeparateDialCodeStyle;
    /**
     * Cleans dialcode from phone number string.
     * @param phoneNumber string
     */
    private removeDialCode;
    /**
     * Sifts through all countries and returns iso code of the primary country
     * based on the number provided.
     * @param countryCode country code in number format
     * @param number PhoneNumber object
     */
    private getCountryIsoCode;
    /**
     * Gets formatted example phone number from phoneUtil.
     * @param countryCode string
     */
    protected getPhoneNumberPlaceHolder(countryCode: string): string;
    /**
     * Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248)
     */
    protected fetchCountryData(): void;
    /**
     * Populates preferredCountriesInDropDown with prefferred countries.
     */
    private updatePreferredCountries;
    /**
     * Updates selectedCountry.
     */
    private updateSelectedCountry;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxIntlTelInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxIntlTelInputComponent, "ngx-intl-tel-input", never, { "value": "value"; "preferredCountries": "preferredCountries"; "enablePlaceholder": "enablePlaceholder"; "numberFormat": "numberFormat"; "cssClass": "cssClass"; "onlyCountries": "onlyCountries"; "enableAutoCountrySelect": "enableAutoCountrySelect"; "searchCountryFlag": "searchCountryFlag"; "searchCountryField": "searchCountryField"; "searchCountryPlaceholder": "searchCountryPlaceholder"; "maxLength": "maxLength"; "selectFirstCountry": "selectFirstCountry"; "phoneValidation": "phoneValidation"; "inputId": "inputId"; "separateDialCode": "separateDialCode"; "customPlaceholder": "customPlaceholder"; "tooltipField": "tooltipField"; "selectedCountryISO": "selectedCountryISO"; }, { "countryChange": "countryChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWludGwtdGVsLWlucHV0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtaW50bC10ZWwtaW5wdXQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvdW50cnlDb2RlIH0gZnJvbSAnLi9kYXRhL2NvdW50cnktY29kZSc7XG5pbXBvcnQgeyBDb3VudHJ5SVNPIH0gZnJvbSAnLi9lbnVtcy9jb3VudHJ5LWlzby5lbnVtJztcbmltcG9ydCB7IFNlYXJjaENvdW50cnlGaWVsZCB9IGZyb20gJy4vZW51bXMvc2VhcmNoLWNvdW50cnktZmllbGQuZW51bSc7XG5pbXBvcnQgeyBUb29sdGlwTGFiZWwgfSBmcm9tICcuL2VudW1zL3Rvb2x0aXAtbGFiZWwuZW51bSc7XG5pbXBvcnQgeyBDaGFuZ2VEYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzL2NoYW5nZS1kYXRhJztcbmltcG9ydCB7IENvdW50cnkgfSBmcm9tICcuL21vZGVsL2NvdW50cnkubW9kZWwnO1xuaW1wb3J0IHsgUGhvbmVOdW1iZXJGb3JtYXQgfSBmcm9tICcuL2VudW1zL3Bob25lLW51bWJlci1mb3JtYXQuZW51bSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hJbnRsVGVsSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBjb3VudHJ5Q29kZURhdGE7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBwcmVmZXJyZWRDb3VudHJpZXM6IEFycmF5PHN0cmluZz47XG4gICAgZW5hYmxlUGxhY2Vob2xkZXI6IGJvb2xlYW47XG4gICAgY3VzdG9tUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBudW1iZXJGb3JtYXQ6IFBob25lTnVtYmVyRm9ybWF0O1xuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG4gICAgb25seUNvdW50cmllczogQXJyYXk8c3RyaW5nPjtcbiAgICBlbmFibGVBdXRvQ291bnRyeVNlbGVjdDogYm9vbGVhbjtcbiAgICBzZWFyY2hDb3VudHJ5RmxhZzogYm9vbGVhbjtcbiAgICBzZWFyY2hDb3VudHJ5RmllbGQ6IFNlYXJjaENvdW50cnlGaWVsZFtdO1xuICAgIHNlYXJjaENvdW50cnlQbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIG1heExlbmd0aDogc3RyaW5nO1xuICAgIHRvb2x0aXBGaWVsZDogVG9vbHRpcExhYmVsO1xuICAgIHNlbGVjdEZpcnN0Q291bnRyeTogYm9vbGVhbjtcbiAgICBzZWxlY3RlZENvdW50cnlJU086IENvdW50cnlJU087XG4gICAgcGhvbmVWYWxpZGF0aW9uOiBib29sZWFuO1xuICAgIGlucHV0SWQ6IHN0cmluZztcbiAgICBzZXBhcmF0ZURpYWxDb2RlOiBib29sZWFuO1xuICAgIHNlcGFyYXRlRGlhbENvZGVDbGFzczogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNvdW50cnlDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDb3VudHJ5PjtcbiAgICBzZWxlY3RlZENvdW50cnk6IENvdW50cnk7XG4gICAgcGhvbmVOdW1iZXI6IHN0cmluZztcbiAgICBhbGxDb3VudHJpZXM6IEFycmF5PENvdW50cnk+O1xuICAgIHByZWZlcnJlZENvdW50cmllc0luRHJvcERvd246IEFycmF5PENvdW50cnk+O1xuICAgIHBob25lVXRpbDogYW55O1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGVycm9yczogQXJyYXk8YW55PjtcbiAgICBjb3VudHJ5U2VhcmNoVGV4dDogc3RyaW5nO1xuICAgIGNvdW50cnlMaXN0OiBFbGVtZW50UmVmO1xuICAgIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICBwcm9wYWdhdGVDaGFuZ2U6IChfOiBDaGFuZ2VEYXRhKSA9PiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGNvdW50cnlDb2RlRGF0YTogQ291bnRyeUNvZGUpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgaW5pdCgpOiB2b2lkO1xuICAgIHNldFNlbGVjdGVkQ291bnRyeShjb3VudHJ5OiBDb3VudHJ5KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZWFyY2ggY291bnRyeSBiYXNlZCBvbiBjb3VudHJ5IG5hbWUsIGlzbzIsIGRpYWxDb2RlIG9yIGFsbCBvZiB0aGVtLlxuICAgICAqL1xuICAgIHNlYXJjaENvdW50cnkoKTogdm9pZDtcbiAgICBvblBob25lTnVtYmVyQ2hhbmdlKCk6IHZvaWQ7XG4gICAgb25Db3VudHJ5U2VsZWN0KGNvdW50cnk6IENvdW50cnksIGVsOiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRLZXlQcmVzcyhldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkO1xuICAgIHJlc29sdmVQbGFjZWhvbGRlcigpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBwYXJzZSBQaG9uZU51bWJlciBvYmplY3QuXG4gICAgICogQHBhcmFtIHBob25lTnVtYmVyIHN0cmluZ1xuICAgICAqIEBwYXJhbSBjb3VudHJ5Q29kZSBzdHJpbmdcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFBhcnNlZE51bWJlcjtcbiAgICAvKipcbiAgICAgKiBBZGp1c3RzIGlucHV0IGFsaWdubWVudCBiYXNlZCBvbiB0aGUgZGlhbCBjb2RlIHByZXNlbnRhdGlvbiBzdHlsZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNoZWNrU2VwYXJhdGVEaWFsQ29kZVN0eWxlO1xuICAgIC8qKlxuICAgICAqIENsZWFucyBkaWFsY29kZSBmcm9tIHBob25lIG51bWJlciBzdHJpbmcuXG4gICAgICogQHBhcmFtIHBob25lTnVtYmVyIHN0cmluZ1xuICAgICAqL1xuICAgIHByaXZhdGUgcmVtb3ZlRGlhbENvZGU7XG4gICAgLyoqXG4gICAgICogU2lmdHMgdGhyb3VnaCBhbGwgY291bnRyaWVzIGFuZCByZXR1cm5zIGlzbyBjb2RlIG9mIHRoZSBwcmltYXJ5IGNvdW50cnlcbiAgICAgKiBiYXNlZCBvbiB0aGUgbnVtYmVyIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSBjb3VudHJ5Q29kZSBjb3VudHJ5IGNvZGUgaW4gbnVtYmVyIGZvcm1hdFxuICAgICAqIEBwYXJhbSBudW1iZXIgUGhvbmVOdW1iZXIgb2JqZWN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDb3VudHJ5SXNvQ29kZTtcbiAgICAvKipcbiAgICAgKiBHZXRzIGZvcm1hdHRlZCBleGFtcGxlIHBob25lIG51bWJlciBmcm9tIHBob25lVXRpbC5cbiAgICAgKiBAcGFyYW0gY291bnRyeUNvZGUgc3RyaW5nXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFBob25lTnVtYmVyUGxhY2VIb2xkZXIoY291bnRyeUNvZGU6IHN0cmluZyk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDbGVhcmluZyB0aGUgbGlzdCB0byBhdm9pZCBkdXBsaWNhdGVzIChodHRwczovL2dpdGh1Yi5jb20vd2ViY2F0MTIzNDUvbmd4LWludGwtdGVsLWlucHV0L2lzc3Vlcy8yNDgpXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZldGNoQ291bnRyeURhdGEoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQb3B1bGF0ZXMgcHJlZmVycmVkQ291bnRyaWVzSW5Ecm9wRG93biB3aXRoIHByZWZmZXJyZWQgY291bnRyaWVzLlxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlUHJlZmVycmVkQ291bnRyaWVzO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgc2VsZWN0ZWRDb3VudHJ5LlxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlU2VsZWN0ZWRDb3VudHJ5O1xufVxuIl19