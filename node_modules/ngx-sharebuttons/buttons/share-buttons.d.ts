import { OnInit, OnChanges, OnDestroy, EventEmitter, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { ShareService } from 'ngx-sharebuttons';
import * as ɵngcc0 from '@angular/core';
interface ButtonsState {
    includedButtons?: string[];
    excludedButtons?: string[];
    userButtons?: string[];
    selectedButtons?: string[];
    expanded?: boolean;
    shownCount?: number;
    moreIcon?: any;
    lessIcon?: any;
}
export declare class ShareButtons implements OnInit, OnChanges, OnDestroy {
    private _share;
    state$: Observable<ButtonsState>;
    private _state$;
    private _configSub$;
    theme: string;
    /** Array of included buttons */
    include: string[];
    /** Array of excluded buttons */
    exclude: string[];
    /** Numbers of buttons to show */
    show: number;
    /** The sharing link */
    url: string;
    /** The title parameter */
    title: string;
    /** The description parameter */
    description: string;
    /** The image parameter for sharing on Pinterest */
    image: string;
    /** The tags parameter for sharing on Twitter and Tumblr */
    tags: string;
    /** Sets meta tags from document head, useful when SEO is available */
    autoSetMeta: boolean;
    /** Show buttons icons */
    showIcon: boolean;
    /** Show buttons text */
    showText: boolean;
    /** Buttons size */
    size: number;
    /** A flag that indicates if the button's click is disabled */
    disabled: boolean;
    /** Share dialog opened event */
    opened: EventEmitter<string>;
    /** Share dialog closed event */
    closed: EventEmitter<string>;
    constructor(_share: ShareService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateState(state: ButtonsState): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShareButtons, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ShareButtons, "share-buttons", never, { "theme": "theme"; "showIcon": "showIcon"; "showText": "showText"; "size": "size"; "include": "include"; "exclude": "exclude"; "show": "show"; "url": "url"; "title": "title"; "description": "description"; "image": "image"; "tags": "tags"; "autoSetMeta": "autoSetMeta"; "disabled": "disabled"; }, { "opened": "opened"; "closed": "closed"; }, never, never>;
}
export {};
/**
 * Explanation of the above code:
 * ------------------------------
 Include buttons: includes only wanted buttons and excludes the rest
 Exclude buttons: excludes only the unwanted buttons
 User buttons = Include buttons - exclude buttons
 Selected Buttons = User buttons [shown number]
 */

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9ucy5kLnRzIiwic291cmNlcyI6WyJzaGFyZS1idXR0b25zLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNoYXJlU2VydmljZSB9IGZyb20gJ25neC1zaGFyZWJ1dHRvbnMnO1xuaW50ZXJmYWNlIEJ1dHRvbnNTdGF0ZSB7XG4gICAgaW5jbHVkZWRCdXR0b25zPzogc3RyaW5nW107XG4gICAgZXhjbHVkZWRCdXR0b25zPzogc3RyaW5nW107XG4gICAgdXNlckJ1dHRvbnM/OiBzdHJpbmdbXTtcbiAgICBzZWxlY3RlZEJ1dHRvbnM/OiBzdHJpbmdbXTtcbiAgICBleHBhbmRlZD86IGJvb2xlYW47XG4gICAgc2hvd25Db3VudD86IG51bWJlcjtcbiAgICBtb3JlSWNvbj86IGFueTtcbiAgICBsZXNzSWNvbj86IGFueTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNoYXJlQnV0dG9ucyBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX3NoYXJlO1xuICAgIHN0YXRlJDogT2JzZXJ2YWJsZTxCdXR0b25zU3RhdGU+O1xuICAgIHByaXZhdGUgX3N0YXRlJDtcbiAgICBwcml2YXRlIF9jb25maWdTdWIkO1xuICAgIHRoZW1lOiBzdHJpbmc7XG4gICAgLyoqIEFycmF5IG9mIGluY2x1ZGVkIGJ1dHRvbnMgKi9cbiAgICBpbmNsdWRlOiBzdHJpbmdbXTtcbiAgICAvKiogQXJyYXkgb2YgZXhjbHVkZWQgYnV0dG9ucyAqL1xuICAgIGV4Y2x1ZGU6IHN0cmluZ1tdO1xuICAgIC8qKiBOdW1iZXJzIG9mIGJ1dHRvbnMgdG8gc2hvdyAqL1xuICAgIHNob3c6IG51bWJlcjtcbiAgICAvKiogVGhlIHNoYXJpbmcgbGluayAqL1xuICAgIHVybDogc3RyaW5nO1xuICAgIC8qKiBUaGUgdGl0bGUgcGFyYW1ldGVyICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKiogVGhlIGRlc2NyaXB0aW9uIHBhcmFtZXRlciAqL1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgLyoqIFRoZSBpbWFnZSBwYXJhbWV0ZXIgZm9yIHNoYXJpbmcgb24gUGludGVyZXN0ICovXG4gICAgaW1hZ2U6IHN0cmluZztcbiAgICAvKiogVGhlIHRhZ3MgcGFyYW1ldGVyIGZvciBzaGFyaW5nIG9uIFR3aXR0ZXIgYW5kIFR1bWJsciAqL1xuICAgIHRhZ3M6IHN0cmluZztcbiAgICAvKiogU2V0cyBtZXRhIHRhZ3MgZnJvbSBkb2N1bWVudCBoZWFkLCB1c2VmdWwgd2hlbiBTRU8gaXMgYXZhaWxhYmxlICovXG4gICAgYXV0b1NldE1ldGE6IGJvb2xlYW47XG4gICAgLyoqIFNob3cgYnV0dG9ucyBpY29ucyAqL1xuICAgIHNob3dJY29uOiBib29sZWFuO1xuICAgIC8qKiBTaG93IGJ1dHRvbnMgdGV4dCAqL1xuICAgIHNob3dUZXh0OiBib29sZWFuO1xuICAgIC8qKiBCdXR0b25zIHNpemUgKi9cbiAgICBzaXplOiBudW1iZXI7XG4gICAgLyoqIEEgZmxhZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgYnV0dG9uJ3MgY2xpY2sgaXMgZGlzYWJsZWQgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKiogU2hhcmUgZGlhbG9nIG9wZW5lZCBldmVudCAqL1xuICAgIG9wZW5lZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgLyoqIFNoYXJlIGRpYWxvZyBjbG9zZWQgZXZlbnQgKi9cbiAgICBjbG9zZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIGNvbnN0cnVjdG9yKF9zaGFyZTogU2hhcmVTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgdXBkYXRlU3RhdGUoc3RhdGU6IEJ1dHRvbnNTdGF0ZSk6IHZvaWQ7XG59XG5leHBvcnQge307XG4vKipcbiAqIEV4cGxhbmF0aW9uIG9mIHRoZSBhYm92ZSBjb2RlOlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gSW5jbHVkZSBidXR0b25zOiBpbmNsdWRlcyBvbmx5IHdhbnRlZCBidXR0b25zIGFuZCBleGNsdWRlcyB0aGUgcmVzdFxuIEV4Y2x1ZGUgYnV0dG9uczogZXhjbHVkZXMgb25seSB0aGUgdW53YW50ZWQgYnV0dG9uc1xuIFVzZXIgYnV0dG9ucyA9IEluY2x1ZGUgYnV0dG9ucyAtIGV4Y2x1ZGUgYnV0dG9uc1xuIFNlbGVjdGVkIEJ1dHRvbnMgPSBVc2VyIGJ1dHRvbnMgW3Nob3duIG51bWJlcl1cbiAqL1xuIl19