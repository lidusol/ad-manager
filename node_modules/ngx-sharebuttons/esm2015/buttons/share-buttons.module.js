import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
// import { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from '../../src/public-api';
// import { ShareButtonModule } from '../../button/src/public_api';
// Uncomment the following in development mode
import { SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';
import { ShareButtonModule } from 'ngx-sharebuttons/button';
import { ShareButtons } from './share-buttons';
import { ExpandButton } from './expand-button';
import * as ɵngcc0 from '@angular/core';
export class ShareButtonsModule {
    static withConfig(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [{ provide: SHARE_BUTTONS_CONFIG, useValue: config }]
        };
    }
}
ShareButtonsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShareButtonsModule });
ShareButtonsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ShareButtonsModule_Factory(t) { return new (t || ShareButtonsModule)(); }, imports: [[
            ShareButtonModule,
            CommonModule
        ],
        ShareButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShareButtonsModule, { declarations: function () { return [ShareButtons,
        ExpandButton]; }, imports: function () { return [ShareButtonModule,
        CommonModule]; }, exports: function () { return [ShareButtonModule,
        ShareButtons]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareButtonsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ShareButtons,
                    ExpandButton
                ],
                imports: [
                    ShareButtonModule,
                    CommonModule
                ],
                exports: [
                    ShareButtonModule,
                    ShareButtons
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9ucy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvYnV0dG9ucy9zcmMvc2hhcmUtYnV0dG9ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLG1GQUFtRjtBQUNuRixtRUFBbUU7QUFDbkUsOENBQThDO0FBQzlDLE9BQU8sRUFBc0Isb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQWdCL0MsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBMkI7QUFBSSxRQUMvQyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsa0JBQWtCO0FBQ2xDLFlBQU0sU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBQyxDQUFDO0FBQ3BFLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzhDQXJCQyxRQUFRLFNBQUM7QUFDUixZQUFZLEVBQUUsc0JBQ1osWUFBWSxzQkFDWixZQUFZLGtCQUNiLGtCQUNELE9BQU8sRUFBRSxzQkFDUDtTQUFpQjtBQUNqQixZQUFZO0tBQ2I7WUFDRCxPQUFPLEVBQUU7WUFDUCxpQkFBaUIsc0JBQ2pCLFlBQVksa0JBQ2IsY0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vLyBpbXBvcnQgeyBTaGFyZUJ1dHRvbnNDb25maWcsIFNIQVJFX0JVVFRPTlNfQ09ORklHIH0gZnJvbSAnLi4vLi4vc3JjL3B1YmxpYy1hcGknO1xuLy8gaW1wb3J0IHsgU2hhcmVCdXR0b25Nb2R1bGUgfSBmcm9tICcuLi8uLi9idXR0b24vc3JjL3B1YmxpY19hcGknO1xuLy8gVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgaW4gZGV2ZWxvcG1lbnQgbW9kZVxuaW1wb3J0IHsgU2hhcmVCdXR0b25zQ29uZmlnLCBTSEFSRV9CVVRUT05TX0NPTkZJRyB9IGZyb20gJ25neC1zaGFyZWJ1dHRvbnMnO1xuaW1wb3J0IHsgU2hhcmVCdXR0b25Nb2R1bGUgfSBmcm9tICduZ3gtc2hhcmVidXR0b25zL2J1dHRvbic7XG5cbmltcG9ydCB7IFNoYXJlQnV0dG9ucyB9IGZyb20gJy4vc2hhcmUtYnV0dG9ucyc7XG5pbXBvcnQgeyBFeHBhbmRCdXR0b24gfSBmcm9tICcuL2V4cGFuZC1idXR0b24nO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTaGFyZUJ1dHRvbnMsXG4gICAgRXhwYW5kQnV0dG9uXG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBTaGFyZUJ1dHRvbk1vZHVsZSxcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFNoYXJlQnV0dG9uTW9kdWxlLFxuICAgIFNoYXJlQnV0dG9uc1xuICBdXG59KVxuZXhwb3J0IGNsYXNzIFNoYXJlQnV0dG9uc01vZHVsZSB7XG4gIHN0YXRpYyB3aXRoQ29uZmlnKGNvbmZpZz86IFNoYXJlQnV0dG9uc0NvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8U2hhcmVCdXR0b25zTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBTaGFyZUJ1dHRvbnNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogU0hBUkVfQlVUVE9OU19DT05GSUcsIHVzZVZhbHVlOiBjb25maWd9XVxuICAgIH07XG4gIH1cbn1cbiJdfQ==