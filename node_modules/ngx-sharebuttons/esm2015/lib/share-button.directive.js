import { Directive, Input, Output, HostListener, Inject, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Meta } from '@angular/platform-browser';
import { Platform } from '@angular/cdk/platform';
import { Clipboard } from '@angular/cdk/clipboard';
import { EMPTY, Observable, Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
import { ShareService } from './share.service';
import { SharerMethod } from './share.models';
import { getValidUrl } from './utils';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/cdk/platform';
import * as ɵngcc3 from '@angular/cdk/clipboard';
export class ShareDirective {
    constructor(_el, _meta, _platform, _clipboard, _share, _cd, _document) {
        this._meta = _meta;
        this._platform = _platform;
        this._clipboard = _clipboard;
        this._share = _share;
        this._cd = _cd;
        this._document = _document;
        /** Stream that emits when button is destroyed */
        this._destroyed = new Subject();
        /** Stream that emit when share button need to be updated */
        this._updater = new Subject();
        /** Set meta tags from document head, useful when SEO is supported */
        this.autoSetMeta = this._share.config.autoSetMeta;
        /** Sharing link */
        this.url = this._share.config.url;
        /** Sets the title parameter */
        this.title = this._share.config.title;
        /** Sets the description parameter */
        this.description = this._share.config.description;
        /** Sets the image parameter for sharing on Pinterest */
        this.image = this._share.config.image;
        /** Sets the tags parameter for sharing on Twitter and Tumblr */
        this.tags = this._share.config.tags;
        /** Stream that emits when share dialog is opened */
        this.opened = new EventEmitter();
        /** Stream that emits when share dialog is closed */
        this.closed = new EventEmitter();
        this._el = _el.nativeElement;
    }
    /**
     * Share the link
     */
    share() {
        // Avoid SSR error
        if (this._platform.isBrowser && this.shareButton) {
            // Prepare sharer url params
            const params = this.autoSetMeta ? this.getParamsFromMetaTags() : this.getParamsFromInputs();
            // Prepare share button click
            const click = this.shareButton.share ? this.open(params) : this.shareButton.func({
                params,
                data: this.shareButton.data,
                clipboard: this._clipboard,
                updater: this._updater
            });
            click.pipe(takeUntil(this._destroyed)).subscribe();
        }
        else {
            console.warn(`${this.text} button is not compatible on this Platform`);
        }
    }
    ngOnInit() {
        // This stream is mainly used to update the copy button text and icon when it is being clicked
        this._updater.pipe(tap((data) => {
            this.icon = data.icon;
            this.text = data.text;
            this._el.style.pointerEvents = data.disabled ? 'none' : 'auto';
            this._cd.markForCheck();
        }), takeUntil(this._destroyed)).subscribe();
    }
    ngOnChanges(changes) {
        // Avoid SSR error
        if (this._platform.isBrowser) {
            // Create share button
            if (this._shareButtonChanged(changes.shareButtonName)) {
                this._createShareButton();
            }
            // Prepare share url
            if (this._urlChanged(changes.url)) {
                this.url = getValidUrl(this.autoSetMeta
                    ? this.url || this._getMetaTagContent('og:url')
                    : this.url, this._document.defaultView.location.href);
            }
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    _createShareButton() {
        const button = this._share.config.prop[this.shareButtonName];
        if (button) {
            // Set share button properties
            this.shareButton = button;
            // Remove previous button class
            this._el.classList.remove(`sb-${this._buttonClass}`);
            // Add new button class
            this._el.classList.add(`sb-${this.shareButtonName}`);
            // Set button css color variable
            this._el.style.setProperty('--button-color', this.shareButton.color);
            // Keep a copy of the class for future replacement
            this._buttonClass = this.shareButtonName;
            this.color = this.shareButton.color;
            this.text = this.shareButton.text;
            this.icon = this.shareButton.icon;
            // Set aria-label attribute
            this._el.setAttribute('aria-label', button.ariaLabel);
        }
        else {
            console.error(`[ShareButtons]: The share button '${this.shareButtonName}' does not exist!`);
        }
    }
    /**
     * Get meta tag content
     */
    _getMetaTagContent(key) {
        const metaUsingProperty = this._meta.getTag(`property="${key}"`);
        if (metaUsingProperty) {
            return metaUsingProperty.getAttribute('content');
        }
        const metaUsingName = this._meta.getTag(`name="${key}"`);
        if (metaUsingName) {
            return metaUsingName.getAttribute('content');
        }
    }
    _shareButtonChanged(change) {
        return change && (change.firstChange || change.previousValue !== change.currentValue);
    }
    _urlChanged(change) {
        return !this.url || (change && change.previousValue !== change.currentValue);
    }
    /**
     * Get share params from meta tags first and fallback to user inputs
     */
    getParamsFromMetaTags() {
        return {
            url: this.url,
            title: this.title || this._getMetaTagContent('og:title'),
            description: this.description || this._getMetaTagContent('og:description'),
            image: this.image || this._getMetaTagContent('og:image'),
            via: this._share.config.twitterAccount,
            tags: this.tags
        };
    }
    /**
     * Get share params from user inputs
     */
    getParamsFromInputs() {
        return {
            url: this.url,
            title: this.title,
            description: this.description,
            image: this.image,
            tags: this.tags,
            via: this._share.config.twitterAccount,
        };
    }
    open(params) {
        // Set sharer link based on user's device
        let sharerLink;
        if (this._platform.IOS && this.shareButton.share.ios) {
            sharerLink = this.shareButton.share.ios;
        }
        else if (this._platform.ANDROID && this.shareButton.share.android) {
            sharerLink = this.shareButton.share.android;
        }
        else {
            sharerLink = this.shareButton.share.desktop;
        }
        if (sharerLink) {
            // Set sharer link params
            this._finalUrl = sharerLink + this._serializeParams(params);
            // Log the sharer link in debug mode
            if (this._share.config.debug) {
                console.log('[DEBUG SHARE BUTTON]: ', this._finalUrl);
            }
            // Open the share window
            // There are two methods available for opening the share window:
            // 1. Using a real anchor
            // 2. Using window.open
            const sharerMethod = this.shareButton.method || this._share.config.sharerMethod;
            const sharerTarget = this.shareButton.target || this._share.config.sharerTarget;
            switch (sharerMethod) {
                case SharerMethod.Anchor:
                    const linkElement = this._document.createElement('a');
                    // Make it open in a new tab/window (depends on user's browser configuration)
                    linkElement.setAttribute('target', sharerTarget);
                    // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
                    linkElement.setAttribute('rel', 'noopener noreferrer');
                    linkElement.href = this._finalUrl;
                    linkElement.click();
                    linkElement.remove();
                    break;
                case SharerMethod.Window:
                    // Open link using Window object
                    const openWindow = this._share.config.windowObj[this._share.config.windowFuncName];
                    const popUpWindow = openWindow(this._finalUrl, sharerTarget, this._share.windowSize);
                    // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
                    this._share.config.windowObj.opener = null;
                    // Resolve when share dialog is closed
                    if (popUpWindow) {
                        return new Observable((sub) => {
                            const pollTimer = this._document.defaultView.setInterval(() => {
                                if (popUpWindow.closed) {
                                    this._document.defaultView.clearInterval(pollTimer);
                                    // Emit when share windows is closed
                                    this.closed.emit(this.shareButtonName);
                                    sub.next();
                                    sub.complete();
                                }
                            }, 200);
                        });
                    }
                    break;
            }
            // Emit when share window is opened
            this.opened.emit(this.shareButtonName);
        }
        return EMPTY;
    }
    _serializeParams(params) {
        return Object.entries(this.shareButton.params)
            .map(([key, value]) => {
            // Check if share button param has a map function
            const paramFunc = this.shareButton.paramsFunc ? this.shareButton.paramsFunc[key] : null;
            if (params[key] || paramFunc) {
                const paramValue = paramFunc ? paramFunc(params) : params[key];
                return `${value}=${encodeURIComponent(paramValue)}`;
            }
            return '';
        })
            .filter(urlParam => urlParam !== '')
            .join('&');
    }
}
ShareDirective.ɵfac = function ShareDirective_Factory(t) { return new (t || ShareDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Meta), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Clipboard), ɵngcc0.ɵɵdirectiveInject(ShareService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ShareDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ShareDirective, selectors: [["", "shareButton", ""]], hostBindings: function ShareDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ShareDirective_click_HostBindingHandler() { return ctx.share(); });
    } }, inputs: { autoSetMeta: "autoSetMeta", url: "url", title: "title", description: "description", image: "image", tags: "tags", shareButtonName: ["shareButton", "shareButtonName"] }, outputs: { opened: "opened", closed: "closed" }, exportAs: ["shareButton"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
ShareDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Meta },
    { type: Platform },
    { type: Clipboard },
    { type: ShareService },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ShareDirective.propDecorators = {
    shareButtonName: [{ type: Input, args: ['shareButton',] }],
    autoSetMeta: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    share: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareDirective, [{
        type: Directive,
        args: [{
                selector: '[shareButton]',
                exportAs: 'shareButton'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Meta }, { type: ɵngcc2.Platform }, { type: ɵngcc3.Clipboard }, { type: ShareService }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { autoSetMeta: [{
            type: Input
        }], url: [{
            type: Input
        }], title: [{
            type: Input
        }], description: [{
            type: Input
        }], image: [{
            type: Input
        }], tags: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], share: [{
            type: HostListener,
            args: ['click']
        }], shareButtonName: [{
            type: Input,
            args: ['shareButton']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,