import { OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';
import { Meta } from '@angular/platform-browser';
import { Platform } from '@angular/cdk/platform';
import { Clipboard } from '@angular/cdk/clipboard';
import { ShareService } from './share.service';
import { IShareButton } from './share.models';
import * as ɵngcc0 from '@angular/core';
export declare class ShareDirective implements OnInit, OnChanges, OnDestroy {
    private _meta;
    private _platform;
    private _clipboard;
    private _share;
    private _cd;
    private _document;
    /** Variable used to check for the final sharer url (For testing only) */
    private _finalUrl;
    /** Share directive element ref */
    private readonly _el;
    /** A ref to button class - used to remove previous class when the button type is changed */
    private _buttonClass;
    /** Stream that emits when button is destroyed */
    private readonly _destroyed;
    /** Stream that emit when share button need to be updated */
    private readonly _updater;
    /** Share button properties */
    shareButton: IShareButton;
    /** Share button color */
    color: string;
    /** Share button text */
    text: string;
    /** Share button icon */
    icon: string | string[];
    /** Share button type */
    shareButtonName: string;
    /** Set meta tags from document head, useful when SEO is supported */
    autoSetMeta: boolean;
    /** Sharing link */
    url: string;
    /** Sets the title parameter */
    title: string;
    /** Sets the description parameter */
    description: string;
    /** Sets the image parameter for sharing on Pinterest */
    image: string;
    /** Sets the tags parameter for sharing on Twitter and Tumblr */
    tags: string;
    /** Stream that emits when share dialog is opened */
    opened: EventEmitter<string>;
    /** Stream that emits when share dialog is closed */
    closed: EventEmitter<string>;
    constructor(_el: ElementRef, _meta: Meta, _platform: Platform, _clipboard: Clipboard, _share: ShareService, _cd: ChangeDetectorRef, _document: any);
    /**
     * Share the link
     */
    share(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private _createShareButton;
    /**
     * Get meta tag content
     */
    private _getMetaTagContent;
    private _shareButtonChanged;
    private _urlChanged;
    /**
     * Get share params from meta tags first and fallback to user inputs
     */
    private getParamsFromMetaTags;
    /**
     * Get share params from user inputs
     */
    private getParamsFromInputs;
    private open;
    private _serializeParams;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShareDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ShareDirective, "[shareButton]", ["shareButton"], { "autoSetMeta": "autoSetMeta"; "url": "url"; "title": "title"; "description": "description"; "image": "image"; "tags": "tags"; "shareButtonName": "shareButton"; }, { "opened": "opened"; "closed": "closed"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzaGFyZS1idXR0b24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcywgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWV0YSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgQ2xpcGJvYXJkIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NsaXBib2FyZCc7XG5pbXBvcnQgeyBTaGFyZVNlcnZpY2UgfSBmcm9tICcuL3NoYXJlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSVNoYXJlQnV0dG9uIH0gZnJvbSAnLi9zaGFyZS5tb2RlbHMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2hhcmVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9tZXRhO1xuICAgIHByaXZhdGUgX3BsYXRmb3JtO1xuICAgIHByaXZhdGUgX2NsaXBib2FyZDtcbiAgICBwcml2YXRlIF9zaGFyZTtcbiAgICBwcml2YXRlIF9jZDtcbiAgICBwcml2YXRlIF9kb2N1bWVudDtcbiAgICAvKiogVmFyaWFibGUgdXNlZCB0byBjaGVjayBmb3IgdGhlIGZpbmFsIHNoYXJlciB1cmwgKEZvciB0ZXN0aW5nIG9ubHkpICovXG4gICAgcHJpdmF0ZSBfZmluYWxVcmw7XG4gICAgLyoqIFNoYXJlIGRpcmVjdGl2ZSBlbGVtZW50IHJlZiAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsO1xuICAgIC8qKiBBIHJlZiB0byBidXR0b24gY2xhc3MgLSB1c2VkIHRvIHJlbW92ZSBwcmV2aW91cyBjbGFzcyB3aGVuIHRoZSBidXR0b24gdHlwZSBpcyBjaGFuZ2VkICovXG4gICAgcHJpdmF0ZSBfYnV0dG9uQ2xhc3M7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gYnV0dG9uIGlzIGRlc3Ryb3llZCAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3llZDtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdCB3aGVuIHNoYXJlIGJ1dHRvbiBuZWVkIHRvIGJlIHVwZGF0ZWQgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF91cGRhdGVyO1xuICAgIC8qKiBTaGFyZSBidXR0b24gcHJvcGVydGllcyAqL1xuICAgIHNoYXJlQnV0dG9uOiBJU2hhcmVCdXR0b247XG4gICAgLyoqIFNoYXJlIGJ1dHRvbiBjb2xvciAqL1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgLyoqIFNoYXJlIGJ1dHRvbiB0ZXh0ICovXG4gICAgdGV4dDogc3RyaW5nO1xuICAgIC8qKiBTaGFyZSBidXR0b24gaWNvbiAqL1xuICAgIGljb246IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIC8qKiBTaGFyZSBidXR0b24gdHlwZSAqL1xuICAgIHNoYXJlQnV0dG9uTmFtZTogc3RyaW5nO1xuICAgIC8qKiBTZXQgbWV0YSB0YWdzIGZyb20gZG9jdW1lbnQgaGVhZCwgdXNlZnVsIHdoZW4gU0VPIGlzIHN1cHBvcnRlZCAqL1xuICAgIGF1dG9TZXRNZXRhOiBib29sZWFuO1xuICAgIC8qKiBTaGFyaW5nIGxpbmsgKi9cbiAgICB1cmw6IHN0cmluZztcbiAgICAvKiogU2V0cyB0aGUgdGl0bGUgcGFyYW1ldGVyICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKiogU2V0cyB0aGUgZGVzY3JpcHRpb24gcGFyYW1ldGVyICovXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAvKiogU2V0cyB0aGUgaW1hZ2UgcGFyYW1ldGVyIGZvciBzaGFyaW5nIG9uIFBpbnRlcmVzdCAqL1xuICAgIGltYWdlOiBzdHJpbmc7XG4gICAgLyoqIFNldHMgdGhlIHRhZ3MgcGFyYW1ldGVyIGZvciBzaGFyaW5nIG9uIFR3aXR0ZXIgYW5kIFR1bWJsciAqL1xuICAgIHRhZ3M6IHN0cmluZztcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBzaGFyZSBkaWFsb2cgaXMgb3BlbmVkICovXG4gICAgb3BlbmVkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBzaGFyZSBkaWFsb2cgaXMgY2xvc2VkICovXG4gICAgY2xvc2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBjb25zdHJ1Y3RvcihfZWw6IEVsZW1lbnRSZWYsIF9tZXRhOiBNZXRhLCBfcGxhdGZvcm06IFBsYXRmb3JtLCBfY2xpcGJvYXJkOiBDbGlwYm9hcmQsIF9zaGFyZTogU2hhcmVTZXJ2aWNlLCBfY2Q6IENoYW5nZURldGVjdG9yUmVmLCBfZG9jdW1lbnQ6IGFueSk7XG4gICAgLyoqXG4gICAgICogU2hhcmUgdGhlIGxpbmtcbiAgICAgKi9cbiAgICBzaGFyZSgpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIF9jcmVhdGVTaGFyZUJ1dHRvbjtcbiAgICAvKipcbiAgICAgKiBHZXQgbWV0YSB0YWcgY29udGVudFxuICAgICAqL1xuICAgIHByaXZhdGUgX2dldE1ldGFUYWdDb250ZW50O1xuICAgIHByaXZhdGUgX3NoYXJlQnV0dG9uQ2hhbmdlZDtcbiAgICBwcml2YXRlIF91cmxDaGFuZ2VkO1xuICAgIC8qKlxuICAgICAqIEdldCBzaGFyZSBwYXJhbXMgZnJvbSBtZXRhIHRhZ3MgZmlyc3QgYW5kIGZhbGxiYWNrIHRvIHVzZXIgaW5wdXRzXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRQYXJhbXNGcm9tTWV0YVRhZ3M7XG4gICAgLyoqXG4gICAgICogR2V0IHNoYXJlIHBhcmFtcyBmcm9tIHVzZXIgaW5wdXRzXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRQYXJhbXNGcm9tSW5wdXRzO1xuICAgIHByaXZhdGUgb3BlbjtcbiAgICBwcml2YXRlIF9zZXJpYWxpemVQYXJhbXM7XG59XG4iXX0=