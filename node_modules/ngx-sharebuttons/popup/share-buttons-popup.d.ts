import { ElementRef, OnDestroy, AfterViewInit } from '@angular/core';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { SharePopupOptions } from './share-buttons-popup.model';
import * as ɵngcc0 from '@angular/core';
export declare class ShareButtonsPopup implements AfterViewInit, OnDestroy {
    private _document;
    options: SharePopupOptions;
    private _focusTrapFactory;
    private _elementRef;
    /** Overlay ref to close the lightbox */
    overlayRef: OverlayRef;
    /** The ARIA role of the lightbox element. */
    role: string;
    /** Aria label to assign to the lightbox element */
    ariaLabel: string;
    /** ID of the element that should be considered as the lightbox's label. */
    ariaLabelledBy: string;
    /** ID of the element that describes the lightbox. */
    ariaDescribedBy: string;
    /** The class that traps and manages focus within the lightbox. */
    private _focusTrap;
    /** Element that was focused before the lightbox was opened. Save this to restore upon close. */
    private _elementFocusedBeforeDialogWasOpened;
    get isBtnCopy(): boolean;
    constructor(_document: any, options: SharePopupOptions, _focusTrapFactory: FocusTrapFactory, _elementRef: ElementRef);
    ngAfterViewInit(): void;
    /** Callback, invoked whenever an animation on the host completes. */
    ngOnDestroy(): void;
    /** Moves the focus inside the focus trap. */
    private _trapFocus;
    /** Saves a reference to the element that was focused before the lightbox was opened. */
    private _savePreviouslyFocusedElement;
    /** Restores focus to the element that was focused before the lightbox opened. */
    private _restoreFocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShareButtonsPopup, [{ optional: true; }, { optional: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ShareButtonsPopup, "share-buttons-popup", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9ucy1wb3B1cC5kLnRzIiwic291cmNlcyI6WyJzaGFyZS1idXR0b25zLXBvcHVwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9jdXNUcmFwRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBTaGFyZVBvcHVwT3B0aW9ucyB9IGZyb20gJy4vc2hhcmUtYnV0dG9ucy1wb3B1cC5tb2RlbCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTaGFyZUJ1dHRvbnNQb3B1cCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBfZG9jdW1lbnQ7XG4gICAgb3B0aW9uczogU2hhcmVQb3B1cE9wdGlvbnM7XG4gICAgcHJpdmF0ZSBfZm9jdXNUcmFwRmFjdG9yeTtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIC8qKiBPdmVybGF5IHJlZiB0byBjbG9zZSB0aGUgbGlnaHRib3ggKi9cbiAgICBvdmVybGF5UmVmOiBPdmVybGF5UmVmO1xuICAgIC8qKiBUaGUgQVJJQSByb2xlIG9mIHRoZSBsaWdodGJveCBlbGVtZW50LiAqL1xuICAgIHJvbGU6IHN0cmluZztcbiAgICAvKiogQXJpYSBsYWJlbCB0byBhc3NpZ24gdG8gdGhlIGxpZ2h0Ym94IGVsZW1lbnQgKi9cbiAgICBhcmlhTGFiZWw6IHN0cmluZztcbiAgICAvKiogSUQgb2YgdGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyB0aGUgbGlnaHRib3gncyBsYWJlbC4gKi9cbiAgICBhcmlhTGFiZWxsZWRCeTogc3RyaW5nO1xuICAgIC8qKiBJRCBvZiB0aGUgZWxlbWVudCB0aGF0IGRlc2NyaWJlcyB0aGUgbGlnaHRib3guICovXG4gICAgYXJpYURlc2NyaWJlZEJ5OiBzdHJpbmc7XG4gICAgLyoqIFRoZSBjbGFzcyB0aGF0IHRyYXBzIGFuZCBtYW5hZ2VzIGZvY3VzIHdpdGhpbiB0aGUgbGlnaHRib3guICovXG4gICAgcHJpdmF0ZSBfZm9jdXNUcmFwO1xuICAgIC8qKiBFbGVtZW50IHRoYXQgd2FzIGZvY3VzZWQgYmVmb3JlIHRoZSBsaWdodGJveCB3YXMgb3BlbmVkLiBTYXZlIHRoaXMgdG8gcmVzdG9yZSB1cG9uIGNsb3NlLiAqL1xuICAgIHByaXZhdGUgX2VsZW1lbnRGb2N1c2VkQmVmb3JlRGlhbG9nV2FzT3BlbmVkO1xuICAgIGdldCBpc0J0bkNvcHkoKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihfZG9jdW1lbnQ6IGFueSwgb3B0aW9uczogU2hhcmVQb3B1cE9wdGlvbnMsIF9mb2N1c1RyYXBGYWN0b3J5OiBGb2N1c1RyYXBGYWN0b3J5LCBfZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqIENhbGxiYWNrLCBpbnZva2VkIHdoZW5ldmVyIGFuIGFuaW1hdGlvbiBvbiB0aGUgaG9zdCBjb21wbGV0ZXMuICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKiogTW92ZXMgdGhlIGZvY3VzIGluc2lkZSB0aGUgZm9jdXMgdHJhcC4gKi9cbiAgICBwcml2YXRlIF90cmFwRm9jdXM7XG4gICAgLyoqIFNhdmVzIGEgcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IHRoYXQgd2FzIGZvY3VzZWQgYmVmb3JlIHRoZSBsaWdodGJveCB3YXMgb3BlbmVkLiAqL1xuICAgIHByaXZhdGUgX3NhdmVQcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQ7XG4gICAgLyoqIFJlc3RvcmVzIGZvY3VzIHRvIHRoZSBlbGVtZW50IHRoYXQgd2FzIGZvY3VzZWQgYmVmb3JlIHRoZSBsaWdodGJveCBvcGVuZWQuICovXG4gICAgcHJpdmF0ZSBfcmVzdG9yZUZvY3VzO1xufVxuIl19